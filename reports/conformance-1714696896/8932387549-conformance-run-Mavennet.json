{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2beb20c3-86b0-4ad8-af13-1a5a0caba183",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ad04fb76-4cec-4952-ab50-8431f886afde",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "804e6e34-7ace-4371-a6c4-198f39862b54",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0985060d-a04f-49aa-870f-a2caff62ef80"
                }
              }
            ]
          },
          {
            "id": "553cdbb8-329e-45e3-b584-618f8ab46632",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b3adaaa-1b03-4ac0-8dcd-ffbf92729eb0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5d3ad3f4-930e-4a82-9759-e9649d87bd8b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c7dda2e3-9792-4797-ae0b-6846403067b4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c0070155-f6cb-4dbd-a278-70373aca06de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "77b1717c-c32f-4cb1-986b-67d8e1f7ff78",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67d76cc9-9895-4ebf-b7b1-4d6330b9bb57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22f0397a-e487-4dd9-a193-35fd7530e6d7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff99295a-ce01-4dff-a214-033e4a060853",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "050da4b3-0a69-4b84-a1d8-ae38682550ff"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c513958-431b-4380-8824-55187bafc6b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b2752d6-0656-4bc2-9b99-f413518f8700"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee45135e-4fda-49ae-8ad0-bd344e5faa1e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "83fc8350-0b85-4684-b2b5-bbc7c59a389a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4794518a-755d-4618-aac2-8784a8b730c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77b1c54c-f955-4030-b5a2-9fb58c550cd8"
            }
          }
        ]
      },
      {
        "id": "1eda66b9-64ca-424b-a52c-4d463c36523c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "feeacbd4-4f1b-47ed-ae4a-be7d76d6dd82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a9e463a-e75b-4544-bd42-c28e4f9c518f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1d7451b-a08b-4dbc-95f1-423aca5c8666",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3254e800-2f43-4999-b73f-ff885a0cdaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a31e8ef-6762-4c3c-99a0-5dbe350a0d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff866db7-280b-41cf-9352-d5c7f95a6176",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4f78da-612c-4f19-805a-b8fce5b971be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21b451ad-79ce-4caf-abb3-8e68726bc0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4475963-abe7-4298-a129-39ef59482cbf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f716abe-80a8-4d1a-a229-679c74c978ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a03306f4-4751-4102-adce-36037ac84353"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef1f8277-a7c9-46fd-9bd4-736d147df73c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1304d04f-3cd6-4938-a29c-cb730805bd8c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d829e4a3-f223-435c-8171-a9eab5f82767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aad61272-d1a4-4cc6-a9fa-423d063d2005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c96ea6-1670-407b-af0e-a9edc1ecb346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec35c36-2174-4f91-b079-316060d66a55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "096671a3-75d1-414c-be56-6c0b6b7fa47e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "073b464b-36b6-4df6-9f00-4df1ad9ad925",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce553f03-457f-48dd-a9cf-b7cceb9f1ce2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9de64c5b-fc8a-4f88-803d-d3b781d5247b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c9b0c6a-4a24-4e0b-a8a1-d09fbf014749",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "49e1e44d-5adf-4361-a403-b76f301af50c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c246327d-68d9-42d6-b31e-90129e2b786c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "985bfde6-beeb-4c1c-a20f-1df18e0d003a"
            }
          }
        ]
      },
      {
        "id": "ec03b52e-c6ef-4357-a1a8-b2d763bcb118",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "227482fc-9bf2-460c-8977-54f822c27c7f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2fb2020-1444-4ef7-922d-4366e264e49a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "736674a9-4d96-4e73-8b0b-d101addd2343",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0478a31c-d3b2-49d2-8e24-043f89f130c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7804f7e0-78c7-4dc2-bf84-9e0829509515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac41b16-835c-41b6-ab15-ed3a38e061bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a9fedd9-a02e-4eea-a86f-57388a6aa4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b391b59-2ec1-4a6c-897f-8dc60cec6181",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d304be04-d59f-438a-86d4-ed567d0600cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96853ad5-2ab5-4df7-8893-83fb2f4335d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9deb6d-c18e-4a3a-b4d0-35b0784837d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "947a8d77-1cda-45d0-b9a9-d0590c2ae138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae96593-fc24-4667-9ebf-f9d34301df2c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c919c892-bce2-454c-9df7-19439dd675e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb212c3-32fc-4a13-879d-d5a044b85763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cce5535-e484-4abf-b365-0d123dfc8e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "439fa657-322e-4061-82c8-6d737cb04bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f74aa5d-4672-4568-8ef1-90e1950e407c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cb4b36-c5d7-4e1b-991e-163d075238ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ef669c-a96a-46ae-b85c-4a203a6e5823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7277ab2-5d0a-48e7-92d7-0440f582f8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "263f44e2-f0b4-42f0-9951-2d07461c68fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a007d3c4-8ad3-48cc-8797-307a3e483d8c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7a82fe-f2d2-4954-ada7-a13ea380467c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2101cab-971f-45be-954c-303134c1408d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855c0591-20be-4ab5-9d8c-c9eb7122dd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "317ecb26-bd75-4390-9d9b-fccc1b4cd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847fbd1e-f76a-4921-95ef-e7520434f841",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4305f9f3-2513-471e-bb90-763fc5bfa2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46939b98-baac-4063-b5b5-79bc2b15f4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b973091-a188-41de-961f-2045a4e65261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10670f68-1ff8-4616-931d-14838a8858a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c522989-5dd3-4686-8429-9bdeae011192",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dafde4e-c8c5-4c28-8aef-a1d559cc1851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0faadaf1-f628-4388-9329-e9cb07cc2e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bd396a-8b11-4f43-9c18-370f5f11cd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b634b6f-077e-488d-a23f-aa954564e1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cf3059-301f-4086-9645-99f24fcba237",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122d0403-a172-425f-beac-1c587418b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bdfff4-f936-449e-a71c-86c302c6c47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27fa7d7-28aa-45f5-9ec3-49be0c23d8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90ff546e-8f12-4737-944a-38a4ab7056cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d915544-7688-4712-b612-c98b0dc34862",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ce46ed-b66e-4963-81e9-ee4615e4b4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29258f33-dc1e-485b-bb93-b1613d107baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcab64b-b0f3-473f-9f58-5bda7b02e085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f918e8e9-72b3-4519-b9a9-394708add6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87623e4b-f5be-4e24-9964-886572f55e6b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77e5241-5041-4da9-a680-41be14403ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2caa41bf-ddaf-45ba-ae97-e5d7b03ae763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0f62a3-2964-43a6-a148-e9e602f8f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90ffce45-8737-4cc1-90b8-9f7e4a5f1bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169f43ce-458d-4d1d-aa62-6e9c00f0654d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b813e571-69b2-41ba-80ac-b09e74c206be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9985b2-b922-44e1-b46b-8e93e9ee837f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bab8c63-b247-4591-bb0d-8139eea1d05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a417172-ee14-4c95-b4cc-db32bf6f8326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327e9f98-fe36-43a8-b657-6445ccadacfe",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75863c4a-382f-4372-8ffd-b2f151cccaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70596590-cc98-4036-b674-219845a45589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670bcffa-09cf-4a50-93b0-c6ea1d6db000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34da572b-96a8-48ca-8e39-c80b8e56c595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c78497-03d6-4f43-b035-c9f90b984bd7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1031d69a-3061-45fd-8bdd-3c5c19fa3455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c7f657-dc8d-4af6-a662-8b8161f2b07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024fc4a4-5761-4698-b679-078fc5a03ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a6c1227-df6b-4f5e-ae66-30aee2e48f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5383ba-8e49-4844-8ea3-6c247fc47e46",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca1396a-37a0-4133-b56f-27218557e61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce57ed6-ed29-486e-8c60-83be352da7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1ff572-b327-4892-922f-59a98c15fba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16e03cf8-6dff-47f2-8f68-8cc2894cf18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fe32d2-b74a-4e94-a6cf-20e42e35d713",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de35eec-2745-4435-a78e-6167fa75c930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df152b9-388a-4239-b398-d5005e85a9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea4a402-406f-491f-b322-8fe2fb4a8089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1430b359-bae2-4c10-ad9f-4835ebd39461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269efdd2-3b87-4d85-927f-3e9506c2e23a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dc5300-eddb-46d0-8938-a525af5a4cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c498d29d-70c6-45f0-8660-57dc5be5b3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cde7d74-736d-4148-9286-9e60e9146dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf815627-9477-464a-a006-c076c8c45b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a10669-fd45-4839-a0ec-a7b11cc92c0e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30656c8c-7941-4fc4-9c61-39b32d5ec7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb2179c-4922-4793-acef-b24dd4a81743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86d2a14-69e4-41e8-be45-fbadd4d9c5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11f048be-c23f-48c0-85fe-ba8b6a1585cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5163f152-673f-44f8-9280-595bf606819c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740b70a5-96df-4105-a726-4f3d55e6dbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8037510d-e113-48c2-82d3-954c0278bc9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfcbdc6-a4cd-42d0-8f61-339295e19458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "79913e7e-5484-4c4e-9d34-12b88272be55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48088da5-fe69-4d52-af79-f95d2d93cdc4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ba40fd-e647-450e-9ba7-0442c36e2d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9fcc3e-7fdc-485f-b291-29bb1fded9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5293df6c-3cf7-4f51-9d22-a5483de8079f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "333f26d7-8e3a-4c12-a692-0618acb71dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12d27f8-089e-464b-a87b-baf1f36e29f6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f393d6-b342-4b42-bbbf-2b0abce12ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f105aae-8b5d-4e2f-b6ae-d4bea4e59ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0ee58a-8e87-42e3-a800-5b4fe2d88c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd1838d-c049-433b-8298-9eacc445bcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561fd2b3-55e4-49d2-a1d5-7d020464b9cb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1b9e36-3002-49f7-b08c-8b543c5586b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc4118c-7506-404d-a8e2-75ebea6408aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0949a2c8-9e10-457b-a229-190cd7f8fa4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ac6ddd-450f-48ef-a036-1fd86c31a32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae2df69-942b-4996-91e1-a63e30838270",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f989aeb-e23b-4224-98ec-8d8c38fd1b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46054926-3e33-4952-a630-7c0843907696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b74ac7f-86f2-4ac9-a184-3ea4241e1c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "677566b5-6f19-4b75-8707-1018d0c77b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6308ee-2c61-4830-82b8-5e0ca83ccfbc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49715228-6acd-47b7-a9c9-031d93f43298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d8344e-93d8-4fe0-ba71-0209c4c647e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca7f62d-9de8-4936-ba96-d86693cf89f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5b025a-e2ed-45b4-9d99-a5f13034785d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471ec61d-2762-4493-b64e-754b600ce46b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4df035-54ed-4a71-88af-df6bc1bcbdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0537256f-5751-4f6c-9bc6-5c7f0f1f225f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f927686-209e-4d38-a64d-175538ccdad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc44f691-903a-4fc0-8b0e-c99852477058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae022d3-c095-415d-93b9-71f98e77ce12",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fa110d-a26d-4f3f-92a0-291dd61a4a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ddc501-4e71-47dc-92d1-941bb8b9e0f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdda205-959c-416a-aa62-c99dfe2ea99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff85c92-bb7a-4fbf-9529-111187ee2581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09431d08-ca5a-48e2-8a27-8d26868b6d45",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae94cea-0c3c-479b-941e-d74f20400e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7cd066-20cf-4be6-9760-a0ca34c9b272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d643e882-0251-4f8b-9f17-8d062ae0ff45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3f7347-45f2-494b-bb54-a011fa0a6a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884ecfca-44f4-4dbd-8bbb-3deecd162618",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f3f835-6d9d-472d-a2b4-2886ec41c592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3332967d-e9df-4bd7-8cf2-536a42ca2ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46d71d9-7b31-4967-a218-fc077cc0f2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1d5297-67ac-477b-a91f-49395f48012d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3957de2d-188a-44a7-848f-1a6b652fe391",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86177514-38df-4f4f-ba5c-014cfa38b22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7614f48f-6593-489e-a9cb-74c127ac9180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a95707-4487-4650-80c0-5f2373d3f69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3de4327-da33-432c-9204-29cfd0eeb8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c85dcb7-f9a8-441e-8b13-6098ab61afa1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a990770f-98f2-45cf-960d-266272f0a810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7ba2b4-9b46-4556-96e0-280984653efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314586f8-58eb-4f49-9d77-6d5e77ec6a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "775c062b-e7b9-4a3f-9b5a-8fe44233b282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bd381e-cabf-4b30-804b-46af828b2eea",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aedfc15-b299-4cb0-a0a5-c39561340d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d933b787-174b-4708-b634-feeb27f7a5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5574f33-2c11-4ac1-82f9-5106dd7b8119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f08c970-b64d-4a6e-82b4-4dc5f434e8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2adfb8-b797-4cbe-9922-d1ad866f0124",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7390ae-ed26-4100-8717-c4edbeebe4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858ed944-9bf9-4d3c-9609-8e8723e1eb07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becb0320-5879-4834-a1cb-f483b00e08a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "afe67b1e-0e32-4579-abb3-7100d9e63278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788e1bba-d387-4c43-b803-9066a461c1fb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49118d2-1d57-4ec0-a454-9caa6af5a5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8694f245-5ad1-45d1-9d75-260f6d89685a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12362a80-7273-49ae-ad1b-4bb03ee5f174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28cf8b45-d4ea-4f5b-84b7-6b8ad79e7162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff34635c-c1ba-44d1-855a-ff9a91813b54",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19175c52-9af5-4edd-9032-867c0ef94fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e66cd4-0a96-4e41-9f19-fd1f5ff27c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12f111a-ca13-4fc5-9238-5556f8a78cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3edc7af4-ab7b-4df5-8d06-79055ddd3d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8207814-9c8d-45c6-b529-9786b56b97bc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cf707b-1a97-49b9-ab4c-f1d7e44bf82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8cdc31-e8a6-4dd9-8b2a-d56de9361ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6495212-9200-4ddd-a72d-33ff8060c00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fea9167d-d316-430b-9f95-de6e860ff741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d45698-addb-416a-9e5e-4d2fa140385b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175e594c-0e49-4ece-8d47-702d3f2712b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fb8e67-0d3c-4b76-8e76-4bc8a522dea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb48eab-5448-471a-8df5-5c7578e3e954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "248a1342-de3f-4d11-875e-7c363e6ec16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e180e7a-3d02-4adb-8a56-a9f8a463676c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c76988a-5a58-4c48-9558-01815236195e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45b040fe-009b-4a58-b36f-d115b786861c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7ab075-89c4-4b99-a150-fc6a089bbaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7825d59e-87df-4701-8b49-eb30204b8932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0753e7b-26db-482c-827b-38d80beaa56f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67ecc57-717b-4f21-8317-5c3d0e0f0aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5c7f1a-0973-4511-b4d6-e56dfda33298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138eab83-ec3c-45ce-a92a-faba627600b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "edd774ca-3ba2-4aae-9e4b-104358156288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997b2820-5525-4398-b01f-66f4380370ea",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7671192a-ed3e-425a-baad-afed93931864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec78ffe-8c7c-44e8-8ed1-23503fc426f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916415cb-5d40-49b6-aec8-17007b83bbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb36605-2fad-43fd-b5db-b785a25fa415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2cd2ea-bbf6-4473-92d2-173cadee64dd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f026f80-b54a-4a91-a79c-a585aecec424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36fa745a-e6e3-4a37-891c-0cb3e708ca88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8ce69c-9f94-4e6b-ad57-729d942651c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "725a4f09-d947-4813-add8-14ad14d8e498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf5f6a5-6047-4bde-966c-ae88922d0c02",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6dd7af-c201-426b-8d22-b9f0d94b9934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb97a0dd-efd7-46a8-82c8-ec790fc08ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef4ace4-ee5a-49c7-8799-f3db9f50650e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "76ec3367-4857-4a7a-987a-5902d30dc4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0c4536-d463-470d-a551-fed50caf47be",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fddc9c-8331-4963-9f47-7b773efe01e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dc967b-6282-4ab2-b752-596bf491d1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd9b316-dcda-4508-a927-91dad04750b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7579c5e7-65a2-4598-9183-2b758bce0440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa53b35-43a0-4a7b-99ba-414a878653fb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc8fc72-b651-47c6-b93c-5d2094be3312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60a867e-a922-46ec-803f-8827962f07bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fb1af4-67f2-465e-a5fa-2add4711ac3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ae18641e-c4d5-4e9d-9990-0b5deed96097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63abaf5b-362f-41c2-956f-88b6606a7db4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e16aaef-fd6b-4666-b69f-3aeb125353b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b12e02-b26b-4083-92c0-40d44b1025d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ffbd63-2d05-40cb-ba4e-c2de28c609c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4d521a-8db0-4b7d-afc2-0f6a1bedae43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd245fb-fb16-4483-b3b8-172209396c62",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84b16f4-619b-4d39-a955-89c4bb95f5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b60c715-871e-48d9-b6fa-ea2ed976bb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a818526-3644-4044-b060-15649baeb8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "255b9d8e-1766-4363-9066-ea7006360efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6c695e-61a4-47fe-a5de-921ab9a6bd86",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b845d3-7516-4291-a143-21cee55f5f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4773af43-30ec-4009-a127-479fc3f7bd54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5604fb26-1177-46f4-ace6-5c0b3bbb6753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "129f9ef5-ed30-4fd5-9e92-f6a8cbab9eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcdab59-cda7-46c4-9c81-88f22944b930",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8079398-edf6-4206-b4f2-74bcac6aeb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc457647-1839-4478-8630-5522b1db6b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d1bdfc-4d6a-4c11-8d33-02b93f6a394e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9344d0-745b-4769-b287-b644ee4b6b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975f1830-2603-44bf-9e99-a98bfa660caf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0312743a-2b3b-4c92-8036-511006e1002f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61567b10-3eea-4fda-8a78-aa1712517cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ef1ae8-4894-47e8-9734-a766f3a57a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d073cab6-bbe4-4498-b238-4455b4668d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee41cd0f-eac9-450d-bdda-32e65349eabc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083c407c-5bc0-470d-8798-b2fe1596c806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9a3713-54ce-4034-82ef-26ce8e1c99b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0893dc71-db1c-410d-9e6d-ae627b0db722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e81f228a-3508-4500-a6c1-e120d7ff5bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf7310d-6414-4d2d-982a-42a2900acaf5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8b49a3-5fa9-4fbe-8b90-1430e3c5d895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad309ecb-fab4-4035-a75c-935f9035e66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cead73-4020-455c-85ba-23dfbaeeee27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6be65805-98f5-4b8c-aa25-a7170521c20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac9259f-9850-4160-8285-0ae65682e0ae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3abd6b-24b6-40fb-a9c7-5b2ca30858a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbbc007a-138c-4ab4-84cd-dd245752555c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c634d26-fb77-4b8d-bc78-04af6355a693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b31d810-4935-4086-b89c-8a7911f23f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871adad8-086c-4368-aafb-8e2c9fdc3f5e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf5a120-371e-40f5-9264-1d19be0696df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0a69d0-b72f-4949-adfe-70ec071c9def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f66e5b-8f45-4c27-862c-4e14ac05443f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8cdeb8-da09-43ae-8436-53fbe619f237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0acdb3-3b75-4905-95ee-67d334bf8aae",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0926f1ab-954d-47a9-97d4-1700a09f11a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7148c87b-d160-4795-8df1-cce4702c3830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9d16da-0b7d-40cb-bd96-8969e107fa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "253cd752-ff69-4425-99e2-c6619b8bf14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203aa5ff-0a7b-41b0-abeb-9693a70cc9f9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75744d88-81e5-4f41-9b0e-deda1ab9ac7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637e5b9b-f38d-463e-b070-e4bb30160de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2837b74-552b-40cb-89a0-fdb80a238550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "263372d9-b88c-4957-a42b-45952297db2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442c8d24-62c8-484f-863b-43229b268b80",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d7f400-85a0-43a0-a398-a924d2171f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ddec97-ff1c-4810-8a3c-55f386888a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d90d68-1dd4-44dd-bca1-d7726ccf80b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f1d448-3909-45d6-b7d9-53b602acac58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376e68e2-0d7d-4ddd-80d4-574fd84b6864",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af337b8c-e784-499e-9ffe-c2a347c409a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd548203-b1c7-4150-b143-e75311078125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c2d09c-3525-44ef-8032-8f23b6be2475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6114a5-c59c-4d37-afe5-d36481b01bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc48edf7-7097-4f03-9265-58e93f1bc4bc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34201b1e-8f03-489e-97c4-1ba6c5aa885b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f86e4a5-83d3-4c19-a590-e3c162cb4d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa43853d-061f-48dc-a239-d474eb251b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "14542af1-abdc-47ff-96d5-2002491f1610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6786ca2e-c000-4feb-907e-dd17d027f591",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8af6138-f5cf-4dff-80ad-7a4bcfdcd4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bcfc90-cefb-49e2-9f05-804353b92438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0228e48f-59a4-4ef9-9e38-c321927ebae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "39940505-0f4e-4486-af77-b928e318a4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28fbc27-d5ec-4323-a57e-4623ef52506c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852d229a-5198-4983-b93b-9d823fcc0537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf69434-6e50-4363-ad75-6d00588c5dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7037d6b2-cd7b-4e64-9f2b-9977e300d54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "76d78ad2-f529-45d3-8f2a-487e3ecd0a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234326d2-aea8-451b-8253-1d26559d6eeb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9824d9bb-5bfc-489e-80d4-51dcef32bee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a779153c-19fd-47a9-95e3-484a6871ae26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54db97e-bda5-42fe-af91-50d466de2ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d18f77c-21ed-4daf-834d-a26e9927d2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f22b7c0-de2f-42d1-8143-3b2e63d719c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6dffbe-cb19-4262-a226-127ce5a2ff90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f09ecee-0450-4ba9-a969-8d936702a3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e073b830-3f3b-4027-b836-f75185ecbe9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "03b0e375-df36-4e81-991b-f3317f7f1795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fc18d0-39ec-4303-b0a6-5dc433214edf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4402ee00-9128-4b51-bbc3-fd1a758982e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47ef533-2e2f-4a36-97b0-df30ee9cb9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211885ac-5122-46b3-a650-b048fbb801cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd85f6b4-cb2e-48a9-8222-f4a64b440a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd4d7b6-c50b-4b31-a952-c3dc229fb4e8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58a0bb3-ec72-447b-a694-3456e1ceb684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c64516-3e36-43f1-b6ac-21568c0b0579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41aad449-6404-4bca-8209-ba11537f6d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "69c07006-c431-419b-b8bb-7eed1e017513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69236ed-0919-4541-ad89-d07093e0df1a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9c2d51-b4e1-453e-9a15-5bd1bf6c389f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ed74dc-9608-4b22-a5e3-9bcfaba5d47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d75fdd-0446-40dc-8cc7-f36660c633df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6762804-b318-4881-99c0-eb0fb098a0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cb8609-fccf-4e7c-adf5-73dece217c64",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e9b1f6-d48d-4f9e-aa2b-251ee7818ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada053e5-ef32-4736-bfbd-1bd6e4cc1b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039ef3da-e270-4941-b724-b95a178bf292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1ea02f-d62e-4070-a67c-09076dec7c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa175fd0-2509-490b-9e77-77a1bb967eca",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63f45b0-b68e-4479-bbca-f58e56d3694e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90829cde-bf4e-45ca-8a01-9f2bf4ce35fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c063f5-af7a-443e-b48f-c807c8c5e525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78ea5767-89ba-426a-b3fe-35dfcde12ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be67b162-2aca-4fb1-bfb9-3b0b1e4817a0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7fcdaa-6966-42d6-b31a-12b71389f4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e134f6db-d068-42d5-9787-b3f3e2d13e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1b2de4-3f7f-4120-817c-9b2ecc75ce4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f97f2264-ba6f-4fde-b102-72062f3534e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5aeab6-9bd3-402d-a488-42a7f90ceac5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5f38fe-cdf5-4ccc-a2ae-0c932c945d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d161e7e-a6d9-4991-92a7-c5c347079741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06449e69-cfba-43c4-8f7c-9b54ebda39f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0ea316-2017-4ffc-8b82-598348e16559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4bc53a-348c-434a-80ae-d78198d22967",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e49658f-9fc2-4d20-bb25-fa1a78cd5216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd57922-93d4-4afb-821d-ae19602d1af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69562f34-da9a-4667-ace7-e9cf6f9b0cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "362db7a9-72b9-4d3a-8278-e7d25de02c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1b2779-ebc4-4b4d-a27f-d616b7d583d8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac8f528-34a7-45cf-a6d7-dac273aac415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bcdbab-eb72-48e9-8c7f-b20cd9a81352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ebf0d5-5d74-4464-9490-59ec66d241de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "201c2a6f-96a3-4dfc-9255-d33e2ed53186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9a1ebc-33e8-4359-a426-f20d7d0d0abe",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936341e8-8e3f-42ef-a9f2-5b8798958be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7362bef2-0c6d-4c0d-a490-fa031bc57592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f288ba4-6a84-4200-adb3-35707fd3dc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d01e0e-8784-4f55-a116-0c6732c7370a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61aed577-2890-4b84-9f0a-7f94123e27e2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc7fbae-d7af-4cb7-881f-2312d4819d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d88f430-0c0d-4974-9adc-cd6bb1f6e4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fa3a41-1bf4-4d80-8890-f1ba561c1463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "852ff084-9965-44e4-af06-2ad9de675da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d37ecf-6b91-4f4d-a858-1d8517a4227f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88481c7-5421-4268-88b5-ca2519e6cd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c88655-fb70-439e-8ff4-a6656583c377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f49e99-b8aa-4fff-83b3-3e0f3364ebbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ec9790-92be-4cdf-bbf3-16237cd90c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6635dcab-e342-4afc-b1c3-facdeef4b6f5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4340dc61-a06d-42a1-86ba-a007c48edac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d14e3b2-06db-4e75-bce0-36c26cfe93bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346e353f-1e0b-425e-85bc-b7f467ac94fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "762c256a-fd54-40ce-9ed5-b1170f6c4eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470fa227-a2c2-4330-86b6-0c618758a9f7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d26611-fdc0-475e-93ca-f31389b20651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fcb5f64-a7d8-43e4-9e05-2231fcac2345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87447e88-f7c6-48b9-8101-39790055a164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44af40bb-62c1-4f34-8ab8-4aac492c658b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e577481c-5c77-440b-9484-52263067053e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ef0ca9-cb48-4cbd-853c-36a804be1cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc54dd13-54de-4ee0-b15b-c500bc815f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa5bee1-cd85-4c24-97b3-e6ccd9268526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0266337e-277f-4f9b-a20e-aab7f210ac97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1b6aa2-4dd1-4d42-ba75-ef3626e5e683",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359022d9-fa1a-4023-b985-af00124b07bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb09ed04-32a3-4385-8e4b-03580a5ef0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7679f5-09c2-4d20-9db1-edef3bc6e07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6fa0506-06f1-4162-a036-272337b92c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f321ce-6bf3-4899-8aeb-c22390560bcd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d2ba20-9629-470c-800b-539fece9d088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b5b3ec-4ee8-4ef8-ab21-edc5bfc75f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d881ce7-c4fe-4378-8b30-433f438876c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb31255-8a58-4b94-a2b4-58e0e3a337f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ade0bc-042f-46cd-beb5-db55f3c7386c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834a8cb3-4662-4189-a7d3-f03fc4092bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1405cf-3fbd-423b-b7bb-aaa76da2281e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a777e3f1-a55f-4204-8f71-9f519432bda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1abe12a4-0fe8-4464-a56c-440f665296fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1749ac7a-431e-4fbc-91d8-53717e33e920",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b1edb2-b673-4e2d-a38b-f058a8740853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8dfdc3-bc48-4dd6-9544-ef14de48c897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4dd4f2-838e-4b33-bc18-7170b0774be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07509394-15ae-4133-98cc-2a6531c1e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f143889-0ae5-4750-9888-dee4ce94dc78",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c468cc7b-dfd7-4a62-a62d-acc7d9d4d8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea0571e-e798-41a1-aeda-c940f57836d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e35d7c-35b4-472e-a41e-0ae7ae007c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2434b6f1-1047-48dc-9419-2e9c63747fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66f6c43-29d1-440b-afd0-29ae8a4ab4bc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b57f92-7a2f-4e3f-9de9-2dfbad00d3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5512d0e7-4c52-48f3-92ff-f317c3127cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95cdeb9-270b-41d9-b80a-decb49451368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2130b0e8-792f-4db1-8a8c-1918b5b7ebef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e509ece-a2a7-4844-bcdf-01e09c3bfb78",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd42110-6865-404c-b200-da76b21b8d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16145dd3-ac92-4875-b0e1-f110046f5cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25cc44b-5934-48cb-b9d6-7a29972dc3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d85a0130-84b3-4dcf-afe2-43029a174f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05a5e5c-6901-437a-93e4-3dfa5657a1cd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff160733-9204-4412-9cda-b14a9d824a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb00f7ff-3ac6-4882-b537-900e9d17d2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d758ce-11f7-4151-bc64-61457baca512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49270f54-092a-43e7-86c3-53c1ed84b572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf15ab24-55c9-4e65-8c04-e20868c0985c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187eaf46-39f6-41ff-aaf0-4451f4c8c516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4cab3a-aaaf-4dfe-af6f-1a75337edb22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d0dadc-cb51-4a3b-baef-e5f0c8c82382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39548fbb-97e1-49eb-a28a-02ecc3046c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f29842-6145-4fe6-9fff-ecd94137fb40",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436ecd4c-8d11-46d5-9cb1-790cdd198a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239401af-c4c2-4bab-940a-c957fa53f8e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f05a96-b662-4498-8227-655c8286e4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a08413-218b-4626-9510-4dd7523ecc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86bc8cf-0ff5-4286-aef2-cc42414121f6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e10887-bbd5-4332-8ca1-57e4b9c439e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c547a9-8acb-404f-b312-24e13a986012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303f4967-15e4-45d4-9cbc-caa21fe53c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e671494f-9ed1-405f-b306-7583f9978af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70b2060-4f3f-4c7b-977b-fb9f4890d5c7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7a932d-9eca-4f86-883b-c868fe542a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76a088c-8b15-4e47-94b7-95f3644d52d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5f4a48-e459-4213-b8f9-d2d82e0a63cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1636466d-0ee0-4f7e-ab83-3c0470334a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55f4fd2-9d21-40c9-baed-7bfc4b9bd86e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d736fbb4-4f8b-44cb-b5b4-12447f1e6ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de524a84-f2a0-435a-908b-c4ed450b7c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e309b0f-cc18-4c09-b2dd-613d3186a7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "20452b53-69d4-4ee9-9096-41e6b196448e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563c1806-f3f1-4623-8270-bc7322df0234",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b844ff08-8e7c-4c8f-b13c-6fe8b7be0ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47dda3b5-9728-48e6-abae-a5c2ad762d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d87f870-cce6-4586-9808-b17552e1bb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2217320d-f191-4474-9b3e-77ae5c4cefc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066ff3f7-0425-4330-9a8d-0a4206e672de",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1fbb5b-ee4e-44f5-b68e-4d92fd3767fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5e0520-0262-421a-9b90-de83933b3fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba2d356-9e7f-4f64-88ce-a825f4252b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "713a68e8-1794-40c0-9207-cf014ef1852f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6b86d3-3615-4d89-8cc7-9e22a755732e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d73da6b-39e3-4a07-b448-788347a7f2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a647eef-e9b3-4ded-b6c9-8d253e8bc7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d53169-cdb5-4d20-9c28-b095a8332359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4910373-3f44-4ea4-ab95-7e4c73a710dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc89416-dee5-4b11-99f9-43fc53b59811",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2f4ded-0803-4026-9868-5743b818fd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "321b8274-19ad-4cb0-a49f-266dc4278d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dfb9c7-d8ee-4d56-9895-17495dd60099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8da89584-56a9-4ae0-b56e-e8145de166a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "79894b17-fcee-46e6-baa4-2fc0d2f2babf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77bed9f0-1caf-4c0a-bf47-7b9ced67086e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a3a56c-337f-42c2-85c3-b70114413575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42b368e1-e086-4b5a-a8aa-6a82829b89bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430b9355-8fa7-46e0-91ac-c53198937576",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c222066-fe3c-438a-baff-9d8d26c79cd0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa391396-63ee-4ba5-8382-579c49fcd5a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f02adcd-5b62-4917-b489-348e2a44b689"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0c78d39-747d-42bb-92a7-3539024c93a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7b59a5d-bfc5-4d59-9bf2-150070a2a577"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42e95ade-d998-4d36-80de-8d059b7843e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4cbef7a6-6c47-495d-b1ef-857fc01a9110"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16a18dd0-551f-4913-80d7-c2be76ee8d60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd1c1a3c-ce0e-4851-bd33-a443799f54ce"
                }
              }
            ]
          },
          {
            "id": "e2b5acdd-71f0-464e-8af0-8c3af21f4db5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c01d5ad0-47be-482e-a6cd-53a645a5f85c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "040230bc-d6c2-47ee-a3d1-129e8ef87529",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2450e73a-2fa9-4688-8630-d74a49f9fb70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7d5699a8-dfad-444b-812b-9b957a90a06d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f68719-d1db-46d3-963b-025735f82bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46b74d3-f99d-490c-8426-55f2e0f97112"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dcaffadd-2192-4517-9646-a33f5a935e78",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b473fd9a-2b4c-4c10-98f8-cc959c6ef633",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f41052c3-d5ae-470f-b41f-5f57dc6fe9ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9697ee3a-1acb-439a-87c0-a6ffa60a911f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d437ee8c-de46-4840-97a3-27ab49ee8bb6"
                    }
                  }
                ]
              },
              {
                "id": "acdee18d-7c5f-4c00-ae45-db8831769e9e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efbd1980-71ac-4598-a9cf-21a1e14fcc9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b484f4ff-5999-4c92-a0c6-b347f4cdd611"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "423fb1d1-116e-41e1-b253-3c9b66f5f3db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f2a2e75-b779-4109-9835-33ac13e9ad56"
                    }
                  }
                ]
              },
              {
                "id": "77dc7ba5-0dd5-4504-bb6d-071572eff324",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e881ba91-f2d4-476b-a028-cba4d425076f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b890368-8c0f-4151-ba42-4b8d47116dc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f807865-31e7-4ccb-aea9-0e25299851bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5e1141ee-f10d-43f8-aed0-878df266618d"
                    }
                  }
                ]
              },
              {
                "id": "b191b9d0-1255-40cd-976b-84c90ed6f0db",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62130837-1178-4adf-838d-a95468345111",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e697521c-5d0e-476d-9b60-0060eaff511f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b11daeea-6aba-429d-8a2d-d62a95f47e74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2c2fb81f-a6d2-4053-bafe-fa67827b3901"
                    }
                  }
                ]
              },
              {
                "id": "900da532-7aaf-401b-aa92-4b313592fcc3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8b829d0-bbc2-44d3-9561-b047dc162ddf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4adaccc-9033-4f1c-b4a6-c7c823e9dd21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21b10ea6-25fe-4bfa-a361-c00520be2603",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e99ed90b-ea63-42f8-af0c-4702f8a11ba7"
                    }
                  }
                ]
              },
              {
                "id": "313e6eb7-5c47-44eb-94f2-6e55054dc70b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8df5a252-19ba-4877-8cc6-a1148f5f952e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7de5598a-bdcb-4cc8-a7c1-76c0ac843588"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2304cda0-1c70-48da-ba21-cc4d52eb75e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42b72d98-f468-4ebe-9a47-714a54741c42"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5c135769-5d4b-4a10-9dca-954fb4c9bee4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3b402d0-7db1-4fcf-abb3-80ba977d45b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "50002fad-d8c2-41dd-9251-1c9e2d075011",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b63c17fe-4760-4b79-a87e-fb0fe970e969"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ca0567c-4246-4278-9f8e-0140fa039bf2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "612716b1-e0ee-4bde-9ea0-5ac9dc606c67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e110961-65b4-427e-ad62-af7ffbd433e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "741b48eb-5070-4177-a846-cb5a3f3420ce"
            }
          }
        ]
      },
      {
        "id": "63ba6e07-6670-4738-80c6-081a2eb2cb42",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fa08eb78-288c-4996-853d-362ad32b5ecd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29498a1b-55ad-40dc-b041-f76c5d8a9e4e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "78b9b3ba-1375-4d8d-81fb-716e92fe2181",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45eb27dd-6a9f-416f-8dbe-06d4a98521ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a89d6c-6169-4965-8d99-cbb0506195a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f47d0b-4898-438d-8d4d-7d0248fa67cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a46bceb8-a6c9-4570-91a2-2685d6e40e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079e0d64-9c99-461f-94aa-0d528393e163",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f85974-3192-42d5-9b6e-3ab162cf83b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c419f80-4cd8-4d95-a7f7-4faae5440ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aba46bf-3d88-44b1-a82d-2de836a209d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e48628b-1738-4127-9143-2fc7ad021631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a2b82a-3ebb-4483-a529-f2ecc3c5436f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de722bc4-3440-4be3-8464-3e76ec329f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7cfbcce-e562-4d16-8250-a614074dbd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8987d455-3ee1-4104-b991-5f699985a09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89492c0d-23a8-4711-b399-1e1a31f044fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad4389c-9fa9-44f1-8410-ac526cec8645",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108398f4-09d7-4873-a04d-2121d82803cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd412d29-b04f-4d79-ad15-30ff2b4a27cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d7b0fb-6926-4590-9c85-20af030d7782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a80c7b78-2306-4225-8bc9-2970fb67c872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3915c592-7c97-4018-b43d-5e73df2bdeca",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaba0c1-13ac-4e35-8747-1b97004bf7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61a1cdd-7f1f-4ed1-ba72-1d720a239cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3039b0a4-0fdc-4a76-9e01-03384a1c7132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e094aa07-3bdf-48db-a97c-fda94bc51d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87294c07-ec05-48d1-873b-e3b8059dc439",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6699614b-3a9b-47a1-8360-6e728c86d996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f80ace-c20f-406d-93da-ae0e090744dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f4b197-615e-466e-9ee4-02d58f172b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b53cd0b-6245-4ca8-a4ed-5b1adc21ea5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8277c0-80de-43ba-8b95-bd873c95415a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f74a2ef-e179-4ead-a39e-d901d3524fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6f22cd-0b41-48ab-9680-2d9b910b7ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b96e84-b941-4213-b91b-dcdf32d38e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "218aa857-bdbb-4e96-9a61-20bc0a5972b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e49db3f-6bee-4041-9bbf-108e3942119c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca064547-017f-47f7-bbfd-b4daa652a636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848776ae-1442-4f38-b3aa-ec979aa7bdac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7514028-c145-4d02-8070-3fc60f0ddbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f09b01d-340c-466a-bb07-55ace0b75df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ac938b-6b78-42c9-8833-f18813f483be",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e36118f-f34a-46d9-95ca-dd3472604bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d2c1c8-7da6-4870-ae0e-1ba78b3e8628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1b8d1b-4898-4c1c-bf8a-ffb0b056e44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "daf2908e-bafd-4331-ba3d-707e80052442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25c7dba-2231-41ee-9bdc-e9ea259f53a6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2eed8a-83bc-49fb-b6b1-856f95ceca21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f468a4b-4a6b-4a63-911b-8a6531d7d1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffde2c9-8422-48b5-a80c-fa703b0c428d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83368455-dcd8-4902-97f3-4c9bcec295e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e7c3a4-f9b6-4d72-a1e1-504699cf38aa",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42f40e6-1993-4e67-8536-b1e7067e99fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df23a89-a20e-429f-997c-bda3bc36fd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3955e47c-5486-4106-84f3-1d1bdf7f5732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c724acde-a2b6-4154-be2d-6538d923d181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8768bd54-36a4-495e-9068-be4b945db96d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a313cb4-2e62-42b4-9fa5-2feb03e651bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e7fc1e1-4cb4-4553-9174-5f561de8c9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc03cad1-b7b1-4f3d-a548-961f648d1380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a117eb6c-5e77-4499-bcb0-4bfbac3a1a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00998f6-3e47-4078-bdae-923f05c22acd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd60c6d-c3de-4be8-b81a-4a6627d091d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ecc2b3-364d-4fc8-a4a5-4ba9dfbbdbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a400dd2b-d7b7-4366-ade5-b2189eb0cf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccf6f8c-4886-45c5-ae8e-fc6302051bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e87d99-a783-4fb5-804c-596b83e83889",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f693424-205b-4ca0-8b05-c375c73baab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0ee905-5d02-41f0-b262-e35fa3ba8774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c3de91-2915-4e48-a764-86412fc5aa07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "474c727d-87a8-4758-b9c6-24dec379c6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754f7a98-8abd-4939-a5eb-131c4e8e4b89",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5fed0f-41ba-414b-a3dc-b3c1ed24a224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87910945-e143-4a7a-8a60-09668b493fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3715b796-cbf9-4d03-8f1f-44110ac90874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe02efd8-d2ac-4ef5-860c-7ff8fe19336e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7786911c-3e00-4828-af22-273d1fe19a80",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a969727-2858-4a04-bf28-32f0e35f6345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5430c8-5c75-4199-a929-3fe98be0add6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d72e19a-f644-45cc-b0c3-d3328b0cea98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf1d2dd-f4fa-40b4-ae96-4aeab3db4112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ce8c32-89d3-4b0b-a428-1fbca4630cf7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8455315-d94e-40c4-b5e9-827de9e91e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41df1d9-4b50-45fd-8002-0dcb8be9f0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c8893c-0d9f-475a-b72c-d107a8739016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "091d3d31-923e-4d1d-bd24-deb1723bc200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2983e4c4-db8f-4dee-8a4c-1d023f8ae06b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074fe797-909f-43fa-a174-2a8ddeb5d6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f7ace3-aa76-4669-ada6-bb34f12d57f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d817a550-5891-4516-b1e9-88c6561fbfb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "38ad7ca6-551d-4e99-85ff-b234069aa60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cf4cc6-1468-45ea-875b-362eacdb7496",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20849a60-f191-464b-8ff8-312d011bedce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb444306-5e4c-4d90-afd2-c16f07f6804e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31ce017-b107-46b9-bcc7-be413d48491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae093ed-4508-4691-9a6e-47e821e2b310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372a947b-16ca-4f5c-aabf-d95b18ceedd6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "726e13c6-3311-4c3f-a064-aba67708ffda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccb730b-6ca6-4218-84a4-4a29e0ea9682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f88648d-b689-4250-90f3-349972e1280c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5285d151-2f29-493a-89f6-43d44739ea09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09672c6-b3a2-48bd-86f5-011e23d3c10b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c1cbdd-8eaa-475f-bf97-77fd01f8c24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdeaf86f-292f-4ccc-88bb-cf02195b43a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b44a57-986f-4299-a949-dd6e0e3094b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab08ff95-4b6f-49df-a01b-35d43e3001d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58fc670-26a0-40ef-b040-f238d1532eeb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc69f5c3-11b4-401b-ab1e-cd5e5135a86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a74d69b-6055-4438-a8de-e71e686b7ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451a2d30-b84c-47b6-b7f8-338b5e1a2ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b969162-0c1e-452d-bdc2-82fa11b420cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cc0bac-1b92-4137-99d2-3769dddd5f60",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84335850-ee68-49ae-8cb9-fe80988581bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6594a3e-43f9-45ae-b95f-4027e457f6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5b441c-a285-452e-b4c9-324f503b5387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa73a9a4-a572-4630-b3a1-a26a96acdb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8768f0-1e7e-4d6c-9794-1b550263005b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c5613b-5d3a-493f-a8fd-ec17e621c5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474186f0-8f81-43a6-a4e6-77bc83f4b44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c68dd2d-e52b-4a49-9ae2-3d2e49922b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f706dd8-4211-4c37-a440-6abc0fc841d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c5a997-a261-42d7-a070-88ecaeeec47c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e9fd6c-1bb0-4bee-a4c0-a2aaef20ce8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab304c67-c9b6-4585-ab60-dac5061be4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3a5c2d-f3d3-4b39-9283-e6d02a7ad1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8828bc50-0540-40b2-8c92-9244e860295b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efee58b-fc6f-4275-8b2b-46beb4065477",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a721f8aa-393d-4241-8562-6bce47da0511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a01a6b-edf4-47be-bad8-9fa5c7cf06b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f45e486-6d64-4c0c-9a68-5cbc8e492e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14f8e563-c171-4dce-985a-b83c17211635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62ebf5a-3617-4933-afd7-bed5f5ee4d8e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8777bc3-952a-4b59-b6c3-b3b41dbce41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c469a60f-0aa1-45d0-9ab8-77bbd745cdf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fefd3d-e3b3-454e-92f1-5362588a6854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f718a4fb-88ca-4505-ad19-a3aa92aaf6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad7055b-f9ec-45e7-ab46-23c05848c2ea",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f81bca9-7172-49bd-9c55-44399be7ac8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae062be-dcca-4635-a967-2c95a5037a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0a5295-7ff7-436b-bc9a-195694d5f5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06e0ad43-176c-42e2-8b6a-d4430eb987ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9694b11d-f52b-457e-91ea-30f9b84ca5c0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4241ba7-6603-4701-8d92-3751ab23e220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1367fa77-e918-444c-9b81-5f7e39c43e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b891bb-be87-46c7-8f70-4562d74a1780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4343da8c-f4a0-4d0a-a36e-21a19828a976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae58223-9700-46cc-ae95-7a355f3efb33",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb4feec-a2a9-4a5e-9893-c8388b63e104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2a1755-53bb-44e8-8581-ac2bd93d5401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68997408-d8dc-4fd2-99ae-0ed899c0b408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efb7799f-00e2-4848-b5b0-f4c3ca6bfffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27b4ace-65da-4d25-9ba8-7d1feb949c72",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfa32dc-69f6-4d90-88b6-1b4b3efb0742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608a7876-717d-4e61-a7ad-433aedac9190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cfb2c3-8b59-4e1e-b1b0-b79fc2b5d45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7400718-3ce3-4767-b116-e91975893f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80de523-3b61-4e19-8295-eb18238e74f5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fc81e8-207e-4c93-9e93-165d01150837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095dc089-f614-4b29-b909-eda071bac8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ed8405-1fe2-49b3-8a9d-636ea967d2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c5881a-e9c9-45ff-8234-5b82d2f35278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aeedcd6-3cfe-41f3-bf71-ee725db8fc5a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88926537-cc41-41ba-a700-a520fab8161c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b365cd2-9a71-4a95-9063-85d577b5f6e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5b86cc-3d3f-4a9f-9977-7133c795bb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "179f7032-1424-4018-83f5-3fbbde1efa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66ef67d-4dcb-4db4-a4c3-f85c3ac7419b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f3b44d-16d0-4a29-90fb-1d772f66a56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb33b260-85cd-4235-b595-f40a285d119b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24ebdd5-f2b2-40f0-ad88-b798babc4ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50a5847e-67fc-4de3-a017-a9c2840eb113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e6850a-fd70-431a-a576-70137b97b736",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3411d465-ad5b-4268-8ecc-25a22726fbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f589cdb-fc33-48f5-a56f-96df83321fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608dae56-d405-4373-b8a8-c83d04d32fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efdc70e5-4e1e-4a4e-906c-a46f2a90686a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a41e51-3c19-4281-924e-1aee725688a8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684244e5-e913-42f3-997f-cdb08ab88aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc31a96-0859-4da5-a734-7a4b92ef13cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ac562c-9a54-4c0f-a65d-3aac18a99655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed8a8a3-dfe6-4f33-a9ed-4b99a8764f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6292f9-e070-4e59-b2e5-fd9adbaae3a2",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8aa41e0-ff10-4893-847c-493744bf75df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6d8781-edee-41fe-b412-6fc506d27dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae93a870-c9eb-4c18-815b-25732f064d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0befbf24-4e57-412f-9b35-620697d676d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c24a95d0-f3ec-4372-8d4d-44766cd0f786",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "968d0cb8-3d21-4bd7-bcb5-795a87733656",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd20518-9d5e-4765-b73a-368f8c309ca3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea70f98-6d97-4ead-9cfb-273e02de7e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0686b4d4-5f5c-47a8-9fd1-86347eba7864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb96878b-a29b-456e-8e0b-53abef571d47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b86c36af-6c66-4ea6-a991-6bca83b83c6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f50d457a-1191-4167-8823-085296323a43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be012376-b5aa-4456-a988-a738701f4ad1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bd35aaa-67cc-467d-9c04-d1cba9e92b57"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51b0a0ba-1316-4ba7-aef8-2a749c6f0d4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13725209-aa74-49fa-a692-d7341df7a15b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "250d9d66-9d30-4791-8efa-257be85b0e3d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e9dc6bc-5b83-41e5-b331-f54983cef943"
            }
          }
        ]
      },
      {
        "id": "6c62cda4-6ca4-4124-9077-6006fe76f861",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5ed5e681-6d6c-4ddb-af2b-0eb835386e46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1963a93-2db7-4dad-91f8-37fe8e85440c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ecd85454-82b6-4b42-9df5-d9fe3dad6722",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b95f92-bbe2-44dd-b604-bd6aa17a018c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c598880-8f60-4fda-be92-38216f23d617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4f44a3-a128-4186-8e1d-1e3f32fd2002",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25fa1f6-8456-4df6-905b-5aacdd6f0a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1225e5-d182-486d-9f7c-a8a690b5ac15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15973f80-912a-4d5d-9f74-ef60acf650d2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d325d4-f08f-4be6-ac06-505a791140c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6694b1d1-67d7-435f-a47c-01ae116a7046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae3e101-5e2c-47c3-9ad1-d49244ac8a6f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1108de28-38f7-4eeb-83db-3463ac46f8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf74ffd3-a5af-45ef-8d7b-c879ea2f8f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced31268-9602-4252-a016-026655f4a195",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00562ef1-528a-4ae6-b764-599cfc02ed3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b236b8c2-9146-49e4-97be-e680596561f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1961d2f9-bafb-42cc-bd40-e6481d3a1f7b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd12142-498d-4422-9202-709c81fdb33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2d7e58-5ea2-4ef4-b759-9ac4672fa790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7020097-849e-4e4d-b1ef-4db09e0a177c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff0b905-b467-42b5-9f82-f74911b88484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f709cc5-de49-4ca5-89e7-c5ee70b25192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4148851-3349-4b48-bb12-172385edb2ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4f8e82-11e9-4bb5-aa0e-fbcf889ce136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b73dce-6877-47a8-8104-d71ca8308c58",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f7a7b8-a91c-4403-910e-708a1e650a56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a0e701-3e24-4da1-801d-143819bb6f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11ddae5-a263-429a-b337-b0696bf7660e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92aaa92-9289-4aff-ab7d-aa7cf3d1e861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d84455c-46e7-4455-8c5a-d2522e6fe787",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc583aa-dadc-42a2-8eda-0aac92c5f865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8098f350-4e4b-4f25-8a6d-9908eefd330d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f519be9f-3380-4ea6-a3d9-302898a55eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b0e994-9893-4877-b0cf-975b99420b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3dab18-b72f-4328-90b3-6f5dcfefb053",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3cea85-2e1d-4e31-9b45-e5e6d585f2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6986613b-2ff6-401f-bb0b-a7e5f577e19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777d89b1-d6fe-4368-b36f-f21e13f86c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b585cde-abb4-462d-8052-79c0db7ebb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8f62bc-49c5-4a29-82b3-830a233de5f7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7678903c-2696-41c1-ba8a-0a5b5fdb2bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce732ed-cbfe-47bc-8afb-33afce8a8a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd9fb5c-aa25-4e98-88a3-810438ddbac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2406adb-0fe2-490a-9728-25bbe36c608d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20015c88-3b89-4100-9e40-b4b28274d37e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93824426-dce4-4d39-8814-8de2850b1332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae91312d-92b6-46cc-968f-0c68c65481a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32784a81-f51f-4700-a0b6-925df43a5434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d268366-0e83-4f88-b5d8-d299c842d779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69f2c14-d71d-4223-93e1-e1000264147d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4decfc4a-0993-4404-80de-1b4b0a407de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0b5527-1914-4cee-bfc1-86c27bfaf57b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a4ee15-b073-40cc-bb2e-2d1b862cb1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdbeeb42-f02d-4ce2-bad0-b77ebc430cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6044c00-a55a-44ee-8a75-c97e382bac02",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e980bd65-2241-4938-9523-c199e333c112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26f2aed0-b96a-4d8c-8ae3-7bfde1245c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0c6302-5eba-4236-9c15-ed15ad0520e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46bfb74-a99a-4a17-bf92-bc43b5775151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b43fc1-1f20-4f57-a596-39deb58bbd17",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8050b4-3369-432f-8cdd-bc31e0841db7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b327e96-b1db-42e2-9c9e-64e6cbd1f5ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb78209f-a5de-4423-9a75-77e8eee2dd0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6234928b-aaaf-4c0c-b294-75595493cd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9126982-cd24-4406-a9b1-36f9114cada8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e3e2e3-08a8-4d7d-a257-8ed8cbcc217e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "454b58a1-825b-4642-aabb-350a3ef12c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb0f83c-a304-4354-9eaf-ddbc20c75c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3aaa2b-b6ed-4389-8b24-3f9f2052f8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4d6b05-e5ea-4583-9b0a-98cf72a54a87",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092fcf9e-d5a3-4421-8cfc-6c66ea9038ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9281318a-aed1-4e56-ba27-ae3c8b53986f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62802664-d681-41ce-a9c3-c0a428a2af7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9958a3f3-e3cc-485c-a0a5-a30bbe554c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f02c3eb-1455-48ff-bcd1-b2cf70d0f6f6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a02571-2eb6-42fc-9cde-02775b249b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31211902-763c-4fcc-b686-fc69df295986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8594b66b-a594-4a49-8666-0bc84c275168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9e25e5-e7eb-495d-acdc-441c2a3f0f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb8b8ac-5a33-40c4-a452-223f22fe59a5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3f3586-8ac4-4c5d-8de3-bbde5aa8fafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63d45c3-9f03-4481-9d19-8eb72eeabf61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ced8b63-a0d8-4d82-b886-bc75f6c12b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940ec6b2-e61a-4aa9-9219-723d090edd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e69a18-e904-4552-91c8-0b720f4def5c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61612e0-b584-4130-bf11-57025ceca635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208848b0-529a-4bc5-8604-cfd311f52ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a99b5b7-9cde-4e34-a511-a81e7e0d35bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2e5f83-74c2-42a8-adc4-fa24d0392c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abde66c0-ea10-4ffd-b6c6-12e7e6409f48",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da85472-aa29-4c3b-9fdf-3bbf30807476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef96d0ab-c74c-4ba2-850f-26b77352d967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb17c48c-6cfe-4307-b400-de7a0f88be4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21a3465-0df8-474b-a28e-df6132a99873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859baa14-0f3e-4e01-9c7d-5bd377b3b49e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18963072-16d2-4b6d-88f2-db8f1901f0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d1a3fa-521f-4970-8842-2d9524c209b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aaa5d86-31b8-4783-a10a-2c82f9c9b6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be4c7b4-fe13-466b-bacc-7e58fda292cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e003b8-0e2e-486a-879f-a995d873cc0e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d071c5-c0db-49ff-a211-5206680c74e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cf14ae-8985-4863-8022-f1bc2da45678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b223551-1678-42de-aad4-fd7300e6d14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f674cc31-7ef6-45b9-8f09-064806221350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb19197-29f1-4b94-971f-8fe79805f07a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a4ec29-c510-495b-9cc5-4b283e13af80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ad87d3c-74c1-4b95-86fc-5707777feeaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc9735d-5f11-424c-95a0-82c3d02e905d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a59c51c-12eb-4071-bcdf-f1429edf254e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4747fcf0-8f19-445b-ad98-31a93f4fc532",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfd490f-5888-46ab-bdb7-1151c73ba015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842f3678-b599-43c4-ba3d-0163c6edf214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5e1d37-e1fa-4b40-9aae-17e301d9f36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9894ec-0d44-40da-b93e-956b5be425b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e0ec7f-51ab-40ed-af87-fae0066fc281",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b039ce-1427-4a79-b2e2-92cb09f8fd99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8aec1b-501f-403b-a7de-154a69e9ef45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33681b35-0ae4-4379-9c9b-28f06317221a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248b1ad1-c502-4d1e-a199-fa752d0b0769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d1d824-4b32-4602-bfae-64f0d785c860",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38846adc-d5a4-424f-84ad-9978d53cb844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40427e1a-ad41-4afd-8df8-61555aebbe8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e599227e-eae7-49b1-b8fe-0deff3f56f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8c8c64-e20a-4335-beda-5ce09f8ce67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4854236-e78b-483c-a998-310247b74982",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d2a42b-4db2-4436-8200-2472b7ac70a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5373cb28-9a3b-4eab-8e6e-d399639b7cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d823c22-f8f4-47d8-ac57-c0845c0fe3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac763c18-9847-48d6-b224-6c1e513b7daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682a5af9-1dfb-4022-91d8-2727e2c85e0d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a345d08-7f76-460b-9d92-2fb33d2f567b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f42b7e5c-d394-4a16-b840-292a58b2cf63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d8468b-d06e-43f7-b334-38f3267cd2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b1ed3b-735c-4393-8f08-beb59480946f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05eaa677-5883-4729-9dc4-93787e8fbfa0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8fefb9-ee33-4222-ab1d-ad71660be19b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278acc8c-392e-446a-9ea5-5fa9d7f54923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37fb635-c8ee-4f50-94b4-f05abdd3205d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a8bb6b-0178-4cbe-a571-9e7c2ef3c5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9aa0e1-0737-4ac3-963a-c56a74a39e17",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b4932b-f2d1-473c-aa31-201fbf7d5d0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4135bed-66eb-4611-aa56-47e706998285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6bfe4a-5bff-4d1a-b0a1-93d7985bfe48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5051b1-dfe1-42f3-a3b3-88c684710900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df364525-7488-448c-aa2c-8d3047bb5df3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3155ebd5-c6d4-41e0-927e-4435b8f2d974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b01fbdb3-46f3-4bc3-a3c1-9b67a6d3f5e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6dc45c-773f-4a06-b693-76e9b29777ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e9f158-c158-4bdc-8d72-02e2323a824c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7897957e-3f7e-40b2-a1bd-83f0d3fe9b53",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2f26b7-1c01-4218-b338-546aa1846062",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f7e2db-43e0-458f-8632-4f42372a0f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae1513d-a9ae-425a-8a29-b1a63d3b8df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65447309-0870-46b1-8dfa-df5b131b2343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c456418-fb7e-48e7-9c0d-26b71cf127ed",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfafc2c-27dc-4d58-87a9-c9012d854b9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c03beec-8595-4517-bf7b-b6fca8e80fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abeae5ec-1793-4f39-b157-6aa6a34ba5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf50055a-79bf-4550-bdf0-bc6b8dd4ca36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a119768a-b11f-474c-9f21-8797ede9811d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8148bfe-5cf4-496c-8018-6dafe46dd599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0154d5e-2683-4296-8985-1612738b7abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489695f6-147e-45cd-956a-76c1ba787cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2680df-29ae-4090-9b67-b4de09903c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d253758-c85f-4c93-b542-3483f29a66f4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec03688-2df2-4c07-8fa6-f69dd0e313b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e190983c-5568-4d01-b8e5-cfd9b1531e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e821eec5-8375-43ac-821a-205218aeab4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f65442d-6873-4dd9-9881-0fdb2a84899b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71269194-990a-46b6-8ce4-d6cc189ceeb5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f68e038-e541-4474-98e5-631d581749d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49abebe-c59c-45b7-bd59-a8052b3fbf4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7fb053-df85-4348-a657-97cf3ac4bcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd595af-1e76-46ee-ba8b-5d7a2a97019f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b7c904-50f1-4ce0-b556-14eecc33a487",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc3e4ea-8979-49f5-8c18-ba6a58a48fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc44f0d-82f7-4826-9eb0-196b76427303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5ad814-6cfe-484c-b157-56b9dd9fbb8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e97b2cc-98c3-444b-b503-c0a79dc868da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36044d6f-0b49-4eae-a9aa-264bb7be3cac",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4df945-bf33-4dde-935b-df363e4e1452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b880b4-5cb9-42d8-8359-3af57fadbc73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a171df13-9fb9-4a72-a7cf-406e982e45d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c001977d-826a-4b31-9598-17f303659b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4425e8ee-3ec1-4a04-a098-a4cec168d58d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a19bf8-e8fd-449c-95cc-cbf1499ca298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd42bf32-c49a-4bca-b81f-1261439a2140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add1e600-f38d-4463-bfd8-30c27343b099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004dbac9-a608-40a5-b36d-f96721dff31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df354547-1ec8-42c4-8114-969cd7fae0ce",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac0bf3d-5999-4ad7-9514-b5f613950c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be74b984-6cd3-4589-aadd-6ff442ede63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd8d2af-68fd-4561-8359-e1ae5a45c083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55398b8c-8141-4f87-93c7-22d546b006d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853a3957-7ac3-4cb8-b446-39873e5d4861",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6ec6dc-e65c-464b-a57c-c5d292e078d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a18bbc4-7583-4667-bc7f-19a5ba9b3240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0316f376-7383-4515-840c-823074488371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7261843e-4904-4db0-b415-6a00e22cff35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed7f11e-ce39-489d-bda0-6d8e8a021335",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995812ad-99ec-4e3c-92b0-a4af6f8f6324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a15095c-a12a-46e2-be84-41313a1de469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba10b267-edf6-47d6-9a90-f7e2f6641ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674200a9-3119-4558-8ba5-1a63ff827a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bad6b4-df09-4736-aa3b-010ef4a6f04b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31857da-47d4-4330-bb0f-e4c304f8063b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd3e6cb-5e4c-4378-b789-9b0462b63f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6e6418-fac0-4854-b3c8-52163d71c3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b175e2dc-6ca9-4cd4-883a-fe029a6967c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba78cb67-2c42-44cd-ab1d-db39e8484fa9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e25bee-3229-4606-8672-333d2e408262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e392bfc-3ec4-49c4-a989-4a1cf7d93488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2df0ca2-681d-45c4-8202-50ff41afd5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc348b3-a292-4ba1-85e4-5eff7a7355fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db655991-023d-4d49-b776-9f1f7a715abc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758a607a-c18b-45b2-a92d-359756b49b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6947d73-ce90-4f65-8a97-4d67a2be148f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db3932f-c888-49a4-b762-45e84109c063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c42372-bd7f-467b-8313-ccd7e4850c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5056f6b4-de51-43a1-8117-a6f620bc4d22",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49107b30-6cce-492b-9e1e-15a234703edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298fdf9a-a580-4499-b0f1-45df83e43101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefe0908-3002-4b28-8477-da2c7f34f75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be99be19-27be-4a22-94de-13726ca8553b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3368fbde-a8e4-4685-93cf-8d34694937d8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290c0891-f035-4cc4-8301-3afbd5e72599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f9004c-4938-427b-93cf-c5afe14a6355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b52688-3c31-4f1f-9a90-93b25f4f4067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34cfe760-d4be-4ce1-9fac-b820c522c0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50557281-171d-4fc2-b36c-7008bbf70ff7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb979d9f-9629-4948-a594-7a0cb2e85f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8309c9-145c-4291-aace-f2c8048ded43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287cb05d-a5cd-4b9e-8bf7-15d27f86009a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e15b6b4-c084-40f7-bb92-4c2ce6cd4b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edc3ce1-5601-4850-8a22-a5e07ba07dec",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0332d306-a079-4f0c-8d0d-db0de7e38551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3973f08c-6a23-49e9-9d03-5f2275a57c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba503b37-149a-46e0-97cf-1013b7633287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d97d0b-cf17-4d1d-9a4d-4eb1d5533907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728060a3-f42d-4653-882a-399582289286",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfcd392-0a5e-4b04-b576-9e69a61dbc15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c71157-1a03-4934-aad6-58f434b87f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba53a52c-b79a-4bb8-a354-46cc070ddd62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9ce107-c65f-466d-be47-c0cd08533bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8922ac4d-1920-48e8-9871-ef0ad3db6fb2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ee240a-cf31-4a93-bd22-553e7952f302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f60567-9e16-4bb5-949a-ed2f0ef55dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a112f9ec-c91a-4794-bec5-ff5d400b6762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed4c8c3-1c77-4ac1-aa1e-5bf806e00036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefe3e8f-b83d-4928-b773-3d1fbb48bf42",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9bd113-069b-410d-981f-fa382f349c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1d5bb2-5385-4bc1-8b14-0e0e67a61ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946a82a7-becd-458f-8c39-c4dafde59f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb4d318-2af5-49c3-b8a8-b4125b76182c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6654f6-e0b0-4bcb-81d1-424ab0284997",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce575e8d-de5d-4cfb-b937-a7747e2b572c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14af29c-f788-4cb3-8465-4bac80a0ad62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2fecf8-0318-443a-8498-8f17eec61a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd51d9c1-579b-4e0d-b794-f21a4ee0b118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45117faf-096e-4ce7-b58a-6709335e614d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f759242a-cd2f-413b-9f0b-c18a0dc40f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ecd756-29cb-491c-83dc-88f1c817bf42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb13f73-46d0-4717-b271-4ddce5f50a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbdc5cf-b77f-4a51-b429-d01870af9f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb9df71-bed6-493b-a9e4-4ef2e8e7aca2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8e4f5c-7380-471f-86c3-b805b999cf64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542bed57-16ef-4cf1-bee6-74b0125e1521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b918ee1-4990-4c38-a2d0-41de965219f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc314e9-31e1-4715-b064-93af491dedd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5506c40f-a36e-49db-9cbe-0b67dfcb4094",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34b5686-fb80-4555-a758-629a3e2c069b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d987daad-dfab-4008-82b3-517247084fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bedeb08-8dc8-4eb4-a0a3-9c16f5ff06c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa05eede-3ee4-4e14-8395-fffba7182658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65033303-b1b7-4966-8ceb-be9db5b211f3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd2cc2d-65df-4f7c-91dc-f6110adfeb39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c192a05c-87fc-4a55-bc20-bcf05216fdaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b14d160-9d35-4076-87ce-c0bd236b958b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af5b0e2-24ed-4e73-a295-804c07321c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bd98b1-110d-496c-9617-8403b69ccafc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f939e571-8569-46dd-8232-f58929cc4496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de443b7-39d5-4ad6-8cb9-8e6cba634ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e863f17f-0d83-4a78-bf1f-1ea0ae16456b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358cf6e8-385b-447e-be76-4f6acee2c64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d5b7a9-1fd9-4371-8dc9-9e5e49f7ad63",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e940b2-27e5-4350-85e4-7fdf1d5491ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62544a6-703a-4172-83f4-d1cd11b7309e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b96faf3-ebab-4a0d-8836-48477abbaf54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31fc5b8-947a-4b92-8f49-1ab447f14d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995a4b70-08e2-4080-9c6c-c537bef767d9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a19e2e-3118-466e-a41a-ca16620ebaeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910980ec-ab4b-438c-af2c-d4aeff30b3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51049896-74b0-4316-bec5-2fa6e0e2f6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428bb3e7-ca3c-46b0-ac00-4b2151e70e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10de215f-7887-48dc-89a7-e2fe1df05796",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afe9d76-783b-4b8d-bc4d-6581c337b82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5d4af5-50e9-4855-a8e1-1ea43bf94a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1f497e-dbe6-4eef-8956-d305336370ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b821308a-8d0f-4902-9ba4-fafb397cd082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2634684-9568-44a0-b5e9-a0eea5378cc3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f14884-5854-4cdf-887b-6f4be24679a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7b8c30-6cfd-4a4c-ab7c-4ade1c33fb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228208aa-6ae6-4645-a94c-5b8c012e7ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d3c1fe-033a-4d72-8779-4a4b2b214472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb25c730-6f68-40c4-8809-1432698fbaaa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30398094-ac6a-4105-b1fe-2a8456e9959e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af004ddf-16f7-44e0-9028-13a8b5f9b525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ef4836-7359-4740-ad3e-91b8f8883654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd0836d-a4e5-4280-9db5-f7f6c91d6e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb4dcae-3930-45f3-92e2-063f87dae46d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7264eb69-13c2-491c-b278-b818b0ba3598",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f0abc1-3b93-4137-8a1b-6484dc8582b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cec10a-22f8-423a-ac76-e8846f507b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbd62a8-e626-4b81-b56a-e9f120194c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec0d864-62df-41b2-944a-e3ee2513799f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750b1396-d8e7-4e07-a426-36a5ad83ea1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00d69813-1470-4b55-8dc1-7f3494a0e37c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46ec554-9264-4faf-9cb8-4d07307a3d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c817dc5-005f-4e97-a0e9-96a71d94af48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8296f249-e494-43d7-ba26-89ff5433bc88",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f3e0ee-15a6-4b7d-8d3e-554780cfad44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7031a5c-da2e-4efa-8525-39b9130e241f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d4285e-db55-4f4d-af53-37e3dad0bda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44bb1b5-0983-42a6-872b-a1aaaefa4609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd98c35f-1d6d-4116-9687-79f7362c43bd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6535c2-e6e6-4a80-b752-a62aba6f8149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53500d9-7649-4aad-896a-20618dfba58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d919f65-9f3c-45f4-aeb1-c1a894ffa927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6d5beb-f53d-4b4b-a0da-eff9c69c70d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116cb0f3-afb8-495e-a400-29b17c32600e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d541ff-358b-4ced-96a2-57319c9592a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29ef53e2-3bde-49ff-bc66-ef3e8dd6aae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffb9445-b868-4778-841e-6617dc7832db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eeb4049-3e20-4d40-9e14-23a5621e3ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af8182c-823a-4127-9b87-13c24650a258",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23920d54-643f-40e4-9df7-db49f4491508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f424c8-ab75-4e73-b191-670ddef9f350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3868dcbc-d91d-400b-aebc-6bbd8773f238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c55ec65-3052-4967-ad2d-20ae6d1be1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97200922-3d57-47fa-9880-8f5e73ffc386",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373a7942-9465-41f3-a826-33ceb17c3391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5053b00-2f23-4297-8f7c-c08c8db039f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b386de0-f6c4-4d2f-8c46-99b77f0a9fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137aaa7a-0351-4a5e-a3f3-289dcab7aa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc29ceb3-436b-4ddf-8edc-1ca182f543c4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63eaf1d-271c-454a-8f67-cecec51724f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04ea8e3d-e3eb-4fd8-a1a6-365a0b595264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08951605-934b-4b73-bd00-00184e54e798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f35a4d-cef7-4f6c-972a-96de2e197ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e43fcf-836b-4cdd-be68-5bf77e159513",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a4d13f-0754-4263-a91e-b9b59b49609f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d5dc89b-2ed2-4852-bfd9-1016041a0527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877b551f-40fe-43e6-a54a-32c093865e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95856a03-c804-45ca-8dda-b9825fd052ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5871a411-b616-4436-ab5e-d91baab40d6c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4a8846-222d-4ae7-8d2e-6dd928372b9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee619e97-7f19-40cd-b334-cc9a0372517f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94ab698-eb6e-4444-8ce1-738ccbea3fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3835fd35-6cd4-4efd-a268-02a410f541ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e240ae-93ee-4719-8168-407e20b9fe87",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5277a6ee-6241-4de8-8d36-c6b103c7ba79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5e8c760-ae30-4036-932f-a579644b46f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58f1484-95bd-4c10-8a86-9ad1fc8d24f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe32df6c-79df-41a0-af33-754a97174738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bfc3fc-2b57-44eb-85c7-507ebe9e3fac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0535381-ed61-4952-92ec-68cb230642a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "298c92b8-862f-443d-984a-89b018b336ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1a0912-dcf0-4289-88cb-7059964c1969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c35cf8a-de2f-4e58-bfb1-cd91e0aeee8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fbdf7f-8dac-40cb-8d6f-a4635d39b5ff",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cc1b02-a410-4e7f-9753-e2cb0c9d3147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37bf9de8-392e-47ff-9831-8f7de27d1b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6586f0bd-84fd-49f1-8075-0955f8a0569d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc12001f-0a72-41aa-b363-b29ee88e873e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa023fb-5119-4859-9fdc-da3876c81f75",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd65f66-59db-4bd8-b851-4098411d88ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff04d49f-2524-4826-b60c-b7548aaa1639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1047ce6c-5c69-46e6-8ee4-e3b024414d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771167cc-d85b-4d43-ad30-f6f879f5791c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25105bc-0ba7-42b0-b50d-60b008caae44",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6083c4-db33-452a-9dad-d63a3e2f5eb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a45e485-c167-49cd-8c3a-86be807fff5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c31c31-24cc-4a6a-a09c-a5bd0dfeb813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42df006-a49c-4f90-a911-55fd6d01e0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80bec6f-3529-4d79-8729-3e3a323175b3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96447b31-af96-4e7a-b089-72c0dc47d63d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9efd0157-dd8e-440f-b6a9-11c010e290aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "475146e2-2f45-48de-a730-0ff4c80e1813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb3d6c5-3e38-4f45-b165-414db5644f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3f4948-14e3-4c6f-98cb-b23532bedb18",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518303aa-2efb-4bea-98e8-08a9e1e59b08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d22f21a2-6431-4053-bffd-99c849d95c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a37b50-52b8-4f66-ab66-69bcf2f60434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a3bdd2-52bb-447d-aa6f-ed7b5341235d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb128cb8-b9cc-42f6-bf56-8e63c8f26a48",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f18d73d-bb8a-48f3-ac7d-cde0a10b29eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eff00c59-178d-4592-8c4d-a6761cd16634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c56fc0-dc4a-4bdb-9ae0-6e8279f2fbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03d8aa4-55f3-4be2-b621-37dd0c3a4b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77230dc-2fcb-4a6f-9497-be1f1c6db489",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd9cfca-833f-4851-b41d-8f7daa186868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed8da3da-ab44-4811-85d8-7d79d8605b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92623219-c26f-42b6-991c-c972d3db7d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85501499-0922-41cd-87ae-5551dd5dc78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9535b776-94ba-4485-9702-6bf6e67f6381",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6e52da-4c0e-4eab-b9fb-a027f6a240df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c46b9cb7-1cda-4af8-8680-27108149ca47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1860722c-99f0-4832-b7b6-9291c11d1448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5e273a-d6a9-4cb6-8a01-f4068fe51873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2b740c-3b73-4cae-aaa8-3d1401726db7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0878fc07-1ee3-4cbc-9bbc-a5c51aaa5959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0da8e5f-113e-41f3-8c3f-0877f54d033b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f33c4c-d89c-426d-9ea6-a32d8614a9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600f2c03-2529-477c-90e5-5e7e65ccb3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f070db-678a-40fe-a8cc-02501b47bc97",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4571fb26-61a0-4194-98c4-1fe3d5457d3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b077514-ed48-477a-9573-b862313b267c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb8ca77-2ec4-4402-b585-97c27271199b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706398f9-3c30-4368-903e-6c23d02daa43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8b037f-1229-4825-840d-ead87b43a696",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65c4617-a6dc-46cb-a503-782395c0a6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6b13f6d-2deb-4bde-9c2d-e57961c5b6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36effda0-a54c-4c64-bf7a-6d71c8432f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8f8602-24b2-4d8f-bdd4-06bc31629dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0d0285-31a5-4dbf-8684-2585ae063f07",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0977ba74-2df9-4d5d-8131-9b768e93257c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4442614-edf7-4635-9d08-4d693a482dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee16235-13ca-485f-a9f2-9d3422be038c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf55e36-3ba7-4e5c-96f5-4fd09efc8f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3a4cbc-b665-44d5-b3d8-106a191ed2f9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8e1b04-97c9-4c2c-b796-35ad52072cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03ebc0a6-a9b1-431f-946c-ddc24e687e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983d39e1-d203-4aea-ae4a-e15c313dc9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e167df8-5cbc-4969-9545-01d89e80fd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2943e7-285d-4d54-bf6f-10a8ee0d1cc1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ebb36b-bc7e-4c0d-a287-d5405434e91c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ae648b-7307-4b22-8264-0f6b379598fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234e3bde-85df-41f4-9267-9d01ba60a58a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe8629e-aad5-4577-9a48-6102a1fa931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349ebac0-8b0d-4709-8838-0495c1bea75b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97562dd5-1de6-4a87-a982-09bc14c96475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b1bcec-a098-4ff1-a399-bbe1c6ef9d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cce668f-c026-4554-8a3c-f3c86cd7bb9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c8544f-b2c4-42a2-a54e-dec22c72feee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a798f31e-110d-41e4-82b3-6dd017a22296",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4f8ce8-76c3-476b-89fb-9836188b2779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fabb965-3b48-41c1-bf25-ed4869714e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b675f0d8-ff30-4c2c-8f13-8f4b977d03ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5ea808-ec46-499b-82d7-1cfa874c7aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf051cb8-be6d-45ef-a20f-8d7f77c01215",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec5c525-6a01-4b02-aa98-3ab68d57ccbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81d1ddc-83fa-4c40-8e52-f38fbccfe716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca567a6-df1d-4bd8-8184-104350233173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d74533-8bc7-4cc8-8ed8-e452a0ee4063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722f53fc-3a0d-44bc-9f39-d4da73f1f476",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6821fd5-e264-4f0b-b82e-a43f6d758749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c471df74-dff9-4430-8196-909408f316bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989d8cf4-2fd4-4b8c-bf68-17c2b4e36884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4ee3f6-2564-42cc-b9e2-fe6bb3442a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7ffb3e-92b8-4609-bd26-a703a08b37ac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e42bda3-56fe-436b-a7c1-b42fac16dffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "015ab085-edc0-49e5-a412-5ea4d00af27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94882aa3-52cf-4f92-a98b-5fd0a5dd68ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87b0f2b-7959-4653-ad86-00516e1f2fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46790e8e-2808-4a4c-b2cb-ce6e2b0863cd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3c812f-c14b-4bbf-b29e-9b652c402351",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "524f4c50-42d4-4b68-ba64-58138df617be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c83a0b4-fb13-4af8-8a8d-5a39138edd7f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8948cb-eb83-4c89-83a9-83bb2e4882bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a866c81-16fb-446c-a320-10c8c4792ca2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1421bc4-7bda-4f9d-9a0f-84fd105f1f44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3659dd1b-6a58-4c39-9f26-cf4712449022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e996ad60-ceb7-41db-a178-945c0ae57dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abd40f0-93f8-40bb-bd99-7c1d78ac0463"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1af671ee-9035-4612-851d-81ec5c9457b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02571c58-bc99-4505-9b7d-095f365c8147"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8bf3bc3-3a90-480a-96b9-f0947098a99a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2662c851-9972-4a75-8c7c-b65559ee1a26"
                    }
                  }
                ]
              },
              {
                "id": "08733daf-1333-46ef-b765-c235301b183b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "364ca9e8-0f34-4c7b-bf8f-ce855c16a027",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fbcee9-ae0b-446a-9cf6-8ffa96e08a59",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4df61bcf-6308-4d5b-9cbe-a51637f538f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08e8678-1149-41cc-a9ae-75ec2389184d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72a59c58-d8a1-4610-8051-f9caf2c3d9f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52a220fc-a889-46c3-a659-eb2462e93a0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d1e71bd-3d59-48cf-a246-eb35b4b3c223"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc7f6086-deea-4729-b053-6f5cc900b233",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e54a701e-b986-474d-8577-8ab861cbec02"
                    }
                  }
                ]
              },
              {
                "id": "7a7b3c9b-7e03-489f-a376-d6aaf2da7ada",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d6ffa1d2-e9f9-445c-ae14-6f59a03318f6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb69186-9e80-4ea0-b715-a89c2be6a6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4a8f7477-9631-4eae-b475-bd583f5bc674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b874952-1a59-4187-961f-e58f5efc07ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afe8a69-3995-4bbf-8a35-20173c062dad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7e88783c-d209-4930-b124-bf40d5dd1928",
            "name": "Positive Testing",
            "item": [
              {
                "id": "61e5d4ab-4d52-42ab-a649-e911bf37261c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e9ccbc3-4e14-48e9-8bbf-6209489aefa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f9111a1e-fdbb-4dd9-bdbd-d3c494993ad6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56bbb3b9-03c7-4926-bf7f-b5d3ca995c95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4654be4-7f82-49cd-8359-81bd5220bb46"
                    }
                  }
                ]
              },
              {
                "id": "6721739d-a629-43d8-a6db-30328923289b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd3a9134-69fc-4ecb-a3ad-8e0bef0463ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "50ef5242-6ec1-4fd0-b69f-c18db14784b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7851d932-ff87-4f0d-931e-5c226c07f7e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "428ffd4c-61db-4286-bded-9c564cf15770"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e921b37-1158-4664-b8e8-4c245bb6ba82",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1bbb7fb4-627f-4689-add5-de411e14ef3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92e119a0-1557-4365-bb17-b1098cdd526e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5239e380-8637-4ca6-9981-66344a81f581"
            }
          }
        ]
      },
      {
        "id": "c79e1959-6821-4018-b4c0-ad8a41ad295e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "51bdf3e5-2cf5-4b74-9d4a-fd84a6317081",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cca0f032-7840-4733-9d6f-d324519f3cb0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2afc2eeb-185b-4fd3-92fe-8199a8731274",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61f4cab-80a9-4260-815a-28b58fb80f3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5ed11356-374e-4611-9f6b-05d2223fd4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb45bdd-8207-455a-9bff-83d3e0e05c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25438a36-878e-4b5c-bac5-eb17fedc62df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "978c8c25-4fd3-41d2-bc6e-438ef7829596",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7063077-e3aa-4130-aefc-8ce2505fb0d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d783dd5e-9ded-47b3-89ca-587306724d30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6aaca7b-2335-4ebb-b1e5-d4e6c1c7ee09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d92957b6-438d-4108-b19e-9af06691b309",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f495cd2f-bfd1-473d-a438-ce2abf34d273"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b661e0f4-cf75-469c-9fe7-e902d5e8a760",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c60c5426-852c-454f-89ae-8af8da3042d0"
            }
          }
        ]
      },
      {
        "id": "71235bdd-946e-47a1-82d1-e1f2c8ddfb48",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0676e565-67cb-46df-a2cd-b504a86a64a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a98eb08-0229-442d-b659-909d83daa4ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5406574c-0bf4-4289-bb25-14d9070fde43",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d0e3ce-2349-4080-af12-9a80557e9355",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "facd75ea-0cb5-4549-ab1e-c4f3eeff76f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2378899f-9a65-452c-90b1-939436171096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92cdf83b-9649-4a1e-876f-98388182c1f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be2c2e16-1fb6-475f-b97c-7c55d9408769",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad39dfd9-282f-4d44-8dc7-7c1b76dab8f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2ec3569-0da7-493b-b2ad-e95a628542ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b416c6e4-0a96-4e04-8cf9-72bf909bec35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21b359c1-a869-4c1a-857b-927a56b97835",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e61756af-c198-4dc5-ab5f-081edd51f291"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9590a30-00d4-4799-a962-a026034b5992",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9974fb13-3443-4732-b40a-c1a404ef6c75"
            }
          }
        ]
      },
      {
        "id": "9dabeb76-2f97-45c6-9516-d93b915230e3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "644409ba-dacb-4c0c-aa75-810c7bd36196",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b9a7d41-4377-433d-b746-d41b86ff942c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a6d3bfa-86a0-4618-8a83-06fe973ba23e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954c500d-e2d9-4de8-b576-3bfa4bbd5cb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45d357ab-37f3-47ff-8478-0c36e624baba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b21f608-1e2c-4e7d-bd4f-fcc1ded7a530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dffdc9c4-f7c2-40ed-ab17-488486fcbdec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab4adea5-8c41-4c37-a199-c5fdd2095991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ab2bcd8-2f5c-44d5-9cc1-896ef58d8a6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc6e4985-2296-4b2a-a3a1-425137ffc767",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ba6a8cb-e7c1-41af-b045-18f02dde6adb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4a27829-3361-4060-ae9d-04b1097a93e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e93507c4-ae5e-4bba-a319-e5965a9a0a82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebe196a7-4d7f-49eb-897c-0dc75d4f76be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0049d6ca-282e-409e-b292-2b2629b11317"
            }
          }
        ]
      },
      {
        "id": "bd002cef-bc64-4a01-b801-68e57713f04d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "755d76e3-05cb-4a5e-abcc-5eae30737d0c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2fa495b-396f-41e6-b8d4-1b175442918e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "03e4bd8a-6b37-47b6-9b21-1ab031629cb2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe952a8a-2121-46a1-b552-072e0cb999ad",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "814304fa-0a86-46c3-92b5-f698b72b64c4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 103.09126984126983,
      "responseMin": 22,
      "responseMax": 680,
      "responseSd": 85.44651396740039,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714696669842,
      "completed": 1714696704695
    },
    "executions": [
      {
        "id": "ad04fb76-4cec-4952-ab50-8431f886afde",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "aca1b9a6-fc2f-428d-b593-7c47f3fc8739",
          "httpRequestId": "30567e5a-e2fc-47be-92bc-08718109de42"
        },
        "item": {
          "id": "ad04fb76-4cec-4952-ab50-8431f886afde",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e6685538-a37d-4201-a09e-da574fe70879",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "553cdbb8-329e-45e3-b584-618f8ab46632",
        "cursor": {
          "ref": "cbcfa932-9ae1-46d2-8d03-8bf79670eb4c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "aad8fb9c-3755-41e3-a1f9-eb0b6fc3602f"
        },
        "item": {
          "id": "553cdbb8-329e-45e3-b584-618f8ab46632",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0190ac98-a111-41f9-8a67-5b4470f4157e",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "77b1717c-c32f-4cb1-986b-67d8e1f7ff78",
        "cursor": {
          "ref": "f0047839-d5a0-4937-8d89-dd6131e1db7f",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3e947c86-0993-485b-87a6-4be10fad1f49"
        },
        "item": {
          "id": "77b1717c-c32f-4cb1-986b-67d8e1f7ff78",
          "name": "did_json"
        },
        "response": {
          "id": "503007f7-ba97-4417-8b23-13ed49befe46",
          "status": "OK",
          "code": 200,
          "responseTime": 423,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d7451b-a08b-4dbc-95f1-423aca5c8666",
        "cursor": {
          "ref": "296023e4-752e-4f47-9959-630ba9e68c70",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d1690b7a-cf1f-438e-b1e7-7e09db160dff"
        },
        "item": {
          "id": "f1d7451b-a08b-4dbc-95f1-423aca5c8666",
          "name": "did:invalid"
        },
        "response": {
          "id": "c62a6709-66b6-4567-9eee-92a3fd84335f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d7451b-a08b-4dbc-95f1-423aca5c8666",
        "cursor": {
          "ref": "296023e4-752e-4f47-9959-630ba9e68c70",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d1690b7a-cf1f-438e-b1e7-7e09db160dff"
        },
        "item": {
          "id": "f1d7451b-a08b-4dbc-95f1-423aca5c8666",
          "name": "did:invalid"
        },
        "response": {
          "id": "c62a6709-66b6-4567-9eee-92a3fd84335f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff866db7-280b-41cf-9352-d5c7f95a6176",
        "cursor": {
          "ref": "94e40d2f-ac17-4578-8e04-934a7fb8b6e7",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cf7699cc-05aa-4866-857c-52bfa9c2cf1e"
        },
        "item": {
          "id": "ff866db7-280b-41cf-9352-d5c7f95a6176",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c55ab576-e3e2-461c-aae6-c346f4f9bc28",
          "status": "Not Found",
          "code": 404,
          "responseTime": 128,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4475963-abe7-4298-a129-39ef59482cbf",
        "cursor": {
          "ref": "6a8561c9-236e-4e33-9e0d-9c5987820695",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "281ab398-730a-430f-a8dd-24f5f08f3154"
        },
        "item": {
          "id": "d4475963-abe7-4298-a129-39ef59482cbf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e6540612-c3b1-4551-b18b-11d32eca7ddb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1304d04f-3cd6-4938-a29c-cb730805bd8c",
        "cursor": {
          "ref": "605f062c-8e94-408a-85a9-0b1580733a52",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "887f9848-31f0-48b4-b41c-9501e41e9651"
        },
        "item": {
          "id": "1304d04f-3cd6-4938-a29c-cb730805bd8c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8d43e523-7130-4c12-9e77-34650de1b88e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073b464b-36b6-4df6-9f00-4df1ad9ad925",
        "cursor": {
          "ref": "5b44dc4c-84ee-4a5b-9d06-293b99ead8c9",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e9bf524f-c80d-4f80-9026-c05f6c840b99"
        },
        "item": {
          "id": "073b464b-36b6-4df6-9f00-4df1ad9ad925",
          "name": "identifiers"
        },
        "response": {
          "id": "f26067a2-4eb5-4dfe-991a-21c791e6031d",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736674a9-4d96-4e73-8b0b-d101addd2343",
        "cursor": {
          "ref": "e22895a0-e471-4b4d-95cb-17367ec7ef5f",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "99db121d-85a4-4fed-9ea3-2ecef9aa8127"
        },
        "item": {
          "id": "736674a9-4d96-4e73-8b0b-d101addd2343",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1f1b4caa-0bce-420f-b00a-1a6267ad0327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b391b59-2ec1-4a6c-897f-8dc60cec6181",
        "cursor": {
          "ref": "15f8f2aa-98e3-4791-99ec-71bbcce4bb16",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8619e852-b66f-4675-83ac-ebbd9af1ac05"
        },
        "item": {
          "id": "1b391b59-2ec1-4a6c-897f-8dc60cec6181",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1a042ac7-dcef-471b-a548-7a92607c9b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae96593-fc24-4667-9ebf-f9d34301df2c",
        "cursor": {
          "ref": "402d8aa0-1b60-4a40-b3ff-ced9d2605790",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d55fc87d-0976-4767-a889-ed377dfa02fd"
        },
        "item": {
          "id": "3ae96593-fc24-4667-9ebf-f9d34301df2c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8f2c7b38-a638-4885-bfd1-6ac14fb3c7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f74aa5d-4672-4568-8ef1-90e1950e407c",
        "cursor": {
          "ref": "dcc60e0e-51d9-44d7-a19a-1d1845e5dbeb",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2570d318-dbe0-4de8-9de7-62ef19ca97bd"
        },
        "item": {
          "id": "3f74aa5d-4672-4568-8ef1-90e1950e407c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "54b6d75a-fa0b-4229-9c6b-700471845c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a007d3c4-8ad3-48cc-8797-307a3e483d8c",
        "cursor": {
          "ref": "4eec6f24-4ff5-48fe-b0e1-a80723571c9c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "65460ce9-47bb-4181-bf78-6880410bdf58"
        },
        "item": {
          "id": "a007d3c4-8ad3-48cc-8797-307a3e483d8c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bca23bc7-5607-4bfa-b1c7-1bc5187a74b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847fbd1e-f76a-4921-95ef-e7520434f841",
        "cursor": {
          "ref": "ca525752-5487-4cfa-b34c-dbc57b5d1f2b",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cc24b3a5-5ba2-4de3-8996-d173f786150b"
        },
        "item": {
          "id": "847fbd1e-f76a-4921-95ef-e7520434f841",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "51c31195-c90a-4955-943a-41096b9cdcfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c522989-5dd3-4686-8429-9bdeae011192",
        "cursor": {
          "ref": "64c59e27-08e5-4816-91c7-914dcaa7be22",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ece6b1eb-8ca8-4991-b414-25cbe52d0f5d"
        },
        "item": {
          "id": "7c522989-5dd3-4686-8429-9bdeae011192",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ba214108-e9d7-4104-84b2-dd44d29bcc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cf3059-301f-4086-9645-99f24fcba237",
        "cursor": {
          "ref": "bf3ae8ba-4ea1-4583-b415-e42d644b189f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4dbffcac-812e-420b-a60c-62f69a563e91"
        },
        "item": {
          "id": "55cf3059-301f-4086-9645-99f24fcba237",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a74b5a39-d056-4fbc-9997-cffefd2e70e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d915544-7688-4712-b612-c98b0dc34862",
        "cursor": {
          "ref": "32618f98-b4be-4358-a8b3-dab6eedfa3ea",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b4ad5e40-3088-4732-9b90-a65dc7eecd8e"
        },
        "item": {
          "id": "0d915544-7688-4712-b612-c98b0dc34862",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "df661c5c-2713-41d4-be21-ad4a9db19d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87623e4b-f5be-4e24-9964-886572f55e6b",
        "cursor": {
          "ref": "a7a58835-4f19-4239-8d5b-de6a82317185",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8af0abc7-25be-4d6c-bf86-a465324666c9"
        },
        "item": {
          "id": "87623e4b-f5be-4e24-9964-886572f55e6b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2d36c668-f76f-45af-a85a-3aa3dcf1bc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169f43ce-458d-4d1d-aa62-6e9c00f0654d",
        "cursor": {
          "ref": "6a535a0f-9538-4da8-929e-aafb6ff8302c",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d520767d-953a-4fd6-88e1-15bda99bed56"
        },
        "item": {
          "id": "169f43ce-458d-4d1d-aa62-6e9c00f0654d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1e9a1daa-9c9a-451b-9515-f620e99a3364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327e9f98-fe36-43a8-b657-6445ccadacfe",
        "cursor": {
          "ref": "82b0be48-fd69-4a7d-836a-73b62a7edf11",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "81c9d44b-291f-4691-8c33-1c90b0838d76"
        },
        "item": {
          "id": "327e9f98-fe36-43a8-b657-6445ccadacfe",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "98701287-281b-4d82-97ea-4adb3db35925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c78497-03d6-4f43-b035-c9f90b984bd7",
        "cursor": {
          "ref": "ad9f42fc-67de-4826-bc98-d9c2e1a26ba7",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bf516f75-eb00-46e8-90df-1d10aa00fb19"
        },
        "item": {
          "id": "e6c78497-03d6-4f43-b035-c9f90b984bd7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "04b2dc9b-373a-4954-8ef7-a7107b34f234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5383ba-8e49-4844-8ea3-6c247fc47e46",
        "cursor": {
          "ref": "49588d8d-fb1b-4e51-94dd-5a066351923e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8c49fb1a-7a1d-4c3a-adb8-81c3e037cd4c"
        },
        "item": {
          "id": "2f5383ba-8e49-4844-8ea3-6c247fc47e46",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "33e8cdb1-3863-46bc-a7e7-d217707310c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fe32d2-b74a-4e94-a6cf-20e42e35d713",
        "cursor": {
          "ref": "96f367c2-f058-4dcb-b7d8-a2a2020f1f97",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "830e1868-2e8d-41c8-b294-60f92d120444"
        },
        "item": {
          "id": "76fe32d2-b74a-4e94-a6cf-20e42e35d713",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9af8012a-14c4-45a5-b266-d91bcae68d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269efdd2-3b87-4d85-927f-3e9506c2e23a",
        "cursor": {
          "ref": "ed5e9b03-a860-494a-93aa-5f6eae6b9d74",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ac8e91ea-24ed-4c8b-a923-981503518540"
        },
        "item": {
          "id": "269efdd2-3b87-4d85-927f-3e9506c2e23a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "122f7a93-e985-42bb-ab42-50b8829f0192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a10669-fd45-4839-a0ec-a7b11cc92c0e",
        "cursor": {
          "ref": "fabb207e-c662-4473-a5d7-d575f3dc1508",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a0163d4b-fbd6-4c27-9da8-00eb894b66f1"
        },
        "item": {
          "id": "e9a10669-fd45-4839-a0ec-a7b11cc92c0e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c4867700-9e65-4cda-837b-d604a4cd29ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5163f152-673f-44f8-9280-595bf606819c",
        "cursor": {
          "ref": "50c8208b-1125-4441-a9f7-8320e328fbaf",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c2702458-7b9b-42f6-86fc-df5820891c04"
        },
        "item": {
          "id": "5163f152-673f-44f8-9280-595bf606819c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fe2996e0-9170-4555-85d9-1919d7c1e604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48088da5-fe69-4d52-af79-f95d2d93cdc4",
        "cursor": {
          "ref": "b91c6ab2-de78-47b8-b907-a6865b6b9796",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dcfc05a7-5c59-46d2-9f85-d0c93fcf831f"
        },
        "item": {
          "id": "48088da5-fe69-4d52-af79-f95d2d93cdc4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ebd8584e-2513-47a6-b764-826b1bf1f9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12d27f8-089e-464b-a87b-baf1f36e29f6",
        "cursor": {
          "ref": "4920c00a-c441-4b65-a812-d15989f92020",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0f237e5d-058b-45c1-90f2-adcd9e505815"
        },
        "item": {
          "id": "b12d27f8-089e-464b-a87b-baf1f36e29f6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "38f161c7-15cf-4948-8511-954065f3ca88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561fd2b3-55e4-49d2-a1d5-7d020464b9cb",
        "cursor": {
          "ref": "7355d804-861c-457b-996c-7cf049f8d8f5",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a7ee44d9-ada9-4ae9-8c24-386afd703dcf"
        },
        "item": {
          "id": "561fd2b3-55e4-49d2-a1d5-7d020464b9cb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0b07669b-e869-4d2f-9540-57c9f44d87c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae2df69-942b-4996-91e1-a63e30838270",
        "cursor": {
          "ref": "6487a5ae-c796-40e2-8551-c99afc6853c3",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c445fe38-a129-4620-9bc8-7f1d2aad95dc"
        },
        "item": {
          "id": "7ae2df69-942b-4996-91e1-a63e30838270",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8de5e068-f497-4187-8fa7-c9c4ffe8cdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6308ee-2c61-4830-82b8-5e0ca83ccfbc",
        "cursor": {
          "ref": "77b46087-2c6a-4bc8-a976-9793c3810d4b",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8af5a708-255e-4cd8-85b7-46aacfdbda5f"
        },
        "item": {
          "id": "3e6308ee-2c61-4830-82b8-5e0ca83ccfbc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f4e08467-6847-41d4-bf6a-efe7889ee513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471ec61d-2762-4493-b64e-754b600ce46b",
        "cursor": {
          "ref": "c96bd097-21af-40a3-a080-da402af8598d",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c12ea533-04f3-4a72-8b87-d37c0d1580ee"
        },
        "item": {
          "id": "471ec61d-2762-4493-b64e-754b600ce46b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f86f5d9f-ea7b-42f1-ba21-bf7d8fe16b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae022d3-c095-415d-93b9-71f98e77ce12",
        "cursor": {
          "ref": "bed84e68-f9f1-46d7-8365-61c8ba11335d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "db8c821d-8a83-48fb-92fa-4a5f3d13a3be"
        },
        "item": {
          "id": "fae022d3-c095-415d-93b9-71f98e77ce12",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b681df26-1acf-4808-931e-226a95be30a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09431d08-ca5a-48e2-8a27-8d26868b6d45",
        "cursor": {
          "ref": "a217f705-9532-423a-bba7-8aa5dbcee8e9",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b34eb5f5-91a6-4f4c-b65d-93028a6594b0"
        },
        "item": {
          "id": "09431d08-ca5a-48e2-8a27-8d26868b6d45",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1101bcbf-6973-4176-8097-f121aa83553c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884ecfca-44f4-4dbd-8bbb-3deecd162618",
        "cursor": {
          "ref": "bcb17efd-c96d-4117-8774-482d6c4fb9c2",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c7428569-394a-4115-9520-e58a37baac91"
        },
        "item": {
          "id": "884ecfca-44f4-4dbd-8bbb-3deecd162618",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9fa433db-7e43-444e-b8f8-c167e910c198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3957de2d-188a-44a7-848f-1a6b652fe391",
        "cursor": {
          "ref": "3d1904cc-0737-4f66-84de-a549f9af23b1",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d31a6d76-f7e6-400d-b0c4-cda7140b575f"
        },
        "item": {
          "id": "3957de2d-188a-44a7-848f-1a6b652fe391",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "788b2cbe-242f-418a-9ad8-83836b578401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c85dcb7-f9a8-441e-8b13-6098ab61afa1",
        "cursor": {
          "ref": "28b78e14-636b-4f9a-bfa3-36aebd0b6316",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a8a2ceef-e2c1-4088-bb41-f55977abfba6"
        },
        "item": {
          "id": "9c85dcb7-f9a8-441e-8b13-6098ab61afa1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3fd0b369-6289-42a3-84e4-59cc28b09f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bd381e-cabf-4b30-804b-46af828b2eea",
        "cursor": {
          "ref": "0b5ddff0-1e1c-4b2b-999f-07e66e9c5a92",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cff65ed0-6aaf-43cf-941d-18c6e7bcf605"
        },
        "item": {
          "id": "e4bd381e-cabf-4b30-804b-46af828b2eea",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1fa057b5-7b3d-4b27-a439-cbedacd38c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2adfb8-b797-4cbe-9922-d1ad866f0124",
        "cursor": {
          "ref": "ce4ff9d0-6d86-4aa5-a64f-e44303e80447",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4528f3d6-7798-4e35-85c3-08d7945f84ce"
        },
        "item": {
          "id": "6a2adfb8-b797-4cbe-9922-d1ad866f0124",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b4b24f54-db01-4556-867a-c14e82b6a38b",
          "status": "Created",
          "code": 201,
          "responseTime": 680,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "788e1bba-d387-4c43-b803-9066a461c1fb",
        "cursor": {
          "ref": "c5f66806-bf02-4093-95c1-584da2897978",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a1a63f78-d716-4ac0-acb9-610323b8a763"
        },
        "item": {
          "id": "788e1bba-d387-4c43-b803-9066a461c1fb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2c427d01-0baf-403d-a8fb-6d034eee98af",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ff34635c-c1ba-44d1-855a-ff9a91813b54",
        "cursor": {
          "ref": "8fefefcb-cc35-4cb2-884b-1f7e690bfc22",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4f281b8e-7fd4-445f-9f8d-577d7d42f053"
        },
        "item": {
          "id": "ff34635c-c1ba-44d1-855a-ff9a91813b54",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "cf00aed9-3ff7-4038-9c30-778fbc35e33c",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c8207814-9c8d-45c6-b529-9786b56b97bc",
        "cursor": {
          "ref": "765153b7-5ab9-4ce4-9a1a-7007c45707d1",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "888398f2-2d93-4ecd-87d1-56c828217b05"
        },
        "item": {
          "id": "c8207814-9c8d-45c6-b529-9786b56b97bc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "02af3eb0-4c66-4a5d-a34d-62ef484f1e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d45698-addb-416a-9e5e-4d2fa140385b",
        "cursor": {
          "ref": "8a8ba9e1-2539-4d0b-a4d3-63f71124b900",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "29c0f7ac-6364-4f5e-a5dc-95aa1a69ae8b"
        },
        "item": {
          "id": "e5d45698-addb-416a-9e5e-4d2fa140385b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9bf7eef1-d0b0-44a8-974a-227ad58b51f6",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6e180e7a-3d02-4adb-8a56-a9f8a463676c",
        "cursor": {
          "ref": "421974e5-73de-42b6-8211-85af59ac1284",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fa1dd8b2-b78b-4e58-907f-ab345a9af1a9"
        },
        "item": {
          "id": "6e180e7a-3d02-4adb-8a56-a9f8a463676c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "95cdf611-ebcf-4ffa-a09e-4ed3cef79e63",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a0753e7b-26db-482c-827b-38d80beaa56f",
        "cursor": {
          "ref": "20fac618-5558-4961-a1a1-a6f37e88c1e0",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "608921df-528a-4faf-9b17-c507a2d1245e"
        },
        "item": {
          "id": "a0753e7b-26db-482c-827b-38d80beaa56f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "91e6eb1c-4b07-471c-9b89-80c0239145e8",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "997b2820-5525-4398-b01f-66f4380370ea",
        "cursor": {
          "ref": "35440bad-16d3-4a3f-aa48-5c61a3c8a1a4",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "909d4079-81c3-4e22-8ea5-4e3e2b5cbd76"
        },
        "item": {
          "id": "997b2820-5525-4398-b01f-66f4380370ea",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "60adfecc-8878-4f9b-912a-b509c8c57991",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ab2cd2ea-bbf6-4473-92d2-173cadee64dd",
        "cursor": {
          "ref": "77143140-5543-474d-9785-c16f37f33274",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4156df47-af96-41b6-aab4-da0c4a027c0c"
        },
        "item": {
          "id": "ab2cd2ea-bbf6-4473-92d2-173cadee64dd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e499366b-875a-4783-82cf-3f39b9a31bcb",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0cf5f6a5-6047-4bde-966c-ae88922d0c02",
        "cursor": {
          "ref": "169e2ee3-b46c-4dd8-9991-b5b93c0268e7",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1e0d795f-f135-4339-99e9-d47f4be42c39"
        },
        "item": {
          "id": "0cf5f6a5-6047-4bde-966c-ae88922d0c02",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5b140ddd-5122-42d9-85e1-ed6da6cc0e2a",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1d0c4536-d463-470d-a551-fed50caf47be",
        "cursor": {
          "ref": "afbfc223-06a9-4c24-a9ce-59fc6883786c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "22691ea1-70f8-4a0f-a2ec-b0fb30fb68f3"
        },
        "item": {
          "id": "1d0c4536-d463-470d-a551-fed50caf47be",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "75ca3c75-4e95-4339-84af-a7c4b074d492",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "caa53b35-43a0-4a7b-99ba-414a878653fb",
        "cursor": {
          "ref": "fc19bf84-9e80-4607-8972-ca5162778d3f",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f9dd3a89-ca42-4065-84d2-6bac3ba11199"
        },
        "item": {
          "id": "caa53b35-43a0-4a7b-99ba-414a878653fb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "af0662bb-4b21-4b07-bb7a-58afdb422834",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "63abaf5b-362f-41c2-956f-88b6606a7db4",
        "cursor": {
          "ref": "0d2729fc-a1e9-4f02-a1ad-151aa3cd2921",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c0ef389b-5c6f-471a-8678-3b0bd549fac4"
        },
        "item": {
          "id": "63abaf5b-362f-41c2-956f-88b6606a7db4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c8def7d5-6d9a-415d-808f-d14a2068be0e",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6cd245fb-fb16-4483-b3b8-172209396c62",
        "cursor": {
          "ref": "fb058567-9b32-4211-9c3a-d322566390dc",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "35cce61c-eb8b-4507-9bad-d46aeb63b55a"
        },
        "item": {
          "id": "6cd245fb-fb16-4483-b3b8-172209396c62",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0bb4f577-60fb-4009-a336-71880c46f588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6c695e-61a4-47fe-a5de-921ab9a6bd86",
        "cursor": {
          "ref": "ceedb6de-888e-4af2-be19-3a06117e071f",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7f019cd4-7700-4791-8b28-60b3d8a5dde6"
        },
        "item": {
          "id": "1f6c695e-61a4-47fe-a5de-921ab9a6bd86",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "60776345-f09f-41d2-b1d6-1473dc61e441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcdab59-cda7-46c4-9c81-88f22944b930",
        "cursor": {
          "ref": "69e0be86-dd99-4bd5-b7cc-4c04dd34b487",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "08007c7f-abc5-4c16-a2d8-578b0457ec22"
        },
        "item": {
          "id": "8bcdab59-cda7-46c4-9c81-88f22944b930",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b43e0cab-4be8-4d26-9e0f-21111a6a9254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975f1830-2603-44bf-9e99-a98bfa660caf",
        "cursor": {
          "ref": "5f1df843-3f3f-4099-b0ff-e4b1cf7a01b3",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "83bcb5a2-0bf3-4384-b5fb-63305ec28b05"
        },
        "item": {
          "id": "975f1830-2603-44bf-9e99-a98bfa660caf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "97c669ca-a0d1-4fe5-9b5e-b61233d4f7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee41cd0f-eac9-450d-bdda-32e65349eabc",
        "cursor": {
          "ref": "6cab9b76-caf6-4c5d-a94a-e633cf36ea46",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1ff453f6-dafb-410f-9bd3-5fb17c1ede38"
        },
        "item": {
          "id": "ee41cd0f-eac9-450d-bdda-32e65349eabc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4887995e-6c08-4dca-95c5-e78cdfb56618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf7310d-6414-4d2d-982a-42a2900acaf5",
        "cursor": {
          "ref": "0a51bc04-1d42-4194-bcce-b065007c6a6b",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "46352605-9de4-4587-bf9a-cf61039dbdb3"
        },
        "item": {
          "id": "fbf7310d-6414-4d2d-982a-42a2900acaf5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1b00084f-fefa-40cf-8382-d3a4d83938ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac9259f-9850-4160-8285-0ae65682e0ae",
        "cursor": {
          "ref": "696f0ef4-b648-4b67-b69f-8ead2d993257",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "283e85d1-8190-4490-a9e8-b8c703323f6a"
        },
        "item": {
          "id": "4ac9259f-9850-4160-8285-0ae65682e0ae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "351b43d9-31a5-4d11-87cf-3bad73ff7803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871adad8-086c-4368-aafb-8e2c9fdc3f5e",
        "cursor": {
          "ref": "0afa84d0-18bb-4ce6-828a-b5b99be24439",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e3ca37cc-4359-43eb-bfee-9494714c0ad9"
        },
        "item": {
          "id": "871adad8-086c-4368-aafb-8e2c9fdc3f5e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3848e69b-3acf-440b-9bd1-6b596c56095b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0acdb3-3b75-4905-95ee-67d334bf8aae",
        "cursor": {
          "ref": "d44ce24f-fddf-4e96-9517-0001d7f60efb",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c792b4ad-a2d8-495b-bf7c-6bf10bef732f"
        },
        "item": {
          "id": "9e0acdb3-3b75-4905-95ee-67d334bf8aae",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "03690f45-7eb7-4cd0-bba5-53b2806e8bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203aa5ff-0a7b-41b0-abeb-9693a70cc9f9",
        "cursor": {
          "ref": "0588a473-7851-4eb7-8baf-ebd47dc778e4",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6b282877-4dff-4f98-8c30-5db5693a890b"
        },
        "item": {
          "id": "203aa5ff-0a7b-41b0-abeb-9693a70cc9f9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c68db385-33fb-4d72-850d-4bbd9d5c11fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442c8d24-62c8-484f-863b-43229b268b80",
        "cursor": {
          "ref": "b3ef810f-e4fa-45d3-b993-df1bc5b73b8c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "55dbb1ef-abae-432f-9928-5a53d242a28c"
        },
        "item": {
          "id": "442c8d24-62c8-484f-863b-43229b268b80",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "81d05f11-b22c-47ef-96ef-c1063a210c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376e68e2-0d7d-4ddd-80d4-574fd84b6864",
        "cursor": {
          "ref": "759bfa07-c55d-45c9-bb01-cea9d86c5eb9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c8755a92-737e-47a0-94cf-5b29c6bb3c6c"
        },
        "item": {
          "id": "376e68e2-0d7d-4ddd-80d4-574fd84b6864",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1e9dbcf1-13f6-4dd2-958b-9455b74a9b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc48edf7-7097-4f03-9265-58e93f1bc4bc",
        "cursor": {
          "ref": "d6e41689-e5c9-4649-bd7f-b41d9338a665",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "03b05ace-970b-4ca5-b533-d0caf8056824"
        },
        "item": {
          "id": "cc48edf7-7097-4f03-9265-58e93f1bc4bc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "24dc5288-c0bc-4643-b986-df7d6a512b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6786ca2e-c000-4feb-907e-dd17d027f591",
        "cursor": {
          "ref": "21c98449-a999-4f2a-9aa8-c6460e0a5e2e",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f6c7fe20-4210-4704-b407-c7bcfd3b288c"
        },
        "item": {
          "id": "6786ca2e-c000-4feb-907e-dd17d027f591",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6ed64eba-5f75-4c7c-9317-e8a2b411a7cd",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e28fbc27-d5ec-4323-a57e-4623ef52506c",
        "cursor": {
          "ref": "e66074ec-9414-4ab0-af2f-68d9b6b6e531",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1305f796-5788-4f08-8ce2-a58460b1d133"
        },
        "item": {
          "id": "e28fbc27-d5ec-4323-a57e-4623ef52506c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8f9e16c6-e513-48ab-919d-40876f7d62dd",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "234326d2-aea8-451b-8253-1d26559d6eeb",
        "cursor": {
          "ref": "a33ed024-f4d2-42c9-9981-fec8379eea45",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "74e73f5d-234f-4b5b-905d-0584542eeeed"
        },
        "item": {
          "id": "234326d2-aea8-451b-8253-1d26559d6eeb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "67ce5028-7225-489b-a0da-4495914700c9",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7f22b7c0-de2f-42d1-8143-3b2e63d719c5",
        "cursor": {
          "ref": "7a5a6ab1-b6ef-4db3-ae82-a5a6025a4259",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "327a588d-c494-4c17-9b17-86f16199e311"
        },
        "item": {
          "id": "7f22b7c0-de2f-42d1-8143-3b2e63d719c5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7c042ff8-10c2-4744-85fc-fc199667199c",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "61fc18d0-39ec-4303-b0a6-5dc433214edf",
        "cursor": {
          "ref": "b6cea751-4863-4037-b21a-7c47742e4fd5",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "da03e39a-a286-473c-aa8d-29883de34339"
        },
        "item": {
          "id": "61fc18d0-39ec-4303-b0a6-5dc433214edf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "08f48d45-25cf-4a63-a746-756a025b0d40",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "dcd4d7b6-c50b-4b31-a952-c3dc229fb4e8",
        "cursor": {
          "ref": "cf6cb070-b1fa-4109-8fb6-328158f53bf3",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "53ab780c-a5fb-4448-aa98-b884d59d6541"
        },
        "item": {
          "id": "dcd4d7b6-c50b-4b31-a952-c3dc229fb4e8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "99ef02f3-70ba-4661-b38b-c41b4694ea17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69236ed-0919-4541-ad89-d07093e0df1a",
        "cursor": {
          "ref": "855d296a-cc59-40cc-8d4e-9747938f9a48",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0f24fb0a-e94d-4faf-b457-ea9d2eab963a"
        },
        "item": {
          "id": "c69236ed-0919-4541-ad89-d07093e0df1a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5c6e971f-ce0e-463b-b5d3-c34fbdf24561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cb8609-fccf-4e7c-adf5-73dece217c64",
        "cursor": {
          "ref": "e20185d2-e1bb-49c4-acf7-f9731ddeff04",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6ef3066c-ed7f-477f-a0c3-a74ec57ddc96"
        },
        "item": {
          "id": "47cb8609-fccf-4e7c-adf5-73dece217c64",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "65605330-cbc7-48ef-acd3-e5f526c51778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa175fd0-2509-490b-9e77-77a1bb967eca",
        "cursor": {
          "ref": "f8e74c87-6d27-42de-8b48-8ff9328f1567",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ad059170-08e9-4a39-a42b-15cb9b08d18a"
        },
        "item": {
          "id": "aa175fd0-2509-490b-9e77-77a1bb967eca",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "56b1eef4-7cdd-4ac9-910e-ca12fa71bcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be67b162-2aca-4fb1-bfb9-3b0b1e4817a0",
        "cursor": {
          "ref": "96136f91-8645-403a-bd0f-9f6628e94405",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1336a260-2eb5-4b10-ad52-178f70143c46"
        },
        "item": {
          "id": "be67b162-2aca-4fb1-bfb9-3b0b1e4817a0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7fa57d69-4d9f-41fb-9eee-a02b94d121db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5aeab6-9bd3-402d-a488-42a7f90ceac5",
        "cursor": {
          "ref": "d79597f4-8774-4910-8ec2-69c95a3473a3",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b44f8c1b-cfd3-425e-af1a-a03601f0f8d7"
        },
        "item": {
          "id": "fb5aeab6-9bd3-402d-a488-42a7f90ceac5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3375b496-7f09-4373-a7b3-b0c2a38cfbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4bc53a-348c-434a-80ae-d78198d22967",
        "cursor": {
          "ref": "760bb724-a6eb-443f-a19a-dfb4f3037467",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0f3871a6-696e-4200-adc2-a06e4b357817"
        },
        "item": {
          "id": "bc4bc53a-348c-434a-80ae-d78198d22967",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "43ceb565-00ab-4bd9-9b04-9d9ae05912d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1b2779-ebc4-4b4d-a27f-d616b7d583d8",
        "cursor": {
          "ref": "416bf975-4f08-4fdc-a98d-8c970b9c0c76",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "06d9781b-9c99-4999-8db1-391b6c8bbdc2"
        },
        "item": {
          "id": "8a1b2779-ebc4-4b4d-a27f-d616b7d583d8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "be4afee3-fa97-4315-b713-c0ed8ce67bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9a1ebc-33e8-4359-a426-f20d7d0d0abe",
        "cursor": {
          "ref": "ad3a5e76-3991-48cd-9a83-8c0cbf6abca1",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "820cd0c6-6ee1-4209-9c31-52ca6d146a37"
        },
        "item": {
          "id": "4d9a1ebc-33e8-4359-a426-f20d7d0d0abe",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8b5f9474-0b7e-47f9-9867-1ab91ebd74ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61aed577-2890-4b84-9f0a-7f94123e27e2",
        "cursor": {
          "ref": "24f6d0b7-d4e0-47fb-98bc-533948548816",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d46377e0-aa43-4087-aabd-34016b447db1"
        },
        "item": {
          "id": "61aed577-2890-4b84-9f0a-7f94123e27e2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "77c0c972-0207-4011-9379-fb27b4a38fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d37ecf-6b91-4f4d-a858-1d8517a4227f",
        "cursor": {
          "ref": "a7ade310-8eff-47a4-9b2a-37193c57d288",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f08fc070-a83d-4e06-896f-6123da579c5c"
        },
        "item": {
          "id": "65d37ecf-6b91-4f4d-a858-1d8517a4227f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c9dd3a3f-415a-4558-ae85-5bb7b673069e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6635dcab-e342-4afc-b1c3-facdeef4b6f5",
        "cursor": {
          "ref": "28773169-0578-42a0-b57c-887f011aacad",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fbce15e5-833d-4bbe-8595-1a8c9feafad9"
        },
        "item": {
          "id": "6635dcab-e342-4afc-b1c3-facdeef4b6f5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0a919153-ef43-4b0f-8aa1-baa5f281e7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470fa227-a2c2-4330-86b6-0c618758a9f7",
        "cursor": {
          "ref": "844b7847-c19e-4798-a47b-1269d1baedaa",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1c01c7b3-f038-4981-9c7e-853b7e01c139"
        },
        "item": {
          "id": "470fa227-a2c2-4330-86b6-0c618758a9f7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f24865e1-4a62-4381-a730-501c5ddaea9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e577481c-5c77-440b-9484-52263067053e",
        "cursor": {
          "ref": "88a51e94-9329-4a92-94d3-298a82b18e85",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "60fe7ccd-0986-4d20-ace0-0e9ab9bdf35b"
        },
        "item": {
          "id": "e577481c-5c77-440b-9484-52263067053e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6dd093cd-7fcf-4e48-9f7b-157e98a9e15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1b6aa2-4dd1-4d42-ba75-ef3626e5e683",
        "cursor": {
          "ref": "8b544de9-8d84-4f3f-aa47-1d44336ec6af",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "06869c19-a14d-474f-b0a1-ddcc25721823"
        },
        "item": {
          "id": "8d1b6aa2-4dd1-4d42-ba75-ef3626e5e683",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1a7a4aeb-b5fc-40e4-a0f7-d99ff06f3154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f321ce-6bf3-4899-8aeb-c22390560bcd",
        "cursor": {
          "ref": "9d047897-ff01-49ac-aef9-0f06fbd7a3f8",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3ff29f1e-6a5c-4d9a-8998-15bd4047c127"
        },
        "item": {
          "id": "77f321ce-6bf3-4899-8aeb-c22390560bcd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9cfb174a-d896-48fd-9aab-6864f5987e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ade0bc-042f-46cd-beb5-db55f3c7386c",
        "cursor": {
          "ref": "89eaf9a5-67be-4cb4-9551-475cd8b9464d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8e06c084-48d4-489a-a1c1-9baf0ac45f0f"
        },
        "item": {
          "id": "e2ade0bc-042f-46cd-beb5-db55f3c7386c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6f14b8c7-37f3-4142-aaa5-277e640f4b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1749ac7a-431e-4fbc-91d8-53717e33e920",
        "cursor": {
          "ref": "9ad8b969-f6e9-468a-a71b-4a884f1bb8ad",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7afbf6dc-9ba3-45c7-8f02-5c240a4abdcd"
        },
        "item": {
          "id": "1749ac7a-431e-4fbc-91d8-53717e33e920",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a755fd11-b80d-4f96-b355-604fc8ed52e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f143889-0ae5-4750-9888-dee4ce94dc78",
        "cursor": {
          "ref": "61a52359-9648-4787-ac6e-2272e9067bec",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "61ef54dd-6c4d-439b-b13e-5d260c429e92"
        },
        "item": {
          "id": "9f143889-0ae5-4750-9888-dee4ce94dc78",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "098573a4-a298-4f49-b81f-3ae83f4fb1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66f6c43-29d1-440b-afd0-29ae8a4ab4bc",
        "cursor": {
          "ref": "d20da86c-38bd-4b09-bedd-956c0d7c3ea0",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "facbec50-b1f4-4f7f-884f-9ad9c39b3b6f"
        },
        "item": {
          "id": "d66f6c43-29d1-440b-afd0-29ae8a4ab4bc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6ac6063a-9a2f-4d76-a090-cbd3bce31d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e509ece-a2a7-4844-bcdf-01e09c3bfb78",
        "cursor": {
          "ref": "a54fd90a-2637-465f-aca9-484e96ae9823",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3dc82afa-3898-449d-b992-b08275c66f02"
        },
        "item": {
          "id": "0e509ece-a2a7-4844-bcdf-01e09c3bfb78",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "48043bc2-c1f6-4945-bcdb-228e0f0dc913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05a5e5c-6901-437a-93e4-3dfa5657a1cd",
        "cursor": {
          "ref": "74617252-8db7-489f-9b6b-40bb7482ed26",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "df9093a6-4785-48e3-8e1c-369089235f9e"
        },
        "item": {
          "id": "b05a5e5c-6901-437a-93e4-3dfa5657a1cd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3e008d88-ef4d-40dd-80c4-9785df5d40f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf15ab24-55c9-4e65-8c04-e20868c0985c",
        "cursor": {
          "ref": "167f35e3-6531-4b71-aa06-cece698f88da",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "533472b7-6941-4516-8534-b905878fd4bd"
        },
        "item": {
          "id": "cf15ab24-55c9-4e65-8c04-e20868c0985c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c15364c9-e2ab-4d4c-8764-f690f299cbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f29842-6145-4fe6-9fff-ecd94137fb40",
        "cursor": {
          "ref": "d4462a0f-4ccb-4147-a7f8-9c06407bc91d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a3dfd72c-458b-4175-9303-503f68740d88"
        },
        "item": {
          "id": "16f29842-6145-4fe6-9fff-ecd94137fb40",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "65d3ff06-8c7b-4cd2-9235-7679030e3906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86bc8cf-0ff5-4286-aef2-cc42414121f6",
        "cursor": {
          "ref": "44f99a5e-7cb0-4484-844a-ba8de29b93bc",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c346b1b7-b470-4ce8-b34b-2f50214467f8"
        },
        "item": {
          "id": "a86bc8cf-0ff5-4286-aef2-cc42414121f6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d5350682-510e-40cf-ab84-24b74400766b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70b2060-4f3f-4c7b-977b-fb9f4890d5c7",
        "cursor": {
          "ref": "269d7c2f-241a-4c38-a361-28f8af9df149",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f418519b-19b3-4972-9f97-c57307aac5aa"
        },
        "item": {
          "id": "d70b2060-4f3f-4c7b-977b-fb9f4890d5c7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6245e39e-08cc-45de-8ffa-b9fd1f21b011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55f4fd2-9d21-40c9-baed-7bfc4b9bd86e",
        "cursor": {
          "ref": "ac80dab6-847c-4314-80e9-d0f11e46b48e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "38647f2e-6bdf-41cc-b6bd-eb3fd64d0915"
        },
        "item": {
          "id": "b55f4fd2-9d21-40c9-baed-7bfc4b9bd86e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dca3214e-694b-42f1-95da-ad072f38969a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563c1806-f3f1-4623-8270-bc7322df0234",
        "cursor": {
          "ref": "1a7bff98-acef-4342-b69f-1a2dd8ded378",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "282d9129-89f0-4613-a0bd-a5dd4feb9018"
        },
        "item": {
          "id": "563c1806-f3f1-4623-8270-bc7322df0234",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3cb436b4-7557-4e37-8b01-1b38aeeabc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066ff3f7-0425-4330-9a8d-0a4206e672de",
        "cursor": {
          "ref": "c30aa126-1311-478c-8da3-32b29a15c816",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7935a3eb-8856-4534-839f-d9d64a4094a8"
        },
        "item": {
          "id": "066ff3f7-0425-4330-9a8d-0a4206e672de",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "89d6fe8f-5f88-4443-9fc3-092bbdcd4cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6b86d3-3615-4d89-8cc7-9e22a755732e",
        "cursor": {
          "ref": "45d750ee-cb6a-4e15-b145-290d0097b8d5",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "348811c1-d6b2-4a37-a12d-ff57da3301b1"
        },
        "item": {
          "id": "dc6b86d3-3615-4d89-8cc7-9e22a755732e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6f02875a-35f3-4aa8-b963-2fee529683e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc89416-dee5-4b11-99f9-43fc53b59811",
        "cursor": {
          "ref": "0d927aec-9d1d-4449-9889-7a8c059f2029",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "410c23c8-6378-4c15-9fd8-419d5c29670c"
        },
        "item": {
          "id": "bdc89416-dee5-4b11-99f9-43fc53b59811",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8e77d491-2f33-426a-aa0f-2a0553e86c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bed9f0-1caf-4c0a-bf47-7b9ced67086e",
        "cursor": {
          "ref": "49e9c173-e4b6-4424-9b65-7f16d7a48dd0",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4d9c4617-1b32-47cb-9a79-d9f216e1cfb1"
        },
        "item": {
          "id": "77bed9f0-1caf-4c0a-bf47-7b9ced67086e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6b8a4dd4-a811-4a7b-8c93-ad0996fd31bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040230bc-d6c2-47ee-a3d1-129e8ef87529",
        "cursor": {
          "ref": "75e4a2b7-0b22-4a3e-8d7f-7089b0f99fd0",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "92dcb5fe-e330-43a4-838a-db926b3a5fc7"
        },
        "item": {
          "id": "040230bc-d6c2-47ee-a3d1-129e8ef87529",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6829f350-f73a-48e4-a670-b89dbdbb9fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "dcaffadd-2192-4517-9646-a33f5a935e78",
        "cursor": {
          "ref": "3f3be874-8274-47c3-9851-856dc0f5355b",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "02a0b334-b503-42fe-ac59-d9b487b89cc4"
        },
        "item": {
          "id": "dcaffadd-2192-4517-9646-a33f5a935e78",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c3a993b4-4338-4e5a-aea7-a1682d3673bd",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdee18d-7c5f-4c00-ae45-db8831769e9e",
        "cursor": {
          "ref": "9c5423ff-6cb7-4c25-b1d8-5e7e668efe9d",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "20243f4b-e0b6-49ab-b598-9c261b6193d0"
        },
        "item": {
          "id": "acdee18d-7c5f-4c00-ae45-db8831769e9e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "73f13c20-5756-48d9-9b28-ccf2c7e85d8e",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "77dc7ba5-0dd5-4504-bb6d-071572eff324",
        "cursor": {
          "ref": "40f55f30-710f-4a38-a762-76066cc6824c",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "737c332b-28ac-4d5f-8611-2341c6b26ecc"
        },
        "item": {
          "id": "77dc7ba5-0dd5-4504-bb6d-071572eff324",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8da81410-fd21-4e87-ade5-26f179d0dd6b",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b191b9d0-1255-40cd-976b-84c90ed6f0db",
        "cursor": {
          "ref": "e0966448-9f68-4a00-bf12-53899d4faf54",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "410041c3-7643-4347-99e0-ea00711ec34b"
        },
        "item": {
          "id": "b191b9d0-1255-40cd-976b-84c90ed6f0db",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "288b2886-819a-482d-b9de-8a1b8878dfeb",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "900da532-7aaf-401b-aa92-4b313592fcc3",
        "cursor": {
          "ref": "e9406233-db82-4f7b-abe4-25d5676a393c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "30597dc0-a59f-4cd0-9c7c-c9b23f099e51"
        },
        "item": {
          "id": "900da532-7aaf-401b-aa92-4b313592fcc3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "19b7177f-cc8e-47bd-b3ef-bf7c8b471d25",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-03T00:38:08.111Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-03T00:38:08.111Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "313e6eb7-5c47-44eb-94f2-6e55054dc70b",
        "cursor": {
          "ref": "b569f5f0-af24-49d1-8915-640a96653e5e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f597e7e1-ae36-4d53-ac73-909f350be28b"
        },
        "item": {
          "id": "313e6eb7-5c47-44eb-94f2-6e55054dc70b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4acc8072-a30e-416e-8154-7708ac7f9d93",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b9b3ba-1375-4d8d-81fb-716e92fe2181",
        "cursor": {
          "ref": "49dea186-5c9f-49e3-80b4-55f5463b92f7",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3db599c4-eb79-453e-a00b-2ddcc48ed194"
        },
        "item": {
          "id": "78b9b3ba-1375-4d8d-81fb-716e92fe2181",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f3eb26f8-6485-401c-bb0c-47106fcc38a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079e0d64-9c99-461f-94aa-0d528393e163",
        "cursor": {
          "ref": "aed44996-e5b2-4fa1-ac59-e3ef9f6d989a",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4adec288-759c-4de6-a5be-2bc576255f2b"
        },
        "item": {
          "id": "079e0d64-9c99-461f-94aa-0d528393e163",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fe314e0a-7493-46ce-9cb8-c32cc117fe80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a2b82a-3ebb-4483-a529-f2ecc3c5436f",
        "cursor": {
          "ref": "d22fa6e3-0bd2-4e14-bfa7-02146760371f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0af109c6-cee9-47bf-b29e-f7a3273697a9"
        },
        "item": {
          "id": "d0a2b82a-3ebb-4483-a529-f2ecc3c5436f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bd1923d6-1b70-4501-8c11-2f7522c0d1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad4389c-9fa9-44f1-8410-ac526cec8645",
        "cursor": {
          "ref": "d9c783e3-ea30-440b-89ef-804fbf6d33bc",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "09615229-9a7b-4cd3-85c0-9a6c9983c617"
        },
        "item": {
          "id": "aad4389c-9fa9-44f1-8410-ac526cec8645",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "451e5bb1-d436-4dac-8d26-5fdb5cd7ed1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3915c592-7c97-4018-b43d-5e73df2bdeca",
        "cursor": {
          "ref": "88951733-02be-425e-8bba-580adc641f74",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8056be1e-544f-4ed7-840e-9fbdccf1b641"
        },
        "item": {
          "id": "3915c592-7c97-4018-b43d-5e73df2bdeca",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "139448f2-15ac-4023-9512-c843a8de655e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87294c07-ec05-48d1-873b-e3b8059dc439",
        "cursor": {
          "ref": "bbf34bb4-0ec0-4bc9-8c28-7d62fb8410d0",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5b25d5b7-304c-4fbc-bc05-d1f73ef48971"
        },
        "item": {
          "id": "87294c07-ec05-48d1-873b-e3b8059dc439",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7e059f8d-ba1a-44a1-b9a9-b5c95d54f9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8277c0-80de-43ba-8b95-bd873c95415a",
        "cursor": {
          "ref": "a80bfbc9-9554-4b56-8483-efd7ec12cf34",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f205b4d6-f5d4-4118-9785-20951d51cddf"
        },
        "item": {
          "id": "be8277c0-80de-43ba-8b95-bd873c95415a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "89f11169-4ae7-4619-b1fc-f116aa5ed1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e49db3f-6bee-4041-9bbf-108e3942119c",
        "cursor": {
          "ref": "2307a6f4-e458-41c5-a5f0-abc8518ee6d1",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "127d6529-b3bf-420c-9c42-6e347a26981d"
        },
        "item": {
          "id": "6e49db3f-6bee-4041-9bbf-108e3942119c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "402f4c5c-3b51-4156-9d29-1f4a6c68a9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ac938b-6b78-42c9-8833-f18813f483be",
        "cursor": {
          "ref": "8576076a-8454-455c-999a-c1852a741209",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b5dc2c38-6146-4eb8-9550-4f9232972d21"
        },
        "item": {
          "id": "09ac938b-6b78-42c9-8833-f18813f483be",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d8cde06d-1491-4a21-9b9f-55242b86f91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25c7dba-2231-41ee-9bdc-e9ea259f53a6",
        "cursor": {
          "ref": "fe4dbe40-5cf5-47b9-b935-f3ff3bf3bd91",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4f6defab-8fe2-49da-a7ab-f7a4091891a4"
        },
        "item": {
          "id": "e25c7dba-2231-41ee-9bdc-e9ea259f53a6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "41d40ae7-54af-44c5-95b0-03633eb0239a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e7c3a4-f9b6-4d72-a1e1-504699cf38aa",
        "cursor": {
          "ref": "70445d63-c54d-4d81-9a0c-88d8d557b3bc",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "269ee256-1ee0-40ba-9986-a7f9b5fd856c"
        },
        "item": {
          "id": "82e7c3a4-f9b6-4d72-a1e1-504699cf38aa",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eb3c4e47-d3c1-4067-b829-8f8e40d37b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8768bd54-36a4-495e-9068-be4b945db96d",
        "cursor": {
          "ref": "a1d29a50-3b0b-4d54-becb-130595db633c",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "651b64c2-e89b-443b-bba6-eb43446eb74a"
        },
        "item": {
          "id": "8768bd54-36a4-495e-9068-be4b945db96d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a5dc032f-bb1c-41b7-901b-6dc56a4e9adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00998f6-3e47-4078-bdae-923f05c22acd",
        "cursor": {
          "ref": "e503b897-e9c7-46d2-94a5-fb8b05496129",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "432aa259-7038-432b-9906-c6275fc3c33c"
        },
        "item": {
          "id": "d00998f6-3e47-4078-bdae-923f05c22acd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1e5e826d-5a47-479c-9e71-19581671a25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e87d99-a783-4fb5-804c-596b83e83889",
        "cursor": {
          "ref": "41916056-2414-46c2-94e6-7828e6e9dc12",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "55e2fc5c-e2d6-4869-a5f1-5e358369d726"
        },
        "item": {
          "id": "a8e87d99-a783-4fb5-804c-596b83e83889",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3182933e-b847-4e57-91a2-6137b2dac8b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "754f7a98-8abd-4939-a5eb-131c4e8e4b89",
        "cursor": {
          "ref": "5a20168a-3dae-46ef-b034-57942533d803",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7443f356-cfbd-4d98-94c6-15d86faa2e0a"
        },
        "item": {
          "id": "754f7a98-8abd-4939-a5eb-131c4e8e4b89",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "089d1588-435f-4a61-9345-6519f5369577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7786911c-3e00-4828-af22-273d1fe19a80",
        "cursor": {
          "ref": "d642fa79-a113-443b-99f5-2bc18d0b657f",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c9f64353-245e-4936-a3a1-e2854e604c19"
        },
        "item": {
          "id": "7786911c-3e00-4828-af22-273d1fe19a80",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4492cd84-dc75-4cbf-ae68-26059f4d444a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ce8c32-89d3-4b0b-a428-1fbca4630cf7",
        "cursor": {
          "ref": "b4a581f7-f5cd-43c3-93be-17a65cce8bfb",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "93aa4fa7-0f3b-4478-8981-43c01788b7c9"
        },
        "item": {
          "id": "37ce8c32-89d3-4b0b-a428-1fbca4630cf7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b0730617-7e05-45e5-b038-8d093f92ac3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2983e4c4-db8f-4dee-8a4c-1d023f8ae06b",
        "cursor": {
          "ref": "d12ba94e-dec0-4ac5-9a70-92877fd22f59",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fa970eb3-43ce-4251-b443-12d88e6c12fa"
        },
        "item": {
          "id": "2983e4c4-db8f-4dee-8a4c-1d023f8ae06b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "270e4089-14a2-4f7d-bc49-a1595b07e4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cf4cc6-1468-45ea-875b-362eacdb7496",
        "cursor": {
          "ref": "b6960552-a356-4161-afff-c88c0ebd686e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "66e0dd26-d78d-485a-a29f-b3e7e3d69de4"
        },
        "item": {
          "id": "50cf4cc6-1468-45ea-875b-362eacdb7496",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f051286e-c23f-4df0-8221-127dfdeb231a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372a947b-16ca-4f5c-aabf-d95b18ceedd6",
        "cursor": {
          "ref": "e4f179ab-1b2d-4ef5-a8fa-bf991ecee405",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "03a4cc2c-62d5-408f-94cb-9883551c5faa"
        },
        "item": {
          "id": "372a947b-16ca-4f5c-aabf-d95b18ceedd6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d223b3ab-22b1-4391-b9b2-454a34f1e28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09672c6-b3a2-48bd-86f5-011e23d3c10b",
        "cursor": {
          "ref": "e433324a-97a9-4373-8960-1b88aeca4e79",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3f3a5c7e-ccdb-4855-a046-a3d5c507af40"
        },
        "item": {
          "id": "a09672c6-b3a2-48bd-86f5-011e23d3c10b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "484a1187-8a02-47e9-98d8-75b9d0c912ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58fc670-26a0-40ef-b040-f238d1532eeb",
        "cursor": {
          "ref": "1eadeb73-eba6-4eae-9142-7a6718fe557a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bad49cd4-ffb0-446e-a08c-f0d8675a29cf"
        },
        "item": {
          "id": "e58fc670-26a0-40ef-b040-f238d1532eeb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6f1ac98b-0e90-46eb-9015-007b82f4b8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cc0bac-1b92-4137-99d2-3769dddd5f60",
        "cursor": {
          "ref": "2e940db7-40d6-4833-af05-046938a1d74d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "86253a86-19bd-4e97-b6d9-4c07b5c89c78"
        },
        "item": {
          "id": "82cc0bac-1b92-4137-99d2-3769dddd5f60",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dff58e1c-2d44-4498-91fd-6f453943aa98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8768f0-1e7e-4d6c-9794-1b550263005b",
        "cursor": {
          "ref": "f2ac106b-a298-41d3-8bf9-997a2ccf190d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a445da35-b5c4-45dc-a69d-b31095da79b3"
        },
        "item": {
          "id": "3e8768f0-1e7e-4d6c-9794-1b550263005b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "699efd11-28da-41a3-8ca8-7ceb0b65cb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c5a997-a261-42d7-a070-88ecaeeec47c",
        "cursor": {
          "ref": "ea970630-72cb-46d9-b934-0d29a9de7025",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e1b0244a-7419-4f8b-a9c6-9d763cdb869a"
        },
        "item": {
          "id": "c3c5a997-a261-42d7-a070-88ecaeeec47c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "191a532d-504b-43cf-8d00-17210176b729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efee58b-fc6f-4275-8b2b-46beb4065477",
        "cursor": {
          "ref": "81a907f2-df48-4c4e-bd5e-18f297425a4a",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1cfaa756-10e4-423b-975d-82b6382acf75"
        },
        "item": {
          "id": "0efee58b-fc6f-4275-8b2b-46beb4065477",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "58d03926-8cf3-4b48-b9af-ee0c35c03cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62ebf5a-3617-4933-afd7-bed5f5ee4d8e",
        "cursor": {
          "ref": "21bbf567-ab02-470e-b062-1652eb6f09cb",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9992fa7c-98d0-4ecc-9099-28ca8f53aa05"
        },
        "item": {
          "id": "b62ebf5a-3617-4933-afd7-bed5f5ee4d8e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1cc1cd8c-bc91-4841-934e-56253282c6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad7055b-f9ec-45e7-ab46-23c05848c2ea",
        "cursor": {
          "ref": "8fdba8d4-9de1-42a5-bd1e-b85c0eeaa7e3",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "02d44fd8-3c89-4654-a73f-2487db36510f"
        },
        "item": {
          "id": "9ad7055b-f9ec-45e7-ab46-23c05848c2ea",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9836a0ef-4ba6-4148-9b99-b87f5a5d0109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9694b11d-f52b-457e-91ea-30f9b84ca5c0",
        "cursor": {
          "ref": "6e149b6d-64f4-4340-aeda-280def464ed6",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c7f50fe4-eba6-42d5-898a-816cca66ed39"
        },
        "item": {
          "id": "9694b11d-f52b-457e-91ea-30f9b84ca5c0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "deec9187-5159-4050-8e28-53e1f52597cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae58223-9700-46cc-ae95-7a355f3efb33",
        "cursor": {
          "ref": "b6a8768e-b540-4a00-ae29-38af049a1e3e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2c220dfc-3c55-48f3-90b4-24ba8e570ce4"
        },
        "item": {
          "id": "6ae58223-9700-46cc-ae95-7a355f3efb33",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1d04c920-4341-474f-8b83-561f110ce3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27b4ace-65da-4d25-9ba8-7d1feb949c72",
        "cursor": {
          "ref": "a1938e2e-5a2d-47ad-8312-7fdf54948801",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b51a0053-e537-42b3-858a-b7f5506be460"
        },
        "item": {
          "id": "d27b4ace-65da-4d25-9ba8-7d1feb949c72",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "70d0242f-3eea-405f-aa65-99465f7455e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80de523-3b61-4e19-8295-eb18238e74f5",
        "cursor": {
          "ref": "cb15d22c-5025-45a7-ad7b-488193939128",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8177dcbf-c2b0-4873-9a41-f3b133aca28a"
        },
        "item": {
          "id": "f80de523-3b61-4e19-8295-eb18238e74f5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "33d02757-2086-4abb-87d6-93b382eec928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aeedcd6-3cfe-41f3-bf71-ee725db8fc5a",
        "cursor": {
          "ref": "a526d093-6b73-47b4-9243-bde44d1ae251",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ba554976-7b57-4ab2-a401-820d3a948d8d"
        },
        "item": {
          "id": "7aeedcd6-3cfe-41f3-bf71-ee725db8fc5a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "96107af8-e10b-4a85-a006-065871ba93b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66ef67d-4dcb-4db4-a4c3-f85c3ac7419b",
        "cursor": {
          "ref": "05e6cabe-32b1-410f-8c57-2f6a3a8223da",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c42a1c2f-14be-4bd8-b9ea-cf3c940cdf22"
        },
        "item": {
          "id": "f66ef67d-4dcb-4db4-a4c3-f85c3ac7419b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "13887d6c-dcc3-424c-9e41-72b9f864099e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e6850a-fd70-431a-a576-70137b97b736",
        "cursor": {
          "ref": "062e3e74-f95e-4d51-9d7c-91f8aeb58a0d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "96931275-9c59-49f3-92dd-758423638660"
        },
        "item": {
          "id": "47e6850a-fd70-431a-a576-70137b97b736",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d3ddef7e-2a2a-4a49-ab8c-72e04b5c808d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a41e51-3c19-4281-924e-1aee725688a8",
        "cursor": {
          "ref": "b6e56e51-b6fa-4351-9ec5-658d2206d8d8",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ddfe37ca-0fae-44ab-9cab-cd26bfca2497"
        },
        "item": {
          "id": "a7a41e51-3c19-4281-924e-1aee725688a8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5889c5c7-b6ec-4489-bea9-439a71718817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6292f9-e070-4e59-b2e5-fd9adbaae3a2",
        "cursor": {
          "ref": "d797fa91-3881-438a-b4ed-f39af4f682ce",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "822ac7f4-ac72-4177-aaf3-cf50aa48d23b"
        },
        "item": {
          "id": "da6292f9-e070-4e59-b2e5-fd9adbaae3a2",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7ba8ca03-c6e7-41d7-ba86-b48d83b9b446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968d0cb8-3d21-4bd7-bcb5-795a87733656",
        "cursor": {
          "ref": "484b9135-7db1-4642-9d3d-0ba9c535ceb3",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "102fcfab-58c2-47e7-8bba-56b0d1ac1acb"
        },
        "item": {
          "id": "968d0cb8-3d21-4bd7-bcb5-795a87733656",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a408940-4c2e-4cf2-b79f-d17c274ea0ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd85454-82b6-4b42-9df5-d9fe3dad6722",
        "cursor": {
          "ref": "beb141e0-c4c0-43ba-bab4-c363e4c86785",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "25f0afd3-16f2-4c7f-a461-09f4fe38394a"
        },
        "item": {
          "id": "ecd85454-82b6-4b42-9df5-d9fe3dad6722",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a4533cd4-51a9-48b4-9d36-f32130aef40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4f44a3-a128-4186-8e1d-1e3f32fd2002",
        "cursor": {
          "ref": "63b3e601-22bb-4278-8483-9e82103aa8ec",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "895a54da-7895-4c00-8368-8c85538d86c0"
        },
        "item": {
          "id": "aa4f44a3-a128-4186-8e1d-1e3f32fd2002",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7fa05925-75c7-42f0-9799-387007bebe86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15973f80-912a-4d5d-9f74-ef60acf650d2",
        "cursor": {
          "ref": "aaf80813-7298-46a2-8ede-0c85ef3b2c9b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "907828ec-d545-44d8-b193-dc2fc6d1e7c7"
        },
        "item": {
          "id": "15973f80-912a-4d5d-9f74-ef60acf650d2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "13d301d4-8e83-4d63-95d9-88a77f99b9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae3e101-5e2c-47c3-9ad1-d49244ac8a6f",
        "cursor": {
          "ref": "99095aad-ed96-436a-b809-7edbd595f37d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "138df52e-6b89-480e-9730-89dcdd945f2c"
        },
        "item": {
          "id": "1ae3e101-5e2c-47c3-9ad1-d49244ac8a6f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dacb7e0b-7136-460d-9217-f1b046911fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced31268-9602-4252-a016-026655f4a195",
        "cursor": {
          "ref": "6270ab58-9960-4aff-9b67-7b954a1f5d24",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8b4dbeac-5dea-470f-bfdd-bc9749013159"
        },
        "item": {
          "id": "ced31268-9602-4252-a016-026655f4a195",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d2768c18-b9bc-4e3e-88ee-b3fda0838e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1961d2f9-bafb-42cc-bd40-e6481d3a1f7b",
        "cursor": {
          "ref": "6196019b-c271-4949-ad1e-f1319d36ea9d",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9aee4502-027a-40e2-9984-9e2dcd09446e"
        },
        "item": {
          "id": "1961d2f9-bafb-42cc-bd40-e6481d3a1f7b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "79393386-4845-43a8-8214-f3e9274633ff",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e7020097-849e-4e4d-b1ef-4db09e0a177c",
        "cursor": {
          "ref": "378cb607-e4a4-4b8e-b660-74bf25837d8e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0b35cacf-8764-4e55-a209-2dc0118924cf"
        },
        "item": {
          "id": "e7020097-849e-4e4d-b1ef-4db09e0a177c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "53d18579-d948-4f9c-a7b0-1693dbf42fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b73dce-6877-47a8-8104-d71ca8308c58",
        "cursor": {
          "ref": "3913485a-bbcd-4cb0-a92c-8f3d3f32ed5a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "88391981-e59a-4aaa-9e39-24b88903c44a"
        },
        "item": {
          "id": "18b73dce-6877-47a8-8104-d71ca8308c58",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "56a975e7-37ee-44f2-b93f-42bedea76325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d84455c-46e7-4455-8c5a-d2522e6fe787",
        "cursor": {
          "ref": "ff39a5de-0ef1-46a1-808b-78de9f79ad2e",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8e77d233-71b9-431b-a5e8-2695e392faf2"
        },
        "item": {
          "id": "8d84455c-46e7-4455-8c5a-d2522e6fe787",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7b33ff80-1c02-4dff-8fde-f2a5f43005a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3dab18-b72f-4328-90b3-6f5dcfefb053",
        "cursor": {
          "ref": "636ebb63-81aa-4232-965a-3b0903be9e15",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "739a99a0-0288-4876-a096-b974e8935718"
        },
        "item": {
          "id": "5d3dab18-b72f-4328-90b3-6f5dcfefb053",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f43e2dc7-ec1c-42aa-9123-5c8de9729040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8f62bc-49c5-4a29-82b3-830a233de5f7",
        "cursor": {
          "ref": "21e1f609-319c-439d-b76d-eeb61f69ca90",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "949dcd23-41a9-4fe5-8fed-b3175072344b"
        },
        "item": {
          "id": "ad8f62bc-49c5-4a29-82b3-830a233de5f7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "60ec09b9-121e-4885-884d-b3b2808d314c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20015c88-3b89-4100-9e40-b4b28274d37e",
        "cursor": {
          "ref": "8f8ac3ca-3cd1-493d-b5ae-0e8032d88678",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "233aa9ae-6aa5-42a9-9313-863c709c36ba"
        },
        "item": {
          "id": "20015c88-3b89-4100-9e40-b4b28274d37e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2f5b24ac-a47a-4028-86e2-9fa9a075d454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69f2c14-d71d-4223-93e1-e1000264147d",
        "cursor": {
          "ref": "980d17ab-3055-4d35-8d07-8340936cdd2c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d20d51cc-f516-4e99-b1e7-e4e7d724640b"
        },
        "item": {
          "id": "d69f2c14-d71d-4223-93e1-e1000264147d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0a8bb4d2-a0a6-4cee-b023-db828edcd5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6044c00-a55a-44ee-8a75-c97e382bac02",
        "cursor": {
          "ref": "cadd142f-b3d7-4ea6-91e2-031172f3c9e1",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "83e14602-ea2b-4650-936b-e4b38703b57a"
        },
        "item": {
          "id": "c6044c00-a55a-44ee-8a75-c97e382bac02",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "73f0c758-5455-4e7c-af95-02e2b82c51c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b43fc1-1f20-4f57-a596-39deb58bbd17",
        "cursor": {
          "ref": "896c82c8-e5fe-4b53-a189-0e7019720f6f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8a719b84-be28-4d83-a88c-db4616fd43cb"
        },
        "item": {
          "id": "62b43fc1-1f20-4f57-a596-39deb58bbd17",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "14406d75-a921-4aa6-91d2-481967a9d942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9126982-cd24-4406-a9b1-36f9114cada8",
        "cursor": {
          "ref": "cb40530e-4603-4aa7-aa81-7823761917e0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d2c452a8-0058-4e7a-923b-ab03a1ac7513"
        },
        "item": {
          "id": "e9126982-cd24-4406-a9b1-36f9114cada8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "27ce5faf-fb60-474c-9c92-afe2f6ec84d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4d6b05-e5ea-4583-9b0a-98cf72a54a87",
        "cursor": {
          "ref": "974798d2-f678-4276-9ef5-ec34cfb2ae71",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a36e4ff7-5ccf-4341-8b9e-8292d142b691"
        },
        "item": {
          "id": "9f4d6b05-e5ea-4583-9b0a-98cf72a54a87",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9eb9a63b-08a4-4440-ac4e-694e5e1f69e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f02c3eb-1455-48ff-bcd1-b2cf70d0f6f6",
        "cursor": {
          "ref": "f6ce993b-185d-436e-8cac-607e54df5669",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "721303bc-18d0-49a1-8df1-ea86a864f2b6"
        },
        "item": {
          "id": "9f02c3eb-1455-48ff-bcd1-b2cf70d0f6f6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1002b9db-e8c6-4278-8b65-db53863158e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb8b8ac-5a33-40c4-a452-223f22fe59a5",
        "cursor": {
          "ref": "ff92c5da-d380-4f82-9861-cc0e6be10990",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "509a4ed8-f6ec-425e-b8a3-0c18e4c60966"
        },
        "item": {
          "id": "8cb8b8ac-5a33-40c4-a452-223f22fe59a5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b72ee55e-1a63-45a1-b537-a196e1e308bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e69a18-e904-4552-91c8-0b720f4def5c",
        "cursor": {
          "ref": "058d0bc4-ab03-44c9-83b4-a3617ecbfc84",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "67257674-a0ec-4736-b6d9-23e3f2f8dbbd"
        },
        "item": {
          "id": "e3e69a18-e904-4552-91c8-0b720f4def5c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "dc6160c1-e21c-4c9a-960a-467405f261c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abde66c0-ea10-4ffd-b6c6-12e7e6409f48",
        "cursor": {
          "ref": "31e56590-d276-43ae-9aac-bb80ab48715e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fb1460fc-981c-427e-849b-dd533b8902ea"
        },
        "item": {
          "id": "abde66c0-ea10-4ffd-b6c6-12e7e6409f48",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b307f75c-dc19-4c5e-af17-de29459660d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859baa14-0f3e-4e01-9c7d-5bd377b3b49e",
        "cursor": {
          "ref": "6f6f763b-976d-4ed7-a335-92c8c69734d4",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f2240ffc-f815-400d-abf4-7954ede3b865"
        },
        "item": {
          "id": "859baa14-0f3e-4e01-9c7d-5bd377b3b49e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "119100e7-9da6-4d72-81a9-278c401dbffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e003b8-0e2e-486a-879f-a995d873cc0e",
        "cursor": {
          "ref": "45ee414c-3a43-451f-ba50-b334a74c58b3",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cc96889a-e3aa-4de6-b935-e4c11851e113"
        },
        "item": {
          "id": "58e003b8-0e2e-486a-879f-a995d873cc0e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "29e4dae6-a1af-4c33-9c44-535b1465bd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb19197-29f1-4b94-971f-8fe79805f07a",
        "cursor": {
          "ref": "35c4b79b-d3ae-4105-911d-db3a171a4473",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1fc09964-3aed-4d4c-bd4c-f3a585a663b1"
        },
        "item": {
          "id": "adb19197-29f1-4b94-971f-8fe79805f07a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e273caac-3231-47aa-bb28-ec3fa1e486b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4747fcf0-8f19-445b-ad98-31a93f4fc532",
        "cursor": {
          "ref": "40bd3607-0287-4c76-b4d3-fc653a12caea",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "68c56a52-5c1d-42b4-a2e8-9ebf264b157c"
        },
        "item": {
          "id": "4747fcf0-8f19-445b-ad98-31a93f4fc532",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e2ba7c0a-304f-431e-8745-524d071185a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e0ec7f-51ab-40ed-af87-fae0066fc281",
        "cursor": {
          "ref": "43adcb02-3a9d-48ca-98ce-39378de2aa0d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b1f0c4c7-9c1e-4055-8c34-71a6b1a08b52"
        },
        "item": {
          "id": "60e0ec7f-51ab-40ed-af87-fae0066fc281",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "02ca5c6f-50a4-4bb5-b553-69f0e33cf2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d1d824-4b32-4602-bfae-64f0d785c860",
        "cursor": {
          "ref": "cb27c42e-45aa-4625-8327-fa8686c738da",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2407c15-9d4c-4b4f-9652-b9b66c15e19a"
        },
        "item": {
          "id": "26d1d824-4b32-4602-bfae-64f0d785c860",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c1e97c2d-854a-43be-9400-0953a184e9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4854236-e78b-483c-a998-310247b74982",
        "cursor": {
          "ref": "02867dd3-99bd-461e-a1d0-67841de6cc6c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8fa80b63-272a-4e1a-b55d-8e72c09799dd"
        },
        "item": {
          "id": "b4854236-e78b-483c-a998-310247b74982",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "957f6536-89d5-4bed-b5c2-97f48157a11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682a5af9-1dfb-4022-91d8-2727e2c85e0d",
        "cursor": {
          "ref": "43dd9bed-053e-4d8e-b19f-abba98b49010",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3c87f78a-b276-4ace-8162-0b089ed61c6d"
        },
        "item": {
          "id": "682a5af9-1dfb-4022-91d8-2727e2c85e0d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f31c1614-47ec-40f9-923c-338d16ac95d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05eaa677-5883-4729-9dc4-93787e8fbfa0",
        "cursor": {
          "ref": "8d1a4fbf-6ab4-4e22-b2fc-d848f3622b0c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "151a66e7-34c2-459e-84d7-704047ecbd8e"
        },
        "item": {
          "id": "05eaa677-5883-4729-9dc4-93787e8fbfa0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d753620d-2c00-4ae5-8766-2367a6df0101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9aa0e1-0737-4ac3-963a-c56a74a39e17",
        "cursor": {
          "ref": "b8adf257-41fd-4606-bae0-bdabdbf17908",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a9e80dc9-24b2-4438-96b0-0af0155e8605"
        },
        "item": {
          "id": "9b9aa0e1-0737-4ac3-963a-c56a74a39e17",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "dd76f275-6495-4692-9ebf-b5c53d8cd9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df364525-7488-448c-aa2c-8d3047bb5df3",
        "cursor": {
          "ref": "2d6e62c1-7174-45a1-a40d-f839643bca02",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fc7ee865-cefc-4c46-9db0-a110f472cb5d"
        },
        "item": {
          "id": "df364525-7488-448c-aa2c-8d3047bb5df3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "648f05ce-cabc-46e7-a717-6b7c50c7f1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7897957e-3f7e-40b2-a1bd-83f0d3fe9b53",
        "cursor": {
          "ref": "620cdb87-7ea3-46ad-b414-df4a2ce41bc5",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8b12d3b6-da0c-412a-b622-8526d5e8588d"
        },
        "item": {
          "id": "7897957e-3f7e-40b2-a1bd-83f0d3fe9b53",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7eaa53d9-bffa-4240-a1e4-103eff0cbe12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c456418-fb7e-48e7-9c0d-26b71cf127ed",
        "cursor": {
          "ref": "efddbeed-01c3-485c-8a13-f293571d7c9f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c22e0899-253a-450a-972d-3418e780ed53"
        },
        "item": {
          "id": "1c456418-fb7e-48e7-9c0d-26b71cf127ed",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5cd3b578-1e41-4ff1-a9ff-0d7c6bac9b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a119768a-b11f-474c-9f21-8797ede9811d",
        "cursor": {
          "ref": "a85bf0fd-adc5-4d0c-b3c6-b2e181612d97",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2468af75-8e0f-4e90-901e-963e99a2d954"
        },
        "item": {
          "id": "a119768a-b11f-474c-9f21-8797ede9811d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6f15b02f-80fb-40e0-a23a-e4e63848c5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d253758-c85f-4c93-b542-3483f29a66f4",
        "cursor": {
          "ref": "a247a47a-65e9-42dc-af28-39c19595a67f",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b8cc46fc-e68e-4b7e-8885-da004e41fe80"
        },
        "item": {
          "id": "4d253758-c85f-4c93-b542-3483f29a66f4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0802114c-592a-4e55-835f-a1ba6852b29d",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "71269194-990a-46b6-8ce4-d6cc189ceeb5",
        "cursor": {
          "ref": "5dd2860f-d593-4e4a-8408-d1eb30c93e13",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f3fa2a3f-4d7e-4b13-ae08-d67ebb5133f8"
        },
        "item": {
          "id": "71269194-990a-46b6-8ce4-d6cc189ceeb5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6cad5841-f35c-482c-8cf6-04d5da07538c",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "41b7c904-50f1-4ce0-b556-14eecc33a487",
        "cursor": {
          "ref": "c53bac97-7123-4dd3-a289-0c94fb905e39",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7da7d36f-1c3d-47af-8841-12343604ee5c"
        },
        "item": {
          "id": "41b7c904-50f1-4ce0-b556-14eecc33a487",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a4d44bd8-80c9-483b-8e2f-6f51f4211e60",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "36044d6f-0b49-4eae-a9aa-264bb7be3cac",
        "cursor": {
          "ref": "b74cecd7-7439-463e-a2a4-7865680c0198",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c8d7ddea-758f-467a-83dc-f9f46c03657b"
        },
        "item": {
          "id": "36044d6f-0b49-4eae-a9aa-264bb7be3cac",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6be4eb8e-a936-4d8d-887d-fc31cad09b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4425e8ee-3ec1-4a04-a098-a4cec168d58d",
        "cursor": {
          "ref": "9cf2007a-b782-4ff9-871c-a857abdb03b8",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "70123802-264e-4626-8446-eb2a3c05386d"
        },
        "item": {
          "id": "4425e8ee-3ec1-4a04-a098-a4cec168d58d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "82ce19eb-6a76-432a-9872-d41174a15bc7",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "df354547-1ec8-42c4-8114-969cd7fae0ce",
        "cursor": {
          "ref": "f98dea6c-b11f-4207-a5e8-593f64d494b2",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "24f81ee4-13e6-426c-baa7-463de8545cc6"
        },
        "item": {
          "id": "df354547-1ec8-42c4-8114-969cd7fae0ce",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "aa8653b3-655f-4b53-b424-569f9010a0c5",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "853a3957-7ac3-4cb8-b446-39873e5d4861",
        "cursor": {
          "ref": "fe33f733-0e05-48d0-b54d-2b8c0f55d184",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7ad09f03-06c4-4eb7-9ade-0ff4f628d57b"
        },
        "item": {
          "id": "853a3957-7ac3-4cb8-b446-39873e5d4861",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d8d4b2f0-fccd-4c3a-931c-2ed072692a42",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6ed7f11e-ce39-489d-bda0-6d8e8a021335",
        "cursor": {
          "ref": "efb48bd0-38ec-419b-a364-83f5385f49f0",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a7f93c7e-da83-45c8-8ca7-5737175003ae"
        },
        "item": {
          "id": "6ed7f11e-ce39-489d-bda0-6d8e8a021335",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2e06eca4-77da-4dc7-8116-6b874066f7d9",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "90bad6b4-df09-4736-aa3b-010ef4a6f04b",
        "cursor": {
          "ref": "455613f6-afd0-4fd8-8c1b-a247380203e8",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "871eb837-b421-4f59-9c1f-a700d00d0a5f"
        },
        "item": {
          "id": "90bad6b4-df09-4736-aa3b-010ef4a6f04b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c26dd860-d077-4222-8584-9e938df7d88f",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ba78cb67-2c42-44cd-ab1d-db39e8484fa9",
        "cursor": {
          "ref": "7f1e0a9a-51bf-4e31-9186-b439239963b4",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b0eddda1-0d56-4acd-975e-fe89f899d05c"
        },
        "item": {
          "id": "ba78cb67-2c42-44cd-ab1d-db39e8484fa9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b1b8cfcc-b45f-41a3-a075-cd6c4ece9fe7",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "db655991-023d-4d49-b776-9f1f7a715abc",
        "cursor": {
          "ref": "3b0d5433-f55d-4e30-9ae2-4607cd87cd1d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6974f5e6-feaf-4187-95d2-269133e282c6"
        },
        "item": {
          "id": "db655991-023d-4d49-b776-9f1f7a715abc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6fb65e95-13d7-46df-a5c7-7f1455ecddb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5056f6b4-de51-43a1-8117-a6f620bc4d22",
        "cursor": {
          "ref": "9b05a24c-f46c-4552-8e80-927aab5fd8f4",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "20ebce05-523d-4e8a-a628-e3eca21ec326"
        },
        "item": {
          "id": "5056f6b4-de51-43a1-8117-a6f620bc4d22",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "14b67bb3-10e0-4a73-8c58-581d8340d9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3368fbde-a8e4-4685-93cf-8d34694937d8",
        "cursor": {
          "ref": "3a26b6d9-fd2f-496c-a6a7-c4e5a5c469aa",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bb7a4ed7-7224-472e-9f49-8625ea331abb"
        },
        "item": {
          "id": "3368fbde-a8e4-4685-93cf-8d34694937d8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a3d2d312-511f-496f-843e-e921d946f45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50557281-171d-4fc2-b36c-7008bbf70ff7",
        "cursor": {
          "ref": "86752915-8231-4fcb-ae3f-ee66485d282a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "291f22a6-d041-4081-932f-8fac564eb2c5"
        },
        "item": {
          "id": "50557281-171d-4fc2-b36c-7008bbf70ff7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "749dcd03-5a4d-4cc0-b3f4-9c63ea8da0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edc3ce1-5601-4850-8a22-a5e07ba07dec",
        "cursor": {
          "ref": "6de75e04-d62b-4503-adfe-59cf1eeb5e81",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "515fcade-0e3e-473c-825a-0227c3328323"
        },
        "item": {
          "id": "2edc3ce1-5601-4850-8a22-a5e07ba07dec",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dc4d05d1-363f-47c0-aaf3-bf7fcb90b19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728060a3-f42d-4653-882a-399582289286",
        "cursor": {
          "ref": "d9c4a8dd-892a-46f2-8a60-8be90f225ce4",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2c390066-1381-422e-9feb-60e6f7ec20f3"
        },
        "item": {
          "id": "728060a3-f42d-4653-882a-399582289286",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "782dd695-2639-4b87-a75d-7d6b72ff7ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8922ac4d-1920-48e8-9871-ef0ad3db6fb2",
        "cursor": {
          "ref": "bff40324-403e-4348-beb7-e24205c491f7",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9be08289-2b4d-4bb9-8691-a3965529a99f"
        },
        "item": {
          "id": "8922ac4d-1920-48e8-9871-ef0ad3db6fb2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4df557f4-4984-467d-8d4e-dc688578d97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefe3e8f-b83d-4928-b773-3d1fbb48bf42",
        "cursor": {
          "ref": "4b45cbf9-f2f3-47cb-9cd9-e21daf68d287",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fa86629f-b55d-444a-8d78-5b8cd5c2f0aa"
        },
        "item": {
          "id": "aefe3e8f-b83d-4928-b773-3d1fbb48bf42",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "05d03089-4d69-4de3-bde5-d474c177b94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6654f6-e0b0-4bcb-81d1-424ab0284997",
        "cursor": {
          "ref": "f6de1c7f-90ff-4cff-9755-ace863d6b13c",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c7f8153a-5209-4fbf-bc70-e8fc915c3a3e"
        },
        "item": {
          "id": "cc6654f6-e0b0-4bcb-81d1-424ab0284997",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "785ae141-5f87-49f4-b000-e59d0cfa15de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45117faf-096e-4ce7-b58a-6709335e614d",
        "cursor": {
          "ref": "36f0ba22-8540-4dec-8633-5934e13d8b01",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "617f6c0a-db2e-409a-81c2-2c6855711c86"
        },
        "item": {
          "id": "45117faf-096e-4ce7-b58a-6709335e614d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0939ef55-45c5-41ec-857d-01bb708511b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb9df71-bed6-493b-a9e4-4ef2e8e7aca2",
        "cursor": {
          "ref": "7bd218d8-de85-492f-9b96-2f8b3d7d7284",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "10339498-fc99-480e-ae83-00b532959f18"
        },
        "item": {
          "id": "deb9df71-bed6-493b-a9e4-4ef2e8e7aca2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f471d9e8-e670-42f4-8cc8-619164dc66a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5506c40f-a36e-49db-9cbe-0b67dfcb4094",
        "cursor": {
          "ref": "f7c59d9d-d6db-4875-a413-47c17d909db1",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1afddf32-85a6-4368-91e6-a6dd52cd23de"
        },
        "item": {
          "id": "5506c40f-a36e-49db-9cbe-0b67dfcb4094",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5821124a-a757-4e97-889f-a2811b8885d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65033303-b1b7-4966-8ceb-be9db5b211f3",
        "cursor": {
          "ref": "566dfcb7-5182-48be-992c-11c20ca9edae",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3923f3b2-e362-4e21-b548-36b1bddbc509"
        },
        "item": {
          "id": "65033303-b1b7-4966-8ceb-be9db5b211f3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1303c735-4e0b-4b0f-992c-43cc3b9329f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bd98b1-110d-496c-9617-8403b69ccafc",
        "cursor": {
          "ref": "2433e5e9-487c-4e14-a64d-adb4e8db8278",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bb3802b5-4227-4e7d-9c0c-038559e7e2a8"
        },
        "item": {
          "id": "79bd98b1-110d-496c-9617-8403b69ccafc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "441fe5f3-626e-4fa1-adac-0f4d457b61a2",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "13d5b7a9-1fd9-4371-8dc9-9e5e49f7ad63",
        "cursor": {
          "ref": "a7f3186b-93fd-4135-9d4b-7ef13aa87600",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4d449a91-a963-4560-b06d-c99b7a298bbc"
        },
        "item": {
          "id": "13d5b7a9-1fd9-4371-8dc9-9e5e49f7ad63",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "211628ab-14df-43d7-b5a7-465a7d12f34d",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "995a4b70-08e2-4080-9c6c-c537bef767d9",
        "cursor": {
          "ref": "6ae91f8f-75a9-49b2-837c-f4d15893ec13",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b015d3b7-18e3-4c14-893b-a728f80a499b"
        },
        "item": {
          "id": "995a4b70-08e2-4080-9c6c-c537bef767d9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "43cf071c-fd37-4902-9447-7c96c805cb07",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "10de215f-7887-48dc-89a7-e2fe1df05796",
        "cursor": {
          "ref": "ca933fde-074a-4326-bf88-8edcd9d297e3",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "17f2976b-7694-4601-8bce-0c9c6f92a408"
        },
        "item": {
          "id": "10de215f-7887-48dc-89a7-e2fe1df05796",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "57e6d38a-4493-4e2b-99f4-30ab8fbaae32",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d2634684-9568-44a0-b5e9-a0eea5378cc3",
        "cursor": {
          "ref": "107d56d2-97b7-42e4-9b0e-77b39fc28a2f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a1691ed5-2981-4a34-9820-4f2358c80d2a"
        },
        "item": {
          "id": "d2634684-9568-44a0-b5e9-a0eea5378cc3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "150ebd1c-0f2f-4351-86af-8adfe66902c5",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "bb25c730-6f68-40c4-8809-1432698fbaaa",
        "cursor": {
          "ref": "bf030ab7-9283-4b3c-a6da-3042da07cbc7",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "29103adc-8cdb-4735-bbbd-1d9a1a04abf4"
        },
        "item": {
          "id": "bb25c730-6f68-40c4-8809-1432698fbaaa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2b41587a-e3b9-4bab-85cf-15a1536c2e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb4dcae-3930-45f3-92e2-063f87dae46d",
        "cursor": {
          "ref": "ce4a157c-470b-42bb-ad93-f564d31f087d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cbc487eb-fcad-4f22-81c6-6efaf0a49609"
        },
        "item": {
          "id": "fdb4dcae-3930-45f3-92e2-063f87dae46d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "19a276c7-b299-43f3-b0a5-8c908483ee6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec0d864-62df-41b2-944a-e3ee2513799f",
        "cursor": {
          "ref": "e601cf97-1df2-4bdf-bd7e-0f3c2fa1626b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ebaf04d8-55ce-4188-939d-7d08f9bb0286"
        },
        "item": {
          "id": "8ec0d864-62df-41b2-944a-e3ee2513799f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c56adf2b-4c70-402c-b1df-17519f6551e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8296f249-e494-43d7-ba26-89ff5433bc88",
        "cursor": {
          "ref": "d32dd64f-a049-4c1d-9534-b3c42e9b0dda",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c3b98415-98aa-43ff-9195-354248bdf178"
        },
        "item": {
          "id": "8296f249-e494-43d7-ba26-89ff5433bc88",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7cfcd175-cfce-412e-b59b-f3070f4493a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd98c35f-1d6d-4116-9687-79f7362c43bd",
        "cursor": {
          "ref": "1f4b4fe0-1a24-451b-a45f-5c0e87d6a345",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9517f0bc-ce5c-4825-97cc-9eefa247b2ce"
        },
        "item": {
          "id": "bd98c35f-1d6d-4116-9687-79f7362c43bd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b6bf425d-9959-4d29-987f-71bdf0d6c398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116cb0f3-afb8-495e-a400-29b17c32600e",
        "cursor": {
          "ref": "a9065c28-e6e3-4b85-bbc7-525ed1aef179",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "66a92c1e-43c8-4a9b-8441-c531bfee4ee3"
        },
        "item": {
          "id": "116cb0f3-afb8-495e-a400-29b17c32600e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d7e01240-76c6-4baa-8745-961ebb98bddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af8182c-823a-4127-9b87-13c24650a258",
        "cursor": {
          "ref": "5b41a230-a8dd-48a8-bde2-2ebd12c9038d",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c89fd37f-040c-45be-ad69-492215557508"
        },
        "item": {
          "id": "2af8182c-823a-4127-9b87-13c24650a258",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2acd67ad-a78c-44de-9d2e-5f6a188797b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97200922-3d57-47fa-9880-8f5e73ffc386",
        "cursor": {
          "ref": "6529189b-7638-45cf-a7e7-f9db221422b6",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5fc1e01b-0d12-439a-ba73-9666644dedae"
        },
        "item": {
          "id": "97200922-3d57-47fa-9880-8f5e73ffc386",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "25b15587-0684-491a-939c-bc958a9601a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc29ceb3-436b-4ddf-8edc-1ca182f543c4",
        "cursor": {
          "ref": "8bb9e3b6-1554-433c-a748-2153aa558419",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "16949dd4-c0f9-4635-a538-5f0ce589c1e9"
        },
        "item": {
          "id": "cc29ceb3-436b-4ddf-8edc-1ca182f543c4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8155561c-7268-40d6-a33a-b141bfd65e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e43fcf-836b-4cdd-be68-5bf77e159513",
        "cursor": {
          "ref": "7fdac352-0c76-4c57-82db-ca377b536227",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a7147a0e-a8a4-4494-85fc-0d69f887abf9"
        },
        "item": {
          "id": "35e43fcf-836b-4cdd-be68-5bf77e159513",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0c8afe8a-f4e8-4286-9e02-75b947818b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5871a411-b616-4436-ab5e-d91baab40d6c",
        "cursor": {
          "ref": "c77e1ac3-0d03-4b8f-b48e-531b5d539ee3",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "56468f43-903e-49dd-bab6-8dc45dda07f4"
        },
        "item": {
          "id": "5871a411-b616-4436-ab5e-d91baab40d6c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6d8e9338-daa7-4a61-be02-225b8ac2fa0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e240ae-93ee-4719-8168-407e20b9fe87",
        "cursor": {
          "ref": "5aabf694-7c63-43cd-8389-cad7129eb83b",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3393e65c-0d2e-41a6-bec7-3a12b4df862b"
        },
        "item": {
          "id": "a0e240ae-93ee-4719-8168-407e20b9fe87",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3ce36c1c-e5a8-43b3-bffd-b2810f30a233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bfc3fc-2b57-44eb-85c7-507ebe9e3fac",
        "cursor": {
          "ref": "da23e9f4-f79c-4549-82df-d87b646124d7",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4c3dea75-4861-4cc6-ba2f-707e7d27fd4c"
        },
        "item": {
          "id": "f3bfc3fc-2b57-44eb-85c7-507ebe9e3fac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a58c4222-8c5e-471a-9c8d-daa659e6b16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fbdf7f-8dac-40cb-8d6f-a4635d39b5ff",
        "cursor": {
          "ref": "e50dc3d9-d1d4-4ac6-a2ec-0ee5d5f68fd1",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1001b3b4-f024-43a7-92a6-ca77c6dab774"
        },
        "item": {
          "id": "00fbdf7f-8dac-40cb-8d6f-a4635d39b5ff",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7f2f4898-6813-4f86-84ac-29e04917d721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa023fb-5119-4859-9fdc-da3876c81f75",
        "cursor": {
          "ref": "898bb449-18dd-451f-91a1-77751a007896",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c996b815-a822-4fcf-8a3b-57cf1f260584"
        },
        "item": {
          "id": "eaa023fb-5119-4859-9fdc-da3876c81f75",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "005054a2-f177-4b07-a916-1107c4ed44ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25105bc-0ba7-42b0-b50d-60b008caae44",
        "cursor": {
          "ref": "2b3a0c75-2560-4269-8bce-c74d3fa218b4",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9076b23b-adbe-4b7d-990f-41a3b6e92046"
        },
        "item": {
          "id": "c25105bc-0ba7-42b0-b50d-60b008caae44",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "18a25214-21f2-4fdc-a658-e1ef57320c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80bec6f-3529-4d79-8729-3e3a323175b3",
        "cursor": {
          "ref": "464e05ef-b38c-4315-ab1a-3f53e7348e08",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a5b496d9-5a54-47cf-8238-dd70241cddab"
        },
        "item": {
          "id": "d80bec6f-3529-4d79-8729-3e3a323175b3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "14e087ec-2758-4f90-8556-b28c40ede8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3f4948-14e3-4c6f-98cb-b23532bedb18",
        "cursor": {
          "ref": "33563cc7-b210-46c2-b300-435cb5599bd3",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2fd8b7e2-049b-4ed1-953a-019162a9a1b0"
        },
        "item": {
          "id": "6b3f4948-14e3-4c6f-98cb-b23532bedb18",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e45f8c3c-2861-4ba7-b912-943bec19b04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb128cb8-b9cc-42f6-bf56-8e63c8f26a48",
        "cursor": {
          "ref": "9a598281-8d69-4e09-a1b2-c186383e370a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b4bdac72-ae61-4997-9c86-0d2dffbaf451"
        },
        "item": {
          "id": "cb128cb8-b9cc-42f6-bf56-8e63c8f26a48",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3c2dd32b-bfe8-4ca7-b494-1b91fd4b4ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77230dc-2fcb-4a6f-9497-be1f1c6db489",
        "cursor": {
          "ref": "c1f1b9c2-bd6c-4ae1-a2c8-26d957be66f0",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ee1c5e84-93ae-4da0-8619-b14651255e82"
        },
        "item": {
          "id": "b77230dc-2fcb-4a6f-9497-be1f1c6db489",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e0350279-09ec-4ee1-a9cc-c479055c1e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9535b776-94ba-4485-9702-6bf6e67f6381",
        "cursor": {
          "ref": "2c2362bd-2f1a-41b5-a19e-6de6bf077d70",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0484c761-96db-48e0-8ffe-55fb48a2b04b"
        },
        "item": {
          "id": "9535b776-94ba-4485-9702-6bf6e67f6381",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f1f90e0f-7418-49f8-8244-a779cb0bac2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2b740c-3b73-4cae-aaa8-3d1401726db7",
        "cursor": {
          "ref": "4b3cc56e-2415-4800-98db-3ee63857084b",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bfa6922a-922e-40e7-9b01-8693eccd8f25"
        },
        "item": {
          "id": "be2b740c-3b73-4cae-aaa8-3d1401726db7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0e7ff978-4097-4cbd-8088-d1566bd4551b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f070db-678a-40fe-a8cc-02501b47bc97",
        "cursor": {
          "ref": "27a8e025-d8c7-4c8f-9a95-2bfb8917e76a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cadca63f-5d5e-49b6-9f27-51ee9e4e2e32"
        },
        "item": {
          "id": "c0f070db-678a-40fe-a8cc-02501b47bc97",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6b0d47b9-40f3-4318-90ef-c17f476e6231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8b037f-1229-4825-840d-ead87b43a696",
        "cursor": {
          "ref": "b7b01900-6da5-4fb6-a311-b159ec369267",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f155b166-7e8b-4041-b6aa-89dc32d9c208"
        },
        "item": {
          "id": "bf8b037f-1229-4825-840d-ead87b43a696",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5c3d2d89-92ff-411f-8544-13bf982d4cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0d0285-31a5-4dbf-8684-2585ae063f07",
        "cursor": {
          "ref": "349104a6-5382-41d2-ba5b-8e1b77144e10",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "93a416a3-2e77-4b2c-a067-316aa51bb81e"
        },
        "item": {
          "id": "fb0d0285-31a5-4dbf-8684-2585ae063f07",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "716ed8fd-1407-4f40-bbf1-204f95206e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3a4cbc-b665-44d5-b3d8-106a191ed2f9",
        "cursor": {
          "ref": "2f1d03e0-52f6-447c-aa97-10989f5c87a3",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fca0ea3e-0890-4b2f-a1be-4f5261af8a01"
        },
        "item": {
          "id": "4d3a4cbc-b665-44d5-b3d8-106a191ed2f9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6cb44f4d-2beb-48a5-a937-6fdaebdcde5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2943e7-285d-4d54-bf6f-10a8ee0d1cc1",
        "cursor": {
          "ref": "9b73f530-59e5-45e1-b89f-95833c32aa18",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "62560c2d-08a6-4cd6-bf85-542fc30a1231"
        },
        "item": {
          "id": "5e2943e7-285d-4d54-bf6f-10a8ee0d1cc1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8e1e42f2-f9dd-4077-bfad-a863be09d0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349ebac0-8b0d-4709-8838-0495c1bea75b",
        "cursor": {
          "ref": "35b3195b-bfb9-4ee7-827a-52bde89a021d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "848729e5-2161-4027-8563-b59810556ed0"
        },
        "item": {
          "id": "349ebac0-8b0d-4709-8838-0495c1bea75b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6330973d-ea82-41b0-853e-39faebb594be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a798f31e-110d-41e4-82b3-6dd017a22296",
        "cursor": {
          "ref": "6f9c69de-7036-40de-92a6-d655e64fc9c3",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2ceb8e93-48fe-440b-a73d-f9292ca32181"
        },
        "item": {
          "id": "a798f31e-110d-41e4-82b3-6dd017a22296",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "35efe304-8032-4e5a-b279-c67c4d9084ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf051cb8-be6d-45ef-a20f-8d7f77c01215",
        "cursor": {
          "ref": "13f313e2-0915-40c9-80f3-78c15500dfb2",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "192698a5-563f-4323-9af1-8d06e69e9aeb"
        },
        "item": {
          "id": "bf051cb8-be6d-45ef-a20f-8d7f77c01215",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "29bba2a1-75b5-4b13-a5b2-f3f4241b53af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722f53fc-3a0d-44bc-9f39-d4da73f1f476",
        "cursor": {
          "ref": "b58c5c08-0087-4037-8997-902677c41e89",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9e1a86b4-e718-4dde-9851-c3d1efc60a91"
        },
        "item": {
          "id": "722f53fc-3a0d-44bc-9f39-d4da73f1f476",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1c40d59c-35f8-4eb9-82a3-20da661fd8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7ffb3e-92b8-4609-bd26-a703a08b37ac",
        "cursor": {
          "ref": "5569c79e-8e91-42e4-a8bf-11cf0fb043a0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3923e310-e568-4f70-97d5-38fc636bc474"
        },
        "item": {
          "id": "be7ffb3e-92b8-4609-bd26-a703a08b37ac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ab8180c3-49d3-40ec-8f8f-c32524969423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46790e8e-2808-4a4c-b2cb-ce6e2b0863cd",
        "cursor": {
          "ref": "5e0744ca-5708-4812-90f2-177f3d798ac1",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "67896587-f9d3-4632-b589-e14a97e83adc"
        },
        "item": {
          "id": "46790e8e-2808-4a4c-b2cb-ce6e2b0863cd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "83e0b63f-55b7-4a97-8a51-63d3800f4a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a866c81-16fb-446c-a320-10c8c4792ca2",
        "cursor": {
          "ref": "bd1f81a7-d9eb-4927-ab86-9608fd29b589",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "540372cf-6408-4b05-8936-d50d33dc2873"
        },
        "item": {
          "id": "5a866c81-16fb-446c-a320-10c8c4792ca2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b8bd021-ceb4-42f5-9db6-0e1d5429267c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364ca9e8-0f34-4c7b-bf8f-ce855c16a027",
        "cursor": {
          "ref": "77d59724-97b0-42c6-ad96-8f40de602711",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "677dfa63-2b7b-44a6-81da-ee05fd8185c5"
        },
        "item": {
          "id": "364ca9e8-0f34-4c7b-bf8f-ce855c16a027",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9eeb710b-3681-493c-848d-e21b69d0bf83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ffa1d2-e9f9-445c-ae14-6f59a03318f6",
        "cursor": {
          "ref": "c3fb8aab-9e52-4036-b43c-6cbe14cd586a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "315941a7-58e1-4e8c-90b2-112fa07b7e46"
        },
        "item": {
          "id": "d6ffa1d2-e9f9-445c-ae14-6f59a03318f6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "011424c7-a9b7-4809-8847-ee39f7725f7d",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "61e5d4ab-4d52-42ab-a649-e911bf37261c",
        "cursor": {
          "ref": "5b285565-93d3-417c-82a9-48a2822bd4ea",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "62dc568a-ee63-4fd7-a6f6-8582e7d57ff8"
        },
        "item": {
          "id": "61e5d4ab-4d52-42ab-a649-e911bf37261c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ac5f88f4-c31c-41b3-b2b5-79389139a83e",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6721739d-a629-43d8-a6db-30328923289b",
        "cursor": {
          "ref": "04b489b0-6f1c-4abb-94d4-ae3f56219311",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1158e8fb-fca6-4e7f-9688-f065028276d7"
        },
        "item": {
          "id": "6721739d-a629-43d8-a6db-30328923289b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0323f11d-5502-41cb-8dd7-d6b8681e2b66",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afc2eeb-185b-4fd3-92fe-8199a8731274",
        "cursor": {
          "ref": "8460a6d5-6f84-4e94-842f-d1d82c0af86d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a889897-e495-4283-9ab3-287ef7140751"
        },
        "item": {
          "id": "2afc2eeb-185b-4fd3-92fe-8199a8731274",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "deeb9215-47c8-441a-bfc8-2ad5049a20ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afc2eeb-185b-4fd3-92fe-8199a8731274",
        "cursor": {
          "ref": "8460a6d5-6f84-4e94-842f-d1d82c0af86d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a889897-e495-4283-9ab3-287ef7140751"
        },
        "item": {
          "id": "2afc2eeb-185b-4fd3-92fe-8199a8731274",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "deeb9215-47c8-441a-bfc8-2ad5049a20ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5406574c-0bf4-4289-bb25-14d9070fde43",
        "cursor": {
          "ref": "5c326c15-90ce-4763-af07-da85cee58279",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f9f89d17-805c-4997-afec-3f4628213b92"
        },
        "item": {
          "id": "5406574c-0bf4-4289-bb25-14d9070fde43",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1665baa-6e41-446c-8772-ed56f929d6b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6d3bfa-86a0-4618-8a83-06fe973ba23e",
        "cursor": {
          "ref": "17b0f272-0706-42f2-86f8-0ca8860bf2dd",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b85ff294-d62b-4223-9eee-fb771a99115f"
        },
        "item": {
          "id": "4a6d3bfa-86a0-4618-8a83-06fe973ba23e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e6a90c97-f8b6-48ee-8d6d-385e2d116446",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}