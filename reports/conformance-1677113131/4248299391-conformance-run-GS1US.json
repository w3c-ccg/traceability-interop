{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dd45b343-8135-462a-a9da-644dd1bd1929",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7782f385-1713-48a5-8b7d-e843cb24a8b3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a21773c-e6d5-4f62-afdd-23e931db33d4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2443f461-8093-4c41-a3cb-02a095b61f48"
                }
              }
            ]
          },
          {
            "id": "60149a1a-6535-45ef-a630-d8eefd9b31b8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0cede632-02ac-4300-8c86-ee3640c6084b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "42236038-0092-4251-bdd9-5423c83e22d2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1bc2d83d-00dd-44e7-95ba-e8c68be0934b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "47115931-0815-4b90-b673-dde88251a1b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6b8b6255-a692-48fb-b051-28319a2d1744",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aced79e5-c45a-4f01-a045-3888d277212f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "675f300c-a631-4323-8ceb-2e9ecf6104d3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18c12074-bb08-4911-b27a-844d99893e9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70bba51c-c1ef-4735-9b44-951f985bd12c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61a39052-248d-41fa-9e2a-3471a25d8c82",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37871f26-23db-4eb8-91db-0847e9e87409"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d19b93fa-65e6-4e17-bd87-407a942de287",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "78d3b775-212d-471f-afa7-52a6547b8280"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a55d1758-ab25-44ca-a8ab-942a878207aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa24761e-fd7f-41ae-a382-b30fde417154"
            }
          }
        ]
      },
      {
        "id": "106425d6-6162-4cf6-a351-4ccb0dd032e3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0386e41e-65d9-4fcb-91a5-363e74a834ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "594cbdae-349a-4365-b038-0127c93a4c4f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5649923e-e513-402a-81a0-32fa022b1ba4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b249566f-bc35-448a-b0d0-942d54118ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "473c02a0-c175-465d-a73f-0712d5265347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52c4c5b-c089-4a2f-aa97-b501105bd726",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d992d9b5-f85f-432d-9f3e-1fae5404834d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a26d1e69-20c1-47ea-921a-9cbba53d14b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4c5b7a-8f20-4523-bcbf-eeaef265398b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3e3dc8-1b5e-4e24-a7b5-2d2470fe733a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c23d2567-f75a-4f55-b182-f550524c9b89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5eaa08a-feda-4522-bcb5-088bcbee63ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84e8e743-f26c-499c-a250-f8bde1e516a5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5b9649-52f4-4065-9cb9-231b0dad04dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0476f21-cd47-4f2f-9401-a6a23bc304b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c31032-48e8-4544-8c15-16a77d640a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b6811b-8661-4ea6-ab3f-1485648caf84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5903b0c8-214e-44b1-8fb2-822d6c952e43",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ef5db4-d987-48f9-8e78-f85933bcb559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c0ae616-a98a-4596-8eb4-9dde5cfed50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7b1f84-43a0-46cd-9754-24ab762f8072",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "56ff94f7-26d3-4125-9e13-7d4f5efb16eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e52a3a23-a8a0-4f49-9058-7cde396280eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19f1f198-53be-4bd4-b33c-db704d668923",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "907b9d83-ea8e-4835-b176-2532d76ededf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2651bf44-3b92-4a6d-b073-e6669cac0235"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9626b4b-fe2e-4c89-9daa-1386ee656851",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4986687a-4afc-4355-b5dc-cd42395955df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9df21cef-00bb-48f6-8455-3a5e1939d3d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9778d388-1fe4-4a66-995a-39994d5a6a81"
            }
          }
        ]
      },
      {
        "id": "91591fa6-1a56-46de-9876-79ec4019419d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3ff4ff51-d712-4be4-9ebe-3b353b3691d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38c24d61-81ff-41b5-bedc-1c7b80429410",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a62c1a8f-1c7e-41e6-bfd2-476c8291bb69",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1e378f-514b-4ad4-92b3-1a84c9f25a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5441b00-63d0-405d-8918-442b369d9688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc2b596-7cab-4f87-9a6b-ad64089a5dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98c0a799-7e0e-4050-94b3-268d64624530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1151ab-be9a-4c60-a38c-ae0cc6b3f8e5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f206ad-9a5b-4b2b-9c43-e7573bbfcd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc973f3c-6864-4ad4-bbad-b1380fa8b885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17c8bee-1bca-4800-828f-4c3c7f6de0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "961c2337-07c4-4114-8ba1-321d0e3b3ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ff5366-ad62-442b-80be-a12c6751cc67",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80dab73-29b2-4df7-bad9-59369ab11167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bab922-1e7a-44f5-ac31-ada4d79fb554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f711966-d2f0-4f89-8caf-50bb51bfb235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3465fab5-ccba-4d98-94bb-6529e29ae21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90368857-fc07-4952-9cd7-a3a33103fb4c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7f712c-a1d4-4776-b7aa-972e84043e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d5c92d-79c1-438e-9cd8-cdd9cc0bf1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab18d71a-7d35-4f3c-9769-81c4a485cd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43adb689-7a94-4dad-90f8-e1d64919cd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b95a607-05f0-4bf7-ba1d-270a3b9c2a7b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ab16c9-5215-46a5-a7bd-7f1fd2f13298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587c2552-6ea0-400b-bedd-def8e5c44ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22ca2f3-a048-4a44-97bc-714d96fad99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7c4e748-976f-454e-8bb8-84a5e53dc4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c349487-cf57-410d-9ba8-9453436ce21f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e452790-33a0-4b63-8ce9-66722dad7235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb93cc6-7f5a-4a14-9d72-656ca2ddba3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c679b94-1c9f-4c32-8349-61ccd4e90fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ba4badc-531f-490b-8122-41b028aef819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af11558-a7d3-4064-99b0-8c521730eb0f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57aea320-0862-43f4-9c8a-fc01f158f13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371723e3-f96e-4503-a693-4107fa00a10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887a9bef-a04b-4c07-897d-ec61d89cb753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f525714-8929-4e24-8b87-229088efa872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f26039-d85b-4e35-ae35-ba72a47f306b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973259b1-7305-48ec-a7e1-ebcc4aeed8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae60cbf4-7379-4907-ac4f-ca6f587f8d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f699c3d-9c73-4ca3-a335-aa76eb95ec33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c3b94eb-bddc-49f5-acb5-5a90c3a693fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7a1d53-038b-4d87-8d69-961920f7aa48",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd30b48-07dc-40a0-acda-7003ec5c1fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ceb78f5-4a8c-46f0-8bb1-5f507c56122a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f97938c-b40f-4249-941c-38159de27f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c90f9f38-dca0-4c4c-acfa-6ac846aa7d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94420784-6ac0-4488-bf46-2d3473fa953e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf7fc2e-4182-42f8-8757-758954c33553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d637ea35-fb24-4258-9c0e-47e9998fe008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c505113-c85b-457f-b1e0-ffce9b31c375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14149b11-4856-41cf-a78e-22aace8ce3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ec18aa-049d-4e42-9c9e-016ab9e566d2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d56dc2a-9d56-46da-ac53-46fc42ba4d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bd58da-b344-41ad-ab13-fb3a97b206a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8161acfb-4c44-4eab-97f7-ebd52a88efaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d77b308-e037-4cee-a7ef-01d164cada32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598f8eb6-54b2-4e83-8b44-0fedf83649f8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426b4f16-c0a6-4eb5-bbfd-b219550f3aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2b8eb1-d84b-42df-9121-a343a15ea178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9980b38a-12c4-41ce-b535-24cb50e197b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bba74f5-2c6a-43ce-a6a7-0a2a718a74b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec652a0-9e5a-4d69-a0bd-01700693abcc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7122f0c9-f336-43ad-a402-707ec507c6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e616ad0c-c682-471c-bc4b-36cfbe514ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e8bf49-e162-4497-a807-a8b30b052daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e960a11-a299-464e-a975-0e3f7d0bb681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e18c0fb-03c1-4523-b5be-2f23f45301bd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb1a2b1-335a-44ea-9b06-1ec4c3dfec52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdeaa90-2e9c-4709-9452-f645545459a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9802abac-ce1b-4874-b99b-7463a8792cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95d3afe3-5a01-4ace-813f-7666ac045d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424829f7-32e7-4a24-9486-29bb90b3952a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164b92f9-e1fb-4ae3-99ab-9211bf78aba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc30e0f-f734-497e-a056-f1c3bbca7ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a95e650-d9ea-4332-b29f-187cfc8bce10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7268aa5-9e2f-48d2-8342-6af5e873ea70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80912247-be5b-453c-9614-3e7f3ca32d93",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd42422c-cb7d-4be2-a94e-745e5695f33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231e9374-1a4d-4704-896f-3584cad059af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fe287e-6486-42b7-ad67-37789286459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbd91a95-117e-4815-8ef8-ad7c1c3f0648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbbd3f7-4fd4-4db9-9118-d9a325ef6bf7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea0484a-b412-4410-8181-cc3481740440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ed8948-6bc5-4fe0-9a13-890ce80dc4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511b72bd-09fb-462f-a851-e24e251a618a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f611a86-0674-47b4-b45f-591698af75ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c465bf02-11c8-474e-89de-20112f7fa709",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78cc81e-1dd5-458d-85e7-d380b89423ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9352f2-ef18-42c7-8ca5-d681d4e1556e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d88f42-0397-4772-a725-fcedad47af28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "07473357-a739-4a02-8b41-506d4e291688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77022f05-dd11-4459-a26a-2b4f9e5fda72",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ac856c-2c45-4c5c-91e4-3146b7c1b16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90a8593-977a-46a1-999f-5bade97ce791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c951031-ed7b-4742-aad2-d8d428cdb601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf435b3-3d7c-4242-a4d4-b8dd2f7e45fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d51b03-7566-4916-b053-1fc888d9aee5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bda8c3b-0b3c-4320-af54-05179823024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3a0a21-3a97-4eb4-be1c-091687f1645c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acc9ce1-f21d-4f16-bc64-3ff2684d5b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3a4781-f190-426f-b9a3-1c7772205c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86db734d-8a6e-404d-8dcf-daba27fa56e0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5604e92d-81c8-413c-a295-f5413086f1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79eb2e9-efea-482b-b728-37218893acba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec4c740-be17-4641-9e64-c832b387bef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3e3fda-171a-43a1-9d88-93372113c5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8158747-a2ff-4a41-a73b-b8caead2a140",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64810785-9f48-4d32-985a-9b11dbd0d618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc56388-f0ef-4e09-8bd5-18f91293a1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6779e16e-3543-41b8-991d-5127b30abf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c69593b8-cb76-4c78-bbde-c73a7f68d8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527e5c91-90e1-49a7-815f-fdeffe5bee23",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3b6042-431d-4fdb-99b0-9baa92a1aaf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9895fc2c-78bb-4629-b33c-f8fb8b48a88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9d04fe-2a64-40b8-84ce-bed34929ae98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d72b743-9c66-435e-9bae-4508ed8e6006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a65b02-dbc1-4f51-98c3-5280eff9237d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfa4935-d842-4adf-a785-f8f46129c250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3f6030-2543-4e76-bc96-162df6c97363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c7ca35-a51e-479a-b5db-575e0f47bb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "88227800-f4f2-4fd4-86d6-9de2c3cc9047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a55c20-2412-4b39-8d03-0c3331ea0c7d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de227ad-1666-4c66-bffe-4490687cf677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607df01e-5b45-4bbf-bbb8-25b975e24cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5694885b-f71b-4a28-b7e4-86b675a97d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af064c28-5761-4b4c-8bdd-77c24a5e5aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39691a07-5b75-4749-949f-722f12fb9454",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb5a55e-3530-4b4f-839b-a4b9c30b57ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2be2785-3011-4144-aa63-17a4f29a222d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d7ecf4-cc29-456b-a787-9cb347b31994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "635e456f-9231-4b1f-930d-6891e9cadee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afedd114-9b96-4354-8885-1a06b851d66b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a31b43f-84c9-4b8e-ad5f-77e6f4bb0d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb5f2c4-c119-451e-b3db-7f645d63509e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1122d48e-bf6e-4ed1-96e4-2914881b52b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61933b06-0c85-44d3-b006-78bdeb18347b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27405e6e-b001-46d1-af1d-a26b03e705d2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e90fbf6-6838-44bb-87e7-0d198aae8f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f085f0-e2e0-403f-8e40-8d372a994eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c905fb-8a8c-48f7-bfb9-1e0ea4866aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f1c868-f84d-4cb4-b369-8b254ee43107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e42a9b-6d4a-46cd-af12-00d68db5f665",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f1841b-9b9c-4f94-941d-94ccb3b7c92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc322bce-4a4a-4a78-ab1f-b230853501b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7835be-4128-44a5-a4dc-9c631cd89f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "027f0a37-85c3-4442-92c0-1bc2b87d892c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47692cc-ef16-49b2-a977-a804982fdac7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdad5ef8-1987-4ae5-be7d-8df49b2f4c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65e6ea4-1162-4a98-9052-a982092dc0b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac65ff5-19f6-491c-b9e3-51a68ca38c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3511393d-7243-4ac0-a482-065b226943fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ae70d2-4479-4248-95f3-cf1ab9567c16",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a5b659-037e-4bf1-8d23-1f0e3a3a97cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6fa5eb6-09c1-4522-9633-0d8273cfd800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52cad66-2cdb-4e9e-b051-9757698a2241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e63cdbef-e042-4d1a-9671-a00eb31ce89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefcaeba-d598-4522-a826-8cdead7d49bd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c76daaf-2e40-48d2-9e19-9ab25556802d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fd98a8-dc50-424a-a04a-94fe37ba73a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e736ac-106f-4e16-b643-74ea8a8df9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea80f29-0376-47d3-972b-153b3d836bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2a21c9-7615-44c3-ae83-8bead84508d2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a971e483-ff0e-4510-aec8-8cf6dc2bd9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e287c9-f7b6-4b71-aaca-0e06c137b97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8a32d2-0fc7-4e12-ab9b-6b2bd6488598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20d84865-8b53-4960-a2dc-139f9b7d07ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48469c89-1b9f-4825-b16a-aafe5d64de49",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fd9126-9d3d-4218-9199-e9c187a82f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1046056-b695-44da-8b4e-2de47b3748f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc357f8e-37dd-4e98-96e9-d3cfc9ab1557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "095cc5c9-0cbd-4b85-809e-49be7fbab1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dad4882-0f65-45ca-8cad-b664ef7f0905",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156d020c-fc00-4b4d-a335-ef932554b8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01f38e6-d111-4677-b182-3dd4f8e7e4f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f7d30c-f660-4619-a692-ef877ec6a20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "64bb3181-9a12-4bc4-adcf-8dcf25b44ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e71919-4b8d-4faa-8921-48483cf625b7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53824940-0cdc-4a1a-a65a-3970964d7526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b8eed55-6bf7-4a24-bc57-fce9855bd4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34898cf-34d5-42ab-bd9f-1d72364cd031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb1f04e-d5b8-42aa-88d1-eef2d3e5f45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d66121-6448-4824-a677-1c042e52568a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dc86eb-4253-4f66-bbff-39d869cc2ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d482656-78a8-4e06-b2b4-758cc0fdfc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfedb4b-9d22-46c1-bab6-05f39ca4788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3e0449-1655-43d5-8a96-a685626e7a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3ec744-8c08-436c-a8a1-de10aebc2d8a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b114cd13-5d0c-45dc-b8e8-0e5bfeb2eb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586ed45b-7a8b-4169-82b0-2db5680288f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e12d8c9-9679-4a5e-8a34-6ee33b919af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "04847a1e-f3c9-4c75-a422-25fbdf9144a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb438c7-1746-40ae-afde-5bb911411595",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a27ea5-36ff-4b3f-a374-9aac3bdeb1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43612abb-30df-4fd4-a351-e47120ef01b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c308ffc6-9c42-4d7a-9a7a-55eeffeaaa05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3416a1b-e25c-4306-8af5-523a501a7c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b203d7a0-6e14-42d2-bf7f-02c3e8692744",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af82c25a-0da7-444b-bd1f-fd63ad833862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c62c88-ca78-4319-a79a-ab4a24b1fac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398b7d28-87d5-4ec6-a12d-030ce315efad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8798daab-ac3a-4879-9c51-e16ae71dc6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed01af8-8e54-4b02-b8c8-9d2c51f1c21d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a98115e-4fa6-4bfe-b599-fd25959f57ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35d4fc8-d592-4777-b003-dae2339a205c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4287e8c0-0710-4a1c-9a01-dfbcf738c8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0411a586-1cd9-4257-8b1c-2048b8294f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a42b55-91f2-4ba7-9399-e4561e121064",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7beaa60-7920-4e8b-9301-3c0ba0a11252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b961e4ab-e87c-4bac-b6ae-cf6680920dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f017355a-0ae1-4a11-9db5-f8c948421512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c40dd28b-d619-4546-b44f-66659094a6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b2e1ba-a0ac-426e-9ffd-d5683e5bb1eb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206de228-b103-4316-9358-16d72e0b6105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a838ade-fa1c-40ef-aa52-a62a95dbba72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c2db1f-68a4-4c26-8dc6-33ced194ad78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a757622a-3dc4-4448-876d-56878a6ddacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816fd848-797e-4434-8c0b-ee2b149106ef",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984e4ebd-b607-4a88-99f3-3f724034a277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef0e66c-4c9e-48e6-958c-6f48b685c19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0970d7de-a29c-436e-991e-3b46073470c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb987da9-08c1-4e89-822f-85ccb2540fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7742f90-5f84-40ac-acba-701aed26bba5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b120d0a-393b-4b9e-9b1b-ae91269f0324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08875f8-697e-45fd-b34e-3770b69b570f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ada7de-a403-41bd-b62e-8f1d52427316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0043a6c-90ae-43d4-9fca-43eaa9681da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240a860d-b3bc-4f06-a15f-907491d187f6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661215cf-1fad-4336-ad7e-e894ed5c97fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6ffd5c-c36b-4ece-8ed0-24e6f6f81e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccd71dc-8095-451f-bb2b-a654d77d04a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eab3f5d-001c-46ec-b9e7-cd4d4f1aeae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8121ffa0-ec23-4a7c-a933-79446581e65c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e6897e-51d3-493f-8ae8-0735caa1fcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9941ac4e-d2c3-4e00-96fb-f8d2d905806f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a784e1-d91a-4bc8-8597-48b2a449da85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5682b5-39ba-425b-8d1d-db358daed0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842d2d14-56ff-4bd8-91c7-d72e51a6da83",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea299d38-f51c-437a-ae81-56160172857e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edfae69-f927-41ea-9926-443394aa0432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c541e31f-0bbe-4608-93e6-a13099366fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8dd885-d00b-4d29-a5be-8d5d16c3cf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb53eee-aa9d-4beb-abcf-c6f0aa8c6c00",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2050b64a-2e93-41a2-a944-002137e1116a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0f7a2c-f4e4-462c-9692-6e839480ae6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7651d1a1-0ab6-4ad7-be76-7bee0a74dd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7caf1067-82fb-4649-b35c-c17ca01dd2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c287b4e-ec90-45b2-a351-64eff66595f2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73640970-058b-4132-8397-d5c3a70a26f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4473db37-6352-422f-9cb2-5e851616a8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96c5c37-9b12-4f08-869f-90c7d744b51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acd3711d-54a6-4b9b-810e-7f73a8c84190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0f30fe-8978-42c7-8d81-a2b644203d9a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d31f7f-541c-4156-a7ab-f6bea61cacc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee810d9-53c5-4541-a658-9727b26ea929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d331df67-7413-4eaf-b0ab-60e36e995cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba118be-fc66-48a8-80a9-a521a159314d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a63afe-b18a-4066-9114-0625a295819f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c8cd4a-3f34-4d78-98dd-51eee35330b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2651bfb1-f2e0-4901-a9ef-8454933822a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105e8ce5-7a79-4760-b61c-026de44c5dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "552edd4a-3c0b-4f29-84c1-edd27d4a494b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9ff881-03ad-4ebe-8686-4b8135ac735c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d5d291-00f8-43e0-b355-6fa7e6a555cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a0fdca-868c-48fa-9c13-3c0838a7bf52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba94642-ad35-428e-a698-1b2f1a8495df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18d63104-bbb2-4776-8447-cc5a0f7f18aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bf4b51-599a-4950-a14b-a60d0cc52c4e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c24e11e-1df5-44ec-9f22-bcc49c4e9371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a318c4b-ddf8-481d-8037-4dbf56b45e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c1c6a4-c9bb-4709-aa66-8973f84e4755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "785fa246-f4fc-4259-942b-968b82621bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6c4eb7-7642-43d4-a44b-72e35879fd65",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf6e902-893f-4a66-ba3f-427e4eb11d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ab476e-6235-48c4-85eb-4ffb18b03322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffe4edd-a94d-4af9-b1b0-63974b19b021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c2cedf-ef85-4486-b57c-9d93deaf1ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11483d99-a37b-44bb-8466-eb0952126b72",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a1a05e-e941-403e-bc1a-9139159f8ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e554fdc-8001-43ad-88e0-ac4db3894c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d420e24e-9bbf-4b38-8df9-09c9d3dc420d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf8424b-0402-4aac-9882-aa2d8c03b5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afe6561-c956-4637-a282-a7d3eb3e10bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b6a7b7-d1d5-45a8-a30a-1e552f2478b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992ad6e7-1b8d-4be0-a603-77f9566eac89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d229f89-5cb3-4f2a-bd83-f5a5c1856f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac6ec93-4ee9-421c-a420-273d09e91f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdfb077-99de-4cbf-9abe-19d63e87676a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2513b65-5d95-4c08-8dd0-39be76b2827a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ba28a2-5457-4222-9fd8-167bcdbfbe0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111e30c7-9f1f-49a2-9c09-248697c1b94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "05a6f454-3c12-4ee2-8cf1-2963f92cd715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b780f6-884d-4a11-b04a-de3e1cecf0ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76797de2-9d21-48c4-8890-8e3c65b7ba1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6c8e75-1624-407b-98bc-296342c79544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a4ea1e-6a4d-46d5-b803-42815b564f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "511a1ac7-44c3-407f-92fd-905a5e97be0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5870dc0b-2ad2-43a7-bb8b-fe8693bcb361",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101e0da3-96cd-48ee-9667-c9ae3861a10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0959c904-835c-4cae-8585-9f3fa67eacab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafd1e7c-926e-40a4-8033-1aec4b9cbd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b306af3-f363-4e78-849d-8121cc63c13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc78d84c-8284-4c2d-b688-6a1a91215572",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b48bb2-7584-4ab6-b4eb-c8bd09e670ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eebb8cf-fb1a-493e-92a0-abd3a94f9063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68154d4-42d0-4f2e-a298-32ff918e1b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c55a3c5b-71e4-4b82-a69d-719986f30f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98201d40-7657-41d7-ae4f-d33ed27ee552",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06e12fd-1787-4659-aa66-a2eb129890a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b937eab-9d1d-4d8c-9eab-a6d960043d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc199b4-5687-4585-ac16-f00f1c2b5e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2d38dc-7631-4959-a275-7b71ef8825d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137ec766-f4d3-4218-a16e-5d748cbd560b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4287f7d4-b4b5-4b52-8b8a-363729ae7da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679cbcde-5388-4b12-84a5-21873ff8ad93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507d7553-023b-4496-a50d-da7ce974ebb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bab74e5-6a87-4ddf-8011-fe78e4c5c6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d076aee-41ba-4276-8b68-21717c8d67c1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52166ecf-0461-4ffd-a683-0df981e304cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56cc8687-c7a3-4e8d-a5a5-08084fd42261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7843f9e-769f-4769-aaee-aa5b44888456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9aacd7-3f80-4c55-bc14-87fb1f2fe0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9f60a0-054f-4cdd-88e2-3b5fab877c99",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bde1f6-a307-4131-9425-1d0e6a752c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554031f3-b8b9-4a83-bea9-0342838fd6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9c0298-22a9-4818-b328-736398eb5f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "139fe672-6979-4a1a-92d0-d14c7d95a432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba32925-3758-4bdc-b35b-ce1885c44bf3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9b746c-a1bd-484a-9668-0a1528c06305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e46def5-c94a-4da6-a559-f410fcb839aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45059e73-56bf-4925-b905-78db505bdf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc1fa65-b536-40fd-88f8-44a655f12473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e5be44-5efe-4b68-8ba8-39677040a229",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cd3e17-731c-44f9-9872-e1708d81c366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53560fb-fc4d-4ebb-b678-af15e0506793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8b14a6-f84c-41dc-8bc4-2b2eab30bca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73026bf3-6ae5-4ce3-9e92-0c04251028b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ec3206-af2d-4448-841f-e1e0451e17b1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10ffa8a-4530-463e-9c26-fbe5804b1da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850cee23-35cd-47ff-aa35-1f26697177ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46102230-f5fb-4293-85fe-b4d9674b4b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c2f410d-f06b-4cb4-bdba-69ad86c1cb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c2267b-b8c3-4bb3-a5c1-01daa59ce606",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885b3d85-fa63-4f8e-ad18-8143305e7c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a91bd52-00a1-424d-b37d-c273cc56cda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cec744-6468-4bfe-af19-f25badcc7f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "18292040-fb4f-4ed6-bcc3-d7dbf4a28e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d995a97-b047-4dd2-b74f-0c91c8600f77",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b66777e-6553-48fd-80f9-3607273fa6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b00fc31-84a8-4048-a3b2-b703ea0e7307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d15de7-4f66-44c5-ae92-0ec75107ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8665b75-82f2-40ab-9f8c-a02e696405a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bda94b-e3f8-4174-8702-5e611b1ab0bb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ced3170-1fc9-4ede-b7f6-6f4a1550fa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab02aad-e427-4076-9c2e-0d9e573d6efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15838c6b-798e-40b5-a890-2978e1e7bdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af50be45-8c70-4823-b5f4-1109a5a8b5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf4101c-8734-49dc-b4d6-86fc087a9699",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a24e0f-1bfa-4dc4-80cd-13934032c331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66805038-2e45-4afc-8c9e-c371ceb6801e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3dacf0-6515-4b7f-b229-0838517c6089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd75ac9-4c55-47f6-a471-12656fd6543c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4070615f-e41a-4456-b075-5675740eaf3b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff5ec6a-11d2-42d4-b4ff-88e0e9f75416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61c1a22-0d91-44c8-a7b5-bbdbce367b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ca3c21-846b-4499-89d9-952ce47f9c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a953f035-3835-4e45-b029-19c5ce6a9631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77f3c1a-48f8-4bba-b19f-133730cb9494",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a791732-e44a-448b-a67d-8dbc22930030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae9a4e4-6da6-4fa7-b234-de86663984fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198d0e91-8464-40ac-bcd3-41ac6069a85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d557b54-6757-46fa-b7ab-1c64080f1f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37e15b1-a020-4e85-be37-513aa3540771",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a4920c-90c2-45ba-b8c6-ebec53406a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bc133d-3025-440a-915c-760bca3cce07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156ca254-4f38-4196-9f40-bd567eddaa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf30216-5fdf-49b4-960a-1c81e221e4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6797eb71-a5f4-4416-a5f4-413e74d61b92",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9c23f6-9434-4e6b-8dae-75c8dc2b0413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43dc89d-1b7e-4f2c-afc6-60e7aab82c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b96395-9341-4b93-ab8f-ae911d5c1086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d003bb49-45f2-4aa4-9a43-c9edbdc46ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c07dfa5-78e1-4297-9967-22873f3d21ab",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd8c789-82aa-465e-b679-1d45a4b9a2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cc1bd8-8013-4ada-8fcb-b68d948ac3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4817c619-9892-457d-a645-f2f69d13bca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b423e59-49a0-4275-b982-6ab706986e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28e173a-6494-4516-a29d-f27c7beb7e89",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9de93b-114b-4711-bd81-2ccaa24440e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff86748-1a6d-42bb-9294-e3b20aa24d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c64941-1027-493a-aa8e-5ec7f43a39be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc08635f-64ef-4633-bab0-5134bf743774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffe93be-673c-48d8-8554-2e07e7b2d8b2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4002ecd2-ab1f-463e-9a0f-ed479ab9b432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e191280-7701-4632-a469-f8452d2fbf1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935eca7e-671f-4ba2-8ec3-943c06c43022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b5880a-eba1-4920-ad48-9ae1402ddbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34b6c2f-43a5-419a-840c-641d0172185c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0352726-4c34-411c-8e6a-072fc3b69f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29afb5eb-2e2b-41bc-a47f-425f9edfe185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f394d5a3-e011-4504-88d9-95d36db8a37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94ae5be8-39b9-4cbd-aea3-caf5c99420f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c56505-e22b-408f-950f-832190084962",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca6dacf-6e4c-43b9-a0bb-59849b357741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12c5652-8aaa-468d-8854-d4ebf60aeb92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f218d5-02ac-4fbe-aa1e-08b3180a1246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a618e6-5f0d-4128-a805-67eed027a5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5026b8-e85f-4866-ba39-2455198a83b8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0774e2cb-3711-4057-a568-1350dd2f8837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9357ddd-701e-4ce2-a68a-d3bf8e44e11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09875b3-2d87-414f-aef7-ac18bf5495f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7351b12-562e-49a3-993f-2f3f22e24f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8887aa5f-69c6-4c16-8562-39db3c7619c3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f544271-e259-4ae4-9797-50f689b8e6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2627d0ec-f285-4df0-a3c5-e5156313afeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bb8d8b-fa31-43aa-925b-cb19e94f33fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2afc74e0-f864-4b71-8add-db4f2cbc4dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2d6b30-6461-4c9e-97ee-1edb195e2f34",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb402282-81b0-4082-ab65-005e86b51bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce617da-34bc-4733-a7b8-60b0488ec1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a19473-36b4-4780-80e7-1f7a2d5af031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0228f689-bf8e-40a4-95a6-664e0e3a62f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc63204-040d-4f02-bd40-fd64b27fc342",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6b463f-407a-453b-9c5a-71a5ded2230c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d299f15f-a5d5-4738-9faa-dbf488d4421d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5920de04-608a-4573-a618-c09c4367980f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e21b44d-75e8-4246-a61b-d076891e0737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c71365-49be-4ea9-b0c9-e8b5bdb5f4a3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d6f627-dfc0-4f41-80c8-a773b6a0194a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b2dea9-0e41-4793-9495-3a7a8d47925c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566e0842-4fed-4fb7-8fb2-14e2cfc41de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b57dc2a6-1b44-43c1-9de4-38c28975e124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5fe342-b699-4e88-bb69-e559db9342eb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8957c3fa-ea8c-45e9-b1d8-f858a0e759ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b9bc72-a1ae-46fd-92f4-947a98d26fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239de4e2-f05f-4c50-82ce-8d5a714e45d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3e2334-5fdc-4420-8c6f-3895b904b406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2584f2fb-96c3-4b1a-a667-1981b1a333f2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6227ab5c-345f-4c32-bb34-5f06ce374161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b820cef-aa4e-4576-9f55-323ab9bc48d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e284f26-57c2-43c9-8029-2a526d3a308a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "945039c4-a9ef-48c2-a7ed-aab83579dd9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f95d8eb-b147-4c60-90d9-05017cba7532",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ab85af-df3c-4f90-b240-17fd9e8da7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e397b5d9-32ef-43bc-8b48-2eed681a9bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199a9132-3888-4ea4-8b45-4f8c0357584c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "587e908d-2a18-466c-bfea-1fb52ff24ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3235348c-2c44-432d-b1e0-f47bf2b5e7d7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2edbfd-2042-4848-b157-85c7686188b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5368eb-e304-41b6-85b9-d0ad3d3cfcab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889ff937-b787-4d66-9081-7284c51e413a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fca6eb35-9f72-4592-b258-de3825e5ec6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d3bbb6-8c17-45ae-b055-cafae1ee366c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0372d7eb-dbd6-4a5c-beec-bf8700d4e52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe3ca26-7343-424d-a85b-91cfdd8858e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4ae1b7-0baf-4909-84e1-4b439a52c742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "44bb8954-de67-4337-bd58-415baba50b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0816e640-eaef-4da0-80f1-112acbbcfe11",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45bd189-adb7-4210-aeea-66dd7c52320a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "01c1b888-61ae-48d8-8e91-ab57b68f7302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1bca73-5d19-4519-a5c7-5c9394101781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4888ff4f-bf8f-4448-9759-7ccc941c103a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b53eb2f-81c8-422a-aa2d-6f5c8c51c83e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45463fed-4114-4837-ab46-6f9c3f947fff",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e80ae2-8a48-4aba-8066-3ae522b717d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13a943f6-bff6-4458-94aa-c51022a77a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c180ebc0-8a4c-4db8-81ac-05cd6373d951",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "451e7200-9933-49d7-9dd3-456527b0a26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ef81df-9142-40cc-9132-260cf9fb2826",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72964693-bede-47ea-98b8-68a082c4e3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "922a34ba-e4e5-496a-a2f5-7046d3b1ecd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc6ecdb-9469-4702-89cb-4732d11af22d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "90f9c35e-094c-43cc-b3a6-19f61ac3811b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76535dfe-db98-4a85-a1d9-493797ef26eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f742dfcb-4311-401d-93f0-6e54c946270e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a5d75a4-489d-46d7-b358-dd41a55f5c69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aae551ee-ee60-4a40-8219-c11d521bdd91"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7eb5cf0d-de15-4c49-ac21-77c01a221fc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d74c303-7252-4d3f-bdb5-7fe7725a578e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2eb1812c-7b63-4ee0-a403-fb78327265f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59e4552a-4e4e-4080-b01f-8b5bb83cda60"
                }
              }
            ]
          },
          {
            "id": "48cbbb72-61bd-43fa-80ca-407f7dbf82d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "69f89665-f045-40bd-9145-a1f753b13a45",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05061a67-5595-4c37-9a49-c577bb203e0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "573eb57c-2d13-4d5c-b324-ca55e848ae38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52d5bdf2-ad2a-419b-8981-2f1d5ced5e20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "818333e2-9787-4819-a58c-0e74b6373465"
                    }
                  }
                ]
              },
              {
                "id": "cd5c2506-5795-492b-9b4b-8d981a610eaf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dbbeb24-d26e-4cf4-b2fd-bb568cb9b390",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b106c56-1948-4f19-b70c-de99113d5121"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b49e324-e19f-4ed2-95fd-df867040064c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "042fa56e-2d97-4fd5-b850-33a8f1159205"
                    }
                  }
                ]
              },
              {
                "id": "83ec50e4-5489-45c3-a311-1d118a13cc6b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "128a4775-7111-4c42-bbed-ff28ee3d5a60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "266aad02-2c8b-4b9e-9812-bf4d9234a998"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bdbfe24-7833-4e9d-aff6-8b00146041a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "77792fb7-0da6-4706-95ec-65b58e84b4b1"
                    }
                  }
                ]
              },
              {
                "id": "d6bbaef0-df44-45d6-ad17-7d04dc1179ef",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9528b298-12e0-4ce7-9c5a-a05572fe3b9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5c54bd2-8ece-4a35-905a-8227cf213471"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9929f52-f5b4-4085-a6f5-bb3c1da6e381",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4ea837f4-b7f3-4ec8-b08d-8b17fb6dc84f"
                    }
                  }
                ]
              },
              {
                "id": "67ac881c-b3b0-4b79-a7ec-e67f0769bf95",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81dbe865-6014-4b51-a54e-80ee756e1ba6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5aa427b-8304-4b97-b913-6e323b6900e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfa78661-8dd9-4324-ac15-9f2d3ee84719",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6b7550f-9231-4be0-bdae-d945edae0e1e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36a0a2dd-6e37-4ff9-9289-de9999ac5bd7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f5b6d91-f0b5-40bb-9d74-345afc54052f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9fdaba20-df20-400e-b237-a69ea9f62513",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db1b54ac-bf6b-492b-a844-bfc88650a378"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f4bca63-9dba-4a21-9c33-61dd2a2c71f3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7643177e-4078-4caa-b2db-e1ff3b484daa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e54c5eb-ac0c-4156-9da8-fa0716353cc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6bf583e5-eb77-4b2d-8806-6a822b8b9673"
            }
          }
        ]
      },
      {
        "id": "3e9027ed-16f6-4c50-a21e-608f1623046d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "96f112c0-1659-49fd-8ac5-4fde3b0e5240",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11f45d30-805b-4441-8a22-a17179ad39ca",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2b91914e-cd1d-4ce3-b58d-627af08b8203",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c469d119-eb39-480d-bbe1-90510c1a80c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8d0d23-5b68-4905-949a-3ae61e92f423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745859e2-5bb9-4b97-9c69-29fc817dc600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0018dd8c-caae-4ceb-a7d9-f13c0810ffd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7cf0e0-c496-4549-8d75-37c458e97bc2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5e6758-e1bb-42d4-a19c-7e3c76f50aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fe0a2d-2e9c-4eb0-99e2-f543c4f010a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9fc8df-0e3a-4860-ba21-6adc332a3de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b97d0bb6-6b62-426e-b335-ec84f5ebd18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e91db4-36c9-4aa7-9cac-ecf16753ed41",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b14fc0d-9f9f-40d4-8485-d7d865f0a892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f26fc0f-8c4e-4e63-9539-179b79814443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6503fa53-0989-484d-b468-66017bb19063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d62264a-fb62-40e2-b9dc-ba23550e05ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b72b13e-81de-45a4-9652-5d7b6c5188e6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a01519-63d2-4ccf-b863-1787597aea1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc348ef-28f5-4035-8a4e-02aef68ed5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d91fd9a-50bb-4972-8d2b-34a785b0a4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52e3a79b-a788-4b1e-9e96-3e1b142f3ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1afb28-6307-4e30-a874-11289eb95bb8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1039c60e-f362-424b-9a2d-cd26307cf086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8519153a-1f44-43e2-a78a-76bc266d5ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffeda51b-3d2d-45d6-bb14-9cf8a5c174bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15cc83ac-0b18-423c-b6e4-e54a0d4498ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35ce910-6421-44db-baa7-01d01d9063db",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c44402-bf7c-40f4-8b10-65d99eb4713f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff30df75-55dc-4310-8597-35eb011d51a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9640c7-e6a7-41ad-ab1b-34f7a73f1ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d14fc3dd-322d-4385-9438-1b7df9965cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bae245-63c9-4301-8253-bf487b391ae9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac44b65f-bc6b-4f99-92eb-beebc6c6cd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60111a47-e014-4232-8ab4-61d6b3fd5e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae0f09a-9ee1-42ea-b271-6f0e8b1c12d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1c08ad-2865-4a7b-a6ca-e24fd0dfeda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08169221-1373-436d-8aea-d945c5952cad",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9b7894-f466-4174-a6b6-7c1789c25808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbad6fb-d5fe-45c5-8d29-84ab03880a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7e9268-07a2-4dde-a05a-b2fc6d4e3b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "818c86e3-1b20-4e4e-8f18-21cfd6161eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf47c7c3-36ab-4640-ba3e-cd3baefad54c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f158b46-fb58-4dbb-b52d-b1eee62f3b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ff4eb6-c6ef-4c66-8ce4-9c817dd3abde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b6aa76-0409-4708-8b48-c009887adb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f94f80c5-3136-488b-af3d-740ae64ebcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6ffef8-2e13-4d31-b5ca-d820834987f4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff26e69-8886-4071-94ef-ed7463874f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872d4237-31f1-4390-a46a-cb41cccc1d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaebc32-ebe5-48ef-95db-2c9bf742d6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a36fda7d-c2c5-418f-b3c6-faa8703f56a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832d3668-86c9-49d2-b729-e5172813521f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2626647-a9e9-42d6-b4d6-0ca26d7f2352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ea61b5-e696-48a3-b2d9-23ea82d3b4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2988d5-226f-4041-958b-bc5b4d324665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c58827-4e72-459f-9e55-3b6e5cfe67fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371939dc-deef-4e96-a5d0-1e2711c4d15e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7eef685-0ecd-44b0-9177-c14d3e4d0b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f82316-aec1-4c91-b9a9-b673c231999c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3075a6c-ceda-4a16-9dd7-cda655cd30c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc49a31-7047-494d-85d5-41479b79d3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36454b5-3d4c-4607-986f-913b3566005c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126094b0-cbf4-49af-97d8-098f1c1a4500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ada59a4-908d-43f7-a4c5-89b833ae600b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef99ad2-9486-4f4d-8177-4fd22b219dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48955269-ac6b-4d41-b069-120d27f5de4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2b8f10-7203-4445-a544-cd3fe1587c7c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948bdec3-d2a0-4aae-8bdf-9b345486bb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334753f4-8ad9-4af7-aa74-a09679e9868d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03528b2f-cbc0-47f3-aae9-21225c8d1745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "51b7580f-d561-4925-ae85-d2c66e693b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a400a2-855a-47a8-a333-0b80bf249f31",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91aad928-caed-4cf3-b894-9aaa0e381c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709f5345-218c-45af-afb4-916ac383598a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1112be-4117-43d9-aebe-58f6c86082cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f172df-09ab-4d6f-ac67-2a27df342a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5b9ae0-8cc0-4319-9532-b393634ae438",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac1e861-cef2-4b8c-94b2-b69fa0a76009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359d4e76-127c-4445-93fb-9d82fd2caba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe7ae24-0710-49cd-98a5-1f21a222d5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd0167d-515b-4c31-8acd-c9e2c04c85b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c76fa61-692b-4a0a-b56f-1d95c63c2b00",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3251328-5a68-4797-82ee-380633eedd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a3b073-1e66-442b-9230-6bc2d143287d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383bb817-c7fd-4daf-a653-d735dce71e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e7f7e0-8611-40ef-8921-0a9928979133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e38b50b-7656-40fa-9aaa-40a5aab0d46a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4038aee-d25f-4dfe-a716-87c928d32424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e1d946-f980-44b7-a473-9b7f0fb22e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a27743-480a-4737-b16c-c6e76aafb87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "59239f13-20b5-4432-b8e7-e7370c84208e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0f5820-8992-4c45-b031-703c6dfa037b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c11df3-ac27-48f6-8cec-82fb49f9d362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3595889-44ee-4194-882d-c7bc366dc8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2337f6-fb6d-4809-9177-3766efb98c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c1f214-83ee-4c9d-937c-9f57fef2de57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96baecc8-c857-4e34-b6b1-b79ca6633feb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bf208a-a935-40b1-8644-60967e84d0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47458362-d7a1-4753-a901-9c4f1c823c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93e18ef-1415-4319-a934-41f72e0e7a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e36eec1-e82f-42fd-8179-b86f31908076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b002b8c-4f38-4974-900d-9c57f94f1be1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48bef12-d929-48d0-951a-550bd8370391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e3b1a0-939a-4b0d-be1d-75462ba3e79d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662b8f55-fe4a-4f91-9acf-6219b8ecf68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1c281a-e806-423d-ba39-b5ecb447f0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f33afff-898d-4574-bde3-bfe03de5669c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f9dba2-6ea3-4a1c-9b39-5a313ff79eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1defd9ef-4f62-49e2-9125-0ed65d8852f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a649af29-df90-4a22-bd8b-45b8497cd465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3de48b8f-d05b-4526-b498-8c92f4600494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162b3d76-db8a-4f66-976b-9c1d3f055f74",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041057b5-b50f-49d6-81cf-c89e14951b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6daecfc-eec1-4075-9b19-0206e4d65cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bf1ca7-0f17-43f5-8890-a0c842506ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "202f111d-d8b6-4b3d-bd0d-b4c3f89da142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440b382f-a5ab-4cd9-a07e-1477c1e500dc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cafab0a-6f8e-4023-acd5-1396f83552d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdea522-770b-40a0-b604-1e13fb21b310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bc7c4a-4016-40b5-b504-7b71f6905ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ed7185-8c76-49bf-a358-fad59bd7ee4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163af8c5-9398-464f-ad7a-ed0cc9b0218a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f657a2b-72bb-4f67-b17a-8cc28843081e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0b31ae-d69d-4b07-882f-98a70a104e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e785d7-f232-4201-8fea-25f557b344fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8022981b-3320-445c-aa8f-9b9049fedcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebd9e46-da7f-46a0-a330-1a2578fd48e6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ac0823-dc68-497b-946f-d2dd62aafd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c12c058-bdc8-4b59-94fd-baa2cc3b8b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e92444-c25f-47f1-a373-3b25daaef6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3752347-78f2-4746-80ee-09b58314f308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c3737d-df92-4d6a-9a87-8305d1615078",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a88bc3-26cf-47c3-a417-e48bb0080c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50d966e-8c39-40d3-b113-4b44292c7cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fca5d3-803a-487d-b547-eb7edda9fa58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92f86cfb-2dfb-4efb-a14a-8b65208dcf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eff50f6-e22c-41f5-8ff5-5614a0e853ab",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f3fe30-a58c-4e4e-950f-f294bf4c6154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa93c8c6-13f5-4125-9663-2efea4375f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2647c6-aa78-40a6-8528-1f2d11b2f305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eff8147c-4735-40a0-9aa0-35411dde081b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4045ab-3817-4944-861a-8b05858db05b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df6ce4b-67de-40c4-87ed-7a6502425207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ef6aea-f875-4b0a-bf9e-24e69e5d9c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389285b0-0f09-4127-9a4c-eb8a9b8fbdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38a6e6b6-e99e-41c9-be19-7b20eb1c7299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a447356-5607-410b-be95-2c6bcd0d914f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00316532-e8c6-44d6-8b2d-5fdd91b5f77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0841cd42-2647-405a-92a9-8926cf1b466d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eb0c7a-43ed-4d66-a952-37ab874d625e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c506b1-91aa-4eb6-9596-477a959ed7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee1912c-0471-45e7-bcd2-a719b0e9b0b3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9407c5e-b13b-4985-96d7-d8755b7b9be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba4394f-8841-4755-b161-9b509f77042e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f6adec-d28c-4af1-8be0-c0e2a524b081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "644c3bc7-e4b4-4118-9580-45492cfde3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7685b41-5a19-4817-a11c-b8200c0c82c7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01bc0c4-eebb-4d19-9454-6a61c88236a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1312e86-d433-4f7c-90ef-20ec7a1df602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4850d9ca-8d23-4c91-a72a-1a7abf1ab1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c406b636-fdcb-438c-b52e-bca5f9224167"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55cf1a13-be18-4ed0-aba8-f1cb358776d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9a9d944-b446-4e44-b73f-93119de0f015",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c187efb7-c6f5-4e7c-96ae-820c9062356a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5aa7cfc-4716-4510-8cbe-49eafb2b6858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2eb35c-7df9-4a89-bf7f-fb9a23e2956c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21e4b975-e8e5-4ecb-99b7-4648c77abb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9b3f5a-d72d-455d-a386-269a9cca1f23",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b364b833-30ff-46a3-8fdf-43a1cf1140d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1ab6cb93-4787-4694-b923-3ab6fc944656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4365d04b-4401-484a-8d72-86efadc5c61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af2e2aa3-db60-4e03-9495-babd1ccf1d27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b767276-113a-42d9-b434-5b7771762e59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c0535f7-0cad-4967-aeb0-88b55ee32e26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf72048f-dcdc-4ca7-9813-71bea86810a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aad076cb-444b-4403-8cfb-af263a290a22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "faeca538-00de-4137-9ce6-c87b20c3dee7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "815d43ed-2ab5-4108-9619-428e51c0d9cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83f9295c-e57f-4cb7-8912-711da8425c59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2611b406-5e3d-481a-8c27-09c0e12a80df"
            }
          }
        ]
      },
      {
        "id": "4ad28f84-df3e-401a-8e3c-89939c7c270f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0af191d4-ddb4-48ff-b6df-2aa24b595174",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45ddf319-34d2-42ce-a3b0-d9b01fa21379",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a74c97a-db19-427e-874c-ccd7b7a08239",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562de2ce-8b36-4aa4-b9bf-018a2f70babf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee4b264-2c67-4486-b851-7d9985a02309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f85842-cdd5-45bd-8607-71d457acbf78",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22886823-f6c1-4cde-886e-f3606f85937b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f441258-c5a2-40ee-9224-fe5c019a05d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed642b5-6c3b-4569-98b5-81014876ba97",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a38172-2264-43bb-9290-dad29696f828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274f15c3-16a1-4e02-9c76-b5aeb9891e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc69ae8-275a-4aae-9bef-07adce7264c3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11cd207-5924-43f3-9c5a-196abbf62c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81d6886-81ac-461b-9a01-5fd77c01112a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3200005-01a6-4422-a1ec-510c3bcc5e50",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8e719a-5d41-4fce-a21e-3715544c6438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94472461-1555-4199-8100-caf608b57437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9377f5d-7cb8-433a-8e67-da0b4933810a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d848a970-4662-4695-9c01-586db4f4c672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7364082-5344-4442-a18d-226b1615aa5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74101fd7-eff0-4978-9874-c7bd3da27a87",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f212b80-f241-4808-ae30-11be09f992cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a59345b-875d-484d-9255-cf7572c7b56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d84b60-c733-4c33-a2eb-17840802eae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5079930-6b77-4b68-ad33-683881345032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60510bd-d2f9-4236-9730-13e684f2413a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bc3481-6f3e-4377-ab78-fb5e9c87dc73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf074ff7-aa6f-48b6-928a-f94acf1216f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95458936-362c-497b-8d5f-c5521f9a1a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321f4c86-7e16-4cae-b860-089d21d171e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778cf975-5d27-48ac-938e-96290dc330e3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407b5e36-98f2-4ff8-876e-7d55c1ef14cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d80e0f1d-ef1c-424b-bf76-0066494b0d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24977abc-76fa-4595-8bb2-de3f34aef512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47573843-c10d-44bc-8071-a5a1bdf76d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b597c94-e399-4d42-9ea8-5ac5b25ccad7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410ec1ad-cf8e-4065-b526-933d8282ff63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76bfd2d0-9d48-4513-988d-fdbe347e6f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ac1756-01f8-44bb-ae8f-239a51cecc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9beba858-a119-459f-9da1-4f22c23b7e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946131e1-1958-49a9-8d39-21de1f2b297e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9669921a-99bf-4291-bcef-c6f7775287a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda155f8-fbf5-4930-9340-897df6e2c106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72408eab-fcf5-4ce2-9187-c7f0806dc335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908dc93d-4c1b-46bb-bb20-5fe6aa4af8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7b400f-64ae-4380-a2ab-e0c43e1c9a66",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca755e9-4e3a-4ccd-8bef-f245d6184391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4e5193-eb63-4762-8f30-3e3258b67ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c31132-c2a3-48f4-a7b4-39fb78ccd3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b20c37f-1d0b-4430-a5f0-ca3f3cbef188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd63677-a82a-49a5-9ab4-7c85085344b1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c787861-6b0e-4ed1-84dd-f235fabf39c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "705cce11-748f-4401-a4a6-81f9b7806c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96dde37-aa49-49a1-9ceb-757d4a7828d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606d1942-c899-4c23-aea8-62a50132a5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39396286-973a-45a9-b549-d372c5d5ec0e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a400068-48d2-4365-85bd-a5f184bb2d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34c5fdae-d546-470c-a0d0-d41be6704f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfbf16b-cac5-4c56-99b4-70272a2da7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "360f09ba-7a9f-4453-9f40-2cbdce5fd0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49a83a3-5028-4a7c-bde2-8ce379c4e6db",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d778ea8c-c88b-49ea-a51f-e9d4ac49eb26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68c74ea3-233f-491a-95e6-04aeb3bb6465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4840f932-8427-4a5d-8386-32def4cbb62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34863b4-6594-4c50-ac41-4731dbfb7aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6fd057-30bd-4bee-b1c1-05d716b8d408",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cdc39d-97b4-4f40-bcc4-35c73a2fe706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b238995-7a82-41f0-851d-3de56cf789f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77391e90-2dc8-4297-966b-7723fdc8506f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732b825e-9e2e-471c-a620-56cd27eab2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ba4b2e-ac52-41d4-8946-9100bc47ee6d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009b2cdf-0885-4dbc-a3c8-9bcd0cb4c7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146499e7-8d1c-47bb-a694-0dfdf0791d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aec9a58-6e19-423c-9454-0e42e664a9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a111ccaa-cd95-44d5-8983-2182100d56ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524215bb-6e0a-42ff-9279-1516bea6e1f7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d204bdd0-a543-4415-8e88-7e9bb8d11ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4e7c84-5418-405a-bfe5-997e9361ca51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f99d5cb-dab3-410c-8c95-a5169f93b22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43112a0-4c1b-4348-b668-fa278e6743cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0268c9d-bbdd-4321-9ab7-fb1746e4d99f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f8d02c-3022-4eed-9640-d6572546a7dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d6f8f7-a69c-4d7f-b692-2704c1e71b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6131df75-c115-4cbd-aaeb-37da8b15a955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ea8340-f9ce-441c-a07e-c4e414af7601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa798c98-09a4-4431-8189-51d89bc9e9b4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7d2abd-a3ab-45ae-99ed-6b2d29384f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da05f0f5-843f-4368-88f2-5d6e82c16042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b050bc3-3e93-442f-9cb7-2553b9567cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b111cd2-ecf1-42d1-8e00-d20d3ddb69bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642ea027-edcd-4cdf-8596-adc81fde60d1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ca0cd8-4e4f-46ae-bc4e-99ded4c25d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fe2ab3-3042-4aee-816c-4f1b1036c252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546a9cc2-2fbe-4159-92a7-8ef6ed28d3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e643b806-afe9-44e2-a65f-4e7bb11cdbb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7eb715b-0932-4cac-8d25-7fb75af45ec1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09fea7d-a4f0-4a98-8c8a-93a6cf88f603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781170d3-275b-47c8-8326-6423a881c7d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d198225-16e0-45e0-8517-5484a44ea335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b178c03a-a5f3-46ab-a33e-99bb14c2656b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7164de0f-5cca-48cb-beb3-a03a2cf2ef46",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde2c888-202c-42cd-9f0b-d21586e3cc92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5f1dcd-c7d2-4981-be6c-a441fb733c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7de56b4-ab23-4a5f-adc6-1d2f64a055dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039b9b74-650d-44bc-9405-e152c305d547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db19aaf-6407-4af6-a356-bb78e00a0963",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8f60da-947f-44e0-a63e-e17d51ec261b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e0584f8-552b-4fc0-9dde-2360ba2b7f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25240621-98df-4274-8c0f-95e99ed709e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80bec3ce-d258-4d70-8be4-680266ed264d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b967c22-a83f-420a-90fd-673c213bdd38",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1745212b-2708-4479-bee5-f86f3da6bb43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1336169-7dce-4e8b-bfb1-3aff19dfdf49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dabb06-2f45-4456-88bf-38fb96f09819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ea9c8a-bb71-4d76-a4cb-d9c877040fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648f4e11-4651-4580-a519-ccde4dbb4afd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dd61bc-24e7-44b8-a9b2-02ca2a0e2f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff94e890-e87b-4f46-92c9-db3ac3ba17a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bdd852-1a6d-4141-b481-3ec711df10dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7531d1-fafb-439b-93e6-b027107c0aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb39c18-41bd-4c02-9f94-1800956e6c5a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceab300c-d001-4376-a050-960804dececa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4d7a24-636c-47a2-b8b0-f073242a4209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9be5a9f-2ce1-4862-9632-63f699c87263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30381a33-ca1b-447f-8899-fcc161ab7328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaae8cce-7405-496a-bf36-fe242ae6ba3c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48af995-e82f-406c-bbbe-3585942cf519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e231f9d8-a7eb-4c74-b1a4-587beafd6246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d3c43a-a713-4a19-9e7b-4c3fff713bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4b1481-413a-414d-8973-bf79b4bfd4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec208fee-8ac6-463b-abf4-413bcaa5b30f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0c5b4c-7556-4ff7-bc3d-2a5a3c41ac1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29f7cb5a-ca38-4f11-a593-e96de04ec9c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce04c74-1eae-4317-b537-9cbfc6383158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0eed8e3-2167-4d38-9673-87e930393ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825505c7-fda1-4714-8527-3720ab7e800e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7623e64-683e-4b59-a5dc-4e91ea962153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbf0b5b-9bf9-4b16-b28a-0754343786f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85875ea0-0360-4b26-a666-b89bfa16f3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3915313-39ea-480c-83f8-984f66c7384d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df93d3a-a850-4c61-8bd0-2b4e095b85a6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1a428c-c7dc-456e-8caf-4fec1d22fe9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "239d6c31-2921-44e9-9c87-4b37f711aecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "552044c6-eef1-478e-9afc-17c515a8cd5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d5df45-1bb3-42c3-b980-2be1389942af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47d162f-ae7a-45e5-8bfa-11627138e821",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668ae164-9585-441e-9e49-b1ef7acfee40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e51b7d-c6e0-4243-8846-4daca617086c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "560f4fb5-8012-4584-b6b3-f83704cec0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e45110b-f83f-498f-8eda-52e781b73aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cb583a-b916-4f47-91d6-9e8aaf665660",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8140ebe-6606-4963-b576-375e9ed41918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "275de278-9d23-4028-afd9-7b4880f57e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111fce31-7bcd-4213-a5cb-823ef98edc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e307d98-dff8-4ed8-8ad8-4518c2f33e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5acb78-b1c2-4852-97db-9a4b3370ade7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3e7392-7340-4102-a80e-c61dd3714af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a567e0f7-3673-4c32-beff-9689b5c52fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6456eca2-6049-4117-8ea4-659d168c8498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887a56e9-69b0-465a-a65c-f2db5fa22904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5275413b-12a1-41e1-b393-bb2389334d10",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4836f9d-74ce-4b45-8e3e-f58870bf403b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c6154b-d496-47f7-ab1c-6d9e1dbbcf98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e25772-77a9-44f5-8405-fd1f29f08465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac6f15a-025d-4ccc-bec5-418111b43781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25959958-ee5a-42f2-9828-fd1c9ef03073",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179b8723-10e3-4686-a018-ebacff627901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1388ba8d-8a61-4a44-a03c-c485aec6d266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412a6d23-4f06-45a9-9fe5-4b74efae1c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd98595-dd6e-454d-8268-031fa0cf68e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccea488b-04f6-43ee-bf6b-02de21a3c16c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4efc64b-a153-469b-8627-4b150c1ceba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee24d8e2-6572-4cd3-bfbd-bddcb12b68ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d20ce3-3c1d-48fe-8d71-f2f139a889a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6225104-60fd-4662-a2a5-ef2bd599a1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54887a4c-5096-4267-a282-5fe4e95a9b82",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30eb651-4a36-45e0-838c-ea31b7a23f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb73e546-8e57-4564-b3fd-3dadf24c8f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68348c9a-1ac3-4e8e-af9f-365eb7e000d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab79ac6-4080-4f96-affd-ce70077cd213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09147fa-529e-458d-8cc1-c8e9e1dffb37",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d5eafd-7935-4208-bbc7-2cb13f990414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bd2cb2-76c7-408d-9365-5d16670f5a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0d4312-5c1b-41b7-afbd-ae269d38d2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3441e87-49c8-490e-be43-a9ead7ca9c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b95f339-5c26-45e8-8c76-ce95578b86a4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0e6596-f2bb-4146-b49f-9ec0ffa9082f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ddaf30-5adb-4701-af5c-be88d3fb655e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8c45f7-bf9f-4388-b119-7ed38e39c814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffd1fb7-fbfa-44be-831c-96931e1e16e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8266f7-01a9-4940-8a58-f9fd9c2137d6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923e6212-eebe-4281-add7-68d3714e8674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a80e391-f499-4bee-855c-f24bc530acbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e711b2d-4c4c-416b-bbce-5c0d6aec3e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded126e3-6d76-4666-9e85-4bfbdba55807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743fd33b-6741-484f-ba6b-155a52d7d4b2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9ee201-81df-42ce-a997-d8fd1a5ee899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcd5048-26e8-4d98-8767-7bc70b2aa717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38212fa1-fa08-48d6-98c0-2e8970bdc12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08e71f1-44d9-47f3-9820-098cf6fa6d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eea5acf-2c51-4ee5-b106-8c283aab73b0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7017d718-1e63-40bc-8d62-78b7bb9bd27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4302a76a-42ee-457d-9cba-ee21c0e83859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee141fb-475b-4ed2-a37c-77b27bc753f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe3cc7b-65bd-44b2-9004-c4bd9800fd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2277e868-c1f4-42b9-83e1-9c62117a0615",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221ccdff-ca35-45f9-bdf3-bf6feee8fbe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9b2cbd-cc6a-4004-b096-3f01e7e38cbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad37b2d-633f-438d-bac0-8cb4c8bb82fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18da2f7-7663-4219-9e50-088e278d7912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98fcaef-89e0-4596-8408-470772a5bb10",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01c8037-f4b8-4ffd-bf69-d4fb44fc0182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b376ad-7ff6-4082-8642-485b3b89f941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ebb513-eee4-4a6a-b458-ca110d3f5d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536ffaec-dd54-4ffa-8cd3-73e2b1b83adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3583eeec-0675-4618-ab82-e3a5c3d31829",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3c60d3-2434-47bf-b3d4-75b522a10fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd59deeb-b48a-42fd-94ee-cb09a4ec841a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8fcc03-98e2-42b2-9e6c-5e15d6af06dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa020eb7-ca4e-40de-b02f-a2196b0acc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d31d30b-da0b-4695-bc9a-fdd10a41899c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e64de7-af6e-47ea-b488-f62b7c55b2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4680087d-d7a4-4f85-8c05-8c84c3fc5f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3eae8d8-2916-4037-8ec7-b7bccf3c7e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f141711a-2dc6-478a-94a1-3aa174748e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcc64ec-9de3-4686-aee1-3efa2b10388a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880b812e-4ccb-4917-a13b-b7711254d654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff479f4e-70f7-4277-80f3-0ca841b3411e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ec4746-35cb-4977-84f5-91a85d7e7819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9baaf84e-fe4f-4aab-a4f6-3f97ed7153d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337e4486-6ee4-4e65-b05d-f3cc974fae88",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f5c3f3-107b-4ff3-9ff2-432a646b2586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e742f1d9-b9d1-404e-8100-b1de0259fb1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ae7878-2573-4153-8e53-c6f278ff4485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d55567d-5a60-448c-86b0-51551927c532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b6e44b-17cc-4af4-8fa3-875b4a6b043c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce20d86-6fb7-410c-a67d-124bef16794f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c5ae1b-1186-4d41-99fb-5bd7b94ded82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9a912c-ba3d-41e7-b24b-d3ca7057c9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55c575c-ed1e-4d59-88fa-907839e0251c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cc4681-40d4-4e77-baf9-ac706792dd3e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8702416-f327-47bf-8c62-2813e81bc4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8335015f-564e-4f13-a354-a4390bdc8d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "019b1da4-a88f-45e4-af13-aa716d67cbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184c7a13-492e-4072-8626-9fd6906484d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4f8761-11e9-42ef-a786-38434441eff8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89309e2a-026e-40da-acd7-039d43ee0003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5b0ce8-361a-4e8f-8ee4-6af6517c8d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7011daf6-895f-42c2-abde-c1bb438754e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639e763c-3aff-405e-ab83-3b3997cfaf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdc6936-ff28-4391-8e98-967ba2689c52",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd0f3b9-3fcc-4952-9904-a45e6840dc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97bb84da-ddc5-4f71-96c7-d262162c21a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b991c2-6bec-4793-8800-35957f14043b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c857a1b-1925-4b4e-b461-307c426715be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753df643-8759-425f-bdcf-ff2c22db4d1f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad522bec-0ac2-4264-9ec0-47cdfe5fee95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7615cc0b-0c6e-4f6c-904e-b8bac903534e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554d203d-f85a-4642-9fe2-140074d6cdbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1db302-9734-47e3-a509-b2f0c10e899e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981a4e60-52e1-4a01-b4d0-c627f848aab8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c55e4c0-6adb-4bd6-8847-ca9aa199aa46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba67fd6-0b17-446d-8816-601a5ae6ac5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b2bc98-e5b1-4023-94f4-5600b04d01f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43438dfe-cfb3-4ee2-8a32-4d93886f4470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bad11f9-7cc6-44fa-8d08-ccab1409b847",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed3178b-dddc-45d7-aa4f-2414267e7b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6131ad74-9894-4e70-9af2-98265d2cf4f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c03744-b0b8-4cca-ab6b-b38d207ae544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03405517-12a9-4b21-a4ac-fed82f33a3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2082dd3b-2cf9-4713-87ba-1bd0ef3090bc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f1da5a-d482-4a91-a841-cc5faaf24cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225cea05-835d-4646-b4db-36ee2a88696d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bacf60-bb3e-4e93-a3d2-70ca6f65398e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5517c20e-7a43-4498-a12a-96aef7220f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a5c5fd-b915-4e23-8677-f5183bf05b01",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f104400-d11e-4b47-9585-3e3ed7837973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14009b28-39a2-497a-ac08-111d644c9bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673f1615-58c2-4ccc-8be9-fc926cb62235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2472d1e-5db2-4c1d-a350-bea212e8d350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e300d3-c22a-40ed-96f8-f7c74c144275",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac53afbe-bbaf-4f20-9a8f-5ebc2a200ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a54e19-99eb-4489-8eff-1849475faf62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ed700b-ee38-48d6-a34a-4f8231276edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5317f68-2956-404b-99eb-fe44897de011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a376147b-df2d-448b-8d78-0a486d11a850",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe0a4dd-cfc7-4b8e-8798-d39de855eb72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1db6078-2fa4-4a8e-acf6-b6689259556f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d59f613-548d-40df-80de-6b0d16f999b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ccc856-b264-45b8-953d-9bd5ca7d8ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd345274-c287-4ced-9659-14c8d4d04066",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25055988-5b8b-4573-99a2-bfcc9bc9416c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34402fc9-6b67-483a-9728-b0f84fda72b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5583524-a7da-49cb-935e-ea3d6bb053b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7748b17-71ea-464f-8633-ff70f6f55a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c279fa47-31a0-4446-8f7a-785706b04f1f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99082541-2e3e-402c-997d-8b8caa829e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5c0337-32ae-41f1-95ea-87a5aa21e265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c09898-939c-4a23-afa3-3d1816ae2d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49096256-d13d-44bd-b5e8-a7f1cc2d0344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49f407d-3e60-49c4-aa47-4ea2c77fe1c8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b9dc3e-3f0f-489b-9a74-a12bf11e8b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81e9939-d106-4549-a579-280f1085e849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efad657c-8ad8-44d1-a1c0-9fefcefa92d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d19cc75-170b-4792-ab78-41a45aa19580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947a76a9-9601-4c73-9b18-4ef4dba088c7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7b8df9-5e71-4593-b6c6-b392d2bbb3b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d539b20a-7f33-4e53-9ec2-ec46c7fcf9f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e29247-9f59-421e-8dc9-85af82f97429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de85eab-5fa2-4003-b15b-423bfd74fa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3f2391-0333-4412-8198-4774c7d52d45",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fc8511-69bb-4760-b9a1-c06a02fa5efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf2fb6f-25fd-4454-9ebd-d5e08a873361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd4e928-1134-4d90-a6fc-8c85c5bbd0d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3807f094-3f75-4e7a-ab73-34f4862b35c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b152e64-202a-4619-8ddd-2e723894b9a3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2b363f-1934-4386-ba25-23129aacbe46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b42be79-a64b-43b4-b535-da299cde06a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab69685d-036c-4250-a010-11370443fe0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40369fc1-7f71-4ca3-9664-c7dae3d3a9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb42923e-3f24-4920-84a7-4141908d5d87",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c39742-b078-4c90-ba68-5531a7d59bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae7b02e-b1b1-4b6c-9f35-29de329a81fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f284f045-5a82-4b0e-a7cf-fd219e904a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f0f2b8-7a42-46a2-b943-6dd61839b9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f91ee6-b27b-4276-bfd0-9f38bd52d482",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bf434e-fa10-4347-8115-33d2fb92e122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b3a5256-7357-4f43-88a2-951080bc3fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c0626e-e94e-42c7-bfa3-1fd466980002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3a5067-3a1a-4ab3-9672-8a1fcaf1ae51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ac7efa-2508-4249-a0bb-a891ed7fef19",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60157702-bf7e-4c60-887e-6e99df647b8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7560a508-22eb-41d0-a9d1-3b43c4061e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c17d80a-a8c2-450d-b44e-3231972d1404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2c2932-3073-4833-862f-89837a30e521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c298449-7348-4bd1-a7cd-8fcb64e3df1f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70290b69-c390-4371-9d7d-6aa00e6d8e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ee5457-6a54-4e9d-b8f0-22fd579aa0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48276ec5-3dd7-4ffd-8797-b0538e6cd354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add1707a-30a0-46a0-8abd-32f4cae87ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05741115-12ff-4917-aa63-43a9f229afbb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db767a8-9dd5-47c1-82ce-b1b922e290fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "823a4438-1be9-40a4-bda0-9833a29ab629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed4b2cf-59d8-4834-930b-b13579a560b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeac528e-a718-4f62-9203-1c01a65e6b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6e9031-3b65-40dd-87a9-94eb8af9ee7f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e2e477-ee29-4a84-99ea-635d6ce56ab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a17a38f-003e-493d-9692-6ed35600be3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "154c736d-c294-436d-aca0-95dbc8b21fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19e5aeb-7398-465c-bb90-ac2462380fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721bd7cf-8bf0-4068-ac22-8b8f4e912b9c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99195a73-6eab-46dc-9bc3-41590e23ff32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353471bd-0eb4-4ab2-b37e-17dae36168ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3f5cf7-9892-4ce4-8238-e108a03264a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cb0d75-d862-4af4-95af-59a188713857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5978e9-2477-4743-927b-f1245d32a0a9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebf230c-77bb-417d-b642-76fb9b27fdb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "179fd8a2-408c-4f22-80a7-9116f8bb6e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3b38b9-6214-4464-8bd8-31436de93cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b39bf3f-450a-4837-bc85-ac841bc8bec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e72ca7-8f34-4c04-84a6-85b9a12ee011",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48094bf4-5d4f-4c3a-9053-b271325e482c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab539912-fe8c-4a7d-90f7-7851a697c9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16bddd5-d5ef-4e5d-b66c-eeebb35681ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5334950e-b978-4a16-8b5d-b57fd1651955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f2dfe4-65c0-4d11-9529-df76f9fd85d9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d675c73-3021-410d-9ab8-194dd49ea536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4307e6-1a2e-4daf-ace3-d041394bef0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82fe444-0c24-4ed7-af64-0cad04538caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec186c6-473b-44d3-b7d0-0544ed4cca77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a6ea4d-6b26-47cf-b491-49858aa9d2f8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a03b127-9b91-4f5e-ab36-92d2f471704c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f68f2ac-e18e-4a32-be1d-3e7ea0be5a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc1307c-1399-4cec-959f-669f5e7f5ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03af8f5c-f3c9-4b84-a98e-327da22b9374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b3f6b6-3fb9-4544-8319-9cd6dc764785",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b996f21e-4a77-4562-a617-6fbbdd64b5cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fb0e935-482f-46ef-81f0-4e40d5a1cf14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8e982f-bf10-40a5-b1ad-ba69369d2486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884b7c17-25bc-4327-b74a-e9116cba3f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37106c65-e436-49b1-9b59-5249d7e45b11",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c696ab93-3e41-40f2-a7ce-dc9f585ffbc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb6757c-e042-4e75-9fea-e25dff6f27fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5047abdb-c3bd-44cf-b984-7fae34aa61ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b11eeb-53c1-4c60-a271-1c8a885278b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f602dd8-2df0-4591-a5d2-f307e603afa5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaf1898-70e7-46ed-9320-0645030e9d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "771a06d5-0220-45c4-a735-fbe2b0bc668b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd176369-5df8-46df-9068-a141efb4297b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5650ab6-acf2-42d0-a4ef-a3c1c7be194d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784cac45-5554-436b-882f-209100907cb4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdde1319-f292-47e1-8d24-7defee5574da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3363e52d-a624-4203-82e3-9ece1d0c0dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2159d4-0891-4130-84fc-78c156eb126a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1318c0-e6b4-4ee4-a02c-4964ca451a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ee75fb-8cee-47ad-9c01-9fb27c286a8f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b561e1f-a2c3-4908-8b5e-4f7668b4925c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c84176b4-fc6e-46b3-8caa-c78f3c105aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271b9a75-8554-4fd7-8b39-f67a5adb199f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7e7bc4-9a32-47fe-a82f-ed04dae7a206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca9383a-b7a3-414e-b804-40deb8d1b2bf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d4a943-43c0-4228-9207-f0f90e910f82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae63493-28ff-4622-9287-06749eb79452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d669c5-22e9-4d1b-98c9-2d8042fbe84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24468f98-8d81-470a-ae20-6a9a823de4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d356c0f-fb12-41ef-8f19-52be3e833647",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e03e8ff-674e-436f-ae35-cb626e7309bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2308b97c-a1a4-4984-8d67-c36622f603c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7c84ff-aa52-41f8-a5bf-943b9e9aa22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a298deaa-cf45-4968-8c25-3ee69e296e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f554fd9d-1cee-4c9e-a134-b32bc3f9e7d8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b511e87-5efc-41b8-bac0-82f11a60c410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7715f0e-db46-42a7-9836-bba4eace2e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22023a5f-8f4b-446d-b4aa-b6986313c130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790bfe9e-58a7-4231-8eb8-7e259d0eb747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6041ba-60fb-4a85-831d-63821d91640d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41240003-bbdc-48ff-84dd-628f7c8833f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac41cab-8e22-4617-9f09-2cb688680b73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1ea905-0965-408b-8a0f-ca0b98f22cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cec5057-0efe-468b-9b5c-9029e1a6dd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024de672-e544-4981-8e93-40a9eb4c40fb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d8aa73-48f5-44db-b12d-51e141ab5d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a8a68b-c5bf-426f-a5e5-666c53fb7ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccde2e12-ee34-4ba5-81f3-49e99af6c080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9ed47a-9449-48ab-9aaa-c76581057ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd03104-77ba-4f43-a155-5dbeab27ac94",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3521b59c-3a06-40f2-8bff-5d2a96cc842b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46d84634-5de4-4eb2-8e08-6b001fb19137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cd9b1a-af77-489e-8586-93e2d6f1e713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff72982-9ee5-4cad-bf98-3d2386bafeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf53625-e742-4106-877c-305718d55cdf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77ebdb4-93d3-4f16-a6fc-f461a7c20de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "359f26bf-f8ae-48ec-afec-7590c15fdf74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253e8d8a-b83d-4be1-a858-3b41b672ff6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3fb350-db30-4f62-b1ea-dfbad2b803d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6e7ac7-aaf2-4769-9e58-de37e87c7e11",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf18d472-ddd7-44f3-ad4e-5cab4f42bcbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0416ec6-45d0-4231-8102-4ac7952bc0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b153051-7071-4f2b-8fb3-ec5be18d051c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fc5e7b-d725-482b-9b56-769136f5cbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54cb2ae-94df-40f3-9ed1-df54160e29fc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56af0ad-4f6f-4879-9343-1aa5ee5a75b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce69cdf-6f3b-4ff1-8bb2-1d9b85d6c0bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72f9e33-61c3-4574-8f98-820e1f1595e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2748bee-439c-4b33-9651-b33b1d1c74d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63142c4c-e920-47e5-8e64-9a68014aad37",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c63463-cc15-4161-948e-6ff38da69ecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2a5dd6b-4ba0-4617-baf2-604da4fea656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cfa0c2-3d4f-431e-bdeb-56bfbd56bb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1ba8b7-75fc-43cd-9370-9e63e58cfbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fb4e95-4890-4305-a0d3-e36b832ae0d2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70f68ad-e864-4118-85b1-b28474475188",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f106628-0313-4226-83d8-2be203bac22e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e030042-e75c-4b97-a278-7f79c1f6b2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da40e74b-a97b-4817-a1f5-abf86d27ff04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8180f7-f508-4b9c-a7c0-3f19088b171e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8e6cba-5e20-4b21-b471-dfd43718c1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e82a35-6e0b-47c2-bb04-6186d3cfc7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c06867-e9fb-44ee-ba98-7dda5c72eea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8c90c0-b0ae-49a3-b5e3-4e84e4337fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49266e9-007a-42fa-ba66-18f867f4e489",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1861c-1038-43d4-8ac6-2cd749877241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "715775b0-097b-4e20-b73c-6bfb5780895e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1b0cd8-e58c-486a-a0f0-a7483c710f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0dd63b-b807-4f64-9587-8e4437e2ee1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f112192-9f86-4631-b890-f97a8be54c35",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4506d684-eb70-4395-ab8a-5ec629a4a47d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f11303-5b67-4357-a9d3-f7e3fa9e7d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f72b64-017a-4527-afc0-b2d324dc81e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4768c24-cf34-432c-a72b-fa0276d50e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcb44a3-66c3-48b9-bdb3-0a3efb194625",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a75762-ba79-4dd3-8dc3-0de357faef9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69be525e-c50e-475a-a9cb-2cf6c3d82c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33fee90-223f-4cc0-a4f4-6bd27d407af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ebaf87-6f03-4eca-80b2-f9ce0f82bd9d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ccc153e-08e4-44f5-8765-de7cb060ae4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d289e373-db46-4468-967e-f18c2fbb3048"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0d118cb-478f-43f7-b3b2-af8d1087be3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f01df331-f96a-4901-a9b1-22b36da5e21c"
                    }
                  }
                ]
              },
              {
                "id": "d4638d89-65a1-4c38-83da-ed6589b4e3e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e25186a-6ef1-4366-a056-9900d53408e9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e792a33-d21d-4195-ac53-3b748508220c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cd69f17c-f247-449a-8fa5-51b7fd67d0ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63775933-f9a7-4a93-8fb1-4b062c4e3d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b9316be-e076-4fe1-b7a7-820e85cadbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2437229e-c258-420a-a5c7-75f3f2099a4b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c009d2e-340a-47e1-9a40-e6f89b2793e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "46e5e4c8-daea-4999-ba4c-6ed9d6cbfd24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdb05fc-7df2-4249-8925-e4dec4d14a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4122b272-188f-48a5-83e4-8da988f16748"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acf08bb7-df5f-4f51-90f8-f5627ea28c0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8433f29b-2e5b-4283-b215-59a29624750e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e53374d4-f78c-467c-9018-cbe75a775414",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "feb8b5cf-8dd9-4b1c-9778-c9d95a9f3795"
                    }
                  }
                ]
              },
              {
                "id": "20a1e5d9-6f5f-4ddf-84a7-da028bf5dd0f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f711e225-59d5-43cd-a4fc-304a872c8684",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66026d1f-7d14-45c9-82c3-aaa8d1ea0c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ba300623-134f-41cb-b682-a20384b47764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c78331-6e10-4e16-9824-1b6d981f0fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4f67cd-1e84-4c8b-868a-6e84c3082ebf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e0ec2aa6-35b2-47de-8872-79779534eced",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b34d33ec-9e31-4513-b582-fb047ca01ecb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76f13d51-4197-49a0-bd08-e66ba4f44697",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a300582-2459-4e66-83bd-2e29b2d2e38a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77b50194-17da-4970-9332-003b964b49d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39b0ed0a-245b-4bf5-9680-ca89cef88e5f"
                    }
                  }
                ]
              },
              {
                "id": "39e8bea4-3b80-4db1-a27b-b18994fa593a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51600119-9715-483d-aa74-56e2ecbfd62a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c5c9a121-218b-424b-907c-c3085b3d2828"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7df98226-02c3-4bf0-896a-f067727cc7eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e823f89-fe4f-45bc-b6c9-081a3e584dae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22cf4918-79d0-41e5-be77-41b9e0d7acde",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "44fff8bb-f572-4447-aee7-ca99f0e41ccc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d11a1166-10c3-4953-bb17-c300a83e9fe8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "035200c7-2a07-427f-9dbb-899d514415e0"
            }
          }
        ]
      },
      {
        "id": "de1cfd5b-f679-4a42-8bcd-5dc830ff20df",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a1bafdbb-f0bf-42a5-bcbd-baed0801057a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2f16a49-8a2c-4fc1-b468-6a3f46fbc4fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1b6dc55-0dcf-4d94-b674-f218a68d8e55",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de13fbe-8183-4beb-96ff-587403147223",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "13828fba-cced-4836-b347-d963be92d7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023ed6ba-56eb-4989-9259-6c9af9361223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "373e37b2-7395-4e5d-aa68-c6b27c15dfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fc1415-e67c-4e9f-8c42-89a02f7dd57c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c48185-167a-4d5b-91d5-efe9f57a6088",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bce1bb6d-7c5a-4152-9454-d31cbb79b13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2588a0fc-14ce-4ba2-9a58-ae3cfdeef382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "744dcd36-d7df-40dd-be13-a49fd8ae9a1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58be97c8-49a4-42be-9f26-1e2f88850b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a041f7a5-c6b9-419c-a7a4-c1501b66077a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3a445e4-dbed-4902-b2be-a5b24c4f290f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b347111-4149-4477-bbbf-cdf36f768d58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d483f8f-90ad-4b11-9e30-e5efd311b77f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0480ab0c-fcf1-480b-9cd7-1e3e34a71cd3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91c63a1e-2284-4ee3-bb13-08fc3f866fe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61347c2a-2ec2-4ddb-b94a-a5d4c9232f66"
            }
          }
        ]
      },
      {
        "id": "7225e113-fa94-4cf8-88bf-139cdd24b6a9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "03a2e9fa-f70e-4b97-a305-c6a8537c6a1b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81451b15-9ada-443e-8d77-430e316908c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86e78328-2c90-4806-ac13-0f0255dc85ce",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7e3255-87a9-463a-a7de-8252884f2122",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e259ebdc-3b5f-43f2-b295-119670b67bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbbeacb-f2a5-423c-9915-0131dc415a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07827bda-d2be-4ee9-b46f-32a30b637727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c2d25a-6905-4a3c-a0f9-942dafaeb079",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3659b25-6bad-4c13-a533-3ddaaa4e761e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ddac5201-4028-4f6d-bc9e-1dc99223a73f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aeae57e-9fb1-446b-aefa-e816356a0328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00343aa9-6912-4251-9c8d-33750247cd2f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29b40a2d-db12-4769-8e81-7f10c6f6cdae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a300fe56-9371-40bd-8ae4-ae31cb9274ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "389f5fbe-fd8f-42af-bff6-3def036a59a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca28a8dd-c0b4-4134-bab0-f5e8676e6a1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ad1f51a-0961-40be-a4a6-e41a86695a3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d57e5ebb-9eae-4990-b57b-7bb3ab8bf3c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9b944da-f231-4652-b2f9-5078f9c8a675",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db5e906a-fd97-416e-8e64-19ca480319cf"
            }
          }
        ]
      },
      {
        "id": "ad1c18eb-4b9e-442b-b14c-64f179eed48e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d44c1090-aa18-42d7-89be-60fb64fa867c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1ffe287-14ef-4ff1-bb56-39541f172adc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9b1b623-1f7f-4e12-b8a8-5727683ddd1e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754d282a-07fc-4e1b-b84b-1aefa344c3fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3217e0c2-aaae-4a46-aa4f-df223c434156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77605706-1919-4f0e-92d3-792a5cf8e027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c25b5da7-d2dd-435a-bbba-4878d6d9a1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e182aae-9a01-43bf-8d8a-c718dba92527",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471c25ca-a09a-4b4c-b5ad-6bfe07bdce94",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c702fb33-8cf6-46ce-9ed3-3d733d3fdaf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c142b773-2d5a-4bd3-840a-13eeca777e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b66ac1f-0504-476e-840e-9fa4013050d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1963fb07-63c8-428d-9c94-f8bf31076aff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf72c118-8b58-4ca1-b7d3-210c91c7cb84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "caf28b35-a0c3-4a9f-8a04-f70e9ee09852",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c611bd24-e771-4c08-8f10-298800507fc0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d0b229d-2ac7-43a1-95d4-e868745deba0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f3cd1103-34d5-466f-932f-acaa134d758b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c976dff-a9e6-4d86-8c59-c121078dec72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10eb9b3c-c97d-4be4-85a1-ba1c1e879522"
            }
          }
        ]
      },
      {
        "id": "40ebccb8-e58d-4b04-ab31-9e27457838ec",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5ba7097-7a0b-4a39-bbdc-f20a43acd2df",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "811ca61e-4b2d-47e1-be02-cae3fefcd9e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e846969f-d53c-4ead-b0db-5ebf29a86308",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df0071eb-c7f1-4439-8011-9e3075f4f6b7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e24fd0b6-67f0-4dc0-a234-2c5d9627bf61",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 353.96525096525096,
      "responseMin": 21,
      "responseMax": 7719,
      "responseSd": 1021.5031332806354,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677112765975,
      "completed": 1677112868578
    },
    "executions": [
      {
        "id": "7782f385-1713-48a5-8b7d-e843cb24a8b3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f9d9efca-7f55-4f0f-a675-9c1325e3ed5a",
          "httpRequestId": "0480bcb7-f351-4b94-aa85-dd0ecac477c6"
        },
        "item": {
          "id": "7782f385-1713-48a5-8b7d-e843cb24a8b3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b879f2a2-39d6-46a8-bfcc-e1a76ae9b191",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "60149a1a-6535-45ef-a630-d8eefd9b31b8",
        "cursor": {
          "ref": "b54d7de1-023e-4426-802a-e13c758dc3d5",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7bc1f127-9feb-48f4-b21b-33e72e16ea85"
        },
        "item": {
          "id": "60149a1a-6535-45ef-a630-d8eefd9b31b8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9064e926-5bf1-48d1-9b24-79454a3e5872",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "6b8b6255-a692-48fb-b051-28319a2d1744",
        "cursor": {
          "ref": "119b5462-594d-4ecc-af31-66930eae37f7",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6ff07e68-284c-4892-92d0-74f3fa86f8b8"
        },
        "item": {
          "id": "6b8b6255-a692-48fb-b051-28319a2d1744",
          "name": "did_json"
        },
        "response": {
          "id": "2505b840-4f05-4313-a308-900600509973",
          "status": "OK",
          "code": 200,
          "responseTime": 607,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5649923e-e513-402a-81a0-32fa022b1ba4",
        "cursor": {
          "ref": "8cfe1735-405e-49d4-a57c-65e582b4e7b7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8462c34-faef-4393-bd3f-fb7ed3d29fc0"
        },
        "item": {
          "id": "5649923e-e513-402a-81a0-32fa022b1ba4",
          "name": "did:invalid"
        },
        "response": {
          "id": "ba4f085b-c361-4f27-ba8b-328dca852630",
          "status": "Not Found",
          "code": 404,
          "responseTime": 789,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5649923e-e513-402a-81a0-32fa022b1ba4",
        "cursor": {
          "ref": "8cfe1735-405e-49d4-a57c-65e582b4e7b7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d8462c34-faef-4393-bd3f-fb7ed3d29fc0"
        },
        "item": {
          "id": "5649923e-e513-402a-81a0-32fa022b1ba4",
          "name": "did:invalid"
        },
        "response": {
          "id": "ba4f085b-c361-4f27-ba8b-328dca852630",
          "status": "Not Found",
          "code": 404,
          "responseTime": 789,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c52c4c5b-c089-4a2f-aa97-b501105bd726",
        "cursor": {
          "ref": "2d4e9e7a-e0e7-4b85-9e3c-7cae1802303e",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "90c31064-0710-49a5-8035-3f844db1e669"
        },
        "item": {
          "id": "c52c4c5b-c089-4a2f-aa97-b501105bd726",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "032786c1-c145-4265-866d-2e5afac3e38b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4c5b7a-8f20-4523-bcbf-eeaef265398b",
        "cursor": {
          "ref": "d8c38e78-71a6-4840-9906-611f4db7f185",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1819a200-335a-4c78-9163-9dc795015832"
        },
        "item": {
          "id": "bc4c5b7a-8f20-4523-bcbf-eeaef265398b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2b1763ef-66f8-4d3e-ba30-af9b2f51d59a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e8e743-f26c-499c-a250-f8bde1e516a5",
        "cursor": {
          "ref": "00a5ed93-0ca2-4185-8382-9f5db6f40f15",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f247929a-06bb-4a05-9c8e-afd6cef49210"
        },
        "item": {
          "id": "84e8e743-f26c-499c-a250-f8bde1e516a5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c692bb46-a8ae-47cb-9175-1b3cd973f5d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 117,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "5903b0c8-214e-44b1-8fb2-822d6c952e43",
        "cursor": {
          "ref": "6953e796-2ced-4897-a031-dcaa17312e69",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4f814dc-d583-45dc-942f-ae075aa1fd0f"
        },
        "item": {
          "id": "5903b0c8-214e-44b1-8fb2-822d6c952e43",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d79c69df-effe-41e6-86a5-7a0090b78379",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5903b0c8-214e-44b1-8fb2-822d6c952e43",
        "cursor": {
          "ref": "6953e796-2ced-4897-a031-dcaa17312e69",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4f814dc-d583-45dc-942f-ae075aa1fd0f"
        },
        "item": {
          "id": "5903b0c8-214e-44b1-8fb2-822d6c952e43",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d79c69df-effe-41e6-86a5-7a0090b78379",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "19f1f198-53be-4bd4-b33c-db704d668923",
        "cursor": {
          "ref": "3f1d9dfa-506e-4a77-a664-40e1fe242e05",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "762ad9c1-c8c2-45c6-9611-875023cfcf0e"
        },
        "item": {
          "id": "19f1f198-53be-4bd4-b33c-db704d668923",
          "name": "identifiers"
        },
        "response": {
          "id": "561cf061-5b83-4103-8ebb-134c16b81c47",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62c1a8f-1c7e-41e6-bfd2-476c8291bb69",
        "cursor": {
          "ref": "cab9ed24-fb94-43c7-abc8-816924abf96d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "044fd1ad-2ae0-4787-9ac4-70989d61f33f"
        },
        "item": {
          "id": "a62c1a8f-1c7e-41e6-bfd2-476c8291bb69",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ea02d25a-7c22-4345-bd7e-3df2dbdee1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62c1a8f-1c7e-41e6-bfd2-476c8291bb69",
        "cursor": {
          "ref": "cab9ed24-fb94-43c7-abc8-816924abf96d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "044fd1ad-2ae0-4787-9ac4-70989d61f33f"
        },
        "item": {
          "id": "a62c1a8f-1c7e-41e6-bfd2-476c8291bb69",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ea02d25a-7c22-4345-bd7e-3df2dbdee1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1151ab-be9a-4c60-a38c-ae0cc6b3f8e5",
        "cursor": {
          "ref": "913a473e-5eb5-4f30-a57f-ec3623c6bbc1",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f4297054-d411-46d4-8594-0393c62da232"
        },
        "item": {
          "id": "cf1151ab-be9a-4c60-a38c-ae0cc6b3f8e5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "778cafa3-15f6-44a7-96ec-1e74203685b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ff5366-ad62-442b-80be-a12c6751cc67",
        "cursor": {
          "ref": "dbe605f1-c4a7-49b6-b511-05bbf43d1331",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "94ada382-d9fa-47da-b3c6-f03eaff2e828"
        },
        "item": {
          "id": "50ff5366-ad62-442b-80be-a12c6751cc67",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c726ea7e-b183-4323-a678-82ca5fe829f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90368857-fc07-4952-9cd7-a3a33103fb4c",
        "cursor": {
          "ref": "74f3f0d5-95e6-48d5-b242-e0e1491f84ec",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "85c89178-13c3-47e2-9f0d-42d435d7e733"
        },
        "item": {
          "id": "90368857-fc07-4952-9cd7-a3a33103fb4c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b76e9ca7-bdfe-42de-92a3-fadf2a226256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b95a607-05f0-4bf7-ba1d-270a3b9c2a7b",
        "cursor": {
          "ref": "7e5a8b8d-8df3-42af-9026-88bc30cc7bec",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "061350f0-30e9-442d-9d06-1d39e2465b25"
        },
        "item": {
          "id": "7b95a607-05f0-4bf7-ba1d-270a3b9c2a7b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c5238397-21c9-45c2-b46a-646e2b977823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c349487-cf57-410d-9ba8-9453436ce21f",
        "cursor": {
          "ref": "9863de04-48a1-4a3b-8b65-cf51f6d86388",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1e37523a-2c1c-45a2-ae98-c60cb9b02535"
        },
        "item": {
          "id": "5c349487-cf57-410d-9ba8-9453436ce21f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d4fdedb6-e1a0-4903-9006-4545b04c7801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af11558-a7d3-4064-99b0-8c521730eb0f",
        "cursor": {
          "ref": "6576d8a1-b507-4d4d-8aec-2f6f54e7a21f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b1ff30a5-715e-4fe7-994c-8cf17830906e"
        },
        "item": {
          "id": "8af11558-a7d3-4064-99b0-8c521730eb0f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f98c1ce4-1a4d-44e4-a930-839d4a116a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f26039-d85b-4e35-ae35-ba72a47f306b",
        "cursor": {
          "ref": "67e15699-4a59-4453-870d-e3f0bd780685",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a7f95a06-ac2e-4e55-b8c7-1228e8159add"
        },
        "item": {
          "id": "f5f26039-d85b-4e35-ae35-ba72a47f306b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4d6c8939-2f65-4c5c-a5ed-2512775de088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7a1d53-038b-4d87-8d69-961920f7aa48",
        "cursor": {
          "ref": "3036f10d-d766-4b54-ba99-315a7f3e9da2",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8f68cff7-2d2c-4885-a97b-2a0ddcc05570"
        },
        "item": {
          "id": "1f7a1d53-038b-4d87-8d69-961920f7aa48",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "707738c6-7f7f-469f-8ed8-ca0429fea055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94420784-6ac0-4488-bf46-2d3473fa953e",
        "cursor": {
          "ref": "c79fb5b0-f5dc-424c-8061-3c683ee79062",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4a07adf4-cb1c-4e99-afb9-82f7529faa24"
        },
        "item": {
          "id": "94420784-6ac0-4488-bf46-2d3473fa953e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "74071924-ff77-4477-9298-69894162c7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ec18aa-049d-4e42-9c9e-016ab9e566d2",
        "cursor": {
          "ref": "4b38ebdc-41e9-4296-b51c-63fcd5e66c6f",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8e27464b-2db9-458c-923e-47efddba7472"
        },
        "item": {
          "id": "54ec18aa-049d-4e42-9c9e-016ab9e566d2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5e3d22a7-482d-4d2e-ac3f-bc589d641310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598f8eb6-54b2-4e83-8b44-0fedf83649f8",
        "cursor": {
          "ref": "70ede69c-60e0-453c-8ab2-af40ca98c803",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d638a5f9-6eba-41c4-97a4-d8129b045f41"
        },
        "item": {
          "id": "598f8eb6-54b2-4e83-8b44-0fedf83649f8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "09ffad78-d781-4d0a-a440-ba7914231617",
          "status": "Created",
          "code": 201,
          "responseTime": 613,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8ec652a0-9e5a-4d69-a0bd-01700693abcc",
        "cursor": {
          "ref": "6fe1137d-d3b0-46d7-87c2-a0af16daff7c",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "98cbdb95-08d9-4e4b-abee-0c2cf1f649a6"
        },
        "item": {
          "id": "8ec652a0-9e5a-4d69-a0bd-01700693abcc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f2e4b191-c76f-44d4-9b54-fbe1f53bbd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e18c0fb-03c1-4523-b5be-2f23f45301bd",
        "cursor": {
          "ref": "1af6a4a1-852b-4489-9da8-d73e521d4858",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5cedffd1-d531-4eaa-83be-c50d69137151"
        },
        "item": {
          "id": "2e18c0fb-03c1-4523-b5be-2f23f45301bd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0ddd35fa-767b-4291-b442-4bca5d6494bf",
          "status": "Created",
          "code": 201,
          "responseTime": 4855,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "424829f7-32e7-4a24-9486-29bb90b3952a",
        "cursor": {
          "ref": "096c5a45-b16a-43f2-b80f-2264fcdf28c5",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d8ae0517-5ace-44ed-9db6-c5da7ccecb88"
        },
        "item": {
          "id": "424829f7-32e7-4a24-9486-29bb90b3952a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c007e0ec-0704-4cd8-9ac6-f31c0e1f7c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 599,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80912247-be5b-453c-9614-3e7f3ca32d93",
        "cursor": {
          "ref": "1001e653-eb86-4163-9171-6c535a5d42ae",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "64e16dbb-78d3-4fdb-bf1d-4106cdb91985"
        },
        "item": {
          "id": "80912247-be5b-453c-9614-3e7f3ca32d93",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a14fe91d-fc44-453f-8333-10615519f438",
          "status": "Created",
          "code": 201,
          "responseTime": 4960,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7dbbd3f7-4fd4-4db9-9118-d9a325ef6bf7",
        "cursor": {
          "ref": "a514c0cd-51ff-4a6b-b8ab-982066272420",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cfcf7a57-626a-452b-96f7-ab98ac58aad4"
        },
        "item": {
          "id": "7dbbd3f7-4fd4-4db9-9118-d9a325ef6bf7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8f5acef8-f0c2-4259-91bc-f7b9117de721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c465bf02-11c8-474e-89de-20112f7fa709",
        "cursor": {
          "ref": "5531e1fc-3380-487f-b22b-397cd39b228c",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "696d10b8-4fb2-4559-8108-0eb4e3a956e9"
        },
        "item": {
          "id": "c465bf02-11c8-474e-89de-20112f7fa709",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b69be937-b683-4f8c-886e-2024005f6f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77022f05-dd11-4459-a26a-2b4f9e5fda72",
        "cursor": {
          "ref": "b38bf743-0f21-4363-bea0-e18223273866",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "648df8da-5b71-4ba6-804f-409ec711d1c8"
        },
        "item": {
          "id": "77022f05-dd11-4459-a26a-2b4f9e5fda72",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b910236e-bd52-46b4-bab1-88aa514df013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d51b03-7566-4916-b053-1fc888d9aee5",
        "cursor": {
          "ref": "b2b6e4df-6b87-4e20-ad6d-c19cbfbb3254",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c791d470-cba6-422b-a150-a257f5e6e13e"
        },
        "item": {
          "id": "99d51b03-7566-4916-b053-1fc888d9aee5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e5a959f6-3879-43e0-a881-a0aa18e84628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86db734d-8a6e-404d-8dcf-daba27fa56e0",
        "cursor": {
          "ref": "fda77c66-7fde-434d-9eb6-223d5117a68a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "16db2c8b-d585-4728-b36d-88f76f3f433f"
        },
        "item": {
          "id": "86db734d-8a6e-404d-8dcf-daba27fa56e0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f19ba868-f9d6-4566-86e7-9afc7b18e465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8158747-a2ff-4a41-a73b-b8caead2a140",
        "cursor": {
          "ref": "3a9a5ee6-53f7-4f76-a59f-d97bc7e3daea",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7ea6b802-7e9a-418b-9208-d622407a25d6"
        },
        "item": {
          "id": "d8158747-a2ff-4a41-a73b-b8caead2a140",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6c9ed57c-7c5b-48d3-894f-7f9984d53edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527e5c91-90e1-49a7-815f-fdeffe5bee23",
        "cursor": {
          "ref": "0fa4b16d-758a-4ea2-b170-e20ee25d52cc",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3db847e8-1a0b-4f86-bb98-9f613d5141ec"
        },
        "item": {
          "id": "527e5c91-90e1-49a7-815f-fdeffe5bee23",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "40772f36-9b8a-45aa-bbce-1bb290ed4417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a65b02-dbc1-4f51-98c3-5280eff9237d",
        "cursor": {
          "ref": "d804ee7f-11e7-4a4e-952f-cef362e19450",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3c950c0e-ec76-46b0-b0ff-31b4db7f0f42"
        },
        "item": {
          "id": "82a65b02-dbc1-4f51-98c3-5280eff9237d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "30871258-3c1d-403e-a099-daab15e39476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a55c20-2412-4b39-8d03-0c3331ea0c7d",
        "cursor": {
          "ref": "f82974db-f21a-4514-8b67-e5678651ce16",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3f889788-1f8d-47c0-9c25-93a59724c9e8"
        },
        "item": {
          "id": "b6a55c20-2412-4b39-8d03-0c3331ea0c7d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "20af4193-9427-4bfa-a81a-5c8087f90edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39691a07-5b75-4749-949f-722f12fb9454",
        "cursor": {
          "ref": "d53da4d8-c141-40f2-96bc-4beb4d250009",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e33062be-f700-4600-b781-a8e87fc178f7"
        },
        "item": {
          "id": "39691a07-5b75-4749-949f-722f12fb9454",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b8c0d292-98e7-4ef8-b96e-23fab44c3529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afedd114-9b96-4354-8885-1a06b851d66b",
        "cursor": {
          "ref": "d6e52d83-7e3d-4d30-b302-4eecb0873aa5",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "602353e6-c284-4c8f-8927-1c7641554c43"
        },
        "item": {
          "id": "afedd114-9b96-4354-8885-1a06b851d66b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "805a1388-3210-46c7-b0b1-ca4c9867c2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27405e6e-b001-46d1-af1d-a26b03e705d2",
        "cursor": {
          "ref": "90b9661a-9a21-41ca-87ef-1c1d627f7c61",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "94c5ce44-95b4-40e3-a5dc-e0a2d3f0fd1c"
        },
        "item": {
          "id": "27405e6e-b001-46d1-af1d-a26b03e705d2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "96afcb33-a873-4630-8c12-68257fefa396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e42a9b-6d4a-46cd-af12-00d68db5f665",
        "cursor": {
          "ref": "2417b630-022d-435f-adf4-d3af91908e97",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fef3f4a9-9be6-4705-9a4e-e1f3ef684b4d"
        },
        "item": {
          "id": "c5e42a9b-6d4a-46cd-af12-00d68db5f665",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "203d8ccb-2dbd-4a99-bbde-cd02ab7c3c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47692cc-ef16-49b2-a977-a804982fdac7",
        "cursor": {
          "ref": "dfccec17-1fe3-4dbb-a9ed-fcdc9a3d5561",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5a12e8ea-abde-42e3-b804-8d65d2d0d4c6"
        },
        "item": {
          "id": "f47692cc-ef16-49b2-a977-a804982fdac7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "32df64fb-d31b-4143-8e5f-79705b342be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ae70d2-4479-4248-95f3-cf1ab9567c16",
        "cursor": {
          "ref": "bd3b5c19-b5d5-4773-9abd-5b78d32afc0b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "94836934-e316-425d-a5df-a66d72ea3379"
        },
        "item": {
          "id": "21ae70d2-4479-4248-95f3-cf1ab9567c16",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f19a5e77-f474-468d-92d6-58ef335ab61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefcaeba-d598-4522-a826-8cdead7d49bd",
        "cursor": {
          "ref": "6b00110c-a5bd-4487-b08e-b555f0b435f4",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1ddc3c5f-d82b-42db-8479-cd97fa930999"
        },
        "item": {
          "id": "eefcaeba-d598-4522-a826-8cdead7d49bd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7672d963-2cb7-475a-a4c8-c5ec3c0e225d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2a21c9-7615-44c3-ae83-8bead84508d2",
        "cursor": {
          "ref": "d3007202-04ad-4676-aae7-d140fc2eb59d",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ed20a8c-8fd8-4cd0-b61c-7b2122bf8227"
        },
        "item": {
          "id": "6b2a21c9-7615-44c3-ae83-8bead84508d2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9a4c92e2-f2af-452a-a207-0b6218a8d92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48469c89-1b9f-4825-b16a-aafe5d64de49",
        "cursor": {
          "ref": "4abc613a-8abf-43a7-8e16-6becf0bf3769",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "08b960fa-646c-4448-ac1a-180b588a7acc"
        },
        "item": {
          "id": "48469c89-1b9f-4825-b16a-aafe5d64de49",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ded57078-0fa5-4b93-b0df-210b9cf92c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dad4882-0f65-45ca-8cad-b664ef7f0905",
        "cursor": {
          "ref": "a3f7a2b4-b08e-47b0-943c-97861592853c",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1fa0c9f3-ad28-4f49-a9bc-d7248a11cdef"
        },
        "item": {
          "id": "1dad4882-0f65-45ca-8cad-b664ef7f0905",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4a49723d-e9af-4e3f-a7ab-83e2a12deae9",
          "status": "Created",
          "code": 201,
          "responseTime": 2567,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "75e71919-4b8d-4faa-8921-48483cf625b7",
        "cursor": {
          "ref": "71f581b8-b60b-45e6-86ec-fdabeade015c",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a809b24b-7b3d-4041-8bed-92977e01a40e"
        },
        "item": {
          "id": "75e71919-4b8d-4faa-8921-48483cf625b7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "51fab0ad-280f-4f8d-b7a8-2f06eb4546e5",
          "status": "Created",
          "code": 201,
          "responseTime": 3243,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "99d66121-6448-4824-a677-1c042e52568a",
        "cursor": {
          "ref": "d5abd290-ad84-41f9-a87d-48cbbe8ea9d7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ad52333f-f9af-4e3b-bacb-a0a03efb11dd"
        },
        "item": {
          "id": "99d66121-6448-4824-a677-1c042e52568a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d064e167-2f30-48c7-9ee7-d5fdbc580f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3ec744-8c08-436c-a8a1-de10aebc2d8a",
        "cursor": {
          "ref": "8da0d2c1-023f-4b31-b0e3-75b69ad930b5",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e9207b37-99ed-47e6-8508-bf319ce6c898"
        },
        "item": {
          "id": "5b3ec744-8c08-436c-a8a1-de10aebc2d8a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ef7de7b1-a19d-421f-a528-3c18f74883b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb438c7-1746-40ae-afde-5bb911411595",
        "cursor": {
          "ref": "f39749ca-567e-4afa-830b-1ca7aefd5d38",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9bbf2965-4d52-4821-a3c1-0e355afa4a87"
        },
        "item": {
          "id": "fcb438c7-1746-40ae-afde-5bb911411595",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "90994f01-bfd1-4283-a6e5-dfb82abcd18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b203d7a0-6e14-42d2-bf7f-02c3e8692744",
        "cursor": {
          "ref": "6f20338f-7b81-4c4a-baa7-65f2a0aa52ca",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "16d1960f-b613-43fc-ada4-d2176c5667f6"
        },
        "item": {
          "id": "b203d7a0-6e14-42d2-bf7f-02c3e8692744",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "671098ff-a6d3-45cd-9a87-e3f2a307a8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed01af8-8e54-4b02-b8c8-9d2c51f1c21d",
        "cursor": {
          "ref": "10764729-ae07-498a-a326-56328c7f757c",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "af8b74c6-cf39-499b-a73e-359b084e4077"
        },
        "item": {
          "id": "5ed01af8-8e54-4b02-b8c8-9d2c51f1c21d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6c0dbec9-f047-44a6-a901-4cdb006eeb4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a42b55-91f2-4ba7-9399-e4561e121064",
        "cursor": {
          "ref": "a135a9e5-2de8-49ec-a16e-1f51f4a4955b",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e3f7ae92-a50f-431d-b417-6b1d9d543821"
        },
        "item": {
          "id": "71a42b55-91f2-4ba7-9399-e4561e121064",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "52208f73-3782-4334-b931-e7be4154976e",
          "status": "Created",
          "code": 201,
          "responseTime": 2433,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "26b2e1ba-a0ac-426e-9ffd-d5683e5bb1eb",
        "cursor": {
          "ref": "4fba0a7d-7b13-4017-a48e-c99effd5a4a4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6c635a50-6609-44bc-bcaa-26f26e8a4a4b"
        },
        "item": {
          "id": "26b2e1ba-a0ac-426e-9ffd-d5683e5bb1eb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bab02159-da6d-4409-9444-25579b687180",
          "status": "Created",
          "code": 201,
          "responseTime": 4477,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "816fd848-797e-4434-8c0b-ee2b149106ef",
        "cursor": {
          "ref": "37d7c662-59b0-483c-951e-bf402a4014f5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "44c27ee9-c94e-4581-aed0-72be904ae72b"
        },
        "item": {
          "id": "816fd848-797e-4434-8c0b-ee2b149106ef",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c99be21f-2f23-4db2-95eb-bdfcc6173563",
          "status": "Created",
          "code": 201,
          "responseTime": 2495,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b7742f90-5f84-40ac-acba-701aed26bba5",
        "cursor": {
          "ref": "73873878-cb15-4a11-a2f1-83bd4e8ac867",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6740293f-82a2-49a8-9ae5-63c1e9812f05"
        },
        "item": {
          "id": "b7742f90-5f84-40ac-acba-701aed26bba5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d3211c41-57a3-469f-9e4b-864339966c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240a860d-b3bc-4f06-a15f-907491d187f6",
        "cursor": {
          "ref": "e8a4ea7d-d3b0-440e-9389-33803a99a4e0",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9aae61f6-1966-4379-ba09-559fce513d83"
        },
        "item": {
          "id": "240a860d-b3bc-4f06-a15f-907491d187f6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a13c9425-4fc0-4fee-83bc-78cde24d3e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8121ffa0-ec23-4a7c-a933-79446581e65c",
        "cursor": {
          "ref": "597b8646-2789-4cdd-b873-0ca8fc4f7e84",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2cf7f774-26f7-4648-bf25-add833a380ac"
        },
        "item": {
          "id": "8121ffa0-ec23-4a7c-a933-79446581e65c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "16997df8-54f1-4970-b582-307820d4f486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842d2d14-56ff-4bd8-91c7-d72e51a6da83",
        "cursor": {
          "ref": "655a91c8-2175-47c3-8e9e-01d1cd4f9f2d",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "34bbfeab-d5d1-48af-8161-36f863fd27e0"
        },
        "item": {
          "id": "842d2d14-56ff-4bd8-91c7-d72e51a6da83",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "431b449c-b58f-448c-9a67-4b24eb3ac1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb53eee-aa9d-4beb-abcf-c6f0aa8c6c00",
        "cursor": {
          "ref": "a5b2ece5-f0dd-40c4-bf89-5e025b1718b0",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4e7e7a8d-a38c-429c-8675-691f3af6a8d8"
        },
        "item": {
          "id": "adb53eee-aa9d-4beb-abcf-c6f0aa8c6c00",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "85ceb3dc-f9fb-4f3e-90d8-a65ddca9176a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c287b4e-ec90-45b2-a351-64eff66595f2",
        "cursor": {
          "ref": "65047a15-1630-4f4c-8491-30acb14a2521",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "de81b8ec-43b0-4378-b9d7-bca1f4e4e126"
        },
        "item": {
          "id": "3c287b4e-ec90-45b2-a351-64eff66595f2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "71504d47-3ca6-4ab5-8653-9a3036bb8476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0f30fe-8978-42c7-8d81-a2b644203d9a",
        "cursor": {
          "ref": "84d906bd-e37e-41f1-9f8a-8dd51227b690",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0b5c33f5-0108-4c69-9f8b-c6864148c119"
        },
        "item": {
          "id": "fa0f30fe-8978-42c7-8d81-a2b644203d9a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "928249d4-5c39-4123-b8ae-f6a127d8e601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a63afe-b18a-4066-9114-0625a295819f",
        "cursor": {
          "ref": "c13eaf90-9113-4bf2-b8df-b0936b4897cc",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d08cfa40-425b-4922-8f32-391acdd42329"
        },
        "item": {
          "id": "c4a63afe-b18a-4066-9114-0625a295819f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c39cd593-6831-475b-ab4a-1abf76959d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9ff881-03ad-4ebe-8686-4b8135ac735c",
        "cursor": {
          "ref": "1d20bd20-dc08-4dab-879e-ad48d3ebcd15",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3be2503e-c211-428e-9a1b-8eaa78986e16"
        },
        "item": {
          "id": "3c9ff881-03ad-4ebe-8686-4b8135ac735c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "02417c54-e745-4969-be63-0d5469dab07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bf4b51-599a-4950-a14b-a60d0cc52c4e",
        "cursor": {
          "ref": "23384412-6e28-4ad6-9886-556d915e101f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "570ae4aa-3721-48a3-a6e8-05e2aee903dd"
        },
        "item": {
          "id": "81bf4b51-599a-4950-a14b-a60d0cc52c4e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "743df4d5-9599-47bf-98fe-456e30abc73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6c4eb7-7642-43d4-a44b-72e35879fd65",
        "cursor": {
          "ref": "fed7fcef-8759-49e5-a5da-cf107fd183cc",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a6f78f60-b0ff-4621-b957-85f7371d5410"
        },
        "item": {
          "id": "3b6c4eb7-7642-43d4-a44b-72e35879fd65",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "878086b3-ca11-4a02-91aa-903e96512057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11483d99-a37b-44bb-8466-eb0952126b72",
        "cursor": {
          "ref": "895a6005-98f8-470a-9cc1-38c3e8165081",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4c0c743a-9e21-4233-8ca0-540d735737fc"
        },
        "item": {
          "id": "11483d99-a37b-44bb-8466-eb0952126b72",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "01dd2fbb-f678-4411-a121-724d6db98094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afe6561-c956-4637-a282-a7d3eb3e10bf",
        "cursor": {
          "ref": "0b0ebce3-5926-4a28-9b0d-9fd143d09926",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fb950cd7-9859-4d48-9031-39879edfe953"
        },
        "item": {
          "id": "4afe6561-c956-4637-a282-a7d3eb3e10bf",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "721b7768-cc11-4561-a4c5-6fcf7b7788f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdfb077-99de-4cbf-9abe-19d63e87676a",
        "cursor": {
          "ref": "fb46d431-b522-4ade-a6d0-76e039da22d7",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f49f8b23-0384-42f6-b24a-5b9a1459cdf7"
        },
        "item": {
          "id": "9fdfb077-99de-4cbf-9abe-19d63e87676a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "86f4cd8f-a0c5-4739-b453-88759c7129bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b780f6-884d-4a11-b04a-de3e1cecf0ce",
        "cursor": {
          "ref": "aeb194fc-0f42-4c6e-9ff6-66cf7b0c66a6",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "77acb460-d21f-4dfa-92eb-1b25b2dbeb0d"
        },
        "item": {
          "id": "69b780f6-884d-4a11-b04a-de3e1cecf0ce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "17de4a70-396b-40c4-87ad-dac5ce441514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5870dc0b-2ad2-43a7-bb8b-fe8693bcb361",
        "cursor": {
          "ref": "3dbea9cb-fafb-4cbc-aac2-685efbc157e0",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a35f2200-2d74-447c-9604-fc00bd97bd5c"
        },
        "item": {
          "id": "5870dc0b-2ad2-43a7-bb8b-fe8693bcb361",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8e351423-b943-4652-a9da-7ae8a083d42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc78d84c-8284-4c2d-b688-6a1a91215572",
        "cursor": {
          "ref": "d4ccd51b-51e3-4a73-98c7-fd4a769101e3",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e97c84ed-5a2f-45e4-aa91-81b7b5c8d900"
        },
        "item": {
          "id": "cc78d84c-8284-4c2d-b688-6a1a91215572",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "91448d40-e06c-405b-a2c3-1b0946db2c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98201d40-7657-41d7-ae4f-d33ed27ee552",
        "cursor": {
          "ref": "5b776a24-cfc9-4088-bf27-c51b76ab2e54",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "dc50c8bd-5479-4b10-ad69-305de7c72df9"
        },
        "item": {
          "id": "98201d40-7657-41d7-ae4f-d33ed27ee552",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "84567ad5-ab41-4132-b149-24e28a09389d",
          "status": "Created",
          "code": 201,
          "responseTime": 4442,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "137ec766-f4d3-4218-a16e-5d748cbd560b",
        "cursor": {
          "ref": "a6eaf06c-ae84-4fdd-b985-9a9f69b06417",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "abe10d24-e389-4949-8c30-8026c64a6472"
        },
        "item": {
          "id": "137ec766-f4d3-4218-a16e-5d748cbd560b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c4a72d9e-4005-4b02-bfbf-0f27e97d940e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d076aee-41ba-4276-8b68-21717c8d67c1",
        "cursor": {
          "ref": "f906e1ea-590c-4f23-b6e7-1b384bae7841",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "98fd73e6-a02c-4414-ac97-36dede8918c2"
        },
        "item": {
          "id": "0d076aee-41ba-4276-8b68-21717c8d67c1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d220ecb0-599d-45a1-92e7-033f6805d1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9f60a0-054f-4cdd-88e2-3b5fab877c99",
        "cursor": {
          "ref": "7cf60a6d-6251-4223-86c0-cb032a37b8dc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0c024f4d-9b5f-4f1a-9635-b3fab818b3c4"
        },
        "item": {
          "id": "3d9f60a0-054f-4cdd-88e2-3b5fab877c99",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0ff2ed22-7e62-47fe-ac0d-2b1bd3962eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba32925-3758-4bdc-b35b-ce1885c44bf3",
        "cursor": {
          "ref": "2869a507-3bb1-4a3b-a49d-6e9deae3de00",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "03453789-8a67-49f9-abfa-fc7567a78c37"
        },
        "item": {
          "id": "5ba32925-3758-4bdc-b35b-ce1885c44bf3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2fe57ad0-c8a1-4e71-93e5-850715ba1ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e5be44-5efe-4b68-8ba8-39677040a229",
        "cursor": {
          "ref": "bae9f8fa-6844-47e6-81e1-34dd2ad33c12",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "20df0418-a100-4475-96ca-f7f2a944b924"
        },
        "item": {
          "id": "37e5be44-5efe-4b68-8ba8-39677040a229",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "086d3672-3edf-4f8a-8a6c-b2a6e546e679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ec3206-af2d-4448-841f-e1e0451e17b1",
        "cursor": {
          "ref": "a830c1d2-c3cd-4419-aebf-0af7280abb52",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e9d59bb7-6c09-417c-986e-3664d9b64905"
        },
        "item": {
          "id": "07ec3206-af2d-4448-841f-e1e0451e17b1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0c459b10-11e0-43ea-9e00-991eda03f030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c2267b-b8c3-4bb3-a5c1-01daa59ce606",
        "cursor": {
          "ref": "a9afc073-325a-4dbb-8939-4a05d3ade19a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "385aae94-31e0-4e08-92c4-166612833bfd"
        },
        "item": {
          "id": "77c2267b-b8c3-4bb3-a5c1-01daa59ce606",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b1593930-e619-4a96-9f5d-56759fab68e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d995a97-b047-4dd2-b74f-0c91c8600f77",
        "cursor": {
          "ref": "c586cabd-9a4b-4da0-8e22-4481c9af0337",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "20a8dc22-2322-4a1a-af58-2c1edeefb88e"
        },
        "item": {
          "id": "9d995a97-b047-4dd2-b74f-0c91c8600f77",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "26c3ec56-a914-4304-8c60-dbdad315b8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bda94b-e3f8-4174-8702-5e611b1ab0bb",
        "cursor": {
          "ref": "62334c87-d581-4e79-9573-32e2e65b6dc7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c3d7d0b4-4a27-452c-9099-596557707c57"
        },
        "item": {
          "id": "b8bda94b-e3f8-4174-8702-5e611b1ab0bb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de410cb0-0287-4226-a208-a2004e5ea6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf4101c-8734-49dc-b4d6-86fc087a9699",
        "cursor": {
          "ref": "959885c1-b8aa-4c72-8c8e-f04b4c4e94e2",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ee728d14-1836-43bd-b572-f6a5ac85f0db"
        },
        "item": {
          "id": "7bf4101c-8734-49dc-b4d6-86fc087a9699",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "783cf494-060e-4c34-bba9-5995fc6ec513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4070615f-e41a-4456-b075-5675740eaf3b",
        "cursor": {
          "ref": "636b2de5-a1b2-4dc7-a5f0-1736eadfb57b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "317b9c52-c51f-4b9f-b6e0-7b80e0cddab7"
        },
        "item": {
          "id": "4070615f-e41a-4456-b075-5675740eaf3b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "876b00f8-1344-428b-b69d-0e918722b680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77f3c1a-48f8-4bba-b19f-133730cb9494",
        "cursor": {
          "ref": "a46a48b9-bb5d-46bf-8758-0ab2b64169d2",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f9e9f473-25b2-406f-b145-e4f2c2714b8a"
        },
        "item": {
          "id": "e77f3c1a-48f8-4bba-b19f-133730cb9494",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bee512a7-467a-456e-8961-b799306b786c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37e15b1-a020-4e85-be37-513aa3540771",
        "cursor": {
          "ref": "a3c4c3d3-e03b-4f9b-a40e-a852d05c6c0e",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b6cf630a-997d-4abe-a5da-7e36f09ae000"
        },
        "item": {
          "id": "c37e15b1-a020-4e85-be37-513aa3540771",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5f1ea41c-0ac4-43f8-9aa6-251206c13b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6797eb71-a5f4-4416-a5f4-413e74d61b92",
        "cursor": {
          "ref": "40e76c46-8591-4851-a0c1-16faa86d14a3",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1ac21a9c-16b0-4ca1-9e89-180b0eeb84ec"
        },
        "item": {
          "id": "6797eb71-a5f4-4416-a5f4-413e74d61b92",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a7efded6-193a-4dbc-b88d-c3c75bcc4659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c07dfa5-78e1-4297-9967-22873f3d21ab",
        "cursor": {
          "ref": "c20323ba-e74c-419e-a4e4-586520544c76",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "82aa3b0c-3c7b-4b29-b891-5729aae14caa"
        },
        "item": {
          "id": "7c07dfa5-78e1-4297-9967-22873f3d21ab",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3257010e-e322-40a1-b5a6-ac1fd94b9a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28e173a-6494-4516-a29d-f27c7beb7e89",
        "cursor": {
          "ref": "dc7b6961-c8b8-4f12-9ff1-beaf64b357bf",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "97618887-07bf-4cec-b3f0-770e910fd29c"
        },
        "item": {
          "id": "c28e173a-6494-4516-a29d-f27c7beb7e89",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c3b0bb8c-1a0a-44ae-b62f-5b21cfc2d353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ffe93be-673c-48d8-8554-2e07e7b2d8b2",
        "cursor": {
          "ref": "4609bf26-eebf-44b1-9827-1f7b0ad04414",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bcf1df9d-fa43-47ca-a78f-b166d14673ac"
        },
        "item": {
          "id": "5ffe93be-673c-48d8-8554-2e07e7b2d8b2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2229fdaa-be57-42fd-b08f-54647a923e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34b6c2f-43a5-419a-840c-641d0172185c",
        "cursor": {
          "ref": "8d0b7c85-c717-4a34-a8c5-28d782dda164",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1a4af894-4218-4e6d-802b-aec8ea1f216f"
        },
        "item": {
          "id": "b34b6c2f-43a5-419a-840c-641d0172185c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ade310f6-b631-4ce4-8e4a-fcee13051904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c56505-e22b-408f-950f-832190084962",
        "cursor": {
          "ref": "d37ae52c-62fd-424e-8c65-b5b269054057",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "def65ba8-79a0-42e1-a82f-8299447a6346"
        },
        "item": {
          "id": "b5c56505-e22b-408f-950f-832190084962",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d2469dd1-67d7-4f20-9a53-4d489c0dd140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5026b8-e85f-4866-ba39-2455198a83b8",
        "cursor": {
          "ref": "94ec47b5-ccfb-4de1-b18f-f58a6d2d43cc",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c495bfa2-af57-4ebc-8171-81dbacaae051"
        },
        "item": {
          "id": "eb5026b8-e85f-4866-ba39-2455198a83b8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "703411a8-3b61-4856-8678-2f3c17dcf717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8887aa5f-69c6-4c16-8562-39db3c7619c3",
        "cursor": {
          "ref": "7e2e6362-268d-420d-997b-581258e9d517",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d63ef9a5-f7eb-472d-8e1f-c9f17433cdc8"
        },
        "item": {
          "id": "8887aa5f-69c6-4c16-8562-39db3c7619c3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "231f282f-4efd-4415-961c-4cba05087e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2d6b30-6461-4c9e-97ee-1edb195e2f34",
        "cursor": {
          "ref": "827867ba-5b75-4c47-b98d-13c52d0e6f54",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b15b0ae4-737a-4589-9d6d-ceb5b2d78199"
        },
        "item": {
          "id": "1a2d6b30-6461-4c9e-97ee-1edb195e2f34",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3baf0f05-388b-4c47-a603-ff1a365c28bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc63204-040d-4f02-bd40-fd64b27fc342",
        "cursor": {
          "ref": "a9ee2776-7329-4655-9f97-be34ba114992",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f4860967-6ae1-4dc2-98fa-6fb5d2b50317"
        },
        "item": {
          "id": "0bc63204-040d-4f02-bd40-fd64b27fc342",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "30dbe3d8-7dcd-40c2-90af-9887d8428d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c71365-49be-4ea9-b0c9-e8b5bdb5f4a3",
        "cursor": {
          "ref": "dd7301a2-c8d0-4df7-bd3b-903549203f4c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "daa1e0f0-1ba4-4ad2-967e-2e53db62f6db"
        },
        "item": {
          "id": "09c71365-49be-4ea9-b0c9-e8b5bdb5f4a3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1178a193-2475-4e38-b060-e30a0c271fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5fe342-b699-4e88-bb69-e559db9342eb",
        "cursor": {
          "ref": "1f849eb1-983c-4cfd-902e-c76d16ad1370",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6b900d54-4e68-4083-bfc7-3ae1f07b4084"
        },
        "item": {
          "id": "dd5fe342-b699-4e88-bb69-e559db9342eb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d55d3dd6-1f02-4646-b8e4-88b1179cadc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2584f2fb-96c3-4b1a-a667-1981b1a333f2",
        "cursor": {
          "ref": "9e3f2164-27f2-44b4-8891-61d3e1ab57b7",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "db04e9dd-4f1a-4fe3-8830-b7d46547a9c3"
        },
        "item": {
          "id": "2584f2fb-96c3-4b1a-a667-1981b1a333f2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a650fe34-6b57-4eff-a76a-69dc638c7702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f95d8eb-b147-4c60-90d9-05017cba7532",
        "cursor": {
          "ref": "ae0fa05b-acb5-4dff-9bec-3601bd4c2003",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f5b2b6f8-4f15-4655-a3fd-cf17ec1bcd32"
        },
        "item": {
          "id": "6f95d8eb-b147-4c60-90d9-05017cba7532",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b00db9c6-28b8-4fa9-86c5-a36549b7804f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3235348c-2c44-432d-b1e0-f47bf2b5e7d7",
        "cursor": {
          "ref": "0faaf9cb-e5e8-42e2-956f-899f615a71d2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9888de6f-86e8-4f68-9fa6-ec6d5950f3ba"
        },
        "item": {
          "id": "3235348c-2c44-432d-b1e0-f47bf2b5e7d7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8808388d-6aac-4c5e-9f59-393c4ac152f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d3bbb6-8c17-45ae-b055-cafae1ee366c",
        "cursor": {
          "ref": "12bda2d5-e8aa-412e-9f02-8382e1e1815f",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e0b8152a-fe70-43a6-b953-71da78d751c9"
        },
        "item": {
          "id": "89d3bbb6-8c17-45ae-b055-cafae1ee366c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "aac34d7e-f41b-4380-889a-f4902b3c69c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0816e640-eaef-4da0-80f1-112acbbcfe11",
        "cursor": {
          "ref": "97e19bc0-cf8f-4e64-878c-3f303da04bc2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ab73b442-476b-4a1d-874a-513e5f76d545"
        },
        "item": {
          "id": "0816e640-eaef-4da0-80f1-112acbbcfe11",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d8af30f2-58e0-4248-a837-0b6a37e4b100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45463fed-4114-4837-ab46-6f9c3f947fff",
        "cursor": {
          "ref": "56b59e91-411f-47e8-8b34-a871ae9b4135",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "02fb8b6e-0111-4215-ad98-df1ea8297126"
        },
        "item": {
          "id": "45463fed-4114-4837-ab46-6f9c3f947fff",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8377ad08-62c5-4c91-b4b8-15389f38366c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "84ef81df-9142-40cc-9132-260cf9fb2826",
        "cursor": {
          "ref": "612c8fd1-e3cf-4761-b869-2507ea2dea11",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b8e45f04-90a2-4223-ac1c-91e234f903a0"
        },
        "item": {
          "id": "84ef81df-9142-40cc-9132-260cf9fb2826",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "59665ab4-7ed5-42b6-9802-4e2988c43086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "69f89665-f045-40bd-9145-a1f753b13a45",
        "cursor": {
          "ref": "6e5ad7b4-79d7-4030-aec8-63ffb9a80289",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "72d31d54-a3b6-4bef-860b-c4c4c14fc8bb"
        },
        "item": {
          "id": "69f89665-f045-40bd-9145-a1f753b13a45",
          "name": "credentials_issue"
        },
        "response": {
          "id": "db6f2922-b9b8-418e-961a-75aa8b4e4e52",
          "status": "Created",
          "code": 201,
          "responseTime": 4477,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5c2506-5795-492b-9b4b-8d981a610eaf",
        "cursor": {
          "ref": "98a903f8-e63f-4ecd-9981-1dbc75a340f2",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "71d79c02-7fa4-4ff5-b7af-7727e0f4b7fe"
        },
        "item": {
          "id": "cd5c2506-5795-492b-9b4b-8d981a610eaf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3c02634c-0edb-4efd-b265-2f76fc323135",
          "status": "Created",
          "code": 201,
          "responseTime": 7139,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ec50e4-5489-45c3-a311-1d118a13cc6b",
        "cursor": {
          "ref": "c5b62293-9cf9-4f8d-af50-a07de4c55197",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a0b49fbf-da72-4140-89c1-2dc1a4644b0f"
        },
        "item": {
          "id": "83ec50e4-5489-45c3-a311-1d118a13cc6b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5b36653d-91c3-4ca2-8172-bad45252c7fd",
          "status": "Created",
          "code": 201,
          "responseTime": 7719,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bbaef0-df44-45d6-ad17-7d04dc1179ef",
        "cursor": {
          "ref": "8b029452-9292-4ae7-aeaa-4e3283784340",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c76b5a92-31e5-4114-92bd-cca5a6a7806a"
        },
        "item": {
          "id": "d6bbaef0-df44-45d6-ad17-7d04dc1179ef",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "97e1cae4-0473-477c-8b94-8abb4c852962",
          "status": "Created",
          "code": 201,
          "responseTime": 3223,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-23T00:40:31Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-23T00:40:31Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "67ac881c-b3b0-4b79-a7ec-e67f0769bf95",
        "cursor": {
          "ref": "0ed627f5-5afc-44b1-bfe7-18bf144f1f80",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5fe6cbae-e16f-4130-a441-a3c0134868b7"
        },
        "item": {
          "id": "67ac881c-b3b0-4b79-a7ec-e67f0769bf95",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "428d88d3-50ac-45e6-b2b2-d99feb51f8e2",
          "status": "Created",
          "code": 201,
          "responseTime": 4284,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b91914e-cd1d-4ce3-b58d-627af08b8203",
        "cursor": {
          "ref": "e9c1232e-9b08-402b-b418-69274a6bcb9f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4e49e798-330e-4db7-9a06-5b18e8dfb74f"
        },
        "item": {
          "id": "2b91914e-cd1d-4ce3-b58d-627af08b8203",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "89e78f7a-6b6c-4a90-b378-c49a50857ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b91914e-cd1d-4ce3-b58d-627af08b8203",
        "cursor": {
          "ref": "e9c1232e-9b08-402b-b418-69274a6bcb9f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4e49e798-330e-4db7-9a06-5b18e8dfb74f"
        },
        "item": {
          "id": "2b91914e-cd1d-4ce3-b58d-627af08b8203",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "89e78f7a-6b6c-4a90-b378-c49a50857ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7cf0e0-c496-4549-8d75-37c458e97bc2",
        "cursor": {
          "ref": "1fba30ed-f0cb-449e-8fc9-07058d838369",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4006e1fe-7b55-4917-bbe0-60bdc4babf51"
        },
        "item": {
          "id": "aa7cf0e0-c496-4549-8d75-37c458e97bc2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e50e0311-2309-46a3-b007-5657bc5c0f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e91db4-36c9-4aa7-9cac-ecf16753ed41",
        "cursor": {
          "ref": "479a463a-1fc8-467c-8e52-844f11ebf621",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "956b9441-238b-462c-a1c0-f268315ce95c"
        },
        "item": {
          "id": "f4e91db4-36c9-4aa7-9cac-ecf16753ed41",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d416f5e5-1bbb-4381-a563-acee4146f516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1136,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b72b13e-81de-45a4-9652-5d7b6c5188e6",
        "cursor": {
          "ref": "4cf3cfc2-597b-4598-93ae-5b7a38304e17",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "57534f67-35e8-4bb1-b195-9e1f63c6ed9e"
        },
        "item": {
          "id": "1b72b13e-81de-45a4-9652-5d7b6c5188e6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "03009c70-d4df-49b5-bdd2-665041a86a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 809,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1afb28-6307-4e30-a874-11289eb95bb8",
        "cursor": {
          "ref": "6116804a-1557-46aa-bbc0-59f3a60d38a9",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1d0a8c81-ecc8-4106-b9de-cb925a443460"
        },
        "item": {
          "id": "2a1afb28-6307-4e30-a874-11289eb95bb8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "66e0e635-85e5-4815-8238-ae2ca784a184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35ce910-6421-44db-baa7-01d01d9063db",
        "cursor": {
          "ref": "0410da92-e342-491d-8418-a9e22051d03d",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "903ca30f-50c7-4081-9f5b-7f060b25bb55"
        },
        "item": {
          "id": "c35ce910-6421-44db-baa7-01d01d9063db",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2a5fc19b-ff1f-4892-b96b-3f836e5438bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bae245-63c9-4301-8253-bf487b391ae9",
        "cursor": {
          "ref": "41f8c71c-08a2-47e0-a60c-a755e689e2b0",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5fa46719-51c3-4f37-b1e2-6f9b522941d0"
        },
        "item": {
          "id": "d6bae245-63c9-4301-8253-bf487b391ae9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5b52f1fb-4fe7-4a21-9130-8aed33b34366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08169221-1373-436d-8aea-d945c5952cad",
        "cursor": {
          "ref": "4abc1c8c-9aba-4807-8fb9-e09cafa031c2",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "40150dd7-6cba-4f9b-866e-a1c4ea4ebf04"
        },
        "item": {
          "id": "08169221-1373-436d-8aea-d945c5952cad",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ee21d1c7-d893-4257-9c16-f223ceca08e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf47c7c3-36ab-4640-ba3e-cd3baefad54c",
        "cursor": {
          "ref": "142a2f3e-23ce-46f2-b77e-351e511643ba",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7365ab2d-6174-4195-a58f-ae8f84a17ebf"
        },
        "item": {
          "id": "bf47c7c3-36ab-4640-ba3e-cd3baefad54c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d3582eb4-1934-461d-836d-96af5b9880ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6ffef8-2e13-4d31-b5ca-d820834987f4",
        "cursor": {
          "ref": "47e4e4ee-585c-4c04-86af-a7d320ec5961",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a624cc6b-a6d8-469c-ac1d-f7966f25ebb7"
        },
        "item": {
          "id": "af6ffef8-2e13-4d31-b5ca-d820834987f4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "df23bb8d-28dd-4eb1-b3f5-36bb12d6df1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832d3668-86c9-49d2-b729-e5172813521f",
        "cursor": {
          "ref": "5be0bd5a-7ef6-436d-8508-43d662f253e8",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5691cc1a-b454-4909-ba05-d667bfcbacb8"
        },
        "item": {
          "id": "832d3668-86c9-49d2-b729-e5172813521f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b0b37ab5-24d2-4151-a900-4e2818cf38fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371939dc-deef-4e96-a5d0-1e2711c4d15e",
        "cursor": {
          "ref": "ef29e418-902c-4a51-93e5-771ddebd987b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a15584fd-aead-45f0-b632-21a60d442999"
        },
        "item": {
          "id": "371939dc-deef-4e96-a5d0-1e2711c4d15e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "39746da6-1bd8-4126-baef-0dc6d8daa516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36454b5-3d4c-4607-986f-913b3566005c",
        "cursor": {
          "ref": "f03062be-9be3-4643-86e4-f54f1e7669f0",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "016ba792-2d8e-4528-9696-819ea77e0d60"
        },
        "item": {
          "id": "e36454b5-3d4c-4607-986f-913b3566005c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bdff25bf-8c84-4086-838f-aa9279258cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2b8f10-7203-4445-a544-cd3fe1587c7c",
        "cursor": {
          "ref": "c9cd2bdd-2f45-47d9-a59b-6dd5b5897c38",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0ca7b4db-99cc-4826-8a16-f67541d9b5eb"
        },
        "item": {
          "id": "3e2b8f10-7203-4445-a544-cd3fe1587c7c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2c3f6e07-0091-4762-9e29-9052cccb51b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a400a2-855a-47a8-a333-0b80bf249f31",
        "cursor": {
          "ref": "344f0734-0e51-4d6c-9015-121874218827",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f3215dd5-7393-42fa-be3a-02d9c2a98e83"
        },
        "item": {
          "id": "e9a400a2-855a-47a8-a333-0b80bf249f31",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9134e692-d43c-42f7-9000-2eeff04dd5d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5b9ae0-8cc0-4319-9532-b393634ae438",
        "cursor": {
          "ref": "207b1fdf-0ff5-4d26-9060-c95dc94942fb",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "adc632d5-150a-4ea1-b500-79c09de41234"
        },
        "item": {
          "id": "be5b9ae0-8cc0-4319-9532-b393634ae438",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "11d553ad-4d3b-4efc-be9e-f8463d1a236b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c76fa61-692b-4a0a-b56f-1d95c63c2b00",
        "cursor": {
          "ref": "845cb9dc-776e-439e-86bd-340b77869dff",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e3b64f3f-0671-44f8-9cee-70de17af68a1"
        },
        "item": {
          "id": "7c76fa61-692b-4a0a-b56f-1d95c63c2b00",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "efcb308e-9c8d-41e9-98d0-73a024d717d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e38b50b-7656-40fa-9aaa-40a5aab0d46a",
        "cursor": {
          "ref": "86b8fa81-77d6-4dd2-ba42-1aac6a5f9170",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c957dfee-7d7c-44d7-9d91-59a37c911c71"
        },
        "item": {
          "id": "7e38b50b-7656-40fa-9aaa-40a5aab0d46a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7b84b3c6-3e1e-4d69-a614-1db60bd91169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0f5820-8992-4c45-b031-703c6dfa037b",
        "cursor": {
          "ref": "3effb90f-59a6-44c2-9e8c-c85e847f6717",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "526f8be3-de7d-4fa3-9492-e425b7ab5b1e"
        },
        "item": {
          "id": "8f0f5820-8992-4c45-b031-703c6dfa037b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2b1b8cb5-dacc-4258-aa54-6d4d050c2eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96baecc8-c857-4e34-b6b1-b79ca6633feb",
        "cursor": {
          "ref": "899d1009-b90b-4cec-9123-e0920eb23d06",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f7305688-85d9-4e6d-9dc3-8622260149a5"
        },
        "item": {
          "id": "96baecc8-c857-4e34-b6b1-b79ca6633feb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7260d0e8-7e0a-4ada-9d36-7cf386b70b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b002b8c-4f38-4974-900d-9c57f94f1be1",
        "cursor": {
          "ref": "505f9ce4-83a9-467c-a5e0-bbacb19fbd40",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9c1b04f6-f631-4304-8a9a-8b1facb0bbb4"
        },
        "item": {
          "id": "1b002b8c-4f38-4974-900d-9c57f94f1be1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "675a0c60-854f-4d28-a951-4498748a1847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f33afff-898d-4574-bde3-bfe03de5669c",
        "cursor": {
          "ref": "d702a18a-7db8-44cf-8d77-b213edc85245",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5d9cd6e2-b089-4202-87df-8bd8b8c1b878"
        },
        "item": {
          "id": "4f33afff-898d-4574-bde3-bfe03de5669c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "74b14992-4fb1-4295-b80b-dff98df9d509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162b3d76-db8a-4f66-976b-9c1d3f055f74",
        "cursor": {
          "ref": "98c7d48f-f0e9-4923-98d9-b1c2d34c8aaa",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d27aead6-f564-4bd1-a8ea-acd1dbc59e55"
        },
        "item": {
          "id": "162b3d76-db8a-4f66-976b-9c1d3f055f74",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e2e17a83-2713-46ec-8327-ebb28e82107f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440b382f-a5ab-4cd9-a07e-1477c1e500dc",
        "cursor": {
          "ref": "120209e5-217b-47cd-85bc-6134ddf6412a",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "010dd38d-c687-4727-81c0-719a69af85e3"
        },
        "item": {
          "id": "440b382f-a5ab-4cd9-a07e-1477c1e500dc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0e9dc808-c2ba-4218-940e-96563be4e974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163af8c5-9398-464f-ad7a-ed0cc9b0218a",
        "cursor": {
          "ref": "8da8ae22-1cd0-4ed7-b984-39220ce60047",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e22d3bb7-1aea-49ae-ab85-b8fc175fec49"
        },
        "item": {
          "id": "163af8c5-9398-464f-ad7a-ed0cc9b0218a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "532c4e5b-a9b3-4754-93aa-fc670cddc770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebd9e46-da7f-46a0-a330-1a2578fd48e6",
        "cursor": {
          "ref": "e5982c15-a23e-419f-af73-30cbd7f64255",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "27223c72-9e3a-499e-860d-58e22cca6e7e"
        },
        "item": {
          "id": "bebd9e46-da7f-46a0-a330-1a2578fd48e6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fef32e1d-9da2-47d9-a340-96665ad5e399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c3737d-df92-4d6a-9a87-8305d1615078",
        "cursor": {
          "ref": "411b93d2-e697-4312-bef7-96384a9fe71c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b8b5531d-7a43-4a23-a6c4-9e5f2217b8dc"
        },
        "item": {
          "id": "b6c3737d-df92-4d6a-9a87-8305d1615078",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6dfd0962-634f-4634-8db2-8b15e925b359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eff50f6-e22c-41f5-8ff5-5614a0e853ab",
        "cursor": {
          "ref": "793c88c6-eb7d-4010-b157-1de9180e25be",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "56c38349-4392-4627-b189-d5a52f87d902"
        },
        "item": {
          "id": "2eff50f6-e22c-41f5-8ff5-5614a0e853ab",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "92672242-082c-4c9a-ae76-90e5ec43f910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4045ab-3817-4944-861a-8b05858db05b",
        "cursor": {
          "ref": "0f026952-a0f0-4c25-aa85-f1ab33ace8a1",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c32483f2-5a34-42c1-b097-4f602709ea7f"
        },
        "item": {
          "id": "ca4045ab-3817-4944-861a-8b05858db05b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "472c792f-770f-470d-9a5f-f774af17a79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a447356-5607-410b-be95-2c6bcd0d914f",
        "cursor": {
          "ref": "df47eda9-59f8-4a41-89b6-2ad9b806c396",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ba4ad4fb-20ad-46e0-ade8-d4999702cc77"
        },
        "item": {
          "id": "4a447356-5607-410b-be95-2c6bcd0d914f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "628f8a2b-b29b-490d-8f29-c3c2b4548b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee1912c-0471-45e7-bcd2-a719b0e9b0b3",
        "cursor": {
          "ref": "43d767b6-e303-4988-9b13-07c6ccbd2d65",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7034e58b-fdf0-4c5e-926e-ec253d2be1a0"
        },
        "item": {
          "id": "dee1912c-0471-45e7-bcd2-a719b0e9b0b3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5d9d380a-1cc6-495b-9e2d-c9d73daedb1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7685b41-5a19-4817-a11c-b8200c0c82c7",
        "cursor": {
          "ref": "6c686356-3dc0-4edb-940c-70ea9387a5fd",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "feb7bea8-a031-46a0-b075-175b4f3defa9"
        },
        "item": {
          "id": "a7685b41-5a19-4817-a11c-b8200c0c82c7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c7e8b203-9f7b-489d-a319-c7064972aae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a9d944-b446-4e44-b73f-93119de0f015",
        "cursor": {
          "ref": "51228c2f-64ef-481f-b3eb-cf5505ae2715",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "82d38e4d-26f7-4415-a5cb-20c0e6983e3d"
        },
        "item": {
          "id": "d9a9d944-b446-4e44-b73f-93119de0f015",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d34f39b8-c533-4a49-97a9-2423f50145b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "de9b3f5a-d72d-455d-a386-269a9cca1f23",
        "cursor": {
          "ref": "32f62d59-6c00-4d4b-8e67-4587accc13a2",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05e232ad-1236-4f0f-86ce-608b0152484a"
        },
        "item": {
          "id": "de9b3f5a-d72d-455d-a386-269a9cca1f23",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "661000b0-1417-4b8c-8d45-7a3a25b889b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2a74c97a-db19-427e-874c-ccd7b7a08239",
        "cursor": {
          "ref": "117dbf22-da2f-48d2-87e1-f35174f95ec7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "94362726-557a-46cd-bbcf-4dc92f3d930a"
        },
        "item": {
          "id": "2a74c97a-db19-427e-874c-ccd7b7a08239",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6cc08f62-0e06-4a61-8ec1-48da8548ec53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a74c97a-db19-427e-874c-ccd7b7a08239",
        "cursor": {
          "ref": "117dbf22-da2f-48d2-87e1-f35174f95ec7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "94362726-557a-46cd-bbcf-4dc92f3d930a"
        },
        "item": {
          "id": "2a74c97a-db19-427e-874c-ccd7b7a08239",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6cc08f62-0e06-4a61-8ec1-48da8548ec53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f85842-cdd5-45bd-8607-71d457acbf78",
        "cursor": {
          "ref": "8720d4ca-45c5-4199-acba-f65eb3eca43e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9f5cc03f-7fb9-4e0f-9b67-3101f97b37cd"
        },
        "item": {
          "id": "d7f85842-cdd5-45bd-8607-71d457acbf78",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bcd4bb08-106a-4787-ab5d-b58cfdd42f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed642b5-6c3b-4569-98b5-81014876ba97",
        "cursor": {
          "ref": "482a11d0-143b-44cc-bdee-73733bee48c5",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "af06b3e7-b289-4764-ad12-67c09f4ec315"
        },
        "item": {
          "id": "1ed642b5-6c3b-4569-98b5-81014876ba97",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "421ed660-0d60-458c-973d-e1c7b1ae4397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc69ae8-275a-4aae-9bef-07adce7264c3",
        "cursor": {
          "ref": "5da1bbee-c987-49b0-b8b9-f2b8f2a09c0d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "157e0672-c176-4517-bc70-de57b6e9f6f3"
        },
        "item": {
          "id": "4fc69ae8-275a-4aae-9bef-07adce7264c3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8ccadfd6-e256-453f-b67a-dab9a1c464a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3200005-01a6-4422-a1ec-510c3bcc5e50",
        "cursor": {
          "ref": "f9635159-e099-4a91-8db9-0c4794be29f0",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "960fb69c-6937-4328-986a-61a82fa62f4d"
        },
        "item": {
          "id": "d3200005-01a6-4422-a1ec-510c3bcc5e50",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c41f9ab2-f08b-4986-a5f6-dc65115fb989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9377f5d-7cb8-433a-8e67-da0b4933810a",
        "cursor": {
          "ref": "002e420a-3116-4f5e-b81a-543a79eaaea7",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "835455e0-364e-4d00-aa66-a95113961f65"
        },
        "item": {
          "id": "c9377f5d-7cb8-433a-8e67-da0b4933810a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "326807ef-16d4-44cc-bac3-486ab5cd0b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74101fd7-eff0-4978-9874-c7bd3da27a87",
        "cursor": {
          "ref": "d221b9dc-bf45-435f-a6b9-aa38d1ebda82",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "444ac074-fc8d-4f08-b1db-2a586cb79fa7"
        },
        "item": {
          "id": "74101fd7-eff0-4978-9874-c7bd3da27a87",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dd1bccb6-0df4-4437-9239-e11574f221ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60510bd-d2f9-4236-9730-13e684f2413a",
        "cursor": {
          "ref": "5e81529b-7758-41d3-845b-0757ada4cfbe",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8045d1e9-f584-4308-80fd-f73b7bbcb989"
        },
        "item": {
          "id": "c60510bd-d2f9-4236-9730-13e684f2413a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1fe62bf4-465a-4741-ab1c-6b536770c6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778cf975-5d27-48ac-938e-96290dc330e3",
        "cursor": {
          "ref": "ba6606fa-3c3c-494e-9c96-f654b80d5c47",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6d2eb738-2136-41aa-94cf-a8929ef8bc8e"
        },
        "item": {
          "id": "778cf975-5d27-48ac-938e-96290dc330e3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5a0b08e5-03d7-4c5c-8c71-8c30caf294a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b597c94-e399-4d42-9ea8-5ac5b25ccad7",
        "cursor": {
          "ref": "a894c90c-e1a4-4400-b999-bb911906a575",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "81544fb1-10c1-4563-a4a4-6a2a481912b3"
        },
        "item": {
          "id": "0b597c94-e399-4d42-9ea8-5ac5b25ccad7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cc56052c-07d2-4afb-bd57-aeca77e92751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946131e1-1958-49a9-8d39-21de1f2b297e",
        "cursor": {
          "ref": "132724bb-59b9-457e-a508-543587a26345",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e974dcbd-216f-4385-9b05-01c2559ded5a"
        },
        "item": {
          "id": "946131e1-1958-49a9-8d39-21de1f2b297e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "72751d57-a2a2-44ef-aa24-93427a949a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7b400f-64ae-4380-a2ab-e0c43e1c9a66",
        "cursor": {
          "ref": "6ca820a0-4976-4d1a-9f00-fd8a3bbf1490",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "619b9d29-fabf-4d2c-ad48-4fa20c281d63"
        },
        "item": {
          "id": "3b7b400f-64ae-4380-a2ab-e0c43e1c9a66",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d7e00cce-b905-4112-af52-d120d615ac30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd63677-a82a-49a5-9ab4-7c85085344b1",
        "cursor": {
          "ref": "ce1f1d49-a0da-4d75-ad6a-35e0b23e0697",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fc528295-b3e5-4a04-baea-b03828365d2c"
        },
        "item": {
          "id": "fcd63677-a82a-49a5-9ab4-7c85085344b1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8ba317b4-f11c-478a-90a9-b043a55007ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39396286-973a-45a9-b549-d372c5d5ec0e",
        "cursor": {
          "ref": "704fd470-8029-4ddc-85dd-7ff935342db4",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a623d9d9-d78e-460b-be45-5a0043e491bd"
        },
        "item": {
          "id": "39396286-973a-45a9-b549-d372c5d5ec0e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d1a618a3-bc67-4e36-82b5-de08cac40289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49a83a3-5028-4a7c-bde2-8ce379c4e6db",
        "cursor": {
          "ref": "c2a45e41-42fc-4c20-8bb9-529bf325014e",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "afa4c594-ac39-45c9-82de-e6ac4ae4ec92"
        },
        "item": {
          "id": "a49a83a3-5028-4a7c-bde2-8ce379c4e6db",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e8f6c74f-a5d2-4999-af32-8e061812b94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6fd057-30bd-4bee-b1c1-05d716b8d408",
        "cursor": {
          "ref": "3974f26f-b8a2-42a7-bec9-72b1922f7a5d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6d979104-5072-4bf1-902d-979bdfca76ca"
        },
        "item": {
          "id": "8d6fd057-30bd-4bee-b1c1-05d716b8d408",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8b987c14-2ce8-4df5-87a8-50bd5ebd1930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ba4b2e-ac52-41d4-8946-9100bc47ee6d",
        "cursor": {
          "ref": "fdfd24dd-e964-48bc-b580-f8374483f22d",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4e1c1512-ec58-42dd-a865-050243cc7fa5"
        },
        "item": {
          "id": "12ba4b2e-ac52-41d4-8946-9100bc47ee6d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c32e030c-7d14-46fd-b5ea-486051967c43",
          "status": "OK",
          "code": 200,
          "responseTime": 678,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "524215bb-6e0a-42ff-9279-1516bea6e1f7",
        "cursor": {
          "ref": "585fa3c2-6dd4-4ae5-b8a5-228edfb26ad1",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "96824fce-3f24-4228-a229-60e376776725"
        },
        "item": {
          "id": "524215bb-6e0a-42ff-9279-1516bea6e1f7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fe9fe800-83cd-40c0-83b6-a01dffac2392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0268c9d-bbdd-4321-9ab7-fb1746e4d99f",
        "cursor": {
          "ref": "6650bc37-ee2c-4335-8764-9c598b3ab102",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "70f04db4-c050-47de-9838-18dede547378"
        },
        "item": {
          "id": "a0268c9d-bbdd-4321-9ab7-fb1746e4d99f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ec23cbd2-3395-4447-a32f-49134425209d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa798c98-09a4-4431-8189-51d89bc9e9b4",
        "cursor": {
          "ref": "dffd0b64-b3c5-4bc5-9883-b240f66a57a1",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ae89c244-bd4d-4678-8942-d20df714b527"
        },
        "item": {
          "id": "aa798c98-09a4-4431-8189-51d89bc9e9b4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "db3ce9f7-426a-4eb0-a7e8-8d56ba879095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642ea027-edcd-4cdf-8596-adc81fde60d1",
        "cursor": {
          "ref": "55cdcac5-b4f5-4647-a0e9-65b63db57715",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "688f090d-e30d-4d8d-843b-73e5286eefb1"
        },
        "item": {
          "id": "642ea027-edcd-4cdf-8596-adc81fde60d1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a0e29457-9269-4465-9d2d-2aa10ca25893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7eb715b-0932-4cac-8d25-7fb75af45ec1",
        "cursor": {
          "ref": "56b6a2ca-01e0-4736-aa47-1c11326b60ea",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cf9264bf-f069-456b-9c27-d16b36a72f94"
        },
        "item": {
          "id": "b7eb715b-0932-4cac-8d25-7fb75af45ec1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7a1b6210-7818-4e23-a460-420847c44180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7164de0f-5cca-48cb-beb3-a03a2cf2ef46",
        "cursor": {
          "ref": "9905140e-ed09-4032-bcc2-7dee2c631645",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "24b9b457-ef3a-4fc3-ab7e-578c5b8460a3"
        },
        "item": {
          "id": "7164de0f-5cca-48cb-beb3-a03a2cf2ef46",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bbe53022-ad0e-46e9-a2c5-b5e05d1640a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db19aaf-6407-4af6-a356-bb78e00a0963",
        "cursor": {
          "ref": "df219edd-5fb9-45ee-b793-ebbcf0f72bcb",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c96050a6-8c3f-4cea-a7e6-dc291f2cf3f6"
        },
        "item": {
          "id": "0db19aaf-6407-4af6-a356-bb78e00a0963",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "52f29e94-5f37-40ba-b3b6-f7185da530e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b967c22-a83f-420a-90fd-673c213bdd38",
        "cursor": {
          "ref": "d96385dd-6424-45d1-8bdc-54951bb0de86",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "86ec172c-749d-404c-b6b1-0b769d090a53"
        },
        "item": {
          "id": "4b967c22-a83f-420a-90fd-673c213bdd38",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c6d43437-5efc-40fd-9d8a-0a832141925c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648f4e11-4651-4580-a519-ccde4dbb4afd",
        "cursor": {
          "ref": "7922318c-3011-4406-8f3a-9d1cf3e217a6",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b65c37d2-9e4d-43da-8938-5350602aedce"
        },
        "item": {
          "id": "648f4e11-4651-4580-a519-ccde4dbb4afd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d9b70e6c-2976-4feb-8fd9-057ca62f1109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb39c18-41bd-4c02-9f94-1800956e6c5a",
        "cursor": {
          "ref": "ae452146-b917-4375-be11-6c8fd0176696",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2418df4a-c6f0-4966-bea4-27f899bfd2ff"
        },
        "item": {
          "id": "5fb39c18-41bd-4c02-9f94-1800956e6c5a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7e2bf261-edd9-444a-8aba-ea206a8bfe60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaae8cce-7405-496a-bf36-fe242ae6ba3c",
        "cursor": {
          "ref": "cfb13997-f608-4990-9629-201ba595074a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c7ad84db-0fa1-4698-8e71-7791c5bb16fd"
        },
        "item": {
          "id": "aaae8cce-7405-496a-bf36-fe242ae6ba3c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ae005fb2-0e86-41a3-bb64-0fdd51060e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec208fee-8ac6-463b-abf4-413bcaa5b30f",
        "cursor": {
          "ref": "9d298fd7-565a-40ca-9233-0d8e0daf7b1a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8c62f0e7-f271-482f-bc33-d80008568d3c"
        },
        "item": {
          "id": "ec208fee-8ac6-463b-abf4-413bcaa5b30f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8fe54203-674f-43d5-a0a6-942cf8325eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825505c7-fda1-4714-8527-3720ab7e800e",
        "cursor": {
          "ref": "ced03108-0777-4573-bc65-f44efb50789e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "56d7f37a-075a-43c9-b39f-12f7615e38b5"
        },
        "item": {
          "id": "825505c7-fda1-4714-8527-3720ab7e800e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "833990fb-3b7e-4dc9-b605-5001dab7706e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df93d3a-a850-4c61-8bd0-2b4e095b85a6",
        "cursor": {
          "ref": "70c778b4-7a1c-4fbc-9e58-bb7b4234a1e3",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8ddda205-2548-4322-bab2-b62f62e958e2"
        },
        "item": {
          "id": "1df93d3a-a850-4c61-8bd0-2b4e095b85a6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3b3f60bf-fe5f-49f7-8904-e1471e7b9099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47d162f-ae7a-45e5-8bfa-11627138e821",
        "cursor": {
          "ref": "a1a964ca-18b2-4bab-8d33-4194f0875c09",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "348f2e22-9729-4beb-8afd-01c18cecba31"
        },
        "item": {
          "id": "b47d162f-ae7a-45e5-8bfa-11627138e821",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b90ee084-a567-46b1-981b-ba011cb1b8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cb583a-b916-4f47-91d6-9e8aaf665660",
        "cursor": {
          "ref": "3063b12f-9a02-48a2-9e19-fce6606e8a64",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "18f73397-b617-41c5-9ea1-62ea8e970410"
        },
        "item": {
          "id": "51cb583a-b916-4f47-91d6-9e8aaf665660",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "40000e80-fda0-4e61-ba3d-63a15348e335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5acb78-b1c2-4852-97db-9a4b3370ade7",
        "cursor": {
          "ref": "17fb8686-aafc-4c8f-97b5-2ca5bf514e0f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3faae000-a7db-41a0-a8ab-1d2180863571"
        },
        "item": {
          "id": "cf5acb78-b1c2-4852-97db-9a4b3370ade7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "91904d4e-7564-4a2c-80b4-a393dd5549b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5275413b-12a1-41e1-b393-bb2389334d10",
        "cursor": {
          "ref": "707de071-c7ad-4914-8e11-1716d29858ec",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3dfed067-4985-4402-8efc-4df58f87b7b2"
        },
        "item": {
          "id": "5275413b-12a1-41e1-b393-bb2389334d10",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb612b23-cbd6-4cc3-ade0-4130d67f8deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25959958-ee5a-42f2-9828-fd1c9ef03073",
        "cursor": {
          "ref": "90c590e3-60f8-4643-ac6f-ce54acaea0e3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1e3aa320-e64a-4d5f-815f-9105e6880ef3"
        },
        "item": {
          "id": "25959958-ee5a-42f2-9828-fd1c9ef03073",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f8eb5968-ceb2-47f6-b173-c65ff6956e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccea488b-04f6-43ee-bf6b-02de21a3c16c",
        "cursor": {
          "ref": "33909c7a-7fe2-4bf1-9a47-44042d66b547",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "625c3a21-307b-4d09-8bbd-2fc215dbe1e6"
        },
        "item": {
          "id": "ccea488b-04f6-43ee-bf6b-02de21a3c16c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e5e1b300-6302-4529-a1d7-69f2fb3caa92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54887a4c-5096-4267-a282-5fe4e95a9b82",
        "cursor": {
          "ref": "7a4d21af-863a-44fe-a599-14c896e350df",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "31b578a4-2e97-4641-835a-00aa93cdddd1"
        },
        "item": {
          "id": "54887a4c-5096-4267-a282-5fe4e95a9b82",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a43b0945-3462-42ef-be89-f21bdb3eab8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09147fa-529e-458d-8cc1-c8e9e1dffb37",
        "cursor": {
          "ref": "8f49909f-de19-4a13-91b6-872492d67e8f",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9ece9d5b-f499-49ff-8c8d-140dad70a73b"
        },
        "item": {
          "id": "a09147fa-529e-458d-8cc1-c8e9e1dffb37",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "455699b5-95c7-494d-b290-819d934189b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b95f339-5c26-45e8-8c76-ce95578b86a4",
        "cursor": {
          "ref": "87033dbf-6ee9-445d-bdad-26a2b9b6f3b6",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b4fc107c-c892-4a30-904c-6db6680de86e"
        },
        "item": {
          "id": "6b95f339-5c26-45e8-8c76-ce95578b86a4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d5cc9453-88ed-481c-ba53-5d1509e46a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8266f7-01a9-4940-8a58-f9fd9c2137d6",
        "cursor": {
          "ref": "b5f1141f-b1cf-4e09-b230-3019647dc3a2",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "464f6d92-3a0d-4121-9076-af54bdd2024f"
        },
        "item": {
          "id": "6c8266f7-01a9-4940-8a58-f9fd9c2137d6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e5f2d36d-407c-4e19-835f-ceb8ac5fd3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 440,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743fd33b-6741-484f-ba6b-155a52d7d4b2",
        "cursor": {
          "ref": "fb7da980-ed45-4383-8cb2-a22392872565",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fe3feef7-6ef1-44a7-bd9a-8880a1c2c305"
        },
        "item": {
          "id": "743fd33b-6741-484f-ba6b-155a52d7d4b2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "190fea24-c088-4046-978b-fa0ff17224a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eea5acf-2c51-4ee5-b106-8c283aab73b0",
        "cursor": {
          "ref": "975780b8-0062-4095-a020-7058e73dce4a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "78eab8ef-c75c-4519-8b64-6c85b055cd30"
        },
        "item": {
          "id": "8eea5acf-2c51-4ee5-b106-8c283aab73b0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "827e132f-b41f-41a1-899f-db9c766f9719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2277e868-c1f4-42b9-83e1-9c62117a0615",
        "cursor": {
          "ref": "3fe1495a-b1d1-4b0a-a6c6-b51daee6c744",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "822d85e2-d5ff-4e1c-9184-a2fbbef91417"
        },
        "item": {
          "id": "2277e868-c1f4-42b9-83e1-9c62117a0615",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1829ff21-797f-4828-8ebf-ac3fb46e40ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98fcaef-89e0-4596-8408-470772a5bb10",
        "cursor": {
          "ref": "2bb49107-6190-47e7-9487-4500f4a3d736",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a3dee743-a7ea-43dc-8486-15b6a51a74a7"
        },
        "item": {
          "id": "f98fcaef-89e0-4596-8408-470772a5bb10",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "13508339-8690-47c5-bd02-f3344c863305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3583eeec-0675-4618-ab82-e3a5c3d31829",
        "cursor": {
          "ref": "02b1d7b6-7b2f-481f-81be-8ca32f0ec1c6",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "038b4919-ebd8-4859-b77f-4018b0ddaf08"
        },
        "item": {
          "id": "3583eeec-0675-4618-ab82-e3a5c3d31829",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d0691f07-d60b-4683-a351-eccdf8da54a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d31d30b-da0b-4695-bc9a-fdd10a41899c",
        "cursor": {
          "ref": "1f1acd2e-c674-4327-86de-6cfada7ab964",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a008958a-d283-4ebe-ba94-80ce78dc6101"
        },
        "item": {
          "id": "3d31d30b-da0b-4695-bc9a-fdd10a41899c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4b28fdba-4085-4616-9347-d1612c454fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcc64ec-9de3-4686-aee1-3efa2b10388a",
        "cursor": {
          "ref": "7d2e57e1-6e27-4dec-87b0-5ec01e738af1",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a3a433e3-c42b-41b8-b84f-4aea97df42fd"
        },
        "item": {
          "id": "dbcc64ec-9de3-4686-aee1-3efa2b10388a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "eff3770c-1a9f-458b-9bce-3f4db9c1b761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337e4486-6ee4-4e65-b05d-f3cc974fae88",
        "cursor": {
          "ref": "8e122442-16ad-4f81-9001-54c83897ed81",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "56b52b1d-e43d-4349-96bb-354b045f3074"
        },
        "item": {
          "id": "337e4486-6ee4-4e65-b05d-f3cc974fae88",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "568b3a67-aa57-4afa-a395-63c0645f8da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b6e44b-17cc-4af4-8fa3-875b4a6b043c",
        "cursor": {
          "ref": "14ce4a42-13d2-475f-8c13-2e9aa904df24",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a8a24e5e-9f1a-4206-a11d-611add2af534"
        },
        "item": {
          "id": "58b6e44b-17cc-4af4-8fa3-875b4a6b043c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e8771801-7998-44e4-8f14-e72738df7e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cc4681-40d4-4e77-baf9-ac706792dd3e",
        "cursor": {
          "ref": "298c9f7e-8ac1-42f6-bffa-cd081af4184d",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "73f0f0cb-061d-4d58-9abe-0887994d3a0c"
        },
        "item": {
          "id": "61cc4681-40d4-4e77-baf9-ac706792dd3e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "31874f25-0931-416b-bc61-825e6ff42914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4f8761-11e9-42ef-a786-38434441eff8",
        "cursor": {
          "ref": "f12ac34e-4642-455f-8b52-c5008281b070",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "dab0187c-114b-44a0-956c-1db93025519b"
        },
        "item": {
          "id": "3e4f8761-11e9-42ef-a786-38434441eff8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b18118c7-a2be-4737-954b-ab0f2e39cbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdc6936-ff28-4391-8e98-967ba2689c52",
        "cursor": {
          "ref": "7405eab2-9e8b-452f-bd10-2fe90c85470e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "489202bf-9c91-4b93-9b32-07fc51522826"
        },
        "item": {
          "id": "2fdc6936-ff28-4391-8e98-967ba2689c52",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1d2f5502-4615-4eac-95ab-ba30edd63a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753df643-8759-425f-bdcf-ff2c22db4d1f",
        "cursor": {
          "ref": "d9a8a77f-d02d-495e-bc31-d95c2b50338a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "485cba21-ec63-4ac7-9990-db186df0485f"
        },
        "item": {
          "id": "753df643-8759-425f-bdcf-ff2c22db4d1f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8f87aeba-3d5b-4d79-953d-eff11637d2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981a4e60-52e1-4a01-b4d0-c627f848aab8",
        "cursor": {
          "ref": "9e0d72bb-ff96-4053-b052-558f51704c1c",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "34e28540-6254-40e5-927e-2c3a9e7fb3d1"
        },
        "item": {
          "id": "981a4e60-52e1-4a01-b4d0-c627f848aab8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5d9f84bf-28f0-4449-87ae-88193c7065fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bad11f9-7cc6-44fa-8d08-ccab1409b847",
        "cursor": {
          "ref": "62f5c40d-1489-40b3-8acd-6bb981ef9a7d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1f5ad96c-0618-420f-a7b6-97c57b2be02f"
        },
        "item": {
          "id": "1bad11f9-7cc6-44fa-8d08-ccab1409b847",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f723cc66-3b9f-4e14-b511-4e287915107c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2082dd3b-2cf9-4713-87ba-1bd0ef3090bc",
        "cursor": {
          "ref": "d6f4a78f-0816-4af8-9938-d61dfe8351e7",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "267abcf0-e255-47c3-9a93-789d11f15593"
        },
        "item": {
          "id": "2082dd3b-2cf9-4713-87ba-1bd0ef3090bc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cc10cb44-0a48-4e7b-bfd7-18b529801ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a5c5fd-b915-4e23-8677-f5183bf05b01",
        "cursor": {
          "ref": "0c0492a9-0076-44a6-8c62-b78b6b29416a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3e0f8a90-d8db-4bc3-8eee-a3f0d63ab4ca"
        },
        "item": {
          "id": "41a5c5fd-b915-4e23-8677-f5183bf05b01",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "181269eb-8c5e-4479-b528-91c2677ac728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e300d3-c22a-40ed-96f8-f7c74c144275",
        "cursor": {
          "ref": "e2490989-0946-4eff-8eed-a2d767d80d88",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cea461f4-d5d5-4480-941c-6fd10d9059a2"
        },
        "item": {
          "id": "f9e300d3-c22a-40ed-96f8-f7c74c144275",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "23eabb8d-28dc-4cc5-9447-d8d4d55d9493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a376147b-df2d-448b-8d78-0a486d11a850",
        "cursor": {
          "ref": "6480b3a8-27ed-4d99-9829-a047956c77bf",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bd5edf4b-9c52-4efe-9af7-58081e62d2a6"
        },
        "item": {
          "id": "a376147b-df2d-448b-8d78-0a486d11a850",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "63cb790c-da93-4c25-8112-49b51ac6151d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd345274-c287-4ced-9659-14c8d4d04066",
        "cursor": {
          "ref": "f42a60f9-bdae-41a6-9420-011ad78350ad",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e05a74b0-2b56-49bd-b405-72b7501366bb"
        },
        "item": {
          "id": "cd345274-c287-4ced-9659-14c8d4d04066",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "669a2a2a-bf29-4764-b14e-e9aab0f8eeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c279fa47-31a0-4446-8f7a-785706b04f1f",
        "cursor": {
          "ref": "d2d47118-bfc3-42b7-81a1-fc2a002c252c",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3e17f5df-806b-41d4-a0b2-ad27eb96ef4e"
        },
        "item": {
          "id": "c279fa47-31a0-4446-8f7a-785706b04f1f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "dc7b0204-1a2c-4683-822e-126bff00e8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49f407d-3e60-49c4-aa47-4ea2c77fe1c8",
        "cursor": {
          "ref": "42aec813-b4a6-4426-b680-c12ecb74c200",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fe518a83-84eb-4db8-9021-996eb316fa50"
        },
        "item": {
          "id": "c49f407d-3e60-49c4-aa47-4ea2c77fe1c8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f0a90e8d-3541-4121-933b-9d367a44450e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947a76a9-9601-4c73-9b18-4ef4dba088c7",
        "cursor": {
          "ref": "e166e53e-e61e-40f6-8000-ed3e054350e0",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d01b7e4c-f4f6-4e75-b877-b364131e2451"
        },
        "item": {
          "id": "947a76a9-9601-4c73-9b18-4ef4dba088c7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e2053bff-e81b-4a14-98ca-dde8ca84adeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3f2391-0333-4412-8198-4774c7d52d45",
        "cursor": {
          "ref": "acffdaf2-befb-4c6b-a08f-2f7f74f399a1",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0480efd8-c01e-4b3a-9e9a-72d074028ed9"
        },
        "item": {
          "id": "dc3f2391-0333-4412-8198-4774c7d52d45",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7feabdfc-caf7-40a7-8796-2ebc2afeaa9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b152e64-202a-4619-8ddd-2e723894b9a3",
        "cursor": {
          "ref": "839efc70-6631-431d-b1e0-2c697b462756",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e3a2178e-a975-42c4-b30b-99aadc490d04"
        },
        "item": {
          "id": "2b152e64-202a-4619-8ddd-2e723894b9a3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "aeade1a4-e9e0-4a46-879f-2949a853991f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb42923e-3f24-4920-84a7-4141908d5d87",
        "cursor": {
          "ref": "097154d0-9980-49a6-a4d2-bb3c60ef0aff",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8cddea36-e145-4783-8285-49bf68713072"
        },
        "item": {
          "id": "eb42923e-3f24-4920-84a7-4141908d5d87",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "24a003cd-6365-4508-b468-38d527403f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f91ee6-b27b-4276-bfd0-9f38bd52d482",
        "cursor": {
          "ref": "54d6fcd6-b357-4839-8a15-e7b5fd389789",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c6873577-e5a1-4eb8-be73-94f8bc26ef21"
        },
        "item": {
          "id": "49f91ee6-b27b-4276-bfd0-9f38bd52d482",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4884f482-408f-45da-9b6c-4fd020c98176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ac7efa-2508-4249-a0bb-a891ed7fef19",
        "cursor": {
          "ref": "beb23873-cb77-4b01-9b34-1b75a3b490bf",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "53cc7e74-f75c-4e82-8d2c-4e62e8537613"
        },
        "item": {
          "id": "b6ac7efa-2508-4249-a0bb-a891ed7fef19",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6203e29e-38bf-494f-8bce-f37b69a618f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c298449-7348-4bd1-a7cd-8fcb64e3df1f",
        "cursor": {
          "ref": "cb7f2c09-3cda-494f-adc9-a184ec251220",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "93b0467d-c1d3-4687-8f9f-15b2f990b790"
        },
        "item": {
          "id": "0c298449-7348-4bd1-a7cd-8fcb64e3df1f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "85e50e4e-50e9-48fa-b493-ee2c985c825c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05741115-12ff-4917-aa63-43a9f229afbb",
        "cursor": {
          "ref": "b0eef96e-0b04-4e55-9ccf-ac46f8b5e9da",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4e8cd08e-5885-4293-bce9-24a3f06eaa3d"
        },
        "item": {
          "id": "05741115-12ff-4917-aa63-43a9f229afbb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c303861e-1df0-42e6-ac19-66121d8e1887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6e9031-3b65-40dd-87a9-94eb8af9ee7f",
        "cursor": {
          "ref": "1e2be732-2d83-46ae-88e1-6805081337f2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0f310e85-7b05-40a6-8551-f75171029fd2"
        },
        "item": {
          "id": "ed6e9031-3b65-40dd-87a9-94eb8af9ee7f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a97ce137-1ac2-480b-ba60-810d8f2e2717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721bd7cf-8bf0-4068-ac22-8b8f4e912b9c",
        "cursor": {
          "ref": "10a012c5-44e9-4fa2-9506-c35bcc5717d4",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b20717bf-18e0-4d69-9eb3-71e20e5d7650"
        },
        "item": {
          "id": "721bd7cf-8bf0-4068-ac22-8b8f4e912b9c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e6669a38-33bb-4d5f-93c1-a779876bf82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5978e9-2477-4743-927b-f1245d32a0a9",
        "cursor": {
          "ref": "477584a9-830c-4589-84f9-7516a7b37130",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fdcbe068-5fd9-4f09-8d54-091fddf67822"
        },
        "item": {
          "id": "ee5978e9-2477-4743-927b-f1245d32a0a9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1389b41f-79bd-4032-b4b3-fb5545acbec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e72ca7-8f34-4c04-84a6-85b9a12ee011",
        "cursor": {
          "ref": "c74d10fc-f246-4ea3-b9c3-8ba96ddc41cd",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ac1a58a6-7ef3-4bf8-9df5-1f8a02af6c69"
        },
        "item": {
          "id": "f1e72ca7-8f34-4c04-84a6-85b9a12ee011",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "220a15a6-6fad-4e2f-bb28-377e3e3cada3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f2dfe4-65c0-4d11-9529-df76f9fd85d9",
        "cursor": {
          "ref": "cb1ebd9f-974d-4fea-872e-45f2e9873f0f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "76d7981d-6cbe-4db3-aac2-2e5a34affc6a"
        },
        "item": {
          "id": "89f2dfe4-65c0-4d11-9529-df76f9fd85d9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5ce932cb-cd5d-4f9e-a8a2-196ad4b0c13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a6ea4d-6b26-47cf-b491-49858aa9d2f8",
        "cursor": {
          "ref": "4edbcbb3-37b6-4cde-bcdf-6b3ee1a0f2bb",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b682eb3d-97de-47f5-9904-cad453543a06"
        },
        "item": {
          "id": "46a6ea4d-6b26-47cf-b491-49858aa9d2f8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "613bcfb4-acb5-4cad-83e4-74df7d5d86f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b3f6b6-3fb9-4544-8319-9cd6dc764785",
        "cursor": {
          "ref": "55e0b5a9-4fdd-4db9-a494-26ba67cc22b2",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "34e00ad3-3346-49f2-b455-087cb8a5790b"
        },
        "item": {
          "id": "f4b3f6b6-3fb9-4544-8319-9cd6dc764785",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d333500e-89b5-470b-bdda-de2752ff7609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37106c65-e436-49b1-9b59-5249d7e45b11",
        "cursor": {
          "ref": "4a5cb51d-0930-4166-a6e6-1512be36d5a2",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "02928d93-e96a-42cf-80a3-cf5b164a464e"
        },
        "item": {
          "id": "37106c65-e436-49b1-9b59-5249d7e45b11",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a92d001c-0705-4507-9771-fc39f7349c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f602dd8-2df0-4591-a5d2-f307e603afa5",
        "cursor": {
          "ref": "89351e05-2795-4160-b4fd-141c8c0a11a0",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fccd079b-2eee-4446-83ab-06b8dee983cd"
        },
        "item": {
          "id": "6f602dd8-2df0-4591-a5d2-f307e603afa5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "de5db435-08ee-4baa-a295-8c6e8f419849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784cac45-5554-436b-882f-209100907cb4",
        "cursor": {
          "ref": "e088a55f-a201-4fac-98f9-1b50650ca2e2",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "60692987-011f-4273-a895-cbf6a2523df9"
        },
        "item": {
          "id": "784cac45-5554-436b-882f-209100907cb4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6989b0a0-d4f2-45c4-8d97-cd850c22bc9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ee75fb-8cee-47ad-9c01-9fb27c286a8f",
        "cursor": {
          "ref": "449517f3-42ed-45ff-a22a-0db1d44733ef",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fd2adbc3-d97c-4619-817c-f6cf4945f0c5"
        },
        "item": {
          "id": "c6ee75fb-8cee-47ad-9c01-9fb27c286a8f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "99b50484-e01f-4a02-a93b-d637013a066b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca9383a-b7a3-414e-b804-40deb8d1b2bf",
        "cursor": {
          "ref": "f35d91b9-b3ec-4c5e-b1e6-e88093a40a2d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "35d87ce1-616e-47f7-a1e8-70910942b3ef"
        },
        "item": {
          "id": "4ca9383a-b7a3-414e-b804-40deb8d1b2bf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "61ea34dd-8d41-4a17-9e23-ea0a4e9eaf1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d356c0f-fb12-41ef-8f19-52be3e833647",
        "cursor": {
          "ref": "4c5e95cf-e213-493a-876a-32e75b1536c3",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "64d1ffdc-633a-4d83-ae6b-21312410106d"
        },
        "item": {
          "id": "9d356c0f-fb12-41ef-8f19-52be3e833647",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7425ea7e-9a18-4ecb-a310-eb2be7778576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f554fd9d-1cee-4c9e-a134-b32bc3f9e7d8",
        "cursor": {
          "ref": "cff8bbf6-66ee-421a-9132-66d33bca855a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0ca2de02-f0a4-4ec4-b741-10d9b8b48442"
        },
        "item": {
          "id": "f554fd9d-1cee-4c9e-a134-b32bc3f9e7d8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3871f005-aa32-4597-b2c1-106912a78b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6041ba-60fb-4a85-831d-63821d91640d",
        "cursor": {
          "ref": "2f9a15a4-21a2-4045-859d-97583e1fa810",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0f3301e6-c145-4d64-a09b-f6225a08f7a7"
        },
        "item": {
          "id": "2d6041ba-60fb-4a85-831d-63821d91640d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "48363631-d007-4511-9397-7569d2a1f6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024de672-e544-4981-8e93-40a9eb4c40fb",
        "cursor": {
          "ref": "0b139a9b-c6c2-4b4e-ab38-0e204d91ec26",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "463d2428-e064-4715-9718-1cb9ac840076"
        },
        "item": {
          "id": "024de672-e544-4981-8e93-40a9eb4c40fb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b2861052-0db0-4ae9-8a06-bdd334a50981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd03104-77ba-4f43-a155-5dbeab27ac94",
        "cursor": {
          "ref": "49b0cb7c-49f6-4862-b083-bfe5e61bfd19",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "119bd36d-f245-4d26-9874-f21168fa7dd1"
        },
        "item": {
          "id": "1dd03104-77ba-4f43-a155-5dbeab27ac94",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0f367ead-a12d-445a-bf12-3d3dad86bb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf53625-e742-4106-877c-305718d55cdf",
        "cursor": {
          "ref": "c40427af-57ad-4d61-a7fc-05ca90f6768c",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3fd9f17e-b791-4308-a264-0927b3a5479a"
        },
        "item": {
          "id": "6bf53625-e742-4106-877c-305718d55cdf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2ca7792b-06e1-4c3e-811b-8f791c3fde52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6e7ac7-aaf2-4769-9e58-de37e87c7e11",
        "cursor": {
          "ref": "4bd74f44-2594-4307-b2e4-52a0a5516a1d",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cdac5453-eb93-42c8-b5ec-8c8051df9a35"
        },
        "item": {
          "id": "cc6e7ac7-aaf2-4769-9e58-de37e87c7e11",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "737e39c7-a8bd-4259-b948-477e4fc5ce05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54cb2ae-94df-40f3-9ed1-df54160e29fc",
        "cursor": {
          "ref": "092aba18-ceda-45da-98c8-a04a1a23d9d6",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a8f6dd4a-52a2-4226-b952-bb5af2cc3cc3"
        },
        "item": {
          "id": "a54cb2ae-94df-40f3-9ed1-df54160e29fc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "31e980f8-781b-483d-9849-056257658c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63142c4c-e920-47e5-8e64-9a68014aad37",
        "cursor": {
          "ref": "22d19f63-86f9-4556-b439-b766c99f2ed2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "93d43de7-6c65-432d-a1ec-8d4b4291d85d"
        },
        "item": {
          "id": "63142c4c-e920-47e5-8e64-9a68014aad37",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6bf43f62-c62e-492a-9a2a-be93d365d721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fb4e95-4890-4305-a0d3-e36b832ae0d2",
        "cursor": {
          "ref": "570c3323-f032-4fd4-ba1d-f11d31bc0f8c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6b356f20-e149-46d1-be0b-cfe51da83a01"
        },
        "item": {
          "id": "02fb4e95-4890-4305-a0d3-e36b832ae0d2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a0d9b6cf-47d0-4bb7-8120-47f6d9afcc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8180f7-f508-4b9c-a7c0-3f19088b171e",
        "cursor": {
          "ref": "d5cc86c2-ddef-4bf0-9ee1-8214f63da03a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "de7baedf-ddce-434f-872e-890f1f5bc6a2"
        },
        "item": {
          "id": "6f8180f7-f508-4b9c-a7c0-3f19088b171e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6d840cf6-f81a-4095-9ab0-c56b54c09e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49266e9-007a-42fa-ba66-18f867f4e489",
        "cursor": {
          "ref": "c72ac2ff-0063-4051-90cb-49cb7bccd9bb",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1c3e8e3d-7f20-45c6-9704-1eb04d391117"
        },
        "item": {
          "id": "e49266e9-007a-42fa-ba66-18f867f4e489",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0f9bee64-ec6d-4e89-be5b-98eb9141f3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f112192-9f86-4631-b890-f97a8be54c35",
        "cursor": {
          "ref": "1b89128f-cc8a-4fe6-b2b0-76adf279b399",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0dac4fe8-3e53-4419-bd37-70abcc41ab0f"
        },
        "item": {
          "id": "4f112192-9f86-4631-b890-f97a8be54c35",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e8c91bde-feb6-4b75-ad13-4236c7603454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcb44a3-66c3-48b9-bdb3-0a3efb194625",
        "cursor": {
          "ref": "74d9c281-b904-4376-a49c-10cd0b486cbb",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bac219ab-809a-49c9-8c9c-feea47ef9e35"
        },
        "item": {
          "id": "dbcb44a3-66c3-48b9-bdb3-0a3efb194625",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e107f502-13a0-42f9-ab5c-0939fc1f20c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e25186a-6ef1-4366-a056-9900d53408e9",
        "cursor": {
          "ref": "ca8cee09-568c-42c4-96ea-91cbcb7450f1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d6d11b42-1a77-4a35-b7fd-44c9dab2167e"
        },
        "item": {
          "id": "8e25186a-6ef1-4366-a056-9900d53408e9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d70ce7f8-d01f-474b-b1f2-2903b8e25b29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2437229e-c258-420a-a5c7-75f3f2099a4b",
        "cursor": {
          "ref": "7a1c8fae-c4ef-42f7-9fb7-07d942965577",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2709eec9-5372-4aa6-9237-29b243dd629d"
        },
        "item": {
          "id": "2437229e-c258-420a-a5c7-75f3f2099a4b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "85dc1123-4392-4c34-95e0-5b2f939ae411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f711e225-59d5-43cd-a4fc-304a872c8684",
        "cursor": {
          "ref": "a7eb9512-79cb-450f-9457-3d68969ddd5b",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e4f12913-85a6-4386-8e21-7c9b9ffa363d"
        },
        "item": {
          "id": "f711e225-59d5-43cd-a4fc-304a872c8684",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "547d9772-356d-4acc-b8e0-a9007a25ebe3",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34d33ec-9e31-4513-b582-fb047ca01ecb",
        "cursor": {
          "ref": "6bda3899-b5a7-47a5-be66-8cada743ed68",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0d16685a-3193-4872-9eee-9f195532731a"
        },
        "item": {
          "id": "b34d33ec-9e31-4513-b582-fb047ca01ecb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "94457ecf-233d-471d-8881-a303e17f4a7f",
          "status": "OK",
          "code": 200,
          "responseTime": 2412,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e8bea4-3b80-4db1-a27b-b18994fa593a",
        "cursor": {
          "ref": "ef075db7-69ce-44fe-a056-fc476b5d241d",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "67f03d62-3b48-484b-8498-ff53a4a16dc5"
        },
        "item": {
          "id": "39e8bea4-3b80-4db1-a27b-b18994fa593a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9d6db049-0199-473e-b01f-968596025f2a",
          "status": "OK",
          "code": 200,
          "responseTime": 3123,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b6dc55-0dcf-4d94-b674-f218a68d8e55",
        "cursor": {
          "ref": "db15c701-2e60-40c0-9145-9f391d2bff06",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "16f0d0dd-98e7-4a85-b8c0-31ac33d0ea11"
        },
        "item": {
          "id": "a1b6dc55-0dcf-4d94-b674-f218a68d8e55",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d5278773-f986-4c53-a977-cc22801ef9eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a1b6dc55-0dcf-4d94-b674-f218a68d8e55",
        "cursor": {
          "ref": "db15c701-2e60-40c0-9145-9f391d2bff06",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "16f0d0dd-98e7-4a85-b8c0-31ac33d0ea11"
        },
        "item": {
          "id": "a1b6dc55-0dcf-4d94-b674-f218a68d8e55",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d5278773-f986-4c53-a977-cc22801ef9eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a1b6dc55-0dcf-4d94-b674-f218a68d8e55",
        "cursor": {
          "ref": "db15c701-2e60-40c0-9145-9f391d2bff06",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "16f0d0dd-98e7-4a85-b8c0-31ac33d0ea11"
        },
        "item": {
          "id": "a1b6dc55-0dcf-4d94-b674-f218a68d8e55",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d5278773-f986-4c53-a977-cc22801ef9eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "74fc1415-e67c-4e9f-8c42-89a02f7dd57c",
        "cursor": {
          "ref": "3cc61e4c-4e81-4893-b87e-733221f5ed05",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "92cd04e2-5fdb-4fa7-b821-4387d6ef0a9c"
        },
        "item": {
          "id": "74fc1415-e67c-4e9f-8c42-89a02f7dd57c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1ad5abee-f5ea-4bf0-b784-a98826d1fc7a",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "86e78328-2c90-4806-ac13-0f0255dc85ce",
        "cursor": {
          "ref": "b14fa6ae-0f50-444b-a465-c4ca8bf0e449",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b2214fc9-848f-4cfd-a392-a1c7d9c18ea2"
        },
        "item": {
          "id": "86e78328-2c90-4806-ac13-0f0255dc85ce",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e7f4da4b-a4bc-439a-87e9-52fc7b345ae6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "86e78328-2c90-4806-ac13-0f0255dc85ce",
        "cursor": {
          "ref": "b14fa6ae-0f50-444b-a465-c4ca8bf0e449",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b2214fc9-848f-4cfd-a392-a1c7d9c18ea2"
        },
        "item": {
          "id": "86e78328-2c90-4806-ac13-0f0255dc85ce",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e7f4da4b-a4bc-439a-87e9-52fc7b345ae6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "87c2d25a-6905-4a3c-a0f9-942dafaeb079",
        "cursor": {
          "ref": "747b248e-4d4c-45c3-a122-e8a8ca912433",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fec84274-acd3-4ade-931e-53793777da8a"
        },
        "item": {
          "id": "87c2d25a-6905-4a3c-a0f9-942dafaeb079",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8c7cb5b3-5c06-4ca2-9590-3affe0c0e4f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 136,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c9b1b623-1f7f-4e12-b8a8-5727683ddd1e",
        "cursor": {
          "ref": "77733208-cd52-481c-99ed-ae26fc5d61d8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cd41cb8d-50cc-4aae-969c-b19f4f34df30"
        },
        "item": {
          "id": "c9b1b623-1f7f-4e12-b8a8-5727683ddd1e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "657d2716-134c-409c-a248-804bca8eeade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c9b1b623-1f7f-4e12-b8a8-5727683ddd1e",
        "cursor": {
          "ref": "77733208-cd52-481c-99ed-ae26fc5d61d8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cd41cb8d-50cc-4aae-969c-b19f4f34df30"
        },
        "item": {
          "id": "c9b1b623-1f7f-4e12-b8a8-5727683ddd1e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "657d2716-134c-409c-a248-804bca8eeade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2e182aae-9a01-43bf-8d8a-c718dba92527",
        "cursor": {
          "ref": "f0e6a942-c4d5-404e-9937-4716613e1143",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d95bf422-44ea-46ff-9a42-dda5fbc2bb8f"
        },
        "item": {
          "id": "2e182aae-9a01-43bf-8d8a-c718dba92527",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "acf3afea-836f-4ac4-b6f8-1aee05d58aa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}