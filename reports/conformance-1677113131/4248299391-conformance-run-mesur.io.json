{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f3050b2d-c567-4426-99f2-2d7b9454bb5f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "90d4328f-e08e-4844-82c4-acc63255c6a2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2816c504-67dd-403c-a5df-0d945da85701",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "15bc16db-1c2e-4f37-93fe-fdcbd8a46c80"
                }
              }
            ]
          },
          {
            "id": "9cd69692-8fb0-438e-9914-847ff1df206a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30fbc492-a0d9-4e42-966e-908eb8477ab0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7406662c-4a66-409f-a7c4-96c09783f09a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cc86499d-f3a4-4a02-b4df-5cbc6796145b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7be19bce-bb7f-4322-a0e6-f632e954583f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ded621ea-668a-40d7-a4dc-e12389810988",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d4d9c32-3d95-4384-a8ae-85bb0664638c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69d1239a-0017-4030-9611-2ff59abbb9df"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b75f06e9-f9c3-4d19-bf4b-f5d2f31a6069",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2908b65d-2b80-43f2-ada4-fe289c6b3745"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "684757d4-4e19-493b-9478-ce0bc813a0dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34eece22-b779-4b98-8b32-910a2a95f4db"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a503445b-be62-4ee8-a1fe-bc083085450e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "189e2d7a-4b37-455c-8800-9d5211e5132a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9768e1b9-f11d-405b-8ac7-6c14c2751a05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5beaea18-4eae-4bcc-8229-0a8d36b223fc"
            }
          }
        ]
      },
      {
        "id": "c79d1416-af8a-4cf1-b0d3-01ae841689ef",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9c6bb9fb-34ef-468a-a4c6-545ecc6910ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48eaa746-4cff-41ed-ad92-e59e298bcacf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c782db92-8926-49e7-b925-4afc44e3022b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301229ca-3079-4d3f-ae2e-4b5051836cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f351050-ca95-4f4b-b15b-8a7d12c04999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662cca39-b264-43b1-88de-1089421109e9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d879853-2c41-469c-8990-de03166d3fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8241321b-86d6-46b6-be42-4a190fca5817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48f9797-7445-4d69-8847-423eb0a22b61",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c499a45-c939-4e23-a8f2-174c54416680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbff4185-174c-45dd-ae62-ab78af183c25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ddf6d91-c302-4b3a-bd5b-75cce200af6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c9280cc-7870-45b2-a843-3fbc19ed875e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5fd693-e93a-40ef-b538-f54ed27b4ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "026307d4-7805-4838-890b-4ad7ff784d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4aaa6f6-08be-4c2d-82e8-1da99ec590a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0156a1ec-3526-4b42-9aa6-05e1e3a48cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5eead73-87c4-4c6e-9774-b61b3e189025",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87013f2-7a25-4542-b564-4efc4aa1429f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff23e93d-9808-407d-8b92-876c13e910d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c68dae9-a3ef-45ab-888f-6a9c3ccca489",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1da3d680-3f53-444d-a7ba-29453a6360dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c4e80b97-cc20-44f8-829c-a8532eb433c2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "30438cef-efd3-4def-adb8-e065f474e940",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52ecb73a-bdeb-4c84-851b-c6059185914e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d39165d5-d149-4a36-9f85-7fd6c3e50a75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b133092-2bab-4da0-9bc0-84e10b30683b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c4678849-00b4-4af5-8f5b-28270c2f58a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcc29901-cef5-4d65-8cf0-55adf5ed12fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2946c463-6b28-42c5-815d-6e7236154465"
            }
          }
        ]
      },
      {
        "id": "9ffc21b6-5e89-42a4-9f16-2af5fd6377fe",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "99a9d694-662b-4d5a-a2b8-5d0fe12d1975",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62455ca4-4cbf-4145-80bd-be721dfd5d27",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5aaf077c-c283-41b0-a320-3237574406ae",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e1a5df-8896-46a4-8e2a-3b6733a9df8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76cdc61-14aa-4388-be6b-32ddc47a6992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd1491d-78d8-4b26-b0a1-f1cb30877305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3a14414-ed70-4ed2-8a87-ca5f1af1e612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df93e89a-baf1-4a1d-8402-2f35c62c2666",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ef5104-c592-41e7-9f41-3fac329904bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819427c9-b9e5-45c7-891f-a45a84442270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ec5030-765e-456c-bc86-8e4535c8df75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6f5a138-494c-4d92-aa6e-8c9959b48e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475784a2-c0d9-4e90-b726-10af78702e21",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702d940b-1ed1-4fd4-8f17-a69c1b03b2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f02653-6e75-44c9-b459-ba6108cdde96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498466a8-3b11-4fee-ab77-c956a6f4f97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12954e34-23bf-4384-b6d0-73c8d146d4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4b28f2-f5de-4ae6-b508-a9b7eb62b7b3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0b983a-4c0f-4b8a-9fe6-6c7875a259f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fd8de9-dfb5-4e5e-94d4-ab924be031f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3370a7f4-1f5a-4479-83dd-e95b347ea21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67ccd726-b9b9-41c9-bdde-32954293748c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0306176-ae7c-4d1f-9e43-17033e93e4f3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4780bf9d-c397-44ae-96ce-6fd4c1fca8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc554b52-c9de-4abf-b2fb-034d48e32c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64964e7-f952-4e7e-ac34-f3475e6f4fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ca34fd8-0f46-4bcd-ab60-bf2fe30c4e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3152265-0496-4f37-b22b-380780db31c3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc27eff9-feb4-4291-95cf-08b6a5d74806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b71215-35ec-450f-ac80-a4509e9e4d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d3c1f8-ea4d-400d-818a-c58ad7c957d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5228ba43-6d4d-4801-83f7-a3645071a19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ddc46c-ba1f-41c1-adce-ac52a773b8e6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a463d8df-f591-4aae-a52e-626050b0e332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2640561f-3184-4b61-a80c-5cb695d5e366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd9efb8-8a0a-4855-a176-782c894d2338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a557182e-a7a1-4b75-8ad3-281c3ed39f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebcf326-7a64-42ac-9b7c-9e0f817175fd",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8989d66-e163-4a15-8374-68293980f7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2ca97e-e2c5-4d66-80ed-4c718e716622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c41ab80-7036-47cd-9def-52924be0476d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "406906e4-9c99-4e2e-9067-fe26aaaa38b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1587063a-5a02-4d7a-97d3-ef5622de6cc8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc56133e-d67f-483a-9f53-e4bfb6a8f690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e93ad1-81de-4071-a203-b02ea9dbe73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8876767f-6d1e-4868-a704-93c7cce65854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55a93f67-617b-48d7-939f-714a50e9e4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984dd16c-ccc9-460c-a298-e0e324d35ec8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4454d8d0-62a6-4b92-aba6-00ef2259c79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ccc54d-7abd-4d8c-a03e-e2006e1d1945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d50f91-df81-4bf1-bb09-59af8f4a877a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ba30c9d-5a53-43dd-aa35-95fdddf2eb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8333cf95-f90e-454e-bcbb-41e883718c5e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b13698-93c9-4d29-81c8-c5f2f94b5412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8e6c9e-83e9-4878-8b51-e4bad4c5e8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b2a887-b5a8-4fa5-af84-92227a37440e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "870f57db-156e-4643-ac79-89a693e2363e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24a1934-b1e7-4a83-9c9e-eb3b085545b4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efcb3f2-0486-4f97-884a-350acde834b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ad4b76-e53e-4b35-bc09-ae2b7a112dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f615dd81-4014-4e1f-b181-bdedf76e89df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c5336e9-5d0d-40eb-bf68-b97754be3cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92787aeb-b27e-46dc-8c27-bcb88f1bf735",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39fe5e2-85e5-4495-9522-ceff6376a2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d303add3-415b-4ace-a9af-5805b4da38f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2d7e5e-aa4b-45f0-a553-1fd1cfc8a13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24e15521-a6d1-45fc-8006-5d2a7990cb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809aaf65-dee0-436d-ab98-66207bb82936",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e61875-a435-4a9e-b204-b9880fa198d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f088c7-92f8-406c-8818-27957fb8543d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a11cdcc-770c-45f5-ace5-b13aa8841439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b251bf6-1505-4627-a33b-bc96a30a7dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5207be99-030c-4231-8a58-a5b55c551ad8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771fe221-d7ce-4502-ba3e-690288ea5fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba166c3d-2b45-409e-a37d-6d2b65e31f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee3abf8-5728-4d06-b577-f080375411c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6211ed35-8985-4746-b428-87a5002295d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017abfc1-241f-4b11-915c-b082d18fc6b2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2fd400-7e2b-4061-bf22-ffc432e2431b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b82bb1-589e-43d8-8bae-480e4f72b4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3183017-e1f9-4f27-b9ee-578f34608dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bc72c18-3131-4a03-9386-183e50026c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246af25a-c7b6-4004-a1e3-32653e1bad72",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6654a38e-752d-4d60-8b47-019bf840c03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ffc047-f9a3-4442-a1b5-038449eb0fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e304fdd-693a-45ae-8660-8f8e604c57ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b072097-068e-4b68-9dd7-b9b55159b80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17432cb-39bd-4e22-bf24-52c4463c5c4c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce00a2e-6912-4565-9d75-b0c0d6858b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce81f81-3925-4217-973f-b00b4d546361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7dce50f-ce34-4948-8baa-caaeedcb2d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "93c51d65-5ba5-40b7-8642-01128ee01e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d656c21-f93d-45aa-b0c4-2c40fa082d7f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a335df0a-1b2e-463b-ad86-c0c9cabed1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a65fb0-2010-4b9b-bd3e-c873ceedab09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345b7247-f9ac-4faa-86f9-5f876ad54876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "faa94916-dcbe-4157-8ca0-2be6fef0dc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2185fb59-5174-4d7a-8900-a9bb2bb689c9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5caf377a-c7bf-478e-bc6d-9bb60557d04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f055395a-93dc-4696-9eb4-3ec4f1d9c955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4738e1-0743-4f47-af34-503da963b87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77655148-c18c-4287-947b-e45e09b9a44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f865715-0255-4c4d-ad51-65952cd7feca",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd1c508-f4a4-443e-bb17-c3035add703b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92040cac-28a0-494c-bbad-bed608a58554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4245ba4c-0f09-4666-aa90-42f54810f3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a732582-f887-4fe7-9cdb-55cda73169c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57f8ef1-0307-4d11-b3e4-a01d75b8b261",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ad879d-4b9f-47d2-8ca1-b9df5bfca370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa05f312-bde4-4f87-a314-616d4397a93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5606a8e6-761b-45f0-85ea-74d2d0b4e51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac9ad65-d7f8-47f6-a121-8c90b13528fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22286a5e-63c9-4b0c-8402-ad84e8fc3db1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c517c567-2c41-4947-87b0-c71c015345e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5281031b-2233-4ae9-894b-3ec3db65d9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826a41d0-5853-4d02-874c-88c803f444a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70ca5827-5cb9-4b9b-bedf-aafca7a5f271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962c875e-84ce-4da3-8856-7a7255947933",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40c2a75-c741-4f0b-9352-b80a10c3de17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "532916e3-2a34-4734-87ca-bbd35352b7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f129bc4-84db-4650-82b3-1318e87a768d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e309a9f-927d-4ba6-838c-f1413e1c2854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bd86dd-99b7-44b6-b65e-8a1d33e2cb60",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d543ceb-300d-467b-a9bc-9f66b9c6998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e21a84f-f820-4532-8176-29b7ff7a7986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fadd1b-dd7f-4f91-9e2f-efa02f5df757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4c6b17-0375-43f7-891c-b39631fcddec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827e7ef5-3ca3-4a32-82d8-98ed4d73da66",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570b6c86-6d2b-42a5-a42e-dfa12b96fb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75d6aba-a59d-4d6d-a0ed-9e18c0bb8efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d2b7b6-8b4b-4ab2-8e7e-6687b4d20580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "124ad332-29c8-4174-ab2e-0dd043e502c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c15c54-efa2-41e7-b8ee-26eba93bea18",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c79770-c36c-49de-8fa9-41dfe56e7d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06be87e5-f155-4ca5-8ce4-d80ea9e4afff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a49c7f3-4871-41fb-8586-78d6a9469209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17a3632b-4a64-47e4-8c1f-b6debc274efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee561418-938a-445a-9e78-78f1e304d9b5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e66d38-ecd7-499a-ab60-574facfc84bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abc0cf0-3552-4ad8-b7cb-4d39f42ebc7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237df985-c3cb-45d7-ae17-11e43dd33c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8157468b-c234-474c-bd31-be34c4e40193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde75f9c-f7fe-4e96-9f2b-9cbd5f2e4401",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f702149-b32e-4578-8273-13648187f0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f68c230-c46f-4a7d-a30b-9e4abb39a1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b837596a-564d-48c5-9227-739d8a385af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c52076c-122c-493e-81b4-3399a35938c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bce805-b381-4218-875c-1ea928603e2d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2571da41-d614-49d9-917f-c8878ca3f23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91262d5-8cc9-4e93-ac3c-a8c3a70826c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfbaf5b-f300-42e7-a3e2-7a4e4d2df66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2121fd-356b-4a27-87a6-451e2fec8aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50501f88-80c1-4881-b3bc-1e3b38f11ff2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b87a225-44fc-495b-ae0f-b3198443832f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5ddccd-dcad-498a-b159-b6f7f835bf9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0257618-9acb-4864-944c-c8142e8a6d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d99ec014-faa4-4ad5-9041-edf1fa95f26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ccf8a1-1b3c-4cd4-af56-c034c07930ac",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b533cb9-88d5-4561-9fb6-b3b3aedb4d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e57777e-ad45-4f42-85b5-ad60cac14e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46ce832-9b11-404b-bb8b-1e0245827611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e445f7d-e6d7-4146-9a98-21b8ff18fbae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4571d56a-9202-45a0-b9bd-f04970b1562b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6922da-ef00-4488-8d7b-6032f437cd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045b5c79-90b5-4254-b326-338c79976ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2571525-cd04-45d2-9c6a-fdba7c473e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cccfe7d5-6d77-4511-ba37-9117865a2e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce71d43-6e33-4a89-be99-d86d528bc2a8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b44ccf8-327a-4bd6-8b7a-36ff5017eda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce46dcc-c9d6-4360-8c8a-7c21d66c5a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b996228-7df2-4d28-8d6e-bc14bf2a102c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "840a6461-5d16-4f80-9407-b9e8e04a8d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e59410-3cfa-47f2-a439-958208b9c9cb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef72ce4d-dcd2-48ce-8959-cd28f6c3249d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd729db-109f-4468-bece-60b7ef4cde29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267fab0f-9bf7-4f7f-922c-5866e41bee87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc7fcab-2a0d-468e-bd19-11f96f8a7d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c945dcf-a637-44ea-99b7-f8126fba4688",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35659785-5ade-45b0-9d00-b63229b45668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9c6b382-0f35-42bb-88dc-cc9e61930364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9a5dd7-1bf0-4471-ac35-cc5f77228171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac156da-474e-4c71-bc9b-7bad39851424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d8a7e7-c140-4ed8-9d1a-a3664936fcad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a37950-a909-4091-8c51-dd4bfc81b5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b82b7c5-1efb-4d50-af73-c508300c264c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8b11e5-43b5-4232-95de-001abc4faacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd61bdf-ace1-4d67-ab0b-286fa9fee75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8f4e05-ca08-4a87-984f-d38ca5790af1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90977de2-24f4-4705-b049-4bd1acfd7e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a81f2e-1db6-4eeb-a4f1-e2418aedce6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1bf80b-084e-4a92-9600-e50d186fb332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "31260cfb-7a32-4358-9479-52378d4b814c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb311702-0e1c-4c82-b1b8-82e4d6506300",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b28e1bc-ce3f-4b70-bd52-1f2f6d78434d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d762a303-6b01-41fc-ab23-9d0c85bad58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df6b25c-fabc-42a2-9f4f-b35c8e6ba695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "67d8e9ab-96a9-434a-ad13-8cb49203f882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a468fed3-f2df-4e23-b605-2d37f009497d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9614aca-d611-40fd-be50-22cc375f545a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97a71cf-d56a-4241-bf56-1e7f3e5e3ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def59b62-a566-454e-85fb-029064b1a75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "341c4b59-7d17-4a04-8f76-2ae2f0cdb736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6199f8c-855c-47c3-bd72-f89c8c1cfad2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db2d8b4-ac3a-423e-b283-a2dcffad5a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972e8432-59e4-4aca-800e-bd7c518f8b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b96164e-2e4e-40a9-ac3e-8ebf7932a50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb80a801-160b-4ccf-8353-2a5f729339f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a15dba8-8248-464c-bdfc-e09716f347cf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccea256-49ca-4807-8316-0c90b49898f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b82bee-cba1-4d25-8f43-42d81b979f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5edde2d-c9a8-477c-b4e6-65f246c7528f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e7896aa9-4170-461a-9d03-541594478f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea9a985-1e64-4bcf-b2db-d04cec30e7ad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369d78e2-0905-407f-8e82-9ef6f34aeb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d26f391-40b3-4f39-afe6-d0b50bd5b901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850393ac-d35b-44e7-a738-671029241b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c13ecdd8-9505-439c-9be2-9f49e43514a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc15c25-e9c3-4665-9470-083561b518ef",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b13d1-5b34-4343-941e-d3cb466c6c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98320e1a-2af3-423d-94b7-b5793a253268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8e8c3e-01e0-41f4-9938-82aabc8f7223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ad1013-5584-4ae7-920d-330dff3cea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed580f9d-35aa-4e2c-bbcd-d6b4ba62fb2d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa924147-0a97-48ec-9e93-3e0b325fedbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d50d0b-1093-421f-a136-ef0f470f268c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159e5dac-d893-41e9-bb57-5f067dcbc7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8fc7a2b-335d-45ae-9829-b6c89b80a257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d425ec00-7ad1-4a65-acf7-d57c56aa0351",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b99ede-34e6-427a-bc87-c046e5de3013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09d16d7-fd9b-4413-b7c6-3920f31fc107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8825da0-f743-4094-89ae-5478cb6ef55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39996dc8-6705-4dea-b7c0-0a1f27154064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf00e86-a698-407b-b325-aa85dcbee646",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca88b4a-3ff7-4528-9ff7-e5cda468fee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c9012f-14f6-4d84-8d82-449af8dbb153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee07c35-0cb8-4aa5-a99b-2a57d48be3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d00b809-dac0-4652-a9ec-b2f9d45f27f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca26b06-bd45-4b6e-bd5a-c4d91b522ceb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9e27da-7792-4884-9133-0f7d4f537cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c83dec-7f83-4b54-8613-ce95ede0c697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c00aaf-3cff-4b8e-bd5f-d69297e6caa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29f40929-f0ca-4032-aac8-35154181204f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b9ebc3-84f8-4eac-bce1-9ef3c6f0a97c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe214845-5300-429b-bf4d-d414eff31f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc02779-ae72-4a5d-b519-9f63e424cce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5820ee7-b826-4422-8059-f2472b072e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "350221b6-3fed-4627-8056-de36f9ab11c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a203c4ca-bdbf-48cd-aea7-29a504fcff15",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fbf07b-62ba-466b-80a5-aee3f49a9f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58ad19a-532f-4c9d-811a-2344de3cc645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582e70de-4572-49c4-81ca-8e6434b9520d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a825b9d-981a-4d81-936f-aec1460f7073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cff485-f442-427f-8464-5a9fcceef8b6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dcdd33-93a3-4827-b511-de6cc5e18e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423edd6e-72e0-4f0b-824d-36bbbe162692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e22c876-a0c7-447a-8fc1-25bbca40ba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7048d9d1-1d8d-4f9a-8c5d-89cf06e3964a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c416b4c-4e0f-4768-a059-4b5c40f8983a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d4fed7-dd86-403c-a422-b26b8d690a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11533850-4123-4dd1-bb4f-c499998967e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8acdb1-b625-46c3-ad36-6282e8dd912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "807821ea-c9bb-4685-84ee-4ecbb498b89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74191ffa-3230-4c9e-bdb0-f0d5c9f19dae",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8e3eeb-e47a-4bdc-8e99-829ee2df2254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e236a1-3c0f-4899-abed-6d0c2d0b546b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6e96b3-914a-44b7-8f45-0cb2593eb90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71958753-3814-414a-9252-6f2a2b33b249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff41182-dd42-4969-a4ab-5ead84b3d044",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ebb388-f0f5-4b6a-88dd-0655fe07233f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d886be27-c6cf-4ce3-9cd8-0ff23eaf6409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014e57fd-4acb-4243-812b-316ad51111cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb0eb6f-e5b8-4fdc-9870-6cb75f52c0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb2db36-4060-42b5-83c9-22d2fba6cf19",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc036d69-b172-4b96-a827-72bd475f6109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48597b5b-836c-42d1-99b1-99d3bc08733e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d36c4d-4117-4a6a-9b53-f239cdcedb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "264301cc-ecba-4532-8484-e5b2ddbc7ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662dcba2-6db9-4060-b53a-7c33f24184d0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d042623-e61b-4279-b901-0e2fb33a98eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370c0502-3a28-4008-8f48-46669a43b1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bddcf15-854f-4981-b225-0de268fe42cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "75b71263-4994-4fc0-818d-706d437a88e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44509b9e-c1f6-4ddc-bea7-7b3f5f72f0e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac62fac-9119-4a0a-a313-c035feaed7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d69cad6-1b7e-4c47-8c5d-411ef7bdc3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097f28e5-e599-4001-adfd-bebc58c84417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "811ca91f-76df-41fa-8f24-a1c51e7a41ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d1b0d9-072d-4fa3-aa5b-d47b4b117130",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dd3bf5-4f53-468d-b417-f8aecc6f629e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43ba17c-0b90-4b0b-93db-53ebdc740ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58627af1-edae-46c4-9fe6-3048ee2d9d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8987d45-f8f9-453d-b0a8-613b7df11d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0ebbbe-e211-4733-a2b3-075b24d645bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2302f6-f00a-458d-8f59-04283cb7ef11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cff06c8-e3be-494a-b5dc-32ed7222c216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7eef58f-0c14-47d7-99de-c6216867b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3751046-5a6d-40eb-bdae-3c30c948ee6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e019e9-14d9-4b5b-918d-fb56a67b7562",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b80fcf-aab6-4a09-98c6-a1fdba341313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170d2020-c42d-4ecb-bad6-09285cf27aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee31b77-ea07-43e8-be83-a3e7eeaf253d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6654c6fb-2ead-4ab1-a60f-cad8d2d1a4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e092413a-6ac3-4a49-8b9b-3368736ba7bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d866ed7b-7196-4359-bc65-a242e44b0ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5051d2-faab-41f0-877b-e86f0d19c989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538eb843-fcb8-4c70-a8ef-03c7b3d9532f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "81f2c8a9-534b-4f65-8318-3045142cfce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a505a6b4-80ff-44a6-a8e0-eeb36202eb8d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aba4271-de29-4e55-b0c7-90af01ba9e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0963cafe-b6e6-4202-875f-7e262aa0c648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c7737d-5b19-47a7-96ec-63d9eb34cf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9de76b-3148-4704-8ab6-4497e83e8a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21763a34-4f29-45e5-bd5a-9ee484244046",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc72c06-6ec3-49ad-8070-9340050258e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793f3a62-3ae9-4a67-9212-8d107cc11e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8b42ed-85b7-48d9-bf5a-80080062d3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2890dd6-9739-4d87-a922-9d7531dfd879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87615cd5-1f65-4a31-ab09-b08085433b8a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56e64d5-ccc3-4a1d-83b7-0b22b88bc5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e4098c-9afc-438b-a4c6-a0649e2eaf93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c07272-ccef-4fa9-94a8-c1501b716502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b636561a-8944-439b-998a-9199d5dd94de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee673b1-5f0c-4890-b53c-bc937f18d70d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce118e7f-28a6-43e5-804d-c133f3b6f97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f04a23-c568-4e2b-a88a-619752ea8ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837d5f8f-40a8-41cf-92eb-a0b084f7d249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4ba685-1936-424c-9fe7-214e78cea8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ce76b0-b184-4992-b16e-1b744f526299",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b15b318-5afa-42f2-8d9e-80e7a09ef34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ebb1d8-220f-4a3a-8d55-2c48e807d143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26915022-3cf2-42a5-9526-85e3c6591ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e618da05-1ad6-47e5-804e-52e9e5ab6389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778f5998-5a09-42d7-b8f1-c6410764858c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bf0d3b-542b-4309-872a-f5dff35339ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da171a50-6749-44ea-8293-79faf9d6a34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a25448-c9c0-445b-9e62-9ac5a7b662aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "971a6d08-a072-4051-a38f-6f9ce6590cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1446ecb1-2614-4dad-b17a-c3b3dbba2dde",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205595d4-b9a5-474a-9610-3f4dd304e4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d05f8e-d26f-486e-afd3-8bbc3f1a6611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f269ca2b-435e-4da5-9f1b-21a5e7746d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0bcf31c-4289-4f08-b21f-9c254d1770cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636b5669-cd73-4a07-847b-4b91fda17b6d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f128ad4-d732-4494-9e11-048473dcc85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad064df3-03a1-4f2a-9b57-5e00e460be37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2f1413-0eed-4215-9135-dfc22ee1cb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d0ac0c-8e48-4a52-98bd-5a93b4a9dc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c91a64c-259e-4d26-b432-5469e2b780e9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b421fc3-1e55-4154-a2c2-f6544f438145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ca3aaa-975a-482e-81fb-8efacb73845e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2ad5b7-37ba-4f56-84c4-feb2c296dc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a65826f4-2c68-4fd4-8a1a-2ce64e8daee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cc43d8-d3c8-4e2e-a1fe-3524a7a8ccf3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9337efb5-5eb6-474d-9cd6-ca3ee2424a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde31eeb-bdd5-4c15-a12e-91549d1fd93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4e0981-86bc-48aa-b7c0-ddcc9928078a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73508985-7ca9-4483-b144-140c865c1d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33273761-00a0-4cfe-8548-da53e4d28405",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756ebfe3-b022-4916-9177-ea9a6a1ea8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d877590-dc71-440b-a1ea-a9c953144338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60de2c1-e5c8-4b49-a1e1-bac2674b9790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01b79f4f-4930-4ea1-b3fa-c0c515b705b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a95bad8-6508-44f3-916a-c75a344efcc0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf6b02e-1eaa-439c-b733-e3536866ef0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3985089e-d795-487e-95e5-7ae26dd2aa4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f76a6a-ed31-4497-a05a-9e4c6453e6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56f5ac4e-7d4a-4104-ad69-9210b10a1abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e7f7b5-9ce9-4506-97fa-953b8f70ebe1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a55ced-1356-4f3a-9455-3931227c2211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b7f66c-ba9b-4c75-80bf-1c6a1ff1dd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcb4301-6ef3-4f1e-abed-096f3924197b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb6c2a0-0380-4b6b-80f4-54ed0ae9c620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06e5d83-03e8-4cfd-bee6-31a4d3cfe214",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f2a382-2711-4d94-822e-190d52bdc468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234a2bbd-1f50-4ad9-9a94-cf10fbc4af26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf987f9e-985c-4cb7-b9cb-1fdbccf16b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6322f47e-1416-4b0f-bf1d-ced411c1fb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb30a42-7e7d-4b57-a70f-02cf7e5623c8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66454512-1955-495f-9b0b-4a42a1cb975c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c4dc49-0312-4a68-b596-1aeeb70714f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b4ae05-12e7-451e-ab41-56eab71c4bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3b3db7-d83b-4458-878a-7e8bc2a5e263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455b937d-b805-493a-b995-3a61c6cd4ef5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b21e42f-a844-4bd1-951a-1044fd231e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea8cf4a-89db-44e6-bc5d-977cc23bd518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9aa432f-8fa4-4566-bc4d-430a0bd83083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "758f37ab-b54c-4558-838d-22edc92254d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bdd5ce-45cb-48be-8984-04dedcef8a94",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10695543-b68b-4a8d-9bd9-52a4cac22c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998c6e85-aff5-4358-a027-914a74d4d317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093b3a96-fdc5-4934-adce-345e9be002d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72a8068b-12a0-4673-b1f0-41bb79588ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d455f901-4089-414a-a17a-c8fc216ec3bb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d67b60c-d354-4d9c-b680-3265a6f4b124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435f94ed-0b31-457d-8144-106de3378a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43110861-ecc8-4f5b-9e28-fec1a8dff77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21c1fcbc-063a-468d-8898-75533ff78573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d568cc-928c-46a8-a68a-92d2f99ad389",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b90ed6b-01a0-40b2-8804-3620df3702bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994652a6-f3f2-4b9e-a907-13451207e371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ba60f3-f586-446f-ac2c-b75ad64fb217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c48391e-4af3-47a2-a69d-6ff0d8bcaf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f21d0e-79a3-46d6-aaab-e2d14c5de2bc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65815f7-34a6-4c39-97d1-4102cd7f092e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19876fc-85fb-4596-acf7-b16072317a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11f5dc8-aa5d-407d-84a3-bb612c773f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "502cb7a4-acf1-4a94-8760-172beb0ce14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49341ce2-a6fa-4fe0-8506-758933428661",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a596d69-c328-4476-ac4e-fea7f3a7141e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b80ad0cf-11ef-43d3-bffb-da4dbcba8c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b03cc6-51c2-4edf-be38-5dbeb6c8113c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8679bfa-50bf-4f40-b7f2-e6d29bb55731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d56cc0-e768-460f-9e79-9485372978d0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5817612b-6495-4aaf-b340-cbe946b565d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661d92bf-7142-4f76-8aca-f8ebca204903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd54daea-30e3-41c5-b304-e462b44a3fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bed70f36-2f86-4e3b-9dfc-6c8fc61bf4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad2355c-0c02-4650-be23-c83ef5275f3d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8e4f19-34b8-40a7-90db-c61b7b945401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa235d78-344f-4fb8-bdae-2e6c3dc1ec87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee09fb14-2e39-4991-8f4a-85135d8ba928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f36fcfc1-9128-407c-872b-1b9687597249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad195b79-897f-4768-9820-9f471eafefc7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4676ca9-3e77-4348-b36f-ec0344339dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eceedde3-e015-4b78-b911-99740e7a65bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf6b20a-a98c-4361-b22d-8bcd8bac1dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2718b219-7d7b-48d8-be95-9628af77a780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72f966c-74f1-4354-95f9-0191946020a0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0194eb-8948-4f99-a7ae-ff02b1663603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f362d252-2d60-4f78-89ea-1c9685480b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4884cedd-de1b-4382-99c9-f1506b090fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04d32038-675d-48ac-be6b-51ffc54719fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a76b10-781c-4fb8-afd4-ad68a78ae823",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a42afa-4bd5-4358-99ab-89dea27cbd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8018a7-9ba4-4cde-b4b1-8de065b4a390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1a03fc-07ed-4f2a-a5c9-56e76786b2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e975406-43e0-417f-8e8f-e0768c6d0180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236a8521-f51c-4082-af88-d6b95b048fd9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4aefebf-404d-4abd-9b12-8b12c76c2168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d58204-d22a-492f-957f-16ca77387fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2067063-3785-4b32-99a9-bf4be831419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "48f1708d-7cfd-4697-8335-d5c91dd13737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd33c516-b19f-4d33-9483-6b77684f99f2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de225681-2b3c-4b09-808e-4ae62a711620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aeb7362-858d-4be1-8fb6-4027b953cb4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374a1206-9b49-40b1-9ca2-7bf69cd8c3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8baf96a9-9855-4112-9a54-dd6f82076ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49668435-ac72-4378-9e08-45fc73c43396",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9871af95-a962-4a63-ad03-17d60a87704d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25623f5-714f-4097-8f94-c2cd22d40b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125f71ac-7702-447f-b8a0-b4a1abb91376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a33dd6-9283-4e84-9cb9-07872447b804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45303da1-fb34-42cf-bcdc-5e1e1f78219b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aef4159-21e4-4bc6-ab00-93a28dccb99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b3db57-0cd5-4afc-82c3-1e9b401a1cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afdc0c0-3839-4dde-8064-39c3bb783c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2019ba9c-9a06-4608-a75b-97e6a1619c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b426f488-0588-4b43-896f-f318c51db208",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3919f00f-fc2b-4215-87b3-948d6224745e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "82637848-ee33-4856-a4b2-1b14d6eb578b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311e2ac5-7a02-4a19-b783-e1a73b1ba66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef93654-bd1d-4d55-bbbf-1714eb40a4cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8239b159-d723-429b-9e9e-bc2867c8eb1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7f732b7-b159-4af2-bae5-cfa391776490",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be7f7d4-f9fb-4c2c-a3f7-2a681939ed29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bf69ca9-6f3d-4f34-b726-17a3297007e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f13257-a27e-4ac4-9c9d-acca3cf03128",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a37f0b3c-535f-4f8f-ba79-c869af3c2f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f10b011-a629-4873-b931-274228174a78",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7e8f24-6295-47ac-8750-ef11177b8e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ca75410-3eba-480b-862f-e6d28b00c5a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbccf96-1a55-46e2-b90e-93ba641446ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2f2307fb-756c-48b6-9281-a1765d1b7285"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b0f5d04-dfe1-40c4-b1ec-10f75d775b6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47be2ab6-d284-4f7a-a6ae-8209d4a21fa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf0a2d83-6f50-4802-ac35-aa883820a0a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fde781f0-8a69-43a5-a566-800fbaa49b59"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c90ed05a-ab74-4183-ac94-7e5361918e63",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7cecf8ea-b3de-4496-8e63-e4a7375ee115"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fef9c52a-b34a-48f1-b306-56f7faf78562",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e145746e-d84e-4352-897f-2b7a9411ef9c"
                }
              }
            ]
          },
          {
            "id": "cb5fbf60-5ba0-47c6-8a28-2fb67967b8dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac4b1657-db7d-4e97-a499-c12ef92f7738",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22b5b21d-7175-42aa-93ce-6333370b5eaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e26a160-ab41-4304-ad5d-37f5528b02c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ff76e06-f346-46d5-ae18-8ca78b088644",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "67d6468b-350a-448d-baa3-91e5f14e94f0"
                    }
                  }
                ]
              },
              {
                "id": "9ac569fd-e20f-4021-b436-91f2e72cd2c8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cf4c062-3853-47cc-9303-2b862f08b2d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5101e7e-94d7-4afc-bf96-11b3fc296861"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "042ee455-581d-4e31-bac8-25d7287f9a13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73519fa0-5cb1-4b47-a9e9-fa21b5a80017"
                    }
                  }
                ]
              },
              {
                "id": "e0f54c6b-6285-404a-b407-b67d53a437ec",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71a21c21-1af4-43bd-907d-fc366b7cba74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e631b2c-770a-4b0f-8ffe-719b2eb16aa0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35d7a848-6e39-4008-a99f-4b23ec1868b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bdcb5ef7-f31d-446d-b08d-bacad44adf00"
                    }
                  }
                ]
              },
              {
                "id": "6b4a6bdc-42e2-43c5-88d6-e470c62173f1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "200ad861-243e-4860-bc1d-5e5815d64f44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "caaac174-e61c-472d-b8a7-1bd035192038"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "798ebc0f-f9e0-4b3c-b015-4d6d8c1df907",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bc444e67-f6ac-433a-9a92-176d1194a44b"
                    }
                  }
                ]
              },
              {
                "id": "f814dbf3-3d6a-4890-9e49-0089e419acbd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67aaf360-ed34-4cb8-83fc-80798893e110",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6cbec26-4616-4f76-9c5f-976036535fee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "917cd7ed-4e23-48d0-bc50-5818d4c879fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ec1e560-b008-4437-bb87-c0224b11bb0d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f48f0aee-902f-43c4-8e4b-fcfb8fa37edc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4168c8ab-7b01-4a19-835d-cbd9f35da631"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c31ab711-0927-4cb0-b443-5bc756d02311",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02af9a0c-abce-4e8f-b5c9-e495d82ff912"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54c07a3b-5a5d-4647-830e-288a6b7b82eb",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ec9c4307-e190-4c10-a25c-8faf13c6263a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2568e17b-9de5-40b6-8883-9a321917f664",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5e50383-3e79-4207-a70f-84d01a31836c"
            }
          }
        ]
      },
      {
        "id": "f082a394-2bfb-4d74-abed-be96b423db9a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e3c5fa8b-34e9-4e23-9fbb-4d02104e1d9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e7a8ea0-5bed-44e1-b6f7-cde2c0552492",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f74ab5f7-9939-4be3-a362-130da65ea8a7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df719e03-7996-41d6-9860-16cf1c8a679d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b2bb0d-5800-451c-a7a0-d05d1f5c4690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b17db28-0b35-4a1a-9da1-3cba79c99405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f62644-5e99-4d4c-94cc-9192a19a77c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697fe564-740a-4176-a802-c50267c36dfd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac725a24-eb5d-4a24-b265-fbf4b4db26d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10804874-b3cf-4ee6-a876-2f564a8a8e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb58f474-8699-4ab3-af51-e9f41a728b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8852c9d6-27b5-4610-9043-f2a62cc63fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f033cb78-b6d4-4b40-b5de-f960db5ed12f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49f28b8-8528-4f1e-a8cf-be3cbd60ddea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca2ad2a-075b-41d4-8665-aa97b6ba8de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7906bbc5-6de5-4dd0-83c4-9298b5e18fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "490b24e7-bc7a-4a89-bf8f-4a90d5079a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e487ea2-8285-4b5f-b284-383fe5c17fc2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb89fd3-d56d-40a0-9030-24de53a7cb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fd2807-496b-40f9-8179-ab5c7c2c5c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa9ae60-62ea-4779-903d-a451eaad51ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89aa9cc7-e93e-41cc-8bc9-d687a9fbec2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c6688a-3d85-459c-a309-2ad79fc748b9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d582762d-1bd9-454f-8087-67ed7cc679a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3746cd-c64b-4ee7-9a95-fa21c021e541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc0cde8-09cb-4b7b-8e17-8d462dd684fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "489b2915-836b-4ed4-bc6d-952090798574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76acec61-3842-400b-938e-8541efc73443",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30e06f6-b32f-4013-8343-f8cd216bdb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fc258b-7c84-40ff-895a-10e3b368db39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44008347-df86-43ac-a742-b7b491b3f721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0dee8da-daef-4483-a3eb-cdf3327f231c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90849698-16d6-4973-b324-fa508f7093ce",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a87c61-eb0c-4ff0-8fb3-ebea68fd4d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3bcc0c-6092-49af-80b0-77841ec6e032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7c7b27-92bb-41fb-9bcd-e7e1d3b53af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a92fa676-eedd-41e3-b830-4371a49c1781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584d4c46-ffde-46eb-ad9c-f09005913f5e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb2434b-b5bb-4665-af3b-c4522ba73405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e33f60e-4a92-4a85-94a8-7aef79c00b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d27361-41e7-447d-b1ab-f491a1c46ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71acd2ce-2da1-4e83-b095-82b41069c355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2a8c7f-a635-4650-bdbd-5263740400ce",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77935cb-cd71-41f0-887b-16b295f585e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051fd457-b9cd-450f-8102-fd5517a44285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac5ef8b-fa2a-4961-a478-78ccdd693b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc6153a-2b93-45dc-9629-6864eb427500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ad9aac-6834-4cea-8622-dd37aeca0d3d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e5da1d-ae7b-4c80-989e-811e46f7c131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c4cc1a-0fb3-46c2-b053-26bdaf0dff3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4de965-6fae-4728-9324-d0e6b6c2173e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fed49206-1f24-44cc-94a8-39209ba98156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6367c64e-b9c1-429a-a260-2bfe709e2fd9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1398165c-eae4-4182-974e-34fef7b87b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62547eac-f286-4cf2-8a10-cace4671d01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787c8842-0ba6-401b-bc14-75782d0a4b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e88b6366-36e4-4855-956a-2f2b4512936b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe248d0-7c9c-449b-8efe-4eb45a9366a2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffb3912-8a43-46cb-98c8-89ce92b4e22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfadeb5-43de-43f2-860b-7f2a243f7df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ca30e9-28a7-49c8-9181-4230fb9f7026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8aef6421-f43c-46f2-8634-ba4149ee7232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966ea9ac-bac8-48bd-85b4-0bf2d95a1db4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f64a3d-d607-4e94-a619-33306b9b346a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d8ff66-5320-402a-82f9-17710f2a96c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5791be70-a15a-4e9c-b4fa-f3eacde3b56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d99752-94dc-4253-9bb4-f93f080d9f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf548dd-e1ba-423c-a50e-34eaf27ea4e7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0818398a-933a-4441-9c21-a0bb1bf9c0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2488b8-bdc5-45b0-8dce-1cc7a80e3583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa5fc6c-3d49-4f77-ab64-ac91335ce1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc3d1b3-080b-44e3-adca-4dd07182337b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96205c2-b996-44d1-9f48-ac6a1a6cb2a9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efb48fd-2817-452f-8c94-5cba00cff792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1366554b-c73e-4b64-8ce2-2f7e29fc48aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080cf8bf-8b6f-4a54-a378-4e2da72cecda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6ed0e1-c187-4e58-afd7-ee20a03fe2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b75fdf-efb5-453e-8698-e007cd70a80f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bba72ac-6fc2-473c-aa4f-ab24dd23aaad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891c4af1-ad9e-4a5a-bc65-b7ac4d48a8ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c76f09a-1074-4a35-bb7f-b519f1c3028f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e99b36d9-56a2-4866-817d-cd449555652f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe334525-ae3b-474a-929a-185031d1e4e6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818d1ee8-4ceb-4d39-9bc1-bc4c489c1b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924c116a-8e74-45cf-bd43-f1d49d9e990c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0be6f8-1a5c-4c2c-b839-994130343c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "153a56a5-551a-4b26-9a7b-67c925d78f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cdd0ec-4bb3-4843-ac96-97fa34e357e3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b8c00f-5d75-4f5e-aef9-0e7e89d52264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c192dd-99cc-435c-9247-ad95e40a4603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f89bd95-50be-42c2-bebe-11ad07342211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b8b12a-e294-49e3-aad3-9ac42f23022b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b32d2d9-0f90-4e2d-be09-5c38838b3234",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91989152-bac7-469e-b0cf-912548b3596e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdcccda-6b82-4c6e-b184-edcdcd07efda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c0d352-0415-4a04-8cef-915380b627d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61b4a03d-c73b-40f3-9033-f583723f5a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb61f8ef-0494-4a62-bdad-9ea2305d0a64",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81f77a2-e09e-468d-aa92-2dfa265dcf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af8ad13-9fa9-40fe-9582-056a705ddbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c79ebe9-680f-4ccf-8ffe-963630507186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e47ce9f5-4cb2-4d3c-b79a-40e9891c18d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed13070-1b7d-4b18-88cf-3fd0cdabf46a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0465b4e8-09ab-4cc4-9850-610fda29d774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1118e1f4-b3d3-48cf-92ac-e0f4ce7a9a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c063dfe-d1e6-40cd-a660-d8674a480769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6dbc486-9dac-4d40-a12c-765c92a3c216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8c4f8b-9c68-4eba-a7b9-2d25be997695",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c547a116-2ca7-4d33-b3dd-51f7034758e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce478678-c3ab-4132-99b5-e52df84a90f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc490993-6342-48f5-9a45-62a20825f37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb746df0-3bd7-444f-9a63-24b45b152c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672f586c-a8d5-4747-8a4a-0c039af778f5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7c6735-ca4c-4a08-b7b4-1d38b32413ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9098f5a3-e1f5-40a3-93d1-1513c76d63e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd356255-748a-460d-a3ff-8be27865563b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95a8a5d9-3a80-4906-8eac-8c75dd945d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14242f0-09c4-4b42-ac14-726d26a86136",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27db1deb-0205-445c-86db-55b4cbcfd503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4117b01e-85c4-4f9d-9f21-f045db486dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddcedcc-3850-4984-9b69-41db8a259fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d877499-5f18-41c8-b1a3-9d3e873709e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f789a1b-84ac-49f1-988b-e243c1e27b22",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd973e42-5714-45be-9c41-e71e0c275e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c1cc68-f9e8-4aa3-9e2f-6dba1c7b268a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5821c3f3-9c1b-4a7f-b2df-8d35c91b2b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "306ffbae-0672-4211-9339-a7919fb1dbb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fb7caa-8a87-429d-a685-d6b8eab7544f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184efda7-adc3-4edb-b67b-86e9ad175c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e50c990-273d-4cb4-b1b0-145acf75cf28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e12e5eb-59ce-421b-8c12-178d1445f8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec166617-5fe6-4a78-b2cf-d3d8a12a0003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1bfa62-2ee0-46a7-8e65-50f60b42a293",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d088210b-3a61-4367-9f68-16ae9c8fef33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b15a391-1564-47ee-b264-a5388867b69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45923b97-c645-4e01-80fd-198e5da3cca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9823b542-d28d-4a28-b8b6-af281e0d6724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9157420f-5d06-4692-a297-5038a8f9d949",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67591b4-34d0-464e-a137-57f79933db0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b742f47-2e9f-4ae8-aba5-35d2e46349a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afde3d97-8ab4-4699-9485-deda3d99d763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63aa442d-a86d-4e53-87e1-a0fab4f34956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1007426-b4e8-4a86-b197-7f7b2a7f71e4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7737c9-1b21-417a-943b-ded424b34891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98658ec5-588a-46fb-b493-3ac94b825b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02995d46-ca91-4656-b73b-fe790693462c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82638ccb-26e1-4ae4-b52b-74913880277e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1beb1a4-60f3-451c-9b05-e84320f72b50",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a09900-0e6f-49a6-b4b6-56aa82ec53ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d64403-a3f0-490f-8b73-3e13ad23dab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10afc05e-54e1-4e8e-a2bc-d2c01af50541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f645308-9d6e-46d3-babb-c3e74f53b924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ebae96-de3d-4266-a12a-4c72f6de8090",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793ba6a6-ff06-4755-b8a1-e4183e5b18f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da528a9d-f475-4cba-92f5-6e932eb866b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c3bed6-d18a-4cb8-80a5-9eec32f1a1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7318d27c-db45-427e-9823-c23ce8c11aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c5bdaf-a0f2-4e98-97ec-f92e1a0b3be4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb265a9-b080-4663-9eea-3be1fa93d474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63593a80-8f1b-4a70-8989-9d61d5007b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d382741c-78f3-406b-839c-494d0163163e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7d08df-51fb-4acb-9afd-6f7e0b7d0499"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8863970-11d6-42db-ad4c-22a0b8af2a04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "525850f6-4a78-4f7e-83c8-c8e32b3199ed",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00244758-64c1-461d-be88-70003c7cf320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04535e0f-aa20-4504-a8b7-7334d9f63d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5eb122-f9ed-4cad-beb9-7672ae246e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22d6832d-c964-434a-9bd7-24beaead6f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32172e3-b3fd-408e-a096-dd0bd0936859",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5feec74-e9b6-4fb8-863a-cb562b369f86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "28c66d41-7380-42ad-bcb4-53dc5eaa15b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e70c17-fad7-4640-a6af-f2d1be0780b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e11a2ec3-a69f-426e-85c8-a2eca6b3cf06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1990ebd-ceaa-4578-9058-052ecf5c182a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c99c0b3a-e4bc-4be5-a4b9-f93db44ec9ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5eae766-f0be-43eb-9117-4ea8031eba05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e321993-25e2-4823-991e-236a5e761c2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb4a61ad-e8e7-4022-af69-7c5153ad27f1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f01f99eb-e7fb-44b2-aec3-591ed38c55b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98e7a047-b55c-4af1-83cd-8659cc20b798",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ad9498a-1dc3-4033-952b-780b75371753"
            }
          }
        ]
      },
      {
        "id": "fb832120-83f3-4a72-af51-596b79ce1891",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "77ce3e57-4f76-4dd5-ac26-4dd625d2853f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84c3bffe-a718-4ae9-8c12-518d73fddade",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "81c4c613-29af-404e-8122-24d89cb57a4d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96c3e3e-9619-4252-84be-36b511b81190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee3290e-252f-425f-a19d-9fc45d2f510c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79700958-9f31-434e-a403-1fdfa89905fe",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93031c3d-a53f-4901-b558-8125363f3789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a1ce40-863c-4098-adde-7a6d36e8179f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29208f97-6a20-42d6-ab51-74b79ed8d9a0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62df3c97-c1c6-4364-b85b-77c0898542b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4e9d27-f7b0-4fc3-99b9-eb05f2fdb2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3740e9c6-a5c0-4208-83ea-98bbb59d04a2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2f15f9-cea4-4ea6-a03c-caff2d76629b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa8466f-9dad-44e3-a412-9f8db680904e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740193b2-a7c8-404e-a013-0f857d0fa7d6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af7efac-4f4d-4d11-991e-de175585d893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13052da4-6fa8-4f34-9e39-bba91af49e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6d1e80-1c60-4229-8d56-dc678864cdfd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32f3994-7abc-436c-ac53-9a344b5d95b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6bc8cb-5eef-4147-8b50-3a3daac03f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fccc9b-72f7-4e58-9303-82beea5825dd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd20647-6a32-4c6d-a466-13b94c0aee1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f33255b-1f52-4f4a-93ab-076d5b618234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94e15a9-b3fb-48c3-9f58-5db9b6c9fabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90563a98-32a4-4a73-b24c-1a4d1659680b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4de6c7-82ec-49e6-a214-fbde444d10ad",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b48ad9-fffb-40f6-8522-d7d42ba525ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b2266b-4024-4536-9b40-a40533356b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ac1497-55bc-4362-b532-ea789bfbc194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da30400-b937-4777-9170-c25c7dcc4fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230c2669-575b-4d7a-9a55-ad7c76828c40",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcac4502-7d94-4fba-b6d9-0eef2cee8ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9759deb-aaa9-4442-bee6-2b0bb40ccd8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05203f9d-3324-405b-b69c-f6360a32f122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ea7623-25cc-42b3-b813-85610b8cf7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a1b0fe-49ce-4311-98f0-f6c4b791491b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ceba32-d145-48cb-b682-2e18d25fe7e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e07838cd-9d4a-44d6-bdb9-3df6f3793f0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cacaa60-d620-4e70-ae07-2f77258ea380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848a8ab4-afb3-430b-a7f0-bc3d98bbfb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3900356-a81f-4709-9e3b-377292bbf85d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac12c99-bd93-4165-9814-569504b214cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecad0ba6-851a-4364-bf5b-980d80e55e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa67fe02-5bb8-4433-9a2d-208e0f01fe71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dd3056-c6d0-4a9f-af8c-da9c7c3f8220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c049ed7f-3726-4bc7-8306-c0a4fcbce101",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257e43a2-c0d7-4ffa-99bc-3782dfbeeaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebef0fa-d53c-406f-8851-0e8df6611c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348d33e-2b63-4e3b-8645-bb5ff8266021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37171cc6-ba87-4880-9c22-4799654c94e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3146edd7-f2f2-4128-b6c4-c3b9741e57a2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2512db53-4a39-467a-8d9f-b2bf20ca27ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b61d7adc-aa1e-40ab-8559-b2e173f33edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b069e664-9715-4f84-93e8-d2e88b3175b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1249de9e-68e8-4d90-973f-cbd48d6d4d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafcac97-3e2c-4dfd-8039-c7b6774d52a2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0029f9de-b39a-414b-8b2e-2f3e7ab43895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33001ad3-529f-4ad4-b6f8-3ca77090080d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b657ac45-2b09-482f-b3c2-5266c10e900a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbba95e2-78be-4df7-893b-c5e0c47befbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9607846-d2ab-4c17-8f1e-0bb68276de10",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c007077-edf5-4ab8-aca8-7b08a56e2323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9565b2aa-43d2-41d2-ba65-965dc5c41ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b57434-324f-41d6-8fb9-c63a828caf9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c1fc6d-99c0-40d1-ab93-97e32317076b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b29d28b-c5c6-4627-ab85-fd3980bdaa1c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0042920d-ac2f-4cfa-8d64-57966f21df3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4905a65-8bbd-4d95-adaa-422110a36d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a7ac68-7d35-4bae-be5e-2ecb9a7e714d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1666ffbc-b060-4bda-a363-de7e3cf0ea91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d916c708-c988-401e-84c1-f86133badbea",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ca2c93-e254-4f0f-bda6-366a4acbf292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb280ea3-362c-4055-b912-3110dd1dabf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4b948b-eb73-42c6-b8d4-f0e22e63f026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b8dd15-aa6e-4e87-93e8-345976e3fa0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80052c2-7ecf-4ddd-b07b-e01a5df27592",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49c2065-3034-4eef-a2f8-09d31b5a61a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f141e5e8-0b89-4a20-943b-c553b4bb33c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10e6d0b-67be-4dcb-9615-c35ae30445a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d84b20-e97e-45c7-9ef8-aefb26270acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a27d9a8-8c1c-4513-ba69-2f6a49adbcdf",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9fcdae-24a6-4862-86ea-b39581278d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e7f1f5-03c3-46c8-94e7-5d35ba8457f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3929705e-8090-412c-b716-044bdfc71f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a754c1dd-7168-4518-8c50-e767f61fa4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745a57f1-195b-4c76-a2da-eaf1e059c1ad",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69c8287-836f-4a30-bb44-b215606e9229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f75c990-8b8d-4c1a-9f28-3df14cef59e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3076a9d-832a-4249-8c4b-26a8daabb16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ecfc42-0172-4f98-96e9-d7b0453e6de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264235e3-64de-495f-ae94-272a043f29f0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df088df-efda-4b6e-940f-49f154dc861e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fed231-4fad-48be-8009-5bfdb1a85943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bed19f-bfc5-45f6-b151-990fb00e8c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34c9c28-e555-406a-a977-43b3b95b9c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fabb47-40af-4331-88f9-bebd9e42a2fb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72cf02a-3863-4029-a0e5-25bfe696e9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6a6f3b-653d-4f95-862a-de49dc433474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2da125f-aa5e-4f5c-9564-c6d7f61144e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb228743-5bc1-43bc-8aa2-bac35afb0de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25674ae-d42a-4d10-9396-052bd3620c11",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf47ab3-ad31-4961-b0ba-022e7eae5c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb65160-75c7-4df5-8816-d054e95c53a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919c0a05-8593-482d-a3c3-46da143709b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dadacff4-4dec-4cad-a65d-984fd13beba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5179bb89-a2da-4eeb-919e-cd42c18902aa",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0749fea8-ee41-47c7-94a7-1fcea5650ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83328ce7-62c0-4274-9ae1-71c46bb04172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9875cbf8-b334-4f0c-b255-4b4865b9049f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5380ff85-3ff7-4003-a252-fa85f1a61451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f8dd87-0b53-4770-ac68-2a8d916d7bad",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850bd6bc-503f-4090-bf97-3de6bafad476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9aad761-0ea5-4ccd-aed2-86bb7ff55549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d8d482-4476-4a8a-87f3-0d4588a36c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81af0b6b-a7fc-4dbf-bf8f-1141d727a4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7717f2b-24df-453c-895f-af7b74009a10",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b535403-ff25-46be-a41f-651c73313bc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92404d6b-aa3c-4862-8725-04b6ac682ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182b9545-3360-4d8b-864f-06e896f129b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f923e1-ff36-41b6-ba76-524c5d0a9020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6ff55d-c5a9-4c59-9031-2a5bb328b166",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf649f69-942e-414e-8759-eed04f514400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b218724f-1515-4129-9060-6a481fe7e884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4d7b74-31d4-4dab-9629-4a39d5668f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1aa34c-410b-460b-89de-1d106dbeab49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bfc796-9ab5-4b3c-b64c-5393e7e87747",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b988741-c395-4d2f-bb7d-0786ab717ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6d5c2b-d20e-4550-886e-dcd5e95b2db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a3334f-3a47-4a72-9a70-4fe6e883e8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf643ee-f608-418b-9424-a1f85e231f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9cfcaa-f59a-4a26-9c90-f1454152981c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347e6a82-1b4b-4bb5-bafe-0c00216ff68e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b39af256-29c9-41ff-ac83-0f144dcaaf44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ffe63d-f010-4c94-b043-e0304f2e2933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4830ee90-1ff4-4308-8d07-0a422685db74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e017020d-f0b1-45ae-8ff8-fe27401d82b1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e28d1a-45b5-4da3-82f7-31d7ecd4466c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7021c6cd-6e35-4480-8faf-c9b0340981b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471c9e81-c2c2-4ffa-8808-d8c3c85f3b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29830f14-c155-44ca-91e9-29ccbfe67264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdabf1a7-ae9d-4910-a96a-d6572c46754d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a011cf-957a-4568-b738-c339eda6cf17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1be33bcf-10c1-4cd0-b4ce-755b14ed061b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67872267-a0d1-4dc6-b59a-0eb333769392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854ae287-e3ad-4187-88f4-f6d13bca31ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca1c055-c42e-4b37-9b0f-3f86a91ebdbf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada17dec-2aaf-423a-8393-ab6cca511e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892d3572-a403-4a48-b615-f5c612a14b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12249f71-11cf-4b97-855a-5f3a57579648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbe97ec-756d-44cc-b8c0-c0d0bd6d9946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a531fa-4ff8-4c06-9425-366096c489b2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d30387-59da-4601-89ca-3bfa40ae00e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f1f7202-ad77-4da1-bbba-bf04f2573877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41431ba5-bdd2-4a7f-ab47-efcb779ef7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262479db-9672-4370-a0b6-1b3fac393b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d4ac84-b36a-4a45-a7ff-f2e171ddbf7c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbf8677-c885-484a-a408-1408404e5cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8654eec-88fc-440c-a135-35caf7fee118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c621c2-91f5-46fe-8d92-ffc3dec2ac21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d87cce-fa04-401a-9e2f-3ea3e29f0156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead12791-3f06-4932-afe4-68787256e011",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3759956a-7a26-4be0-bf18-22ac6c7e7cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d7e83b-af5d-4b4b-a2fe-1806b8e207bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f237a0fd-16d8-42f7-a441-ab45dd38c78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42fc595-09a1-4a6c-89d6-390533a62134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e94385b-0b6e-4b5b-b18a-3c3f56a4a2cd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a782a7-ff71-4eee-bdeb-9ca95edc4527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c408b31b-bfc1-4a6b-9c43-e5a6f2baacec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ff9901-18f7-4bb9-9608-d63be574a6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d159caf3-6170-439a-bf73-b0c3aa60f056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5696f336-03fd-40ab-af2b-6ae5d46eec3d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b825c23-1500-41b8-9ef7-b4f24e4b4642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0585b68a-a176-4da4-ad09-563a30791adb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d479cfdf-cfc7-4734-96ff-450a35a0100a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2310d0b-d63a-4e25-aaa1-76f09f628d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73203cd1-3c2d-45c9-9596-f870beef9747",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68659601-8750-429a-a6b2-e49fa4cfcbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b276d7-f3bd-475c-876c-7d5901b9749b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509ffe2c-ec11-4103-831c-4c4de1e5cd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145c4502-e532-4454-99e9-f726cc34d244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6341aa90-09fb-411f-8017-dc1f7246c76e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa167c78-3ce8-4ac4-b955-ec09f33a2339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9327a2dd-dda8-4065-b8a6-77a3151ba318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f7f9aa-de60-42a2-a06b-cbb9cca877c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed943544-aeb4-4bdf-82ed-aaac5d12e326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa47fa2-fa19-4179-b790-8ad4e70a77a3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d605f6-42ff-4af4-9328-4e7bb3951674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4671e5-07a7-453e-85ab-64466705011d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a99d95-88c1-420c-b247-ea5d20dcae1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21b4305-1a33-40ae-8edf-3e51807d8ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c46f495-1f8e-40b4-b073-367aa9ccc145",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d584c050-fe62-4fee-b450-e934dd5d396d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f31cee4-dfcb-409c-a982-f63c903e89c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cf457f-a53f-47ff-986b-9984bc4ca645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294a7b25-7ebb-4afd-b22c-039afd2592e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427eec07-291a-4bf5-a907-485b24594d20",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22cd8b1-f954-47e4-8260-30257306fe7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422e19fc-3195-4edd-b576-88be841d96ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a987ea9a-bc52-40f5-8406-ed24bb9f6f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ada4d2d-edfa-47d0-a3b8-727467490076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d90f12-7c64-4e2b-9158-9af7763f9e9d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c6ba49-4dc9-4b75-af31-d0cb3b940640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8198c4b2-433c-4f70-b137-d48e7ed799dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e1fde7-4a57-4d54-923f-cbc080701fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e189264a-ee85-4f7b-84c5-e032062c7072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0912b89-5415-4bfa-8da0-cabe0c1e449e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935bfbcd-ceec-4c49-aa75-06f7e8031e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10172ae-8ca2-4bef-a099-828ea44e5dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3fbee3-9946-4bc6-8159-e1029bc08e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252801a6-18de-4410-9052-a66d8087d07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffed6d0-b323-4bac-b3ea-76f68c4a4540",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36cd3d0-a821-404a-8b9a-a27f42942102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2412d83a-cfb1-4f81-b0eb-48e07a6a73b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d275563-8e2c-4c2a-b54f-a416a16fc35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be87dce0-22e4-47ef-a8e4-2cfee5aca001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7835adb1-9015-4ba9-95ed-9d1882cd1de8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d03c66a-c44d-4fb3-8ef4-9bc7eedc6c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675d4808-cb59-4555-981e-8bbeb47143f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bba6af-f0b2-45c0-9fee-a82df27e5f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa2afb6-a66b-4511-b62d-6eddf90e68d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b91649f-5e15-4e8d-9c91-6f7fa83225c0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619bcf7f-7fb0-4d0b-83f6-ccdf98f88193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059e1e82-e248-437d-a040-02ac049a6fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b3e4ea-4126-43ba-a8d6-a17e8510e9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f505df15-edef-480d-abcc-74ab431ca8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734c4ed0-3f9e-4eaf-9934-b5b99696097b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019e14eb-fe8f-4800-a06a-8336754b4eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf807d9a-2fb5-4108-b1b9-a700dc8cd4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9f5731-227d-4614-85d2-790a4bed4d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7489f8-3cc4-4886-9a19-5d93ab30ee97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f00117-034c-4568-9ae3-375debbca94a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba30ea3-8f62-4f99-8e57-eba4127721ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f72b2f-9d96-48ed-81dd-fcf8b40d7690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48bc33a-4fb3-4bd0-9a5f-532c665b0920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253c2645-6c61-4304-90b2-10a0b5dd8a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe15893-8d45-49fa-b0e0-a3f231dad00b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63bca42-f5dc-4dd2-bef8-dbcb924047a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3341cdf9-c7f3-4a50-9812-c8023ba51aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ca06c8-01e8-44b9-a980-c0f130c20db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29a3da0-c0d0-49f9-ad14-c1b998729ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b414b93e-7a58-48f5-a06f-83cfa1dac6c8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66600ecb-0a2f-474a-a3a0-c58dfb2251b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116b17f5-54ea-4259-8368-54edb62540a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c0d5a2-6866-4e19-ad74-256e19680642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa216dc4-4fbd-4b17-b43e-af33f9b596be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a19fa5-7416-4a4e-bcd1-cf9e6e20e253",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b39333d-9087-4549-bec7-72c2a1bec789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f48a9e-6918-4823-a808-365a26327547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be0b01d-a9f3-4ac8-9bd2-3f16b4e8a92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbd7d83-8a46-4013-b3ea-25ac38d337eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7ea414-0258-4ee7-a235-d2c97d92ab4b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f162fe59-d1d5-455e-921e-ba7278dfc1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21976f18-1759-40a3-9c77-00bd8eb09e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48530e9b-ff0b-4e87-a3db-01ff42e8eb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36fcfc1-8874-44ca-8d96-0dc64fbcffac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c572bc-fda4-41e9-bd1f-496f3e96df2c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfecac50-aaec-4d7c-a877-71c562160ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59a6bb3-03f4-447f-9218-75648783909d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40741ec-d9ef-40d3-94f1-867eca02b50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d036bef5-6414-4c2d-83ee-493f089da1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5f9132-3630-4e6d-b22b-597f4946ae80",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c879dc-a976-46f0-9f82-bbc0e8a45f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9b12c3-756c-4d38-a980-3a49e73bd482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4a8561-2bb1-442f-bf68-46ad734fe892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e251ef11-c9a3-4616-a18b-d94642ad1f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebbe7ae-907e-4331-b3ab-1edb8a15075d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891520d5-8d04-4572-82f3-c57249af8d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc86b429-9756-4abe-b5b3-eb25e35866d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a71b66-d740-4c91-948e-d5ab52f61cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546277fc-f3ce-492e-8a9f-d92925541a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ae1aed-d5d7-4c40-8803-35964aa61972",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82e06db-3392-4b29-9cf9-ca0dd1785d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e604c69-f8f9-43a2-ab45-aba934554a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac0ffdb-cec2-46ac-881a-76330de6e98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544191d2-5e2f-44dd-b0e3-282110077e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66436158-cae3-482a-933e-e32f4818e27f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8927ecd8-b402-46dd-b6fe-fa407527fdd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35b8cde-cd8f-4191-8bb6-8d12e589144b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f26279-148f-40c9-99b0-5b2c8ce890a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1efdef-cfaa-4966-9f58-2c7fda302f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7576f8-92c8-4a39-a138-c1837744351e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9ad078-d093-43f9-992f-275a62aae9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef7bb01-109b-45e8-b266-abfc6310e923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77734ba-bc25-471c-9bec-9f93d8684790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99c22ac-3ea5-4a67-80c8-c9017476227f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02817b6-c1ed-4d25-abea-b056f8bf9193",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357ed37d-a4df-47b3-ad8e-74c4505efc72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab11c872-c4ca-4d4a-877a-fb95df4cc7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba8192b-635c-4574-a20c-4f2327de94d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbe164e5-42c6-40b7-8f01-a0498884571d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7afd20-893b-4e45-b583-38d6bb10236d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8396c983-94b0-4048-b434-e6883751cb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979893b9-682a-48c5-8963-7b935aa7fa09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dda6a75-e666-452e-b279-68a97e431752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e79e909-396c-4fe9-8901-eb493eb6f5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf24997-9fa8-45e4-828b-15eb884c6bf0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7abbf94-cc15-4b96-9c45-d34d2b4b4dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad74b866-14c3-4076-9e0a-65b35effbb5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8064b24-c9f9-4064-8817-d84b56444b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "507e64c3-5a19-48e1-8823-7a81fbcef531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e756039a-c410-4d1b-aca1-61ac4f69696f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0c3627-6074-4c8f-8b88-23938c7cfb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6aa14e-8fc4-4ec4-94e6-20b7e0f6c273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0d06e4-e04a-416c-a2c0-93cc4998497d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8134b8-94d4-49e9-ace0-36963d2135ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07caf36-a91c-4abc-bf23-c5cda6bca69f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5ee691-4533-41c7-a398-8cf4270f3d09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0661d863-c54e-42db-bf05-8b25afffa9c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304d682f-b953-4077-a551-8f58494e8a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e51463e-d644-45e9-b33d-082c14a5039e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3326235-d2ce-4343-b93e-e001d2f8c173",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5521e246-dbc3-4ed1-98c5-f246e8790bd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64eeb323-48f9-47bc-ad76-812e3fc82906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3437b1a6-0ae2-4f83-abdd-b64134a9d59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd899a50-70f2-426f-bfcf-077e15f7004d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6859ca3a-d462-4ab8-a0e6-6eb509909db6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a855489-18ba-41af-98cb-e70bee189cf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "539fca3c-ea8b-4ed8-a158-188553de4559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c4596d-3986-4fc6-a2d7-929099afd67d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84b56f8-d3c1-4135-8095-e897e47e84fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f9cd35-34b5-4544-b5c6-8dc27e300ff7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4eadeb-652c-4f36-abc5-07805848c7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fba99bf6-7726-44a9-bf8b-e0655465e1fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0d79ff-e5f6-4c97-b29f-65be6cb913f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ff8a70-a38d-4acb-aea5-eaff41aea767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141ff849-3a3d-44b7-bab6-2c9b3c1f0612",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74a57ba-58c1-429f-a165-b1680232a52e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "614a9b01-fa57-4a47-a42f-0ecf0358d8bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42f8f7e-c125-48b5-88f8-307798004e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768b944d-e213-40eb-a7ae-b3547faec083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a91792-1ccd-4043-a4f5-e48b33906125",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296e0e9b-2c63-4038-afbe-47bf7847d5fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2661def4-46df-44d9-9871-0bdad1aae90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f2b229-f4fd-4047-8509-ca1fe5ffafc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2029e65-6539-4c7b-9d9f-61eac474c2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48896890-ee75-4f9c-b291-ab06900e2167",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ce7bc6-a603-47f0-aa5d-8e6f26aebcf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7b41c89-6bdd-462a-bdc3-0fa0e79be288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44845493-4514-4809-80b6-e1b50d510dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800ede02-246c-436a-b4dc-dc18c93822b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c98077c-440c-48fd-85cd-d8f563eb9fcf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd17708-79f5-40c6-a78d-3229daf18cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eadbea76-ab86-4e1a-ad71-00c37ba63e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50080aed-95bd-45d1-9104-4f18106c87a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db75fff6-38c2-4617-85d3-714f51e0a424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28420c88-52c8-48ed-874d-38416015adfd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd91738e-2d3d-4820-b801-64438ef93f90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12664ed9-7eed-4b36-8a73-d2dc8dff6f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e008f10b-9b05-467e-9556-784f2a796e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b04507-aa02-4f76-a8cf-c8dc79f3376c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154d3c1b-c1b0-485f-88ec-85a50acbe5ee",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d865d6-fecc-4b3a-b848-81ecdfb77b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eea2871-411c-41e3-b826-c928dec2d36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd3eda4-d7e0-4c7e-bab4-e7262cae0fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43835c78-882f-470d-b9e6-0a3cde694f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f24cd6b-cd9b-4d0b-b8bb-0d419a24c4a0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e50ef6-5774-460b-8bf0-4ec9ebb74408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56b39384-7dfb-432a-b90c-9da5a9bcc292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678df18e-bc6c-41bb-9faf-a3010a45755d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421bdb65-5ccb-4492-acbc-3807f31b65df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a449392-9617-402d-ac4c-49c01a35328a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413a4b4e-b7de-4d8b-aa16-24a26b015281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0a6a70-6433-47e6-ae7d-10c12b588bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2fc18c-6464-4b1d-9384-0b26a7aa143c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16787b4-0523-42c3-9c7f-b59fd962984b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c29267-71b1-4d38-afd8-367e94a0844e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9fbca7-24fd-4c79-acfb-38974a1b5cd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8767ec42-b87b-46d7-a18c-94ec30320271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fd22b0-9b36-4a85-8996-56abd025108c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cba6b2-c572-4219-b068-a65559b6f81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85df89ad-b63f-4a07-aa5e-35845d8d264b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfdf3f0-e73f-4c8a-9191-7a9242603ded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a2898b2-479d-42ff-b5a9-3c887560389b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b939dac4-0385-44ab-b852-eeeeb5611ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa3ae5c-9615-410f-8687-5dfb80095a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c848ff5e-d6db-4f7d-90c2-b6e1517d3e63",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb97711-9356-4173-a9ae-a33fd9a62152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e985dff9-ce74-4de8-8981-a6792cb6d795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5c40b8-cf28-4617-b819-84f70b1803e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c267768-8d3d-405e-a828-cf7532e65642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df5d063-8dab-4ad2-89a4-6d1f8b1a1a20",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec32971f-e35c-4032-8d42-01e3ad9211fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94bd7ab9-8d09-4df1-8868-f655880a6496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5d96a3-8f8f-4f44-876b-298caeb67495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96aae579-0426-4e6b-a14b-c099e3d9458e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce176b91-bdef-4c9e-b457-f6cb53fb2ee6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ca3d06-f61d-4289-a591-815b5db08e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d2cebf7-915f-42ca-93c0-b1734d6bcc25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5557d0-bb10-4599-9680-65f7e9903e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90bb6ac-53f2-40f0-84a1-d79670307119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e3f20c-0d07-4b58-9754-2b235180462f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231ba195-1bed-4371-a276-3801f8ec0540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ab8086-c553-4692-8327-ada4a6af337d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c711432-dd8e-41e9-a69c-82fc19ae9a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2775dee-97e0-4478-8fb5-1b6b4aa8b5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc48324-f5a3-4e65-9273-2f111f9d4fe4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f9eee8-d189-4a23-a264-1bf5add87602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45f63910-38a5-485f-8fdf-8bd3f88221ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf42b79-8fa1-448c-9d25-2c01af69d263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4ff63a-1ee3-46d6-8498-c46b74257ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13734904-1c1c-460a-b942-46164e5be8d7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d320cbd7-a753-4e14-a8a8-e592bef4bc99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f3a090-03b9-480b-bc22-abffee5e6e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9290072a-5f95-4157-a81a-5c359f8d0a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfb99aa-a25b-43e2-a106-0a3d7ef1c700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9ddcd1-bc8f-441d-9e6b-c35c4d7e1910",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f5b4ea-79b0-4549-ac8a-ea4cf6e28abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d4ca75-40fe-4f11-aa22-3dfda9c94b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b209544-ad9e-4472-ab7a-9937640f5e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f68e8193-47ad-4adc-a3db-cec7e06b5253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882fdb02-8875-4781-956d-280f59c5b431",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e8b691-51aa-47e2-a778-4b97652b0529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8461e418-26f3-494f-9372-2593da7564bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbf7ca4-9089-46f4-8b06-d3402a7935e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22513b81-df44-4738-a52f-8b6fbbdd47c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3571e687-fcfb-47e6-816f-e36607b82d32",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28ecf1a-b12f-42b5-8f4b-29bfcd3f97fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4bca675-a8c1-4eb5-99ee-3d96a224a1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18e62fb-8d97-4748-b432-24fc80e4ebdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c61c25-2086-41f6-a9f7-b450f6dbde5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805b2468-2998-4523-bda2-98fbf12bcadc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6258ac-b2ae-40da-8cb8-9baac36461c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8bf3869-a4b0-4716-b3b9-9443b51a1c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2715a7-bcc1-4a37-b3ba-277258e2d921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ec3464-1a2b-4936-a70f-c3af27052558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cdc4bf-bf5c-4b57-8f8e-3a56ddf742c4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c24f39b-1092-442c-96bb-40a154fdb5ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cba8d05-60a6-4412-9744-60f67080dc80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69ce206-dedb-4ac8-a6f6-f5cb9ff9a2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67dba512-8e7c-4ca1-b910-80ba1284d813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39245ef-4894-4da7-a6b6-9d81ccdb3116",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba9cc8c-874a-4474-80ad-69d3eb708c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e28e4bd-d882-4e80-81cb-6ce3c4205b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c4461b-e3d3-4cde-aaf9-06b82338e303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74672f69-74a2-44a6-9369-e5886abfe770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d68c86b-2e9f-4861-b637-0eedfbd86ce3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc723df-2795-41c0-a483-ea4bdea20a72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7c5b1a-07fc-4086-a491-cccc29806d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2c1839-3367-4de2-abf1-4795cabe1f4f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46bad1f-b319-43c7-a657-35e1802dbdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d13bef-50ad-417a-8324-6586181a8300",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962ad11d-3935-43eb-a71a-60f596e72d2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a549a4df-0cde-4667-9c87-252827d8c2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77122af-9bc6-47a3-84c6-2eb31142d6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5942397-4375-44da-aeea-645696989678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc404818-bbd4-4ada-9d0d-fd8625b155a6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c12851-f919-4993-bba3-0e46a2e2fc43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fff70fd-7fe7-405e-ba4f-aada646b959c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4dd9918-f19e-46f8-bb16-c9bff4f978da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3d5c05-d70a-493b-a62a-333d85112e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1895772-de89-4ffd-aa7e-c63a72d66c27",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2a0e21-388f-460b-9a45-40a06c469b98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c42a35-fe74-4945-892e-3cf87b448e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1401e88-682c-458a-b1df-7dc9cf6c831c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1c41ec-0565-4988-be94-7aebd44cbf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e654754f-4673-4a91-834f-236687334f9e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf09ea7c-7bb5-4b80-b071-fa22c64727ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d597a6ca-d1d1-4e69-bd1e-0f4e20461188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce6d46e-8f4a-4295-9488-493a7f70d437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7b467e-5e12-45f1-8d6b-e1d2459fdcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad09ed22-027c-4e21-ba9c-5763e1f173bf",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61bb87b-402c-4822-a0cd-2661b47db00b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e578e69e-301e-40a2-96b1-7f245e14a0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c1c994-12d4-40b3-875f-039e10ed7adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cd2d23-3afc-4fee-93d4-57eeab898810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1d69a3-77b8-46d9-bcd2-387bc78b48f9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecdafde-2a85-48b7-8b81-957e8e8afb64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9c85988-4be6-4f22-830e-b91c6e265b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1ec5a2-35db-4290-9032-dab2fba652d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527840a1-3f51-4863-af08-b333d9912708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cbf481-c499-464f-baaf-126dc63983e0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ded98e-8c1b-41c2-bd6c-653475bd8cf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7326567-387d-455a-8707-1e3f929a5652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fba8fc-c375-4dd4-a631-7b8d6729d2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade5c30b-dec1-4916-99c2-7f723530ce62"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38e0e362-0ca9-4389-b206-638e77518a6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91df313c-8920-4dea-b173-3577ba161dae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3883780e-ab32-41f1-ba1e-53da5ddc8d0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91bde57c-c5c3-41c2-ba03-76b3a3059aca"
                    }
                  }
                ]
              },
              {
                "id": "ba3aecc0-19b5-4cc9-a5fb-889d6ebc93e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "daa6cbee-894a-4f86-a57b-7d25b81d1c2b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e026ffac-bed8-428c-916f-bad5c26659ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "97fe5c38-b8fa-4064-a494-67d69ef197c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511b107b-3cb7-44c4-809d-0e14597ffb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1b37e56-0788-4ed5-8240-5faac26b7b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2666a7cf-d963-4fad-b0d4-3cd82f4e2f96",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02903c42-bed0-420a-a29b-870944cffe80",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1dcc5abb-b371-451f-840e-d40d9ae192f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcd72d1-68ac-4efc-a340-95da0f0313ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e33f8ebe-3814-4f05-aee0-767238117b08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63f6b46b-d5bd-4361-8c86-312368c7906e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "595e6fa9-1777-48cd-bf18-ec1553d82e56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6191dc1d-1c64-4271-a330-ee514e9ffd25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a9f8978-86ac-4d11-8b2e-9124650abba7"
                    }
                  }
                ]
              },
              {
                "id": "bdee1c1a-dbd2-42cd-95f8-c341b5e2c68e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b538b01a-c11c-40f0-b113-7ac20b6b9f98",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4610b324-aeb7-44c5-b9c2-acf2254cc493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a4ea1880-9cfa-4809-91ae-095d01487420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f74c8d-2a24-4958-857c-e9d2223ac523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d09401b-65c0-453c-b8b1-9892e440ee37"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "53974c87-abcb-476b-ad89-8bdb33b74d2b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3c68503a-48c1-4e9d-be4e-ce890ac0feb2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "523be7f1-8030-4cd2-af05-ab44c40783bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ecb0ee0-9b91-4ebc-8de4-1ee2e4a035c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e780c0e1-83ed-4808-ac4c-8f3da1a420d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1b65fde-3b7f-4110-aac2-55ebabe61ecf"
                    }
                  }
                ]
              },
              {
                "id": "9dd243d3-7cb6-4317-833b-c3f721e87d11",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35afc944-00f2-4117-ae5a-7a0413064ea5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8cf27c2c-68cd-4328-a767-41dde2b792c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5399f17-ebff-4ee8-99fe-9422f08dd89a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ee81d5a-c2f1-4351-a9b0-c6fab01bc50d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7aa9ae22-dea5-4959-bf53-31fa5c466ff4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1fc3406a-0660-4999-b260-f3b894c36f8e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bad40100-aaa9-4865-8092-bc7ba7fda11b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72e46aa2-156e-4d2d-bd49-2b4ca8c57547"
            }
          }
        ]
      },
      {
        "id": "3a8baca9-ae60-49f8-b110-8a4a00974feb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ca4a3279-3972-423a-86d2-6bcc95ddcf1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e53e921-919d-40b5-980b-767d36a35cd1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1e77a16-cc7f-40bf-a828-1c6f7340af3f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c18b8e0-b82a-467d-a0e1-45e7fb1dab93",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "088484e6-a2cf-47cf-9376-a0686c836f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6d88f1-19f1-4003-be70-683ff6aa32dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5651624c-5c36-4de9-9995-05871964b450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d69eaf-f95f-4bda-9a66-d78af94fea7d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361a1c27-ba55-4277-9e41-0cdfcb0ad609",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ff00d233-6dbb-407a-a53a-f8256926e2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10039f9d-e58f-45a5-835a-72d0f4bd1d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c32a936-c32a-4d02-bc6c-3a49421d9806"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "498f5a38-1087-4ad7-9acc-861ddb1f7c30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79ffdca6-2fee-4717-8ef6-bca4e91a606f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bc58144-6259-4c0d-a491-139a51d92102",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee202655-8faf-4c53-808a-795323522c9c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "226adca0-ca87-4134-ba0e-61b9c44045ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "74a172a7-3f5a-4c1f-a2b3-f4c92a47c1e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78818209-3b2d-4ac5-925c-bbdc71326943",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ab2b641-4735-41e1-bb12-43fcf4acf70d"
            }
          }
        ]
      },
      {
        "id": "02d335cc-834e-4739-a95a-6db7011f2951",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6b607f2e-65c6-4c75-b8dd-d62812b9ba51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f9395af-2219-4d18-881e-a8515a78bbc8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38c17284-2464-48d1-901a-4cb645c9970f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b30f72-6ce4-4a9a-87a1-802cd0dc90d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "345d8753-9fdf-4af8-bb21-44a66083a72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817a4a07-30e1-4edb-a0a6-ada56547b194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2c92410-efd7-4718-abc4-da30d01355ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4444ac4-2b27-4e43-9f30-4ac68a17700e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e45696-58e5-4a95-a751-81cd2700b97a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "84bd06ec-a899-4d07-9785-c3d15f6fb9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b2deac-aebd-45bf-834b-a0a72d02ccd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e01d0f3b-31d8-4282-9264-28f875056c8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8e6bccd-18d6-4613-99f8-92ddc9459c9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98c67caf-e148-4d60-bba8-1aafcc40c432"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1121aad1-2435-47ca-97ca-607646dcb009",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf015463-da00-4b4d-8839-4877c4816c79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cdb5f7f-e9e7-4f19-ad28-ab7050fb4b9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "85c1000d-2401-44ee-b438-0da4d966a485"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4b52a12-0d72-45f0-8d6b-3611b7354fd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e969b0ca-bc6f-4d45-ac68-94849c5abbfb"
            }
          }
        ]
      },
      {
        "id": "9065a229-fb8b-469f-ac00-8c8e17be6eda",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "aa7764d1-942e-446b-a214-edd599887365",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7fb54ab-ef23-4b77-b4ff-86199c960f96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe009e11-4da0-444c-bbdb-458af609d96f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d03ccd-ff52-4563-8289-5c6487827371",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "770c5677-8a89-4fd6-87d7-011f8413b7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787aba79-09b6-4476-ab99-9b9bf406b71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45bf09b0-7324-4ad9-966c-72b9b19195ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c22ed10-dfee-4fc1-98bf-1383cc138051",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015721e0-4d53-4ed9-97a1-569658910541",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e7b7333f-bdd4-463a-8325-af064612cac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f635517-3d3b-4eab-a5d9-89e0dede1582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76c3b63d-0f3f-4548-9a1f-e9d91ef1593b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01b0499e-5f45-4ee4-9bee-d7866990b958",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "890a4f35-4037-4344-81bd-6c712d08f116"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a60b48df-dae8-4a72-bbed-5b15d8b7136d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5fdc611-8334-4357-8e6e-cf260c3652e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6c3e084-05fd-43e5-a994-0ea810a5c3a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b9465299-4d17-42b7-9c7b-b96751fdc1a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ca48b2e-2b8d-45a9-97b0-d204f1734a2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a5dcc6a-a54d-46c9-afdc-d71f6b11940f"
            }
          }
        ]
      },
      {
        "id": "0016f680-6f60-4e6b-9e7f-ec7ea7f29a72",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "767592fe-33b7-4978-a861-0eb36c081779",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8e12009-ce3f-4b28-be12-220addc1e2c4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9d4368a2-fda7-4721-87be-b651fc94eb2c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b39a248-6a4a-4fd8-83af-3d6780e02470",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8e7a714-2ef1-4fbb-90e6-051fe2fdb29c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.04633204633204,
      "responseMin": 6,
      "responseMax": 287,
      "responseSd": 29.505018486517603,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677112771784,
      "completed": 1677112802545
    },
    "executions": [
      {
        "id": "90d4328f-e08e-4844-82c4-acc63255c6a2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "72ca16d9-5683-4ef9-bfdf-c171e6abca22",
          "httpRequestId": "0a8d228d-56c5-4653-bcfd-c514e83317bd"
        },
        "item": {
          "id": "90d4328f-e08e-4844-82c4-acc63255c6a2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7214b4c7-26f7-4969-9d0d-69f9cbef9a0d",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "9cd69692-8fb0-438e-9914-847ff1df206a",
        "cursor": {
          "ref": "cec07006-30bf-487b-a636-cf2a861b2e21",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c15320bb-bca6-4e8f-96b4-c73b3d2a0aeb"
        },
        "item": {
          "id": "9cd69692-8fb0-438e-9914-847ff1df206a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7e718720-a888-4902-87e9-65de83d3c409",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "ded621ea-668a-40d7-a4dc-e12389810988",
        "cursor": {
          "ref": "f80b51f8-6f23-4a76-890d-a03422aee7b2",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5bda0a5e-2e1d-4139-8b44-cc3718c267a9"
        },
        "item": {
          "id": "ded621ea-668a-40d7-a4dc-e12389810988",
          "name": "did_json"
        },
        "response": {
          "id": "7a56ab3d-4499-47ca-997e-420378577c9e",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c782db92-8926-49e7-b925-4afc44e3022b",
        "cursor": {
          "ref": "dd227812-2e17-463b-a0d0-cd21346ec59c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a3a8a1f-1c8d-490a-8f14-143f6d5679d7"
        },
        "item": {
          "id": "c782db92-8926-49e7-b925-4afc44e3022b",
          "name": "did:invalid"
        },
        "response": {
          "id": "76041690-890f-4853-a3ef-787b80565a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c782db92-8926-49e7-b925-4afc44e3022b",
        "cursor": {
          "ref": "dd227812-2e17-463b-a0d0-cd21346ec59c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a3a8a1f-1c8d-490a-8f14-143f6d5679d7"
        },
        "item": {
          "id": "c782db92-8926-49e7-b925-4afc44e3022b",
          "name": "did:invalid"
        },
        "response": {
          "id": "76041690-890f-4853-a3ef-787b80565a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "662cca39-b264-43b1-88de-1089421109e9",
        "cursor": {
          "ref": "e1c4db52-244d-44be-9fd1-54a5f9aa95a6",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c8678f96-1e43-4169-8028-4197ecf59d62"
        },
        "item": {
          "id": "662cca39-b264-43b1-88de-1089421109e9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1f54c703-754b-461e-8c90-ff0e3cbdf60d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48f9797-7445-4d69-8847-423eb0a22b61",
        "cursor": {
          "ref": "dfd858f8-a381-442e-86e1-996e21afd66d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cf55fad4-5a46-40b6-b505-c281dd1c61da"
        },
        "item": {
          "id": "b48f9797-7445-4d69-8847-423eb0a22b61",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "61bbbdca-24df-4f02-a5a6-5aa6e780e564",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9280cc-7870-45b2-a843-3fbc19ed875e",
        "cursor": {
          "ref": "686db98d-16d2-453e-9050-bb8836fde493",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a849db2f-f9f9-4299-9d1e-f3ccaa595211"
        },
        "item": {
          "id": "4c9280cc-7870-45b2-a843-3fbc19ed875e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c372964e-6dbd-4ccb-ad4a-e037bddf4aad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5eead73-87c4-4c6e-9774-b61b3e189025",
        "cursor": {
          "ref": "bba5951e-096e-4d41-8a4b-c751914b8cd1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b63706fa-f904-4d75-ba9c-cbaa3f790430"
        },
        "item": {
          "id": "b5eead73-87c4-4c6e-9774-b61b3e189025",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "62e4a5f0-dd8e-47d7-9e7c-6c26de430f28",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5eead73-87c4-4c6e-9774-b61b3e189025",
        "cursor": {
          "ref": "bba5951e-096e-4d41-8a4b-c751914b8cd1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b63706fa-f904-4d75-ba9c-cbaa3f790430"
        },
        "item": {
          "id": "b5eead73-87c4-4c6e-9774-b61b3e189025",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "62e4a5f0-dd8e-47d7-9e7c-6c26de430f28",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30438cef-efd3-4def-adb8-e065f474e940",
        "cursor": {
          "ref": "91287b56-bbc0-4b1f-8c9e-459827c0693d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "67a6e036-0373-4ae1-aa73-7d2a9a9072fd"
        },
        "item": {
          "id": "30438cef-efd3-4def-adb8-e065f474e940",
          "name": "identifiers"
        },
        "response": {
          "id": "9741c68d-0db8-4e86-bdf5-9de863c5c372",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaf077c-c283-41b0-a320-3237574406ae",
        "cursor": {
          "ref": "fff37ddf-f730-4b59-bd0b-f2a70f38d7b3",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7e3a36ea-f017-415d-bec8-e9157b096194"
        },
        "item": {
          "id": "5aaf077c-c283-41b0-a320-3237574406ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "554862da-2a6f-431b-b1e7-ab911922a23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaf077c-c283-41b0-a320-3237574406ae",
        "cursor": {
          "ref": "fff37ddf-f730-4b59-bd0b-f2a70f38d7b3",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7e3a36ea-f017-415d-bec8-e9157b096194"
        },
        "item": {
          "id": "5aaf077c-c283-41b0-a320-3237574406ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "554862da-2a6f-431b-b1e7-ab911922a23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df93e89a-baf1-4a1d-8402-2f35c62c2666",
        "cursor": {
          "ref": "7456f043-f86b-4449-98f8-527ebbd54c15",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cb88f678-2562-4256-8b41-fc94d8b4c214"
        },
        "item": {
          "id": "df93e89a-baf1-4a1d-8402-2f35c62c2666",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5486af4a-2e4e-4b60-bac4-ab8637b64f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475784a2-c0d9-4e90-b726-10af78702e21",
        "cursor": {
          "ref": "a60e15ae-8551-49e2-a501-6a455bea2de9",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cb449483-500d-40fa-9981-7718ae7e173c"
        },
        "item": {
          "id": "475784a2-c0d9-4e90-b726-10af78702e21",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "355f68f3-fa22-4db1-aff2-20894024da78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4b28f2-f5de-4ae6-b508-a9b7eb62b7b3",
        "cursor": {
          "ref": "87a8b179-3981-4c5d-9e7a-d0253c89bd6b",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "52987165-0ab5-449f-a809-1e5f9f8d7f0d"
        },
        "item": {
          "id": "df4b28f2-f5de-4ae6-b508-a9b7eb62b7b3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4a25268c-620b-4a83-a755-0fea2fd469d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0306176-ae7c-4d1f-9e43-17033e93e4f3",
        "cursor": {
          "ref": "78de456f-fdd0-4a06-9cec-bc3502880513",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "03466648-0659-4e4f-82b0-db27339db385"
        },
        "item": {
          "id": "b0306176-ae7c-4d1f-9e43-17033e93e4f3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "541ddd30-73e1-4838-95d0-f010b2029f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3152265-0496-4f37-b22b-380780db31c3",
        "cursor": {
          "ref": "9e9c6e61-8c52-49f1-9804-d05a4b4b4866",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "97c8c2b2-d307-49da-bfcf-d84091d211c3"
        },
        "item": {
          "id": "a3152265-0496-4f37-b22b-380780db31c3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fc03d653-3a76-4b87-a4af-6f913433924b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ddc46c-ba1f-41c1-adce-ac52a773b8e6",
        "cursor": {
          "ref": "351a78c7-b044-45b0-9f87-7fd3711871b6",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b5c22679-2159-4976-9f38-a3e5bd6bac13"
        },
        "item": {
          "id": "83ddc46c-ba1f-41c1-adce-ac52a773b8e6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8804c86c-60ac-4997-82c9-108ce65a5992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebcf326-7a64-42ac-9b7c-9e0f817175fd",
        "cursor": {
          "ref": "fdf9aa51-65d7-4d9e-b75c-0f2ae3330c40",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "29562de3-419c-4c64-8d17-102a1f02df78"
        },
        "item": {
          "id": "7ebcf326-7a64-42ac-9b7c-9e0f817175fd",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1d2eca19-5e6f-4d7f-a186-4a04a2badc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1587063a-5a02-4d7a-97d3-ef5622de6cc8",
        "cursor": {
          "ref": "633e4402-04f6-43c6-a1a5-976330c1c7a0",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "69fab0d4-18f3-4954-a383-00217d09f59d"
        },
        "item": {
          "id": "1587063a-5a02-4d7a-97d3-ef5622de6cc8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d338ce31-5df8-44e4-800b-675a6f42ccb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984dd16c-ccc9-460c-a298-e0e324d35ec8",
        "cursor": {
          "ref": "ce9122cc-137e-41bd-a3e4-dd2d3820bed3",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5cd4d660-5ad0-4acf-9e39-00a08af3d814"
        },
        "item": {
          "id": "984dd16c-ccc9-460c-a298-e0e324d35ec8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c48e155e-e90c-4b03-ad68-c844982099c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8333cf95-f90e-454e-bcbb-41e883718c5e",
        "cursor": {
          "ref": "e45edfd8-bfde-49e0-ae00-d587e4f87e75",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "37ff354c-e314-457e-a210-4e0906301d13"
        },
        "item": {
          "id": "8333cf95-f90e-454e-bcbb-41e883718c5e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5deadee3-207d-4d6f-8bd7-9704f0874a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24a1934-b1e7-4a83-9c9e-eb3b085545b4",
        "cursor": {
          "ref": "f8117e6a-0a0e-48dc-8076-6017a7e241dc",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5c4628e6-f8af-4e1d-96ba-75c8a65d98ef"
        },
        "item": {
          "id": "c24a1934-b1e7-4a83-9c9e-eb3b085545b4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "066039f1-bc6b-418e-a5a4-92061306e804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92787aeb-b27e-46dc-8c27-bcb88f1bf735",
        "cursor": {
          "ref": "3aefec5f-3daa-4a14-8386-03174a819b58",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "917d9c7d-3086-47a7-b3a1-f5e5644a8a35"
        },
        "item": {
          "id": "92787aeb-b27e-46dc-8c27-bcb88f1bf735",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "41165f12-97f9-493a-b43a-e61b6197b457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809aaf65-dee0-436d-ab98-66207bb82936",
        "cursor": {
          "ref": "954ead53-f526-48fc-b95f-397926dd9956",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "95636e05-3c34-4991-a4df-39a223481163"
        },
        "item": {
          "id": "809aaf65-dee0-436d-ab98-66207bb82936",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "80361f4a-1391-45b5-8827-c409ad71a516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5207be99-030c-4231-8a58-a5b55c551ad8",
        "cursor": {
          "ref": "2069c883-26ed-4375-82fc-1d98ba2ec90c",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ef7fec61-48dd-4990-806a-88f412b9cd4a"
        },
        "item": {
          "id": "5207be99-030c-4231-8a58-a5b55c551ad8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3f790642-9f4d-4e2e-a93b-0bd7984088f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017abfc1-241f-4b11-915c-b082d18fc6b2",
        "cursor": {
          "ref": "98a42003-a878-4a50-83cb-b957f08b01fc",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "06a0c62e-3611-4bab-92e8-9c4cd3687d6b"
        },
        "item": {
          "id": "017abfc1-241f-4b11-915c-b082d18fc6b2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c8df8975-65b6-4901-b3f0-af78029e9746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246af25a-c7b6-4004-a1e3-32653e1bad72",
        "cursor": {
          "ref": "eb85c437-a1bd-487a-b792-6a58a341c741",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b9d72cea-9fea-473b-a441-70e4df0d833e"
        },
        "item": {
          "id": "246af25a-c7b6-4004-a1e3-32653e1bad72",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f4aa4c36-8988-4346-adb9-2bd3631b2e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17432cb-39bd-4e22-bf24-52c4463c5c4c",
        "cursor": {
          "ref": "e117ee3a-15c0-4fff-a3ea-57ae12d824f9",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d9368f19-a748-4d6f-9a44-7db71fbeb454"
        },
        "item": {
          "id": "e17432cb-39bd-4e22-bf24-52c4463c5c4c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "18e4c5c3-8134-4449-a3fd-6e807aa90d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d656c21-f93d-45aa-b0c4-2c40fa082d7f",
        "cursor": {
          "ref": "6e3ed033-08ad-4426-ab2d-79f2d1413341",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bc097657-92dd-4948-ba2a-98bc2676d336"
        },
        "item": {
          "id": "9d656c21-f93d-45aa-b0c4-2c40fa082d7f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6506359a-802e-461d-b15d-0aa1cf15bc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2185fb59-5174-4d7a-8900-a9bb2bb689c9",
        "cursor": {
          "ref": "c1fc4884-5793-4be3-be0e-20a1e9fe098d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "24be5427-d064-46fe-bd85-aeda6a004913"
        },
        "item": {
          "id": "2185fb59-5174-4d7a-8900-a9bb2bb689c9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3bde3b69-849a-4c31-944a-a3dd51f6ca10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f865715-0255-4c4d-ad51-65952cd7feca",
        "cursor": {
          "ref": "7ff33f4c-364c-4126-89f7-489db337de73",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5932a5ef-1fd4-41ce-9b23-7d81bc50dd00"
        },
        "item": {
          "id": "6f865715-0255-4c4d-ad51-65952cd7feca",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b64825d0-6c10-4924-b792-93e24d094197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57f8ef1-0307-4d11-b3e4-a01d75b8b261",
        "cursor": {
          "ref": "be70d4da-745e-4cd7-bccc-8b7932acb908",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cde00510-0084-4e87-9068-c6e56023f86b"
        },
        "item": {
          "id": "a57f8ef1-0307-4d11-b3e4-a01d75b8b261",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fc28e644-d497-4577-84a5-3c58481cbb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22286a5e-63c9-4b0c-8402-ad84e8fc3db1",
        "cursor": {
          "ref": "9268a903-55e4-4283-889b-41897d632843",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ce9afb41-f604-4eed-84a9-d76265f494d6"
        },
        "item": {
          "id": "22286a5e-63c9-4b0c-8402-ad84e8fc3db1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bd0d172f-079b-4268-b8a9-5bffbb07be63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962c875e-84ce-4da3-8856-7a7255947933",
        "cursor": {
          "ref": "0a46cbcd-f8e3-4b4d-842c-03e28b3fec09",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c5db3a44-3014-43e5-9656-e84ebaa5de88"
        },
        "item": {
          "id": "962c875e-84ce-4da3-8856-7a7255947933",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "444d063f-2828-4076-90bd-911fa7896ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bd86dd-99b7-44b6-b65e-8a1d33e2cb60",
        "cursor": {
          "ref": "31be3111-9b11-4fcb-b3a5-39847092aaf1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5d320383-a1fb-4a27-9d89-a5f00e9e990a"
        },
        "item": {
          "id": "44bd86dd-99b7-44b6-b65e-8a1d33e2cb60",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "db07059d-b79c-47c6-ba4b-987ae1181d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827e7ef5-3ca3-4a32-82d8-98ed4d73da66",
        "cursor": {
          "ref": "224b743f-71ee-46ce-845b-4e48f684500d",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "89c3d86c-7c37-46fb-84be-c1014fe112a8"
        },
        "item": {
          "id": "827e7ef5-3ca3-4a32-82d8-98ed4d73da66",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "395d983d-ad42-4f53-ac3c-8caaaabeb91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c15c54-efa2-41e7-b8ee-26eba93bea18",
        "cursor": {
          "ref": "cc5650c3-b0f5-4a06-bfa7-5428fb768730",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "64501a83-2a83-4016-85a8-c118779c00fb"
        },
        "item": {
          "id": "80c15c54-efa2-41e7-b8ee-26eba93bea18",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "698afade-f5a4-4212-843a-59fa42aa8895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee561418-938a-445a-9e78-78f1e304d9b5",
        "cursor": {
          "ref": "72aa7dd2-2fb0-4690-aa8c-bc5473e968fe",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2fdb0c66-8da6-464f-84e4-e1f2e023478f"
        },
        "item": {
          "id": "ee561418-938a-445a-9e78-78f1e304d9b5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c41feef9-11b1-4393-beb9-b3545d8885f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde75f9c-f7fe-4e96-9f2b-9cbd5f2e4401",
        "cursor": {
          "ref": "49c67070-1489-4fd5-b44d-8c8a3ab89b5a",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "42756046-0034-4668-b416-e035aa36f49f"
        },
        "item": {
          "id": "fde75f9c-f7fe-4e96-9f2b-9cbd5f2e4401",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8e6b086a-55fe-4cf9-ba13-1f85617d270c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bce805-b381-4218-875c-1ea928603e2d",
        "cursor": {
          "ref": "64f0991b-f9e9-4a3a-adff-0c86fa71c042",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fe586baa-be6a-445c-bbc2-4384aa3b0fd9"
        },
        "item": {
          "id": "b1bce805-b381-4218-875c-1ea928603e2d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "857b5fb6-db7f-40f1-b04e-a80b4ab29c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50501f88-80c1-4881-b3bc-1e3b38f11ff2",
        "cursor": {
          "ref": "d3b3a53f-0b66-431e-95ac-65c4851e8e0e",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cb4db290-a2b5-4c98-a7a6-9bb4610b6471"
        },
        "item": {
          "id": "50501f88-80c1-4881-b3bc-1e3b38f11ff2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cd8f4168-ea46-47b6-951d-646e5db05468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ccf8a1-1b3c-4cd4-af56-c034c07930ac",
        "cursor": {
          "ref": "63e9cd56-9f73-47fa-8410-772cdd197149",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d96fdc9f-c249-450b-ab13-bd46eac085b5"
        },
        "item": {
          "id": "64ccf8a1-1b3c-4cd4-af56-c034c07930ac",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9ddbab49-6f72-4471-b171-ad5f6f7276a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4571d56a-9202-45a0-b9bd-f04970b1562b",
        "cursor": {
          "ref": "58995503-8a13-4c95-b3da-4087bddda50c",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "da17d5f6-6660-43f0-94dc-d0403a317db2"
        },
        "item": {
          "id": "4571d56a-9202-45a0-b9bd-f04970b1562b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "68da8af8-e746-4d71-98c0-caeca14220ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce71d43-6e33-4a89-be99-d86d528bc2a8",
        "cursor": {
          "ref": "3b35f936-e4aa-4d3f-9a8b-50d93192c3a8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "04cb8d95-4f1b-473b-8145-48c1891ab63e"
        },
        "item": {
          "id": "0ce71d43-6e33-4a89-be99-d86d528bc2a8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0f259459-3390-47b6-b35f-72b24cc42c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e59410-3cfa-47f2-a439-958208b9c9cb",
        "cursor": {
          "ref": "e5601b6f-fe19-4dc3-9a70-462fd994eaff",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ccbb1349-6cdf-4c0f-8ffe-f088ab6b51c8"
        },
        "item": {
          "id": "95e59410-3cfa-47f2-a439-958208b9c9cb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8a370d85-e2f1-4517-af2a-8440f34764aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c945dcf-a637-44ea-99b7-f8126fba4688",
        "cursor": {
          "ref": "65a5d512-43e1-4c48-90d2-2c5fe47ed348",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a930fa35-7c62-4139-bc11-f3aee2ec9aee"
        },
        "item": {
          "id": "1c945dcf-a637-44ea-99b7-f8126fba4688",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "72f8a248-0165-4e09-a240-9d8755a33fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a4d8a7e7-c140-4ed8-9d1a-a3664936fcad",
        "cursor": {
          "ref": "97597151-de6c-4d66-822e-74885df7d275",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9ec14b94-9ee5-4369-b225-949059575712"
        },
        "item": {
          "id": "a4d8a7e7-c140-4ed8-9d1a-a3664936fcad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "62426eba-4d56-48b5-b3b2-21d37590b1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8f4e05-ca08-4a87-984f-d38ca5790af1",
        "cursor": {
          "ref": "e68c0806-ec8d-4102-9742-4c4775bfabbc",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4a75b2c9-d336-43ac-b3a2-2efe080c0ece"
        },
        "item": {
          "id": "0b8f4e05-ca08-4a87-984f-d38ca5790af1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "81d73fea-bf9a-4644-8859-3c8959ca1c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb311702-0e1c-4c82-b1b8-82e4d6506300",
        "cursor": {
          "ref": "991e773c-0593-4746-8127-a657f78db536",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f66c35f6-5c66-4f9c-b46e-618f941568bd"
        },
        "item": {
          "id": "eb311702-0e1c-4c82-b1b8-82e4d6506300",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0adef9ee-7394-42d9-a713-684b16a9a0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a468fed3-f2df-4e23-b605-2d37f009497d",
        "cursor": {
          "ref": "e0572e3b-c95c-48a1-8e3e-c96ececa47da",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "edd3f3d1-ca60-4582-8b4b-0fab250a73f3"
        },
        "item": {
          "id": "a468fed3-f2df-4e23-b605-2d37f009497d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "76c6a5e5-cfd5-478f-8dd7-8a18e82ee1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6199f8c-855c-47c3-bd72-f89c8c1cfad2",
        "cursor": {
          "ref": "2bc39d3d-1ffe-4e31-aeb2-520a77ee7caf",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "290665bc-3d68-479c-8393-e269531df372"
        },
        "item": {
          "id": "f6199f8c-855c-47c3-bd72-f89c8c1cfad2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "029c4206-30fb-4c78-a801-c5915f02aae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a15dba8-8248-464c-bdfc-e09716f347cf",
        "cursor": {
          "ref": "54b8f6e2-1fa2-496f-977e-2b5bfcfa6c73",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "672740cc-f5f2-46cc-b5e7-28127f977ade"
        },
        "item": {
          "id": "0a15dba8-8248-464c-bdfc-e09716f347cf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5acef9ba-0247-4ea8-8ef9-5ee401f44bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea9a985-1e64-4bcf-b2db-d04cec30e7ad",
        "cursor": {
          "ref": "5d5ab319-d63d-409e-b7ed-a49a6f46ec4a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a736d8d5-c624-46b9-a7ca-1f24c1b395b3"
        },
        "item": {
          "id": "8ea9a985-1e64-4bcf-b2db-d04cec30e7ad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "99ef58d2-cd8f-447f-a873-f9b725c32501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2bc15c25-e9c3-4665-9470-083561b518ef",
        "cursor": {
          "ref": "9a65734e-6c2a-4478-9271-4a01063154b6",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e27f7fd6-da50-4703-b513-8d8146fb985e"
        },
        "item": {
          "id": "2bc15c25-e9c3-4665-9470-083561b518ef",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b976641d-f639-4de2-9958-d0f1a0c681c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed580f9d-35aa-4e2c-bbcd-d6b4ba62fb2d",
        "cursor": {
          "ref": "41b85a3e-b013-4571-95cd-7461f29e690c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2d1653f5-72da-4eaf-a823-7cb7b3c282e0"
        },
        "item": {
          "id": "ed580f9d-35aa-4e2c-bbcd-d6b4ba62fb2d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "62010848-0b63-4b25-8edb-71b8449a6fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d425ec00-7ad1-4a65-acf7-d57c56aa0351",
        "cursor": {
          "ref": "0365fda7-e719-4cc8-9b13-e4c6626409be",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "814819ec-5c96-4ed8-b59e-2e1645950094"
        },
        "item": {
          "id": "d425ec00-7ad1-4a65-acf7-d57c56aa0351",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0e8b1b37-9dcf-48c5-a649-0f104050c482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf00e86-a698-407b-b325-aa85dcbee646",
        "cursor": {
          "ref": "4d2d771f-7dcc-4e87-98c1-0d935b172840",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3948c956-5783-4086-b44c-e3ea7fb8d78a"
        },
        "item": {
          "id": "6bf00e86-a698-407b-b325-aa85dcbee646",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bdf5ddc5-c470-40dc-95c8-99d5ae606672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca26b06-bd45-4b6e-bd5a-c4d91b522ceb",
        "cursor": {
          "ref": "aeddb046-312f-4e7e-aba8-efddace9250c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dc222521-fd5c-4751-badd-edd2ab0b4cc4"
        },
        "item": {
          "id": "aca26b06-bd45-4b6e-bd5a-c4d91b522ceb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "32795102-bf5f-4e02-a697-580ef64351af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b9ebc3-84f8-4eac-bce1-9ef3c6f0a97c",
        "cursor": {
          "ref": "8d9e607b-0970-4547-8136-0710e5e8a5e5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "290338f7-c625-4d9c-85cd-76983ec24f5f"
        },
        "item": {
          "id": "b3b9ebc3-84f8-4eac-bce1-9ef3c6f0a97c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e3f5c655-5533-4452-bb4e-9dca3028fa5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a203c4ca-bdbf-48cd-aea7-29a504fcff15",
        "cursor": {
          "ref": "ae12e898-f485-44b8-896e-0e2709b232dd",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8e88b6ab-fb1f-41c5-91ac-90e168766eba"
        },
        "item": {
          "id": "a203c4ca-bdbf-48cd-aea7-29a504fcff15",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7b13cdc9-cf10-4ccb-b880-8dee2e2d4904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cff485-f442-427f-8464-5a9fcceef8b6",
        "cursor": {
          "ref": "130c47e7-d22f-4c34-9e0a-e002ceb2e2a1",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eab43613-b4d0-45de-8063-e9e9019d1306"
        },
        "item": {
          "id": "a9cff485-f442-427f-8464-5a9fcceef8b6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ad58e10d-4602-447a-b8d3-973a90bd503f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c416b4c-4e0f-4768-a059-4b5c40f8983a",
        "cursor": {
          "ref": "258985da-22b2-453b-8964-692b4ab8e520",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3e53c77e-9c18-46f1-9d1b-daed169d14f9"
        },
        "item": {
          "id": "3c416b4c-4e0f-4768-a059-4b5c40f8983a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b98ea4cf-df96-4fc6-b1f2-579489e6a653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74191ffa-3230-4c9e-bdb0-f0d5c9f19dae",
        "cursor": {
          "ref": "d3e929d6-c735-4cfd-bdc6-e2119263aff1",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8dd1958d-bd36-49ce-a024-ca9f64122615"
        },
        "item": {
          "id": "74191ffa-3230-4c9e-bdb0-f0d5c9f19dae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d0354aa0-2256-4ae3-81ca-22e0a5ec2994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff41182-dd42-4969-a4ab-5ead84b3d044",
        "cursor": {
          "ref": "7e5a4150-64fb-447e-935c-1cb9ebec2a3c",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1dad4565-46ef-4530-a52a-df87e9471f1f"
        },
        "item": {
          "id": "5ff41182-dd42-4969-a4ab-5ead84b3d044",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2fb30c74-cdfe-4e44-8830-55c646ae9990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb2db36-4060-42b5-83c9-22d2fba6cf19",
        "cursor": {
          "ref": "104a25fc-9e8f-4e1a-90e4-6e6c3c6b8eb2",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a06e0988-f324-4ca2-aa76-c85729068cff"
        },
        "item": {
          "id": "ecb2db36-4060-42b5-83c9-22d2fba6cf19",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "326e5e50-a3b1-47ee-8c2a-b8fe45dca897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662dcba2-6db9-4060-b53a-7c33f24184d0",
        "cursor": {
          "ref": "f33acc8b-6464-4440-87e8-271185be2faa",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "38f3c09d-d854-45c2-baa2-2f36d239f22e"
        },
        "item": {
          "id": "662dcba2-6db9-4060-b53a-7c33f24184d0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "704d39aa-f20d-4b3f-83f1-ea4313c62d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44509b9e-c1f6-4ddc-bea7-7b3f5f72f0e7",
        "cursor": {
          "ref": "4aa2ba15-870c-4dc7-85b5-ed508e4435ea",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5346f719-1665-4fc0-b6c1-6f575fe0acbb"
        },
        "item": {
          "id": "44509b9e-c1f6-4ddc-bea7-7b3f5f72f0e7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "546498ce-9774-429b-85a6-da9c945879c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d1b0d9-072d-4fa3-aa5b-d47b4b117130",
        "cursor": {
          "ref": "eb1e009e-49cc-4cb3-976b-38e643e340b0",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ac414ac0-2438-4e7b-b4d3-19c1694fe7f3"
        },
        "item": {
          "id": "56d1b0d9-072d-4fa3-aa5b-d47b4b117130",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "10029fc4-6154-4f04-b7b8-ee5aa6b41904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0ebbbe-e211-4733-a2b3-075b24d645bf",
        "cursor": {
          "ref": "61f3dcff-aa4e-4652-98c8-9ced974539a4",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d8b52b2f-8080-4bda-9218-825b2268c1b0"
        },
        "item": {
          "id": "1b0ebbbe-e211-4733-a2b3-075b24d645bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c5e09125-e404-4a45-9e06-241b56f71cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e019e9-14d9-4b5b-918d-fb56a67b7562",
        "cursor": {
          "ref": "3d55f2c6-972d-4317-92c6-9da6b00aa349",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "440e7769-28f1-4585-8595-2980dec94426"
        },
        "item": {
          "id": "23e019e9-14d9-4b5b-918d-fb56a67b7562",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "139ad9a4-d75a-41da-8776-b3f2d0965384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e092413a-6ac3-4a49-8b9b-3368736ba7bc",
        "cursor": {
          "ref": "4dc95ec6-0bfc-4f4f-934d-a56e8f929a9e",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1da710c4-9613-4633-b78c-2be06fa605ec"
        },
        "item": {
          "id": "e092413a-6ac3-4a49-8b9b-3368736ba7bc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b6c6c533-83db-4e8a-aaf8-f86d079176ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a505a6b4-80ff-44a6-a8e0-eeb36202eb8d",
        "cursor": {
          "ref": "c8a4f9ec-b667-4f6c-82d3-5187011010d2",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c85ab510-3c11-4154-96cd-fb2d2e38e2a2"
        },
        "item": {
          "id": "a505a6b4-80ff-44a6-a8e0-eeb36202eb8d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ff586a81-a4ff-4130-ae85-c69c3e5d131a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21763a34-4f29-45e5-bd5a-9ee484244046",
        "cursor": {
          "ref": "83ec9d7e-d903-4e63-8db5-4597392cb69f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "da799cb0-25c4-4b16-b3fa-07955b218a7e"
        },
        "item": {
          "id": "21763a34-4f29-45e5-bd5a-9ee484244046",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a2e58631-19e3-47ef-ad84-9e0225240fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87615cd5-1f65-4a31-ab09-b08085433b8a",
        "cursor": {
          "ref": "21c040a3-27d2-437d-9fb1-4aa0b05ee50b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bd99608a-928c-4f96-bbc6-a9942101e637"
        },
        "item": {
          "id": "87615cd5-1f65-4a31-ab09-b08085433b8a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7c56ffa4-566a-4b1d-89ba-9843e8984bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee673b1-5f0c-4890-b53c-bc937f18d70d",
        "cursor": {
          "ref": "981a3109-20d6-4434-b776-3bcd0ec1e477",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "90ad48f4-d537-46df-965c-33784e7c74cb"
        },
        "item": {
          "id": "dee673b1-5f0c-4890-b53c-bc937f18d70d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1b7bddf0-5b76-4af0-a07d-99cc868b1cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ce76b0-b184-4992-b16e-1b744f526299",
        "cursor": {
          "ref": "6f502738-1b42-4232-87df-b8b9c8101a62",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "09002ba8-5eab-42e4-837e-7dab04cdaf35"
        },
        "item": {
          "id": "53ce76b0-b184-4992-b16e-1b744f526299",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c56d970a-bbfb-47e7-a6d2-e3961b6b6716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778f5998-5a09-42d7-b8f1-c6410764858c",
        "cursor": {
          "ref": "c87ebb29-7340-4aa4-af3f-0c9de000b1e9",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "46bae0bb-ad97-4a98-a79d-e815bcdd38b8"
        },
        "item": {
          "id": "778f5998-5a09-42d7-b8f1-c6410764858c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "11e757e9-1f18-4ebd-bc53-d00de406623c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1446ecb1-2614-4dad-b17a-c3b3dbba2dde",
        "cursor": {
          "ref": "4d1533f1-09c5-4dd5-a8a7-d36f8e809fe1",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "24364750-baa3-44f8-9ffd-be2ae55d98d9"
        },
        "item": {
          "id": "1446ecb1-2614-4dad-b17a-c3b3dbba2dde",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8e435085-0a78-4470-9016-e188df246b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636b5669-cd73-4a07-847b-4b91fda17b6d",
        "cursor": {
          "ref": "6e96a854-e4a8-43c1-b0af-57861b69a241",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b862ddc9-5144-41ec-b583-16e7a2d67df3"
        },
        "item": {
          "id": "636b5669-cd73-4a07-847b-4b91fda17b6d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0b8efda7-4ccf-4435-8658-fbad6d07b25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c91a64c-259e-4d26-b432-5469e2b780e9",
        "cursor": {
          "ref": "372e31c5-f4f4-453e-a69b-e2b62d652940",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8fa7c7e8-5035-436c-af8f-a19613e96a95"
        },
        "item": {
          "id": "7c91a64c-259e-4d26-b432-5469e2b780e9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "39ca1220-2f2c-486a-a789-047d57da0978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cc43d8-d3c8-4e2e-a1fe-3524a7a8ccf3",
        "cursor": {
          "ref": "13ee8765-5d21-4179-908e-8d9d5497ae4f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d5226d58-8c22-4f83-927b-79c9f66457b2"
        },
        "item": {
          "id": "85cc43d8-d3c8-4e2e-a1fe-3524a7a8ccf3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f0a38f6f-16ae-4028-95a5-cddcad27b262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33273761-00a0-4cfe-8548-da53e4d28405",
        "cursor": {
          "ref": "b17742d6-7341-4113-a51f-077c2a1e2a32",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9e20fc60-d924-4d51-b1cc-b938d884276d"
        },
        "item": {
          "id": "33273761-00a0-4cfe-8548-da53e4d28405",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "291e8b9b-091c-475b-978d-43248cf23861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a95bad8-6508-44f3-916a-c75a344efcc0",
        "cursor": {
          "ref": "5914d8c5-d97c-4495-95c7-7a411ac0610e",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b6d3fa2b-7e3c-435a-8a78-e974963eb727"
        },
        "item": {
          "id": "2a95bad8-6508-44f3-916a-c75a344efcc0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ead24a72-4035-47bc-b592-5ecdee5903be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e7f7b5-9ce9-4506-97fa-953b8f70ebe1",
        "cursor": {
          "ref": "6212eda2-2dbc-4093-ab6c-96ec83d1b753",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f4713891-60e8-484c-98eb-befaf1c06d8f"
        },
        "item": {
          "id": "11e7f7b5-9ce9-4506-97fa-953b8f70ebe1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d2acae84-453d-4ab7-b846-44df035b9525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06e5d83-03e8-4cfd-bee6-31a4d3cfe214",
        "cursor": {
          "ref": "e1f13246-2977-4566-82c2-a196855b3f07",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8382b16f-6bcb-44ea-a6a4-2387a2313531"
        },
        "item": {
          "id": "b06e5d83-03e8-4cfd-bee6-31a4d3cfe214",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "dd2e799b-ba98-4024-b37d-e7d43451124e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb30a42-7e7d-4b57-a70f-02cf7e5623c8",
        "cursor": {
          "ref": "d8bb46b2-15a7-453a-a4d9-0bd06e423fca",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fb19ab67-0912-4439-a049-eaee720b55f3"
        },
        "item": {
          "id": "3bb30a42-7e7d-4b57-a70f-02cf7e5623c8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "073724bd-d1c8-47c5-ba23-6eed60356a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455b937d-b805-493a-b995-3a61c6cd4ef5",
        "cursor": {
          "ref": "6258dffc-6d3c-4e35-9239-aeef9eba24ac",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5d195fff-be63-4b33-93f1-c56bbdf7fcc4"
        },
        "item": {
          "id": "455b937d-b805-493a-b995-3a61c6cd4ef5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9af1f4df-2784-4188-936c-9611b2738551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bdd5ce-45cb-48be-8984-04dedcef8a94",
        "cursor": {
          "ref": "09708e7c-988c-46d4-9423-94398547640d",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f84c2060-4a9b-45d6-9f40-7bdb406a141c"
        },
        "item": {
          "id": "88bdd5ce-45cb-48be-8984-04dedcef8a94",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "640f0253-1b43-437d-9e74-32c0b4915d95",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "d455f901-4089-414a-a17a-c8fc216ec3bb",
        "cursor": {
          "ref": "8db4ee30-a635-48e2-9693-c6e3fe286eff",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6bf8fe5c-ef45-4316-8f77-d176f08fe411"
        },
        "item": {
          "id": "d455f901-4089-414a-a17a-c8fc216ec3bb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1c7f188c-c3c7-435d-bec8-9926ff2e312f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d568cc-928c-46a8-a68a-92d2f99ad389",
        "cursor": {
          "ref": "6fb0c98c-4e77-4496-b759-c63ffc30c61c",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4d79a21c-a76a-4605-a5ec-545b99cb29dc"
        },
        "item": {
          "id": "62d568cc-928c-46a8-a68a-92d2f99ad389",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6ab50b14-5836-4abf-a080-a307d4433c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f21d0e-79a3-46d6-aaab-e2d14c5de2bc",
        "cursor": {
          "ref": "0c49cfdc-b29c-469b-bd17-61fef95ff98b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "84469637-2195-4e8f-9c94-7cc529dd17a4"
        },
        "item": {
          "id": "41f21d0e-79a3-46d6-aaab-e2d14c5de2bc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5eb0b8e7-7a8a-4083-bca8-26cb4216d816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49341ce2-a6fa-4fe0-8506-758933428661",
        "cursor": {
          "ref": "8354af76-846b-48d4-8a2c-852e40d339a0",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f372308b-0c9a-40ab-a316-ef8d81fd7125"
        },
        "item": {
          "id": "49341ce2-a6fa-4fe0-8506-758933428661",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0f7b430d-ca19-4739-8b7f-0f70c702541c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d56cc0-e768-460f-9e79-9485372978d0",
        "cursor": {
          "ref": "1af23406-1b9b-4b6d-931f-e768b6f0df04",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c7745c9-ddf2-40ea-86bc-7bb3f90d36c2"
        },
        "item": {
          "id": "c7d56cc0-e768-460f-9e79-9485372978d0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d3d39812-bc70-40a0-b38c-98bf0cab7dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad2355c-0c02-4650-be23-c83ef5275f3d",
        "cursor": {
          "ref": "cd6a31fc-d5d0-4da2-b7c7-e8638eed234a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0a0c1ce9-7f6a-4c35-b79a-d028686fbe89"
        },
        "item": {
          "id": "6ad2355c-0c02-4650-be23-c83ef5275f3d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "40edcbbf-ed8e-4c79-88ec-41d61609781d",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ad195b79-897f-4768-9820-9f471eafefc7",
        "cursor": {
          "ref": "1a570564-4d6b-4262-8877-22d1140f61d3",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "41ed161e-f443-4b3c-a611-1aa093c1237b"
        },
        "item": {
          "id": "ad195b79-897f-4768-9820-9f471eafefc7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5a7c1f44-f223-4f57-add5-3392b0156f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72f966c-74f1-4354-95f9-0191946020a0",
        "cursor": {
          "ref": "1b75b658-8c6d-4a86-8962-db3d95c90b20",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1e975f6b-6a0c-465c-a687-4654d5880041"
        },
        "item": {
          "id": "f72f966c-74f1-4354-95f9-0191946020a0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "167895ef-7391-47a7-8bf1-be1f963eb9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a76b10-781c-4fb8-afd4-ad68a78ae823",
        "cursor": {
          "ref": "5c3478ad-bd0b-43d7-8588-cc724bc70d01",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "08be7e02-2d8e-4df7-8c8d-30aa6af413fd"
        },
        "item": {
          "id": "d9a76b10-781c-4fb8-afd4-ad68a78ae823",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c0761ca1-93da-4dca-8c34-425a6b42b95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236a8521-f51c-4082-af88-d6b95b048fd9",
        "cursor": {
          "ref": "b7900949-b673-40f3-abe7-ef0eae27fd62",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3cf22ace-a008-49e5-b3dd-8d50f5eb2c12"
        },
        "item": {
          "id": "236a8521-f51c-4082-af88-d6b95b048fd9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0230143b-424e-46d5-84e0-2f94a5a8f143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd33c516-b19f-4d33-9483-6b77684f99f2",
        "cursor": {
          "ref": "0a67c909-4e98-4034-9d2d-1d014ab4ceee",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6455778c-6099-4205-b449-99aa9dff5871"
        },
        "item": {
          "id": "cd33c516-b19f-4d33-9483-6b77684f99f2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "93487409-e5e4-4869-b436-52abf6999d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49668435-ac72-4378-9e08-45fc73c43396",
        "cursor": {
          "ref": "dbcc4cd8-12d4-467e-9fb2-c0bbf4987e06",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4e8b6148-a555-4815-8b94-093fb9bb5a69"
        },
        "item": {
          "id": "49668435-ac72-4378-9e08-45fc73c43396",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7c245b79-8462-4d25-988b-4abf4ee7d948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45303da1-fb34-42cf-bcdc-5e1e1f78219b",
        "cursor": {
          "ref": "1157e77c-8054-4f38-b587-70e5ce031d44",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c5017abc-dcf4-4bfa-b14b-7947d0727990"
        },
        "item": {
          "id": "45303da1-fb34-42cf-bcdc-5e1e1f78219b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2fc11ed4-cb40-4dd7-b98c-783b565c36f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b426f488-0588-4b43-896f-f318c51db208",
        "cursor": {
          "ref": "82f640d6-dc84-47ee-a409-ccf947a1dc89",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a69655e4-3e2f-465e-bc15-a69a6f899410"
        },
        "item": {
          "id": "b426f488-0588-4b43-896f-f318c51db208",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0f7aaf34-4849-492e-bf05-90314bea789a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f732b7-b159-4af2-bae5-cfa391776490",
        "cursor": {
          "ref": "616f27c3-54b4-4fbc-9ea6-3dcb5c7dd8b6",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "63e103cb-6177-45ee-98a9-92a03050be86"
        },
        "item": {
          "id": "c7f732b7-b159-4af2-bae5-cfa391776490",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "72ea8c42-0b43-46d0-ab7e-4ed55c1ffad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3f10b011-a629-4873-b931-274228174a78",
        "cursor": {
          "ref": "0db70261-a34f-4c9c-8c63-c0a682e5ce31",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f3260fec-6815-440d-b7eb-3ba8dde226fd"
        },
        "item": {
          "id": "3f10b011-a629-4873-b931-274228174a78",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b4246e8b-c70d-4ec5-8e06-4df65b230af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ac4b1657-db7d-4e97-a499-c12ef92f7738",
        "cursor": {
          "ref": "ff8244a9-abff-4f6f-8042-ee608b45d556",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4b0c3a1e-f007-4121-8b53-eafcf603dec6"
        },
        "item": {
          "id": "ac4b1657-db7d-4e97-a499-c12ef92f7738",
          "name": "credentials_issue"
        },
        "response": {
          "id": "35f51937-6db0-4b6d-b895-2ce37fb9ba3e",
          "status": "Created",
          "code": 201,
          "responseTime": 128,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac569fd-e20f-4021-b436-91f2e72cd2c8",
        "cursor": {
          "ref": "daf71f6d-4502-494b-8c8e-490d54b49dec",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fd7db2a4-5744-467d-865a-9dd6acdd16c9"
        },
        "item": {
          "id": "9ac569fd-e20f-4021-b436-91f2e72cd2c8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b5bc376b-7955-4a31-aa6e-c520dff96ea6",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f54c6b-6285-404a-b407-b67d53a437ec",
        "cursor": {
          "ref": "aa495d7c-ff5e-4234-b7f2-ca4e8f17e231",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b8c78b3a-2525-42bf-9172-03eea6264345"
        },
        "item": {
          "id": "e0f54c6b-6285-404a-b407-b67d53a437ec",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7d387ecf-acf9-44d7-829d-965a1d4c7f1a",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4a6bdc-42e2-43c5-88d6-e470c62173f1",
        "cursor": {
          "ref": "157c6c10-ac35-46dd-a5a5-ec05a50d7bc2",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "651e43c6-fca3-4d01-9975-e6aff3e14fbd"
        },
        "item": {
          "id": "6b4a6bdc-42e2-43c5-88d6-e470c62173f1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "050d6626-e3b8-4b19-bb2d-1b58a8e65a18",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f814dbf3-3d6a-4890-9e49-0089e419acbd",
        "cursor": {
          "ref": "89ee3d03-3028-4152-84d2-a1fe4d106a20",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "34ebd548-478d-4e4d-b65e-c1f8a8d195a5"
        },
        "item": {
          "id": "f814dbf3-3d6a-4890-9e49-0089e419acbd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "35a1c104-d501-43f1-93ef-40cfc77db1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "f74ab5f7-9939-4be3-a362-130da65ea8a7",
        "cursor": {
          "ref": "2572d6f4-153f-4696-8f66-fd715716382f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4da106b4-9538-4e33-8c13-60233721ec63"
        },
        "item": {
          "id": "f74ab5f7-9939-4be3-a362-130da65ea8a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bfe34040-1d0b-4631-8013-c145508fa0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74ab5f7-9939-4be3-a362-130da65ea8a7",
        "cursor": {
          "ref": "2572d6f4-153f-4696-8f66-fd715716382f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4da106b4-9538-4e33-8c13-60233721ec63"
        },
        "item": {
          "id": "f74ab5f7-9939-4be3-a362-130da65ea8a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bfe34040-1d0b-4631-8013-c145508fa0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697fe564-740a-4176-a802-c50267c36dfd",
        "cursor": {
          "ref": "03651cf8-93f6-4985-8e0c-eb1fd2324ba5",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "912750d0-e007-4873-aed7-199fd9382cef"
        },
        "item": {
          "id": "697fe564-740a-4176-a802-c50267c36dfd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "512e42ff-39bc-4bf5-853d-51648a74feef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f033cb78-b6d4-4b40-b5de-f960db5ed12f",
        "cursor": {
          "ref": "f15e0d77-9cde-4c15-bd32-14cd3356165c",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e4bd770f-53ab-408c-8099-603809aad097"
        },
        "item": {
          "id": "f033cb78-b6d4-4b40-b5de-f960db5ed12f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1546dd83-269f-4ed7-bb76-1496ffb7f07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e487ea2-8285-4b5f-b284-383fe5c17fc2",
        "cursor": {
          "ref": "ad2cb97d-9841-4cce-bdf9-4c3b18737908",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "aa64cae0-d463-4654-b27c-5573ad44a216"
        },
        "item": {
          "id": "5e487ea2-8285-4b5f-b284-383fe5c17fc2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fda2e2af-a816-4587-8cb0-a1744bc20291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c6688a-3d85-459c-a309-2ad79fc748b9",
        "cursor": {
          "ref": "b9ee2025-1459-4f91-ba04-090dc5bc8ff0",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b01043aa-ed6c-4db1-9d6d-1bab4e3fa384"
        },
        "item": {
          "id": "a6c6688a-3d85-459c-a309-2ad79fc748b9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "10926e93-5fb4-4145-b770-99e4c1f6c482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76acec61-3842-400b-938e-8541efc73443",
        "cursor": {
          "ref": "25843828-f155-4a6f-af34-d3f7a852e769",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bbad7b28-60ac-41b6-a288-2ce5b8128aff"
        },
        "item": {
          "id": "76acec61-3842-400b-938e-8541efc73443",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0a661a62-8a1d-432f-bdce-7e3c3696b3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90849698-16d6-4973-b324-fa508f7093ce",
        "cursor": {
          "ref": "a80a422c-8e59-4ad2-8d78-74438690f4ba",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1282048c-5520-49ce-a435-86c9eaa051bd"
        },
        "item": {
          "id": "90849698-16d6-4973-b324-fa508f7093ce",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0f76e1c4-090f-489e-b113-9d7edaed764d",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "584d4c46-ffde-46eb-ad9c-f09005913f5e",
        "cursor": {
          "ref": "00cc348e-3d14-4776-a128-2ea5d67b108b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "92d250cb-64c7-420e-b35b-06881d8c3445"
        },
        "item": {
          "id": "584d4c46-ffde-46eb-ad9c-f09005913f5e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9631978d-fd04-499a-8691-fdc11be0157a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2a8c7f-a635-4650-bdbd-5263740400ce",
        "cursor": {
          "ref": "941c2d97-76c0-440b-92c4-5be3b87215af",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "107f2feb-3ff2-4558-9d29-469dad4aac4d"
        },
        "item": {
          "id": "ab2a8c7f-a635-4650-bdbd-5263740400ce",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "110bf618-c021-45ce-a40f-11a5c7588ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ad9aac-6834-4cea-8622-dd37aeca0d3d",
        "cursor": {
          "ref": "3037c40b-c6ed-4397-b092-d8ed89cd626d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a2321106-ec11-4fc9-989a-f1d731234927"
        },
        "item": {
          "id": "51ad9aac-6834-4cea-8622-dd37aeca0d3d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "08c24886-7382-4724-ae23-93125821a17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6367c64e-b9c1-429a-a260-2bfe709e2fd9",
        "cursor": {
          "ref": "97ef91d0-4daa-4fab-9fa1-2958a7f3b42f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "97deb6a2-1a57-4b00-86ba-0d7d1ab36c3f"
        },
        "item": {
          "id": "6367c64e-b9c1-429a-a260-2bfe709e2fd9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "77308b5c-8cd6-423c-bc65-3d69874fd281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe248d0-7c9c-449b-8efe-4eb45a9366a2",
        "cursor": {
          "ref": "945558d1-74de-4606-89c0-d9db227875b5",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a038b89c-4215-490a-a605-76d756e8c710"
        },
        "item": {
          "id": "cfe248d0-7c9c-449b-8efe-4eb45a9366a2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "361f1218-4fa4-4f34-af66-9d5f44c32ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966ea9ac-bac8-48bd-85b4-0bf2d95a1db4",
        "cursor": {
          "ref": "c9c0efa0-6bf5-4430-bb57-528aa9a629f2",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0bd34e73-ad9c-4b01-873f-9d3e7add8866"
        },
        "item": {
          "id": "966ea9ac-bac8-48bd-85b4-0bf2d95a1db4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8436f9d4-fd6e-4a39-85ab-6686d5b43c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf548dd-e1ba-423c-a50e-34eaf27ea4e7",
        "cursor": {
          "ref": "905925e1-3cdc-49bd-a907-aa3cd6b798b0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d0be38ef-249b-484e-9f54-084ad013f89d"
        },
        "item": {
          "id": "caf548dd-e1ba-423c-a50e-34eaf27ea4e7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6e533b90-fe2c-4c2a-9c2e-386b1d64a46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96205c2-b996-44d1-9f48-ac6a1a6cb2a9",
        "cursor": {
          "ref": "ea4e2d92-a5d3-48de-961e-2ffc33f44eec",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "147a7630-59f1-4463-a0f6-d35e99f482db"
        },
        "item": {
          "id": "c96205c2-b996-44d1-9f48-ac6a1a6cb2a9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "161442a7-5ab4-4cd9-90c0-27db10f52b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b75fdf-efb5-453e-8698-e007cd70a80f",
        "cursor": {
          "ref": "dbf0e204-a8d3-4e42-9dbf-735d0d228c92",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5302fc33-79d0-4bf8-bc99-21a24f24ef5e"
        },
        "item": {
          "id": "64b75fdf-efb5-453e-8698-e007cd70a80f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e44d6738-9d8a-4ad1-9e23-b5caccf1a2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe334525-ae3b-474a-929a-185031d1e4e6",
        "cursor": {
          "ref": "45899b22-0ab6-4d99-9eca-e782a3a913bc",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "64c39df4-33bc-42aa-873c-baddbfbdd4aa"
        },
        "item": {
          "id": "fe334525-ae3b-474a-929a-185031d1e4e6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d60ec4a4-0014-4401-bf7c-74a43766ed96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cdd0ec-4bb3-4843-ac96-97fa34e357e3",
        "cursor": {
          "ref": "c7e2fcac-2cf2-410c-af3f-4cd9586fd32d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "58c97d94-eb12-484c-9162-3817287a4e76"
        },
        "item": {
          "id": "c5cdd0ec-4bb3-4843-ac96-97fa34e357e3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "28a13303-5f5e-4ad4-a209-f23e4f82f12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b32d2d9-0f90-4e2d-be09-5c38838b3234",
        "cursor": {
          "ref": "a9f6d4f8-0b28-41bb-8a0c-dfe38aa173eb",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fc69dcca-0d59-4a58-94b2-ac46acb18682"
        },
        "item": {
          "id": "8b32d2d9-0f90-4e2d-be09-5c38838b3234",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0a3e943d-4244-486e-9412-b30a4a046584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb61f8ef-0494-4a62-bdad-9ea2305d0a64",
        "cursor": {
          "ref": "2f2aa7ed-66de-4a41-a567-9cc51ea8f865",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a591f8cb-3ba9-49e3-8047-1c96c7536257"
        },
        "item": {
          "id": "cb61f8ef-0494-4a62-bdad-9ea2305d0a64",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9b3b00c6-44db-4c7b-84f8-e3dbcd3897c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed13070-1b7d-4b18-88cf-3fd0cdabf46a",
        "cursor": {
          "ref": "ce80c006-ec4d-4c72-a0cd-677513a68920",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bd4cd1f9-aeff-436d-84bb-c92694aa0b46"
        },
        "item": {
          "id": "9ed13070-1b7d-4b18-88cf-3fd0cdabf46a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "451256da-e347-4dd8-9d48-767fb464a378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8c4f8b-9c68-4eba-a7b9-2d25be997695",
        "cursor": {
          "ref": "938bbc58-87c2-4f9f-a9ea-d712b059a018",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cde3421f-5bfb-46ce-9096-0ee529a7bd9d"
        },
        "item": {
          "id": "7d8c4f8b-9c68-4eba-a7b9-2d25be997695",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "445ff632-7beb-4410-b078-ad43a4dd8c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672f586c-a8d5-4747-8a4a-0c039af778f5",
        "cursor": {
          "ref": "dee14d58-c10f-4fb8-b54c-55fdd4a17eb8",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a20948b6-3235-4aaf-96f5-0b295601631b"
        },
        "item": {
          "id": "672f586c-a8d5-4747-8a4a-0c039af778f5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6bbf4a6a-6582-4f3a-a265-05986963a19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14242f0-09c4-4b42-ac14-726d26a86136",
        "cursor": {
          "ref": "e20f28e1-815c-4928-9d8c-b1eac3172123",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "219944d7-1387-49d8-8cd8-2468637ca065"
        },
        "item": {
          "id": "d14242f0-09c4-4b42-ac14-726d26a86136",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5c579315-c901-48dd-a143-03a9605b3ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f789a1b-84ac-49f1-988b-e243c1e27b22",
        "cursor": {
          "ref": "7663c43a-377d-4f60-9e0b-eb424d4869d6",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4ffd2cde-2ef3-4dab-9f1b-be2594427d88"
        },
        "item": {
          "id": "0f789a1b-84ac-49f1-988b-e243c1e27b22",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e8d7d73b-80c7-4bb6-b9b2-d6afb3240cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fb7caa-8a87-429d-a685-d6b8eab7544f",
        "cursor": {
          "ref": "8b2b106a-cd29-406b-8746-71aeff89c65c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b59105b8-6cd2-4dce-b08f-e2b7ef3ed6f3"
        },
        "item": {
          "id": "32fb7caa-8a87-429d-a685-d6b8eab7544f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "078411c1-2788-4f8d-a66b-2d78ff13c346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1bfa62-2ee0-46a7-8e65-50f60b42a293",
        "cursor": {
          "ref": "087e2d5d-9bcf-427a-94ed-78a9c2b9c441",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b65da1b7-33d0-40c5-8ae6-3603a96eff9e"
        },
        "item": {
          "id": "dd1bfa62-2ee0-46a7-8e65-50f60b42a293",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6ed7ba32-94fe-4037-b4d9-615c4314b760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9157420f-5d06-4692-a297-5038a8f9d949",
        "cursor": {
          "ref": "6a64b4a9-10fe-4923-acc3-bb3e2c4e0bf1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3f4db2d3-cab8-4e92-ab0d-f3165edbe77e"
        },
        "item": {
          "id": "9157420f-5d06-4692-a297-5038a8f9d949",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "30d70a65-54d3-4f51-807c-3a0ddef5f802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1007426-b4e8-4a86-b197-7f7b2a7f71e4",
        "cursor": {
          "ref": "74afa60a-19ea-4189-8338-3cfd1b967113",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "601d815e-c00c-4a27-a553-b9dd4bc9ecee"
        },
        "item": {
          "id": "c1007426-b4e8-4a86-b197-7f7b2a7f71e4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "06dba6c9-dc5b-4a7d-b69a-de37ef00844e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1beb1a4-60f3-451c-9b05-e84320f72b50",
        "cursor": {
          "ref": "9832d042-c762-426e-bed6-4ed2dc16f2d3",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dd5cb4e6-91c6-4409-b273-e9d23e2b9e27"
        },
        "item": {
          "id": "d1beb1a4-60f3-451c-9b05-e84320f72b50",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a3136fc0-5a38-49d9-9b75-2a322e3c62e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ebae96-de3d-4266-a12a-4c72f6de8090",
        "cursor": {
          "ref": "ad444b65-92d9-453d-8d4a-e50906a0eb35",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "307fd167-399c-491f-a825-ea9b21928d3e"
        },
        "item": {
          "id": "f4ebae96-de3d-4266-a12a-4c72f6de8090",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d590bce7-de5f-4c09-8ce8-29927d83c5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c5bdaf-a0f2-4e98-97ec-f92e1a0b3be4",
        "cursor": {
          "ref": "29473c6c-8e4c-49f6-8f3a-d6c7971dc5c2",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fb9cadb6-9b14-4722-ae3f-30109f6cfdc8"
        },
        "item": {
          "id": "f8c5bdaf-a0f2-4e98-97ec-f92e1a0b3be4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b87bcaa0-da73-4ed0-a961-c8157530b278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525850f6-4a78-4f7e-83c8-c8e32b3199ed",
        "cursor": {
          "ref": "a73c12ae-a2f6-4a46-9edf-c8a8ae8bb369",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d601aa76-a0c9-4265-a182-5c760c9ab481"
        },
        "item": {
          "id": "525850f6-4a78-4f7e-83c8-c8e32b3199ed",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "625ecb03-72cc-42cd-be2e-ea0f91964f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c32172e3-b3fd-408e-a096-dd0bd0936859",
        "cursor": {
          "ref": "fe892ed2-61a6-4096-b1da-7788091e9f73",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a7967f5c-ee47-44c6-b43a-a58bcc311d2a"
        },
        "item": {
          "id": "c32172e3-b3fd-408e-a096-dd0bd0936859",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "13c46ea6-14f3-4510-8133-4b6a03d72d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "81c4c613-29af-404e-8122-24d89cb57a4d",
        "cursor": {
          "ref": "4ecc6f0c-eb5a-4656-b862-9b8e492e3bbc",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0154e644-1c80-4584-af39-e0d67a4989a6"
        },
        "item": {
          "id": "81c4c613-29af-404e-8122-24d89cb57a4d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a9dfac7c-4e0a-4028-9e39-a26dcd957709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c4c613-29af-404e-8122-24d89cb57a4d",
        "cursor": {
          "ref": "4ecc6f0c-eb5a-4656-b862-9b8e492e3bbc",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0154e644-1c80-4584-af39-e0d67a4989a6"
        },
        "item": {
          "id": "81c4c613-29af-404e-8122-24d89cb57a4d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a9dfac7c-4e0a-4028-9e39-a26dcd957709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79700958-9f31-434e-a403-1fdfa89905fe",
        "cursor": {
          "ref": "fb04e7f7-ee89-4eb4-8908-b5866e34242c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d0482e59-8820-416a-bdc4-e9c97576fdc5"
        },
        "item": {
          "id": "79700958-9f31-434e-a403-1fdfa89905fe",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7a85c5fe-c009-4660-af93-c90e54377cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29208f97-6a20-42d6-ab51-74b79ed8d9a0",
        "cursor": {
          "ref": "b44a3421-5574-4ee2-8071-41dabc7e206b",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e06f8844-5012-4ba7-ad3b-dc29bec010ee"
        },
        "item": {
          "id": "29208f97-6a20-42d6-ab51-74b79ed8d9a0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a8ed5bc9-6379-4779-ab2c-bebc5b5358df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3740e9c6-a5c0-4208-83ea-98bbb59d04a2",
        "cursor": {
          "ref": "f398f059-8b6a-47c5-870b-694c817d87df",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6c8f8b73-8e48-4945-9ec1-48733cd3e3f7"
        },
        "item": {
          "id": "3740e9c6-a5c0-4208-83ea-98bbb59d04a2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b4ae0ef0-4937-467b-8c97-e13e37da477d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740193b2-a7c8-404e-a013-0f857d0fa7d6",
        "cursor": {
          "ref": "78a9f206-d1cf-4936-9d58-e1f330a11a95",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e4bcc288-bfa7-4411-bc5a-af5bb7ae50dc"
        },
        "item": {
          "id": "740193b2-a7c8-404e-a013-0f857d0fa7d6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "08bf3954-475b-482e-b8be-f9b5de3c8920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6d1e80-1c60-4229-8d56-dc678864cdfd",
        "cursor": {
          "ref": "b57a5fe4-1db7-4344-86bf-4983a88a9a11",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7786abba-4514-4f52-9d2b-e266768023b3"
        },
        "item": {
          "id": "5b6d1e80-1c60-4229-8d56-dc678864cdfd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "12a5b5ed-1856-47a9-931c-c838fa68a151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fccc9b-72f7-4e58-9303-82beea5825dd",
        "cursor": {
          "ref": "178c60f0-a774-469b-9013-df275399c777",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1815fbe3-534b-469d-b9b3-9e4d6a04ab84"
        },
        "item": {
          "id": "13fccc9b-72f7-4e58-9303-82beea5825dd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c63dbd3e-2c75-4bb0-973b-f1934f660c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4de6c7-82ec-49e6-a214-fbde444d10ad",
        "cursor": {
          "ref": "4ad1a585-b0d6-4b03-b96b-f43d09a1b8c9",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "425915a2-c48e-4efc-b677-435bebec41f7"
        },
        "item": {
          "id": "6c4de6c7-82ec-49e6-a214-fbde444d10ad",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1f799246-d28d-4b1b-8d46-f9bafa008780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230c2669-575b-4d7a-9a55-ad7c76828c40",
        "cursor": {
          "ref": "7166bc9b-b59c-416f-b036-a2cbd27e810f",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6550a87a-c44e-4677-8e86-8d1466ee3be4"
        },
        "item": {
          "id": "230c2669-575b-4d7a-9a55-ad7c76828c40",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d0cc8b17-e526-44a1-83fa-061feee1a9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a1b0fe-49ce-4311-98f0-f6c4b791491b",
        "cursor": {
          "ref": "504fa05c-126b-42c2-81db-2356f243db99",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a60fff13-1ead-41f1-b4b7-f28b400f3df0"
        },
        "item": {
          "id": "55a1b0fe-49ce-4311-98f0-f6c4b791491b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e1a83ce8-37a9-4734-a5a4-60ada49220ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3900356-a81f-4709-9e3b-377292bbf85d",
        "cursor": {
          "ref": "db7aa0ba-3ab3-40c3-92d8-11244d52b996",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1ff15f62-54da-4600-85d6-f9d23378e453"
        },
        "item": {
          "id": "f3900356-a81f-4709-9e3b-377292bbf85d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3147fbeb-e688-46e1-9267-ea775d6253c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c049ed7f-3726-4bc7-8306-c0a4fcbce101",
        "cursor": {
          "ref": "4157ddea-7ac0-45a1-ab8a-a9075e231c15",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "89eed448-ac79-4dd9-84d2-b713f69efc8e"
        },
        "item": {
          "id": "c049ed7f-3726-4bc7-8306-c0a4fcbce101",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2ffbbc61-81da-42f7-bbe8-a44df7421d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3146edd7-f2f2-4128-b6c4-c3b9741e57a2",
        "cursor": {
          "ref": "502e5752-d62d-4efa-8f20-cb4b5dcee7fc",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c53863f1-0608-4ce3-8329-e738f0082c2f"
        },
        "item": {
          "id": "3146edd7-f2f2-4128-b6c4-c3b9741e57a2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7d8c6579-abb7-477e-8678-f0225431bee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafcac97-3e2c-4dfd-8039-c7b6774d52a2",
        "cursor": {
          "ref": "d0e145f8-28d0-4b98-b323-6def799c28a9",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cb333523-17b2-41bd-ade6-1d04d6602a77"
        },
        "item": {
          "id": "cafcac97-3e2c-4dfd-8039-c7b6774d52a2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f1bf9fd3-3c2e-41e6-bb6c-0a06d4d96c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9607846-d2ab-4c17-8f1e-0bb68276de10",
        "cursor": {
          "ref": "b3ad0869-7801-482a-a124-b6ee99615e5f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "63843b01-135d-4527-b34d-7622b6df4768"
        },
        "item": {
          "id": "f9607846-d2ab-4c17-8f1e-0bb68276de10",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0365c16d-6865-43cb-b4a7-a928bcbd1e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b29d28b-c5c6-4627-ab85-fd3980bdaa1c",
        "cursor": {
          "ref": "a0c6ca33-d4d6-43a5-8fc0-af4a630035a4",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ad2236fa-01b7-4026-9a37-d97dee5bfeb7"
        },
        "item": {
          "id": "9b29d28b-c5c6-4627-ab85-fd3980bdaa1c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3d21d44c-ea1d-44b4-b459-1bd7c500f693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d916c708-c988-401e-84c1-f86133badbea",
        "cursor": {
          "ref": "725f0d65-9a87-4d56-949e-6fb5766b266e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8f2cf997-ef2a-4bec-96c7-056ce4437993"
        },
        "item": {
          "id": "d916c708-c988-401e-84c1-f86133badbea",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "76496c0b-95a4-4470-a3f6-ae18f54f1937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80052c2-7ecf-4ddd-b07b-e01a5df27592",
        "cursor": {
          "ref": "0513f5c1-bee7-4f4a-84cc-dfa6fd6cb271",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "14da9f1c-0cb6-43f7-bc6d-3020b27954b2"
        },
        "item": {
          "id": "b80052c2-7ecf-4ddd-b07b-e01a5df27592",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3e18df78-1696-4bd1-99dc-55e8ef925386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a27d9a8-8c1c-4513-ba69-2f6a49adbcdf",
        "cursor": {
          "ref": "e3925a9a-166a-40cc-8df6-941a5a1cd07f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "81a7f0e3-86ee-4409-bfa2-1e386abf615f"
        },
        "item": {
          "id": "1a27d9a8-8c1c-4513-ba69-2f6a49adbcdf",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e633162c-31cb-4ce6-ba40-21af0f4eddea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745a57f1-195b-4c76-a2da-eaf1e059c1ad",
        "cursor": {
          "ref": "4335e562-ee69-4685-af9b-f2bef044ea33",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c5bd029a-ba23-4219-9de5-29a9d99be80b"
        },
        "item": {
          "id": "745a57f1-195b-4c76-a2da-eaf1e059c1ad",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "68981664-16f3-47cf-8e16-a365070f9784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264235e3-64de-495f-ae94-272a043f29f0",
        "cursor": {
          "ref": "bc0c5e10-df67-46ae-8cd4-1b8d75250489",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "aed543e2-1ea9-4e0a-9753-631b0d4e60c0"
        },
        "item": {
          "id": "264235e3-64de-495f-ae94-272a043f29f0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "166fa451-8ae7-4f64-9051-835dc8f59c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fabb47-40af-4331-88f9-bebd9e42a2fb",
        "cursor": {
          "ref": "6a4d8ac5-298e-45e9-bb45-4d5e52f2ccd5",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f356e4e3-3150-430c-bce8-0399fa639ec6"
        },
        "item": {
          "id": "14fabb47-40af-4331-88f9-bebd9e42a2fb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aeee50e4-f62a-470d-9cff-f84e3aed7660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25674ae-d42a-4d10-9396-052bd3620c11",
        "cursor": {
          "ref": "9d6dc6a9-19bc-4b75-b8e9-2c310bca5517",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ce6aa793-ff70-4f4d-aebd-67db7df2f7ef"
        },
        "item": {
          "id": "c25674ae-d42a-4d10-9396-052bd3620c11",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ae26254e-fdd4-41d1-bf23-4eb4bcec1e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5179bb89-a2da-4eeb-919e-cd42c18902aa",
        "cursor": {
          "ref": "a4602971-a368-40a5-8cf6-f4d4588f4a20",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f8146c55-571c-4eea-9980-7b2eca0f3a5e"
        },
        "item": {
          "id": "5179bb89-a2da-4eeb-919e-cd42c18902aa",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b2f5b597-ab28-4a68-898e-b477928c9fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f8dd87-0b53-4770-ac68-2a8d916d7bad",
        "cursor": {
          "ref": "d7b4129d-4fde-420b-a12f-a4a4f6a71b6a",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5eb4242a-0614-4e91-874d-b980653b8877"
        },
        "item": {
          "id": "84f8dd87-0b53-4770-ac68-2a8d916d7bad",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c018fdfd-e6fb-4276-8d7b-e0c486ad76ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7717f2b-24df-453c-895f-af7b74009a10",
        "cursor": {
          "ref": "b390aa62-8155-4b1b-9f10-a0a9c8b3b3af",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c5e7c944-2bbb-4957-abb4-b19b0e892ae3"
        },
        "item": {
          "id": "d7717f2b-24df-453c-895f-af7b74009a10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "88ee2498-dee8-4eac-bf78-f33bc51423c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6ff55d-c5a9-4c59-9031-2a5bb328b166",
        "cursor": {
          "ref": "0d3483ac-604e-40c9-b54c-d637927d6ebb",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d2c68ba4-b243-4987-9a33-e9ad4c14c7c5"
        },
        "item": {
          "id": "6e6ff55d-c5a9-4c59-9031-2a5bb328b166",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "710b4780-aacd-4f26-9a33-e1380d198d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bfc796-9ab5-4b3c-b64c-5393e7e87747",
        "cursor": {
          "ref": "bd241de5-edd6-49aa-871c-b4d5d0a9a2cd",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c6b35e1f-4c56-4acc-8cc0-a7f350298307"
        },
        "item": {
          "id": "81bfc796-9ab5-4b3c-b64c-5393e7e87747",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d944ab95-950b-4810-b175-3908d368ff05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9cfcaa-f59a-4a26-9c90-f1454152981c",
        "cursor": {
          "ref": "be33f653-f30d-42b8-8d5b-b77d5c66fe59",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bd3bd4c4-e3d9-4e5f-b215-8b60cac2630f"
        },
        "item": {
          "id": "6e9cfcaa-f59a-4a26-9c90-f1454152981c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "36f285c9-d7d8-4f4e-85cd-92281f18ab94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e017020d-f0b1-45ae-8ff8-fe27401d82b1",
        "cursor": {
          "ref": "7cd95716-19a4-4a11-94d9-d39bf7a52f2f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b3924711-4821-45c5-b9ff-b62b6cf88a39"
        },
        "item": {
          "id": "e017020d-f0b1-45ae-8ff8-fe27401d82b1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1327d842-5bbd-4b67-a57c-64ab176d913b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdabf1a7-ae9d-4910-a96a-d6572c46754d",
        "cursor": {
          "ref": "c7eb87ff-9f0e-43bb-a160-a0011a3e2d80",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "aef953e0-92ac-4fd7-a491-969910ba6305"
        },
        "item": {
          "id": "bdabf1a7-ae9d-4910-a96a-d6572c46754d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a8eedc3d-c9a2-41e3-a5ab-037b1b085248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca1c055-c42e-4b37-9b0f-3f86a91ebdbf",
        "cursor": {
          "ref": "d41afae9-c45e-45d2-8ab4-2ff7738964a4",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a592eb0e-5ca1-458e-b2c0-c211de486ae8"
        },
        "item": {
          "id": "5ca1c055-c42e-4b37-9b0f-3f86a91ebdbf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "70d706ee-43f5-4666-a1a9-03ed7c23303f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a531fa-4ff8-4c06-9425-366096c489b2",
        "cursor": {
          "ref": "5bc4b100-cca6-48f0-b8da-8346db4ecb95",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "92b6dd55-59d3-42c0-aeb4-b80826072135"
        },
        "item": {
          "id": "25a531fa-4ff8-4c06-9425-366096c489b2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b88b76c7-ceb8-4efc-8ea2-7f706198512a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d4ac84-b36a-4a45-a7ff-f2e171ddbf7c",
        "cursor": {
          "ref": "6b7b27f5-a966-40d7-a7c1-da2b2e83e6af",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a871fd49-f0f4-405c-a18d-6f3f38e08714"
        },
        "item": {
          "id": "b2d4ac84-b36a-4a45-a7ff-f2e171ddbf7c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "305e481a-a390-4cd3-83a9-d8d86093f629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead12791-3f06-4932-afe4-68787256e011",
        "cursor": {
          "ref": "f8117d78-780e-4b65-9848-a122011463b5",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "77fca331-76a5-4bda-a457-e314539fb2a9"
        },
        "item": {
          "id": "ead12791-3f06-4932-afe4-68787256e011",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "aca501f5-af77-4106-a826-42656f88844d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e94385b-0b6e-4b5b-b18a-3c3f56a4a2cd",
        "cursor": {
          "ref": "fe38ae28-d64e-4b5d-9344-8950fc95cdf3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dda197a3-ca20-448b-8d0e-ab9cabf43173"
        },
        "item": {
          "id": "5e94385b-0b6e-4b5b-b18a-3c3f56a4a2cd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c36321dd-120b-4e31-b542-60f9df7ee815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5696f336-03fd-40ab-af2b-6ae5d46eec3d",
        "cursor": {
          "ref": "519390b1-0496-492f-8e58-969f6c990230",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "55554f53-ef09-459f-925b-0aa9de58905d"
        },
        "item": {
          "id": "5696f336-03fd-40ab-af2b-6ae5d46eec3d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "68892c08-dccc-4dcb-89ee-c2b67ce6be25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73203cd1-3c2d-45c9-9596-f870beef9747",
        "cursor": {
          "ref": "5e9289ed-3c42-489d-ab0c-b7abd9a3397a",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fcc6ff38-c7a4-4def-9cf7-a987644c8562"
        },
        "item": {
          "id": "73203cd1-3c2d-45c9-9596-f870beef9747",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9aba7879-ca5d-4859-a581-6fdbc6f5bed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6341aa90-09fb-411f-8017-dc1f7246c76e",
        "cursor": {
          "ref": "e4f0d573-8c0b-4e59-ac15-8c95da15c632",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bbadc750-ddbc-4ca2-b0b4-6e21b45e040e"
        },
        "item": {
          "id": "6341aa90-09fb-411f-8017-dc1f7246c76e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "992a04df-ab4e-4561-814f-5bd8e4807e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa47fa2-fa19-4179-b790-8ad4e70a77a3",
        "cursor": {
          "ref": "c2b9b4b0-c821-45f4-a06e-f2b4eb85156c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3ea23d1f-cff9-4ae1-93f5-cd7543442ba8"
        },
        "item": {
          "id": "4aa47fa2-fa19-4179-b790-8ad4e70a77a3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7d003f4e-9227-416b-96be-6200cd7de493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c46f495-1f8e-40b4-b073-367aa9ccc145",
        "cursor": {
          "ref": "0ae7dcec-a5e3-4283-9553-00adee9e20b4",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8ad9079f-7c82-42fa-ac68-bf32dbcf11cc"
        },
        "item": {
          "id": "8c46f495-1f8e-40b4-b073-367aa9ccc145",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "376feaa1-0fc6-4280-bcee-d369291c584d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427eec07-291a-4bf5-a907-485b24594d20",
        "cursor": {
          "ref": "b2cc2064-7a35-437e-8042-fadffbd706d3",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ba890a50-95fd-43f7-961e-0d49a0cf3e61"
        },
        "item": {
          "id": "427eec07-291a-4bf5-a907-485b24594d20",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cc091ea8-672b-4f57-a59f-fa5540678ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d90f12-7c64-4e2b-9158-9af7763f9e9d",
        "cursor": {
          "ref": "18dfd126-4aec-49cc-9953-9f5f2ffcfb7c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0f351e22-b34d-4050-a08b-841557d4352d"
        },
        "item": {
          "id": "83d90f12-7c64-4e2b-9158-9af7763f9e9d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9b334ba8-70cc-4b52-a428-ec18468b2d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0912b89-5415-4bfa-8da0-cabe0c1e449e",
        "cursor": {
          "ref": "f62e6ef7-51d6-4b67-a0b9-e9af8e47afe4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "170ea10e-ee72-4f62-a473-4cc793d58941"
        },
        "item": {
          "id": "b0912b89-5415-4bfa-8da0-cabe0c1e449e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5b4a850c-ac54-44c4-adbe-452713b4c8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffed6d0-b323-4bac-b3ea-76f68c4a4540",
        "cursor": {
          "ref": "3e4849f9-190a-4fcd-8b0b-8dbfe266018b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bc553e93-997e-4b48-9768-50bf2ac146fa"
        },
        "item": {
          "id": "0ffed6d0-b323-4bac-b3ea-76f68c4a4540",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8d0c3f2f-4804-49df-bd21-7248da0f9824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7835adb1-9015-4ba9-95ed-9d1882cd1de8",
        "cursor": {
          "ref": "724d4fda-ac0e-4227-ba76-6fe32444bfd0",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "94d7730b-ebad-4e38-a0cc-54001dfd688f"
        },
        "item": {
          "id": "7835adb1-9015-4ba9-95ed-9d1882cd1de8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "60a7035e-0b33-4173-a440-f966cdf54ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b91649f-5e15-4e8d-9c91-6f7fa83225c0",
        "cursor": {
          "ref": "d207cafb-5e75-4727-b92a-ee9028e5f3a7",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ceafbc9f-51b9-498b-96ce-55b31b88da84"
        },
        "item": {
          "id": "5b91649f-5e15-4e8d-9c91-6f7fa83225c0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f3a21a5a-9377-4380-b438-a2bbeabb5f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734c4ed0-3f9e-4eaf-9934-b5b99696097b",
        "cursor": {
          "ref": "4ada3792-ccb3-4daa-a3b2-7b201a8d89c6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b8c9a238-5a0d-4548-8515-36ed868a33a2"
        },
        "item": {
          "id": "734c4ed0-3f9e-4eaf-9934-b5b99696097b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f029b0ca-69bf-40ac-a032-a8993e4d8c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f00117-034c-4568-9ae3-375debbca94a",
        "cursor": {
          "ref": "3fdca68a-c04b-4e11-830d-1a783b3efc7e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "450de3b5-d33f-45e3-b122-b216a50fa002"
        },
        "item": {
          "id": "76f00117-034c-4568-9ae3-375debbca94a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "043d9ef4-dcc1-481d-82e1-234f89e2243d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe15893-8d45-49fa-b0e0-a3f231dad00b",
        "cursor": {
          "ref": "48dda978-367b-4fe3-9475-4addf526ec2b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e5344546-bfaf-4a3e-9df2-894b8a6fbe67"
        },
        "item": {
          "id": "1fe15893-8d45-49fa-b0e0-a3f231dad00b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fcf7ebd7-0ac1-418d-974a-18d1a32a9640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b414b93e-7a58-48f5-a06f-83cfa1dac6c8",
        "cursor": {
          "ref": "0281a88b-ed49-4c71-b3b3-781a30d0fcb8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6a774e55-bf26-4696-8463-273deeaae542"
        },
        "item": {
          "id": "b414b93e-7a58-48f5-a06f-83cfa1dac6c8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fe65031d-06c6-456d-8f0e-154a2bb8c442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a19fa5-7416-4a4e-bcd1-cf9e6e20e253",
        "cursor": {
          "ref": "d20bd3c0-326d-47af-ba4d-45a7ae594cdb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7f81b639-e5d6-43cf-9285-607fa953df69"
        },
        "item": {
          "id": "76a19fa5-7416-4a4e-bcd1-cf9e6e20e253",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c055af14-b695-4f28-819f-74261a2c6501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7ea414-0258-4ee7-a235-d2c97d92ab4b",
        "cursor": {
          "ref": "6043e947-d3cd-4e8e-b4cf-796dc3c9d20d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "18834fd9-cd18-45a1-9322-cefecd4a3152"
        },
        "item": {
          "id": "0a7ea414-0258-4ee7-a235-d2c97d92ab4b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3b38b02d-759d-43dc-b8fd-3eb95180857a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c572bc-fda4-41e9-bd1f-496f3e96df2c",
        "cursor": {
          "ref": "da0445eb-acd0-4c53-b73a-233bc76f90fa",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5c1ae6c7-089e-4826-a171-ee018d146ee3"
        },
        "item": {
          "id": "34c572bc-fda4-41e9-bd1f-496f3e96df2c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "460730d9-7de6-4c52-856a-de5653ff4591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5f9132-3630-4e6d-b22b-597f4946ae80",
        "cursor": {
          "ref": "9162b5e8-3e70-4613-8586-48a0072f09dd",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e930ee9a-4b6c-4e65-800c-3a33fab21acc"
        },
        "item": {
          "id": "ea5f9132-3630-4e6d-b22b-597f4946ae80",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "19933b8d-d2f7-450c-a150-384293f0ab42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebbe7ae-907e-4331-b3ab-1edb8a15075d",
        "cursor": {
          "ref": "ee27eb8e-28aa-460f-92ce-0c854598d856",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "751fed4a-d2f9-4b3f-8bf7-2271e0e46726"
        },
        "item": {
          "id": "eebbe7ae-907e-4331-b3ab-1edb8a15075d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3db9332d-6f5e-4bd0-8e34-a3ed588ffacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ae1aed-d5d7-4c40-8803-35964aa61972",
        "cursor": {
          "ref": "69b5417e-823c-44e2-af22-841caf690aa3",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "07c6a92a-d30a-45ba-89d8-92dbcefa85ed"
        },
        "item": {
          "id": "33ae1aed-d5d7-4c40-8803-35964aa61972",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "11e02ffd-41c5-4f39-bd98-83ddf4d84a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66436158-cae3-482a-933e-e32f4818e27f",
        "cursor": {
          "ref": "c8ddff64-c56c-4c1b-b9e4-72ef78616798",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "514171c7-53c1-407c-90d0-0b092d8fdf14"
        },
        "item": {
          "id": "66436158-cae3-482a-933e-e32f4818e27f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bda55a28-15ac-4123-af75-241b7004eae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7576f8-92c8-4a39-a138-c1837744351e",
        "cursor": {
          "ref": "d8fe5b04-eaff-4529-849d-18456fb3408e",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c23274b4-a68e-4b78-a915-add393902206"
        },
        "item": {
          "id": "ad7576f8-92c8-4a39-a138-c1837744351e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fb9e0ee7-c76e-4142-a892-a391cc5e6eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02817b6-c1ed-4d25-abea-b056f8bf9193",
        "cursor": {
          "ref": "6ddfb518-74c7-4014-b985-fc8e30216c87",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cb2687e4-c4a5-4fe5-b00c-400399d4e8a8"
        },
        "item": {
          "id": "a02817b6-c1ed-4d25-abea-b056f8bf9193",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "26231fc7-607b-4f2f-ac2e-7ed8f0187f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7afd20-893b-4e45-b583-38d6bb10236d",
        "cursor": {
          "ref": "e5690bd8-d4d6-4d6d-b442-888c2790fd96",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7b5f9873-3bde-45eb-9e61-4386ac61aa82"
        },
        "item": {
          "id": "ab7afd20-893b-4e45-b583-38d6bb10236d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8f13ecdb-e27d-4218-aadb-da36037bdd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf24997-9fa8-45e4-828b-15eb884c6bf0",
        "cursor": {
          "ref": "f47f8c69-620a-47fb-84a4-2b4b2e52def6",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "25c63de6-a333-465d-b033-0aff0ea857f5"
        },
        "item": {
          "id": "6cf24997-9fa8-45e4-828b-15eb884c6bf0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1287618c-4c9a-4fc8-8a83-ebd0611800b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e756039a-c410-4d1b-aca1-61ac4f69696f",
        "cursor": {
          "ref": "f94abeb4-2053-4d6a-8e8a-c003133d29e2",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8ac2fe4e-ff36-4379-b89a-289451e33dd9"
        },
        "item": {
          "id": "e756039a-c410-4d1b-aca1-61ac4f69696f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d0a22936-1993-48c3-9c64-83f802fb561a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07caf36-a91c-4abc-bf23-c5cda6bca69f",
        "cursor": {
          "ref": "00e73a60-df33-4df7-954b-d9332fef1782",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "89637cca-9bf5-4a21-90c8-f7815d1eee86"
        },
        "item": {
          "id": "c07caf36-a91c-4abc-bf23-c5cda6bca69f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "024779a6-5108-402e-96f9-68f968d89745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3326235-d2ce-4343-b93e-e001d2f8c173",
        "cursor": {
          "ref": "7ae70662-e5e5-4904-bd2c-9be4478a13db",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f953724d-0e53-4145-bac6-12d1b1035f8b"
        },
        "item": {
          "id": "e3326235-d2ce-4343-b93e-e001d2f8c173",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a96d5886-f77d-4c01-80c8-eb5f44f41559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6859ca3a-d462-4ab8-a0e6-6eb509909db6",
        "cursor": {
          "ref": "b6fd77bd-26cc-40c0-b14d-b292b971e774",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a36efc26-d577-4efb-ac09-5b27cc32a727"
        },
        "item": {
          "id": "6859ca3a-d462-4ab8-a0e6-6eb509909db6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f49ec594-7373-4ab7-8c16-f39e8bb4b34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f9cd35-34b5-4544-b5c6-8dc27e300ff7",
        "cursor": {
          "ref": "72580f01-562d-470e-af75-c53398588127",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "433c7285-5c48-417f-85bc-bc09ce39b8be"
        },
        "item": {
          "id": "b2f9cd35-34b5-4544-b5c6-8dc27e300ff7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dbb4bbba-fa94-4c62-86d9-3a78b024c963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141ff849-3a3d-44b7-bab6-2c9b3c1f0612",
        "cursor": {
          "ref": "6aff9778-3948-409f-b5f2-fd8013c29dcf",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b443d3bb-602e-4050-8655-cce0e6f12c08"
        },
        "item": {
          "id": "141ff849-3a3d-44b7-bab6-2c9b3c1f0612",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "68d0139d-bfe4-4137-8b32-4b7016a8f129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a91792-1ccd-4043-a4f5-e48b33906125",
        "cursor": {
          "ref": "085acadc-66e0-4c8d-8367-429e0627cb73",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3f56a994-1ee4-48c7-8223-3d03e469bfcc"
        },
        "item": {
          "id": "f2a91792-1ccd-4043-a4f5-e48b33906125",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "17e75738-0721-4b2f-b12b-44915a6340d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48896890-ee75-4f9c-b291-ab06900e2167",
        "cursor": {
          "ref": "d8e5f4b0-7d21-4836-b208-06d7839fec13",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3b280f3e-e672-410e-9e82-dbfc13d5c0c8"
        },
        "item": {
          "id": "48896890-ee75-4f9c-b291-ab06900e2167",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c8a693d3-ad12-499c-bdde-ef19351fa3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c98077c-440c-48fd-85cd-d8f563eb9fcf",
        "cursor": {
          "ref": "f6f58cb3-3a41-4552-abe5-b163e145d7ba",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "96033013-c390-4f8d-9a0d-d8d8d5604c8c"
        },
        "item": {
          "id": "7c98077c-440c-48fd-85cd-d8f563eb9fcf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2069a25d-c0ad-4d43-ab4e-1ed2609d1a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28420c88-52c8-48ed-874d-38416015adfd",
        "cursor": {
          "ref": "af013ccb-4710-4780-a165-eeea82288ce3",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8139cc20-847a-4878-9027-006b5fb5112a"
        },
        "item": {
          "id": "28420c88-52c8-48ed-874d-38416015adfd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5c085da1-9ca5-4411-b904-fc69340be648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154d3c1b-c1b0-485f-88ec-85a50acbe5ee",
        "cursor": {
          "ref": "7f4c530a-1ec8-450b-a429-47f88f979ed9",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fb9f41eb-7e95-4633-8ffc-d155038c2f86"
        },
        "item": {
          "id": "154d3c1b-c1b0-485f-88ec-85a50acbe5ee",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cdd7c2a6-076b-48c5-912e-7faa14c0f5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f24cd6b-cd9b-4d0b-b8bb-0d419a24c4a0",
        "cursor": {
          "ref": "ab6505b5-ab43-41ff-b8de-6011abd2069c",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9c335934-71ac-419a-b8d0-8a06fb26fae5"
        },
        "item": {
          "id": "6f24cd6b-cd9b-4d0b-b8bb-0d419a24c4a0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e10f7aeb-fc0c-4835-a53e-43e4eadb70d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a449392-9617-402d-ac4c-49c01a35328a",
        "cursor": {
          "ref": "dac626b9-4dbc-428f-bc9f-56e704ba86af",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "799670ae-a3c8-4e24-b7fb-8581909bf037"
        },
        "item": {
          "id": "9a449392-9617-402d-ac4c-49c01a35328a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "44cac384-e973-43aa-a26a-03bd06b9476e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c29267-71b1-4d38-afd8-367e94a0844e",
        "cursor": {
          "ref": "ba5a70be-f4c4-4347-aadf-54be3259a7ae",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2b800d31-d495-40e0-9c0d-d2896ec81a6d"
        },
        "item": {
          "id": "34c29267-71b1-4d38-afd8-367e94a0844e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6ef42560-81f3-439f-84ca-c110c85e0e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85df89ad-b63f-4a07-aa5e-35845d8d264b",
        "cursor": {
          "ref": "e2dfe8e9-cfb7-4f52-a0ea-681710766bf1",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2e9eadd1-cb46-48f9-bec1-4da9a7526751"
        },
        "item": {
          "id": "85df89ad-b63f-4a07-aa5e-35845d8d264b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "89991425-bd73-487b-9888-9b937e23c50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c848ff5e-d6db-4f7d-90c2-b6e1517d3e63",
        "cursor": {
          "ref": "e971fa33-98d1-4391-b3ae-e85992946ba1",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "671357a1-faac-4f2b-88f6-5bd0c1da1179"
        },
        "item": {
          "id": "c848ff5e-d6db-4f7d-90c2-b6e1517d3e63",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b331eaeb-5c1a-4c99-9d2d-7d97e678f1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df5d063-8dab-4ad2-89a4-6d1f8b1a1a20",
        "cursor": {
          "ref": "a55e69a8-b26a-41fd-95f7-d702ccfb9373",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "739d7bc7-5866-4786-84ab-2d3ce3cc1540"
        },
        "item": {
          "id": "5df5d063-8dab-4ad2-89a4-6d1f8b1a1a20",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e735e9ba-84d9-42ee-b19a-954ed050bf01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce176b91-bdef-4c9e-b457-f6cb53fb2ee6",
        "cursor": {
          "ref": "f3f378cb-e44b-4b34-81f3-5f827f23b5bd",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8e8974b5-a795-4970-8b03-9da1bfd21844"
        },
        "item": {
          "id": "ce176b91-bdef-4c9e-b457-f6cb53fb2ee6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3c74ec37-4a7c-481c-a923-cd96a0747abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e3f20c-0d07-4b58-9754-2b235180462f",
        "cursor": {
          "ref": "b94a014f-7486-4e37-a053-3b530d3748b1",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5bf5048b-fa95-4e8d-8ef7-53fb5188632d"
        },
        "item": {
          "id": "a3e3f20c-0d07-4b58-9754-2b235180462f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "26410420-5d2f-40f5-a868-3730400fdc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc48324-f5a3-4e65-9273-2f111f9d4fe4",
        "cursor": {
          "ref": "1ef36eff-cbf4-4b24-85c8-137454899431",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c36e345a-f792-4443-933b-c26bb9a1354c"
        },
        "item": {
          "id": "3cc48324-f5a3-4e65-9273-2f111f9d4fe4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "529f8f5d-16c0-4f80-8429-e851e6a15139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13734904-1c1c-460a-b942-46164e5be8d7",
        "cursor": {
          "ref": "5cb67ec7-4ad9-41b8-995d-03364de2b8b9",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ff1f3bad-11cd-41c2-a07e-44784dfdea0b"
        },
        "item": {
          "id": "13734904-1c1c-460a-b942-46164e5be8d7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c285a6ca-683f-48e2-8dd7-afaf1b485145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9ddcd1-bc8f-441d-9e6b-c35c4d7e1910",
        "cursor": {
          "ref": "4c1705ef-ff85-4460-9979-0ad21274f9dc",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "eb832279-d72e-48b9-bd7c-6b98147a26f6"
        },
        "item": {
          "id": "2c9ddcd1-bc8f-441d-9e6b-c35c4d7e1910",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "55dfb035-e1ea-413c-8480-da613e9da1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882fdb02-8875-4781-956d-280f59c5b431",
        "cursor": {
          "ref": "b1846959-7041-407a-8642-889bc06cdb21",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "357db308-d58e-4820-b7af-22d0796b5693"
        },
        "item": {
          "id": "882fdb02-8875-4781-956d-280f59c5b431",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a3846784-1d2f-482c-b83e-1b50674e1b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3571e687-fcfb-47e6-816f-e36607b82d32",
        "cursor": {
          "ref": "5d30f6a2-de43-4200-9538-54cd4216db35",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "693f5b72-2dff-4c0f-9cf1-cef4ba57aac7"
        },
        "item": {
          "id": "3571e687-fcfb-47e6-816f-e36607b82d32",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dda154f5-d5b5-47a0-9f7a-934c97d06d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805b2468-2998-4523-bda2-98fbf12bcadc",
        "cursor": {
          "ref": "326d4dd0-6344-4048-a2db-9fca663ce75e",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8f9e8ca1-4055-46b5-9fa4-37e6ceb03e62"
        },
        "item": {
          "id": "805b2468-2998-4523-bda2-98fbf12bcadc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fcc0de22-4082-490f-b05b-5d2179ed657d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cdc4bf-bf5c-4b57-8f8e-3a56ddf742c4",
        "cursor": {
          "ref": "73e0cbbf-eab5-45e6-8712-941d59997d09",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f62bcd94-2b58-472c-8ac9-809f0293e113"
        },
        "item": {
          "id": "e0cdc4bf-bf5c-4b57-8f8e-3a56ddf742c4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "43997ac9-ab5b-48e1-b9bb-da58b9586c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39245ef-4894-4da7-a6b6-9d81ccdb3116",
        "cursor": {
          "ref": "a8a73c61-8bfc-496d-bde4-8f1d3b6ff30e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eb272638-d3c5-4085-b21e-074e285a8f41"
        },
        "item": {
          "id": "c39245ef-4894-4da7-a6b6-9d81ccdb3116",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bc77ab8a-e8b2-47ac-8d0d-60e80e5b25d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d68c86b-2e9f-4861-b637-0eedfbd86ce3",
        "cursor": {
          "ref": "c0798dd7-4196-4559-9652-49439272bb53",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7d26072b-694a-4b33-9d94-2ebf2c974097"
        },
        "item": {
          "id": "6d68c86b-2e9f-4861-b637-0eedfbd86ce3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "08567aa5-532a-4c01-867e-0abe9fcc414f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d13bef-50ad-417a-8324-6586181a8300",
        "cursor": {
          "ref": "48e95857-ffd7-4bee-8b2f-786ecf0fb331",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9f640299-f8e8-405e-a418-0af331b5685b"
        },
        "item": {
          "id": "53d13bef-50ad-417a-8324-6586181a8300",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6782f642-28c8-436d-98e1-d565a059738f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc404818-bbd4-4ada-9d0d-fd8625b155a6",
        "cursor": {
          "ref": "1d8f1105-16a5-4f65-bad8-d60737ed795c",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "96d7c2ac-1c47-45ac-be9a-f7443aea0907"
        },
        "item": {
          "id": "fc404818-bbd4-4ada-9d0d-fd8625b155a6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d03f4b4b-bc9d-4bf1-bdeb-627ee5336637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1895772-de89-4ffd-aa7e-c63a72d66c27",
        "cursor": {
          "ref": "0612be9b-851d-4b5e-9324-a90d10374d98",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "38e9fa7b-e286-44ed-b1e8-d5feedc0de20"
        },
        "item": {
          "id": "f1895772-de89-4ffd-aa7e-c63a72d66c27",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6c771894-ea0d-492f-857c-789b1b508f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e654754f-4673-4a91-834f-236687334f9e",
        "cursor": {
          "ref": "3d3b25c8-57ae-4f3d-acb6-03094e099229",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "60dd217a-a1ba-493b-bb88-ebc456c38d0a"
        },
        "item": {
          "id": "e654754f-4673-4a91-834f-236687334f9e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ca52ed63-698c-451c-8d7d-a67f258c50f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad09ed22-027c-4e21-ba9c-5763e1f173bf",
        "cursor": {
          "ref": "40b48e8a-6891-4bf7-924d-b19c9684b4e2",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "94554fbb-a8fd-43de-847b-d6b020895aad"
        },
        "item": {
          "id": "ad09ed22-027c-4e21-ba9c-5763e1f173bf",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4e7572e5-e13a-4491-ad8e-bae7dff45abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1d69a3-77b8-46d9-bcd2-387bc78b48f9",
        "cursor": {
          "ref": "7440a16d-071e-4fe9-9ee0-259f16125545",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2f6938cc-3ff0-4b93-94db-2c08c7d1ecc6"
        },
        "item": {
          "id": "5e1d69a3-77b8-46d9-bcd2-387bc78b48f9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9a33d8cb-2ba2-449e-911b-f52da19bb3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cbf481-c499-464f-baaf-126dc63983e0",
        "cursor": {
          "ref": "818484ae-306f-498f-b968-6cfa37539358",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "aa5837e7-4653-4741-b5ae-0c358bf9aedf"
        },
        "item": {
          "id": "90cbf481-c499-464f-baaf-126dc63983e0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dccf76f8-1984-42ca-bdf3-5c1d8fa9a835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa6cbee-894a-4f86-a57b-7d25b81d1c2b",
        "cursor": {
          "ref": "faa2f593-7704-4e9b-a8bd-60d1c9042205",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "80d6db75-b2bb-4f4c-86bd-dcaf027eecd4"
        },
        "item": {
          "id": "daa6cbee-894a-4f86-a57b-7d25b81d1c2b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f93bb4f4-be40-42b9-995b-48b6c45a3085",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2666a7cf-d963-4fad-b0d4-3cd82f4e2f96",
        "cursor": {
          "ref": "44fe3f63-53b6-44f1-b40a-7612af4c920e",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5e5fe3b6-d65b-4aa9-b1f3-154cfbd72c14"
        },
        "item": {
          "id": "2666a7cf-d963-4fad-b0d4-3cd82f4e2f96",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0444ba08-c1e1-4913-86c7-e2e9d05d77c8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b538b01a-c11c-40f0-b113-7ac20b6b9f98",
        "cursor": {
          "ref": "8f672310-14a4-4b51-bc7b-7a0e81ba09ce",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5d4ae9cf-6cf2-434d-a65a-fddbc5f9d9f6"
        },
        "item": {
          "id": "b538b01a-c11c-40f0-b113-7ac20b6b9f98",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f6b4a6e0-7677-4a7c-9dc8-e669e4c7c821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "3c68503a-48c1-4e9d-be4e-ce890ac0feb2",
        "cursor": {
          "ref": "08f0ef23-7111-46ac-97ca-57d17f86a1fc",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "83454e77-43ca-4df6-97a3-3c81ab9d5e04"
        },
        "item": {
          "id": "3c68503a-48c1-4e9d-be4e-ce890ac0feb2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "67e2b6b9-9417-4f3c-9ab8-0f0617b204b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "9dd243d3-7cb6-4317-833b-c3f721e87d11",
        "cursor": {
          "ref": "8012e277-cb7e-432a-a07b-32f2369cd5d8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9610408c-6e5e-4b87-acfc-93ca04a59d33"
        },
        "item": {
          "id": "9dd243d3-7cb6-4317-833b-c3f721e87d11",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3a4e6e11-beda-49ef-a47a-60c40da4879c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "b1e77a16-cc7f-40bf-a828-1c6f7340af3f",
        "cursor": {
          "ref": "1dee411d-f22d-4321-aa6a-9575e294f889",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5db20a1d-38d7-40d3-be65-e33efb259773"
        },
        "item": {
          "id": "b1e77a16-cc7f-40bf-a828-1c6f7340af3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6439630-fba5-4a53-9ba9-3068fbe9f658",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e77a16-cc7f-40bf-a828-1c6f7340af3f",
        "cursor": {
          "ref": "1dee411d-f22d-4321-aa6a-9575e294f889",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5db20a1d-38d7-40d3-be65-e33efb259773"
        },
        "item": {
          "id": "b1e77a16-cc7f-40bf-a828-1c6f7340af3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6439630-fba5-4a53-9ba9-3068fbe9f658",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e77a16-cc7f-40bf-a828-1c6f7340af3f",
        "cursor": {
          "ref": "1dee411d-f22d-4321-aa6a-9575e294f889",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5db20a1d-38d7-40d3-be65-e33efb259773"
        },
        "item": {
          "id": "b1e77a16-cc7f-40bf-a828-1c6f7340af3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6439630-fba5-4a53-9ba9-3068fbe9f658",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d69eaf-f95f-4bda-9a66-d78af94fea7d",
        "cursor": {
          "ref": "df736dfc-b3b5-4a39-8d73-135f265b52ee",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a95036a9-4e6d-424f-9217-d221e26d360f"
        },
        "item": {
          "id": "62d69eaf-f95f-4bda-9a66-d78af94fea7d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d4586c38-b58c-4e36-8f57-40fa570aa3b8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c17284-2464-48d1-901a-4cb645c9970f",
        "cursor": {
          "ref": "50f985e8-8800-4102-956f-349ca5be1ae6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d2e71b7f-fa8f-491f-be96-57617ec31ecd"
        },
        "item": {
          "id": "38c17284-2464-48d1-901a-4cb645c9970f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4aab2140-5d75-439a-bbfc-524cf38b1f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "38c17284-2464-48d1-901a-4cb645c9970f",
        "cursor": {
          "ref": "50f985e8-8800-4102-956f-349ca5be1ae6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d2e71b7f-fa8f-491f-be96-57617ec31ecd"
        },
        "item": {
          "id": "38c17284-2464-48d1-901a-4cb645c9970f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4aab2140-5d75-439a-bbfc-524cf38b1f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c4444ac4-2b27-4e43-9f30-4ac68a17700e",
        "cursor": {
          "ref": "44623bb2-9b45-4097-ad8c-ef776ff1bfb2",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "31b6b229-e666-4c6c-a776-21ca30d30a87"
        },
        "item": {
          "id": "c4444ac4-2b27-4e43-9f30-4ac68a17700e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e25c5978-62d7-4692-9082-633ece99c5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "fe009e11-4da0-444c-bbdb-458af609d96f",
        "cursor": {
          "ref": "a7330e4b-9095-462c-95e6-ea57e80d0ebd",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "64cd7409-91c4-45d1-8431-3bee132847d6"
        },
        "item": {
          "id": "fe009e11-4da0-444c-bbdb-458af609d96f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "07db70ab-c331-413e-a0c5-d9547cabb9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "fe009e11-4da0-444c-bbdb-458af609d96f",
        "cursor": {
          "ref": "a7330e4b-9095-462c-95e6-ea57e80d0ebd",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "64cd7409-91c4-45d1-8431-3bee132847d6"
        },
        "item": {
          "id": "fe009e11-4da0-444c-bbdb-458af609d96f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "07db70ab-c331-413e-a0c5-d9547cabb9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1c22ed10-dfee-4fc1-98bf-1383cc138051",
        "cursor": {
          "ref": "42b65071-2f14-491c-93e1-b609fc6eef2d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8a085a3c-f127-41e0-910e-7d9c6ad5bd5f"
        },
        "item": {
          "id": "1c22ed10-dfee-4fc1-98bf-1383cc138051",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e83c307e-e75a-47dc-8316-1524d78ef1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}