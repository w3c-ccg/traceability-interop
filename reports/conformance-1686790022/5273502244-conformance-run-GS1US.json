{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2e0eb932-7ad1-4292-9be3-112ea185ffa1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c5e0764d-5474-4d41-a4ae-8ce4f82a7a40",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7106fc9a-0b7b-4cc5-865b-b5cf3cee35bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a1da4c06-6b63-4842-aa2f-90c14fb9ab69"
                }
              }
            ]
          },
          {
            "id": "6f5e0978-cdc8-4705-a3ba-cc168fa5dfc2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "402d2089-2ca1-4b71-887a-937def76ace1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "965d8669-e515-4887-b3d2-2a733c04289b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ab00f4b4-b6c3-4b12-8a2d-a0a2802b334f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ca7de646-af61-4c89-ae52-b76b267075fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c6c6f0a-c88c-4c14-b0e3-787e5f4c03dd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7a9f5dc-618b-4f6c-9287-d04bab87b6ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dc69e7c-5008-4764-b145-8b3e04ebd449"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "280bc581-116c-4030-8c18-af2c05ebd126",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7652cd0c-6a28-4972-9470-d6db5835ff09"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d698ae1d-f14d-4103-8cb3-abe8db77dfdb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "057bd07e-7793-415b-a9ca-cafd534d6d88"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6928e01f-9e4f-4374-a9d9-aff1b0a70282",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "35263fe2-1c3a-44d8-ad53-47df7b5f4e8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3d13522-39b1-4825-9e3c-e4ddb03cb145",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dbd8e99-2066-463d-956b-bdf44bc10119"
            }
          }
        ]
      },
      {
        "id": "d632c941-06af-47b3-8271-e6335af632b9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bceb085d-7a35-476b-85fc-04035160a5f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73e275d9-2d4a-496c-b9a0-90e7e1616044",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2cee4d68-2c26-485a-89cd-50f716311ca5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac5f38d-3a8d-4ca8-8527-a511b360a4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9e39138-472c-48fe-8b57-127e92a9d6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4e7cb7-ac6b-49ca-a9e6-c7feb7e3bcd8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fe0f91-7dd8-41fd-8bf8-9fb398cee5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "490a7431-f990-4629-b150-71185a2c55fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e686e8-4656-47d4-bb85-f18d0c40254f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa7c4d2-e7cd-4c93-9f93-8f7aa96eba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bad15b90-cea9-4b60-b5f7-39f46a708287"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ad1f2bc-7455-49f3-b600-9e50c1ef976f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91e6032f-059e-43cb-b965-4076a9b7c98a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4af7e5-29a8-40e4-a4d7-ed3bdde6a6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "102db87b-c8cb-45f9-a937-a97e9ea321cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052938d3-a095-49df-b965-e59395cba196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708a6204-9e08-4682-8b36-21eb9f5c26de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d0327970-fab3-4308-8b72-37385f9e4206",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d575ca7e-a982-431c-8670-60c16c825704",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d314d41c-219d-4308-a7c9-29318c437501",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "82cf8a15-1a3a-4849-9108-b342cfd0831f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06a80ce3-1496-481c-acb0-f8971b777339",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1d114f34-7313-4614-b572-7081fb0ab8a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3891321d-42a5-487d-a1e8-1bd2f56d6b8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80262e52-3a3c-4f46-b810-9a44fe24a9eb"
            }
          }
        ]
      },
      {
        "id": "0b9accc3-abb4-425f-955c-b9f75df37ce1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d9f1d13a-c830-40f7-84e3-68b1bab1b1e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b5d706b-aad7-4f4c-9a26-f4de9824a4ef",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f2e10038-2781-4a39-9b8a-bf01dc2fba1e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308b2eb7-7676-4eb9-ab40-9828347caefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03cb4ed-0c9a-47c9-88ef-cec0d4689ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ff1444-b3b1-4aa2-9463-15ab6171e6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b82198f6-61f6-46bb-b7d2-636621029859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484d8105-9af1-43e4-a42d-a1ae16ac41bd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de7900d-a1a8-423f-a806-bc73d01b37f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600e7390-8632-4ff4-82dc-0cb165442b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16576dd-b84f-4ce0-b5f2-e44828db614e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "500f22ea-c12f-446e-816a-f18dd1317c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ace8101-606d-4c1e-892c-1582b18de3d7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a547292-e117-41a5-81ab-b9c42392dbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c535813-481f-4e5e-bfa8-b4cc1b69d5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6c0083-217b-4b79-9037-7f271586b1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3a98534-f4ce-4598-896c-7de25b700e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27244a0f-0c52-4ab1-b5cc-4075885bfe0e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273e0d08-950e-4e74-8d24-d4d1fb2cbaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fa26c5-3ea4-43c3-9ffb-7fedeb727d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3328eb42-088c-435e-ab72-b4a710b50b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "709e7bb3-654d-4937-a569-5fd8304a7ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91192d4d-9386-4e07-85cb-90ef85e48de0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed15854-9b0f-4e68-90bb-fbbfc2e289fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068d71df-6370-4214-bdd2-1644a40abb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ca2021-3f15-4102-9768-5be57d422bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7fdd900-1e29-4335-b48b-4d930be8eea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d6ab1a-7b13-4d79-94b0-9db930167ce8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f67170-8d21-4bd9-b9d4-f3165e7b3def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9989b48-6104-4966-aef4-bc55edc795d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948e9aa7-eeb3-4b1b-9e0b-e568ecb27365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c5da1c8-0fdd-45f0-9076-b6780370a36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80aedfe9-74c1-4170-8e03-bcd0387c3124",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ea9e9d-c6ae-4aeb-a286-00c0435ed00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e017043-80c5-42d9-bb09-fc150b0f8a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ce149e-2ca4-4de9-b8f1-32a725a922dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0facebba-409b-4404-928f-d4a206feb42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea239ef-29dd-4be2-b5c8-67f30a748f08",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98325344-a32d-42f1-ba47-6cc28f2c28bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2741dd5a-8915-460a-ac48-16a0ea4dec96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa71fbf7-a76d-4344-9f7d-8cc1f41007bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b29f434-a8cb-44f1-9b57-54bc49fadf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c543f8a6-2ee4-4044-b84f-a63e72b1ef75",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4db6a9-fd00-4486-8b9c-c05b4711e846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13488c86-2209-456e-8cb9-9b65495cfe00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0be04e-ff4e-49ea-a155-5af823c0462c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b813d80-2ce5-4ff6-9ebb-527f6f422bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9173fb56-96d0-4966-9196-b36dd1263316",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0c85e4-1df7-49de-a346-35c12a43a50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1965d2ff-03dc-477e-b066-01c975cde85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98716a5-abab-443b-a5a4-58b447595599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3507b3d3-e2e7-4462-aef1-60019704d41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72be122-db26-4b1a-bf5c-16d312006358",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6810d48c-62ae-447a-a6bc-920560e5256a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c8d5fd-5937-4b40-a311-75e71c76b6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42a2796-6a20-4538-b601-00aa2c8317f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d458262-572e-4845-ab1c-0087bed9c4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63d5557-4b6a-4f8d-98d6-3df555c4b5a0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83af7d9d-fb5e-46d6-87c2-0aa49e2bff35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8e7dd5-2646-430b-a4f4-a4a3216f2bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacd800d-5f32-4c7c-8aba-2b4da8edf373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5cd5981-147d-4d6e-a1f5-b2a9f178a75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963122d3-2ae2-4a65-b385-6ef34651b76a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec6035a-421a-4571-9234-afbe342eb74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71acdc47-d4c2-4529-b859-2a160bc947a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dafe59-7791-40fa-adf8-f441932a14e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "205b6761-edb6-4eef-9e8b-e9772e98daf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc15b16-de05-4ad1-94a6-1c3e6a717831",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d8d566-8a59-4131-8c31-84ad4e8c6ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceab2cf9-ac7e-477e-9705-233f3a9b218b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23971b40-35cd-4538-bd7f-af728be59b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "205b853b-988f-48ba-92d6-641d57cf76ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62b7575-790f-4a03-811a-a88fa2b94a63",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee8983a-641a-41e4-9de2-edd58fb24731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387e1743-6f97-4e57-9787-fd3ebb017c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1784f62-cf3e-4fe9-a158-70faa70e015a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa64abdd-9090-45b1-a1bf-e9490947399e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd49db97-9c49-4ee5-90dd-495bc41636b0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94839b13-8d7a-46b0-997c-e7079b6ae802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcd8d76-7138-443e-9f02-c5f21a345487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717dc309-7b59-4fd9-87d7-f833f700c796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73ff05d4-318d-456b-9578-4db033e19559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0188ac74-a6ad-4487-81d2-1ea94e0dfcfd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eaf745-ec4b-4df3-98e9-14f4ee7dd0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449c4a53-ff9e-42c6-90a5-2643e16e21e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdaa457-721f-4518-9519-cd4f95fd0639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19353968-377f-4104-980d-774ce9cc7181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35c847b-62f1-41d3-a756-57bb26feced8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d0fb8a-840d-4570-9090-cce15e9ef443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a7e521-e8a0-4ab3-964d-1cc44b6a4cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df782f2-5a4d-4955-a27c-6bfa27ce30ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "349cc880-414a-4785-850a-ca74dc180e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed39d23-0705-411a-be20-b0397974ae70",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c665d9a4-0e18-4ed3-b215-a6a9119bfa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8deb9e-e8a7-42f1-8e5c-f95d1820ad5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6938c901-430d-4712-a13a-1bb0d5aa3eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf71e3b-cdfc-4419-8be4-20b0f0d2c1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c679d0f4-eb30-41c6-8ff2-c521c8089fb9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd22a722-7147-4483-9fc2-bc33f5a69c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be685bf5-d4cb-4d16-987b-84c27e268dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f704ffca-ac3f-48ba-815a-5411e38d90fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb85ceb-9a9d-4a0b-bf26-09e38995d3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240f667f-b215-4369-8974-7c4a3c721942",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd42c883-da4d-4e92-9bc1-7902e5d2ecec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13763b5-9797-4842-9978-e0c604c0a153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0af977e-6a69-466b-bc82-1b00c30825bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "caec3ccc-7586-4d41-8320-99caa91b213d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883301a7-2905-43da-94b4-69de2ebc4dbd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a83e252-e0d3-4def-963b-a741577e025f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf9f26c-da26-4eee-a906-18f788e24ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7677aac-f05d-4684-b684-3f2b42c12b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2efac1-c0eb-4a0d-beae-58328de4f975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0371581d-68e8-4d53-9b63-73f5b80fa499",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fe4870-722c-43e6-989a-cff7e1cbe729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c021d405-4aeb-4117-9de2-d422000771c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed59a7e-05a2-4ac0-8ba9-268680b9cd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adefb1b6-a768-4624-b6d5-27f1e6ccede7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8aed85-cb18-4b11-8c8f-fdc285f2d766",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a16e3a-ca44-484d-b45b-32252e0add0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddca3a2a-f85e-4dad-afe6-e200e2af94d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abb4a6e-593e-4d89-9d3c-96dbc5a80e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "23dbf087-dfc5-437a-a60d-aefa3723a28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc2ab47-ad43-4e72-9299-70f3f8e4f991",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0621d806-c908-4937-b73e-b62ab5a275d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7d607f-0c45-4825-992d-67d7b93d76b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5860883-f3db-4569-b7a9-4f228c6641e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e00613c1-82e9-4c1f-b1a1-52491964d5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfc5e5c-82f2-45d4-9383-11e994367ae1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0f4529-fdeb-455e-86c5-2b1483ee0db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cad1fae-29d2-42f5-8757-480c50938785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2341131d-c4c5-4f3c-afc7-9b18968dbe1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9446f343-808a-4b60-abd5-3d5ef5a94e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882255c5-8165-4745-88fd-803096e41657",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae177b5c-43a9-4360-8019-a7aea4d48ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9980a9c5-912b-4ada-978a-c2f8089aaddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9c0f40-c79b-461d-bffe-c8c086eefac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bfbdc0-ace7-421b-9c89-ec8f97c1292f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9613d76b-cb7e-41e9-8f7a-5a23e9fad260",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40addc1f-d8b4-4fd7-adae-eff93bfcc0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06d869e-dca0-434a-9386-d093c9ff1d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5259492d-2605-42c0-bd88-08ea567475aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24207353-c847-4fd2-b93e-319c7c7513b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b528406e-6374-45ef-bcf4-167836b81f43",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66162c34-58f6-4089-839f-5550ba01b885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838f92ef-a0cd-44a8-a0d1-8e03948395c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe6b7aa-653c-4e0b-9c72-a833dc5e0ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4ab320-d45d-448c-a8ea-53d60f4189c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e10138-5d2c-49e6-ad99-e7b900120c99",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b0667e-95a3-4275-a9d5-e9f216fe47d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba41643-088d-4227-b8a7-4296ecbaee5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61c8e76-79f9-4846-82e9-017042c0f74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "92fb5a53-bffb-4397-b424-7d2856df9411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02394d9a-57a9-4954-8c7c-7c3ae9468a91",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a2b0db-6f64-4a5a-8060-696e4b5e8516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919d816d-60da-4826-a2ed-69775e4b48d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caabae99-6562-46aa-bb6d-9846e465da11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac5d1c6-c2b5-4f44-beb6-09b6a3b7b111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e5f5c4-3f5a-4661-8f89-f1c3dff36cc2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3dc48d-adfe-4ef6-b982-710b4399a1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cda24ca-5ee7-4e9e-a74d-0eb2a92f497c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2144d8a7-aabd-4c44-be13-a2ff77a3796f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e327d6fb-1445-427b-adfb-525e3e14fdef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2946d5-98ad-4777-b19b-6af2de151dbd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a27ca7f-5221-4f58-a48c-7772c36cbf00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932ffa01-6cf3-4807-936b-18533702bc3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0477de49-3190-4985-b0bb-ca81b637f26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4e445f-5b39-4fab-93b3-a71a9422e518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c92293b-9263-432f-b5e6-2a966435ac6b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fa60b7-68f2-4000-a9f9-97fe588feb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3b6b63-c92f-4942-bf54-58fd4f0a14d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755ab06f-2959-4939-87e5-0e9bcb76200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "725df9a2-3964-4e3c-9751-c4b53738ba5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d991d1-cbf4-4824-b0b5-15db07ee90c7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75dd9456-35a2-4178-9e4c-f1c856984236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8166793a-6b54-4d5b-9c6b-0cb3e7a95dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a461d8-4f38-4602-a60c-3b3d4b6cf494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec69054-1894-4abc-923b-533eb130ea7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e41d366-2fa8-4492-8492-88556b8709be",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577221da-a99b-44da-ad9c-6d99040863d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d6c8c3f-7faa-4ed5-b97a-b11d475e2af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56081df-4e3c-45b6-9d85-9e5d0d92c789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29717234-f3ce-4b3b-b1d1-7222e0363229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e03f27-1174-46a3-9965-0f34d530775e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43b12a0-8edc-4d2c-ba44-3fc7fafd941d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412a7546-7de3-4b65-a8f6-6f569c71a1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e013d6-90f5-4502-b453-7bc08b01964c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7902c4b8-af54-4951-a813-a4592f30718c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fc098a-cb92-4bef-a0ec-70d751d06b7e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5c606f-e088-4a6a-aa7f-e0d602c354ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b52bea-151d-484d-b70f-55a35a562ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d96713-793d-4045-a117-4613c8e09886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "61b24d19-86dc-4455-a352-b1827036a6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f06e2f-8a72-486c-8b9c-27d4eaa46da4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27913dd2-b00d-4d49-aea6-bb8010ddb5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d49e74f-f962-47ae-9c5a-669c1d7093bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910a0dcc-7c99-413e-bbfc-c6436ea874fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a843c52e-08dd-4adb-885d-02c451d31aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21c9772-bd00-470e-b2d5-47c99aa338a5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4769760-1961-4086-9f52-15b75c116455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a11eff-5cd6-47e9-8b7b-de2306b70c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bdfd03-9440-4e43-b353-00c1e356b09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6483fc98-1576-4ee9-86a2-0e82bb87e0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d4b4ab-d1fa-425b-9287-e66c5d4e497a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06597160-a947-409a-b081-c2ffbf33cdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc09ca1-6077-49bc-96e2-be0b1c1c4ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c333ec05-29b5-47f1-bf2e-513571025390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "382631af-3456-453e-9a62-f0a9870eca9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e29c32-ac9a-4f64-859b-ccaae5127f87",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ce49cb-28e9-49b3-9a30-47bd7957546e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1840b2a8-778a-4060-b30e-a1a54016aecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffe41d9-595e-4320-b65c-f98b6748fe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3b8a56-09f0-4392-9f0e-827c8e4324af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e127125-50f2-4b06-afcd-c19d04b5d119",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798e61f0-b938-47c0-84e6-b845a555f6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72f9c29-85fe-4e1d-bb37-397471034a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef79f034-cc68-43cf-95f3-271d51348b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f92c86d7-dd2d-4bab-9176-bd294450d324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7764e61c-7619-4277-86e3-259b81e73087",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76458343-4f88-4815-aae9-66101736e302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a903c3b0-b02c-4c26-b7b7-76ec54f03c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594039cf-1524-4ac0-af84-f811fe4dc633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0db9fd32-a62c-4deb-88ab-acfe8a4d94ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf4ad29-e5a8-4d8b-8f89-b570c89bf30e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91751a84-e8b9-40e2-924b-0697d0df39c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec28f4e8-8386-4774-8fba-e20dcf2da930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6540e9-4c97-4e04-83c2-efcb88a3cbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee191128-8e17-45ba-9b44-97106846d3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6273386-a45b-4d2f-8e22-f54e7c8a0cf1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9a9237-e1e9-44f6-9173-653b8b4f389a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e8b3ce-4819-4580-b7de-54d9964f5635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c10df05-bc44-4644-8a71-c35d01b483f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3d4e8f-b8de-4ebd-a866-6e9883cd0588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab12f3b6-e574-4405-bb0f-ef0af249868c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f533a5c-2c7d-4ee4-a813-584422c28c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737afab1-68a4-4592-aaf1-2081f6ba8611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75830df-641f-4549-91ab-8c1e079ef0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23698dd1-5dbc-495e-94e1-8ebfe9e4761a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d345e1-46be-41b2-b231-6052c5eb6554",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0343d5-37dd-4b9e-aed6-ac2f04648492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4edd6e-a064-4774-b82b-287d85c84b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888b11c4-eb84-4d91-9b20-1206aa4849f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f83deae6-63c1-4b03-9983-55b9f69e38c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca6da7f-b546-4f45-b5ea-9b97bead7d39",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f883d758-44ae-4067-8f73-032845be2b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6165029d-89e7-4a19-9f8f-24b040811c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564c83cc-70e8-4693-b0b9-c00ee1128fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d326303-9338-42ab-91cd-1ac20fd73928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e17aa9-85c1-4a0d-9f7a-8b92a3d4e0fa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c9f32e-4b54-4f18-b910-00e970fd7194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a030bf42-b143-4f76-80d6-b314f246add8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5aaeb9-6db5-4a33-8646-32f072973eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee17c15a-deac-45e4-b206-4f152b15ef24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b847d5e1-b00e-4ce8-beab-36412850bcba",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b47200-4cd1-455e-b271-5eb482e72db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cda1248-2e42-4ed3-af47-4a58a8f6697d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e793acc-57d5-40a1-8308-c03b4f177d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f42d7113-9f99-485c-a175-e315e117d99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8375ec2-70cb-4196-ba56-5451e6ed24a9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78769458-199e-47e2-92cf-19990dea0550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca94ff8e-f4e0-47e6-b87c-02faeb402671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdaccd9b-0e2b-4d1e-8d48-6f9e7be899c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8efe822-5dd7-40c7-a81a-1227e1d14013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f70d81-bf2e-469c-8b1f-70b56163e15d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0357a0-d0b2-467e-8d53-fd1c94b00301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0b4259-93fe-4e84-b602-49983a61c868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b97da83-28f9-4dec-a1ff-1ee939f159a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c382b8-2ec2-4e5e-abb8-f9f6dc65db96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20395732-c841-4a30-9ba6-f51e6d50b829",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9394471-baf5-4bdb-87ef-38609c1ec1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120c3066-947f-485d-b205-fb99d0c21a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15bed30-9118-4f5c-948c-eb60f9de8bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed103251-4f27-49fc-acc1-1c80cec1909f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca568d7c-dd77-4ff6-a83f-e20082bc9144",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f6e89b-b871-48c3-a2e5-9e190443b753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c57c955-311d-4b15-80d2-6d77a9eaec72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb640eb4-ce7d-4c57-beec-9f440b57f6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c6757b-6a44-4617-886d-196713d5f354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77353f6-7a4f-4095-bfd1-3d775e5a781a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690a4678-f609-4210-a3b9-14abafe10de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3e7b65-8f7b-42fe-b1e9-32c660b06d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a43091-fbc7-4928-8bb7-a6b1355ffd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d51fceda-caeb-422d-b52b-119463b883d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80143dc-68fb-473e-828a-b1ccbc3648d0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644e0fa2-cde4-4e3e-ab31-005be7e0c46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e596687-257e-4613-8fad-8aa5828b2076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a114cbc8-3fd9-4bec-b741-d20a9cfe3f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c7f484-5b4d-49ff-b590-4709caffc19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e9ecb6-dc9a-4546-bfd4-0ddb75d0e00c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6000ffaa-65cf-4507-aa0b-469f382fc07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f70431e-4c98-49b1-936f-5cac418de754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ff899d-5e99-4d41-ad70-9d6560e059d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "902aaaf2-8bcb-4b6d-a595-ed7374d8b03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b273bc-e4ba-4a66-85db-16e858b9ce2d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cac3fb8-b2fe-48a3-8995-41eb3a17c6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5d5a0b-3b63-4903-bfb5-426ebafc54ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ca1362-d536-4ef5-82c6-4dad3be47565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1abd1dff-2ca6-4f12-a3dc-6b4e60de33b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b71d4b-1352-44cb-b7f6-39dec7e253eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a715422-5f63-45b3-b251-d0546f4499d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02293967-f29d-40da-85ff-bf14ef82c22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15015e49-d5f2-485a-b8f3-9d9df5386118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf59335-a53d-4a40-a9e6-873f8bb05095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2e10ee-185e-4771-8fe2-c6054d582c65",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19c8bbb-2996-4491-8839-a87968ac57c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e057a3dc-e116-4b8f-9cbd-a1411817c2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c907c78e-aa4a-4b27-8f6e-d3f5394e0837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac97bc1-853c-4c5c-bceb-dcaeaac7927c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7658895-bf9f-45ea-80ea-606f2c8b534b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053807b7-439f-4597-9a38-f4dae8b1e56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42944bd4-6045-4862-8428-2191ca5addc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41784ec7-49ff-456f-9177-eb5def5e211f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb8c86b-8c39-4bcd-87cd-8d468942e604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a58e24-0d13-4e3f-a3a5-34a5455af2e4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbe8c6f-6eb9-4cd1-abda-c0ff5e3b42ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4015bb85-4ac7-48f8-a57b-bc8d33e5e6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80910d36-1826-4a33-9600-3ca8684cf5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "79bf170b-cbbc-4305-a40f-da14a8ae0f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4949cc04-5e36-49b5-a1c4-7e14261db965",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a321cde9-d583-418b-8870-bad8c58f7472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23d6892-44ab-4f52-8ef1-88e9ef221852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19ac61d-55e0-4e86-be3a-8a285d942aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a205de13-77aa-42d9-9df4-e628b42560a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98be69fb-5566-4524-93eb-c26bdf392d55",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc227b5d-413a-49e8-b98f-01041a6c3bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ab5fc6-c78e-48c8-bddd-5fa7c7e83df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b666b985-8ba9-4bf2-8945-815f62941ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f87a91f1-2efd-477b-ac14-456aa8981750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db3810a-fc30-49ee-86df-cc0f8927582c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310824c1-bf17-4696-ade7-a1b9a84c1773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeccfb13-9284-4260-ac99-b74d4e2acf19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a232c4b6-453c-4726-8724-fd72d35644ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04fb0a6f-a08a-4787-b9a7-dd7e0518e5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee58c021-9923-4231-84e3-6405d35d8bfd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915c3b2d-4a1c-40e3-9735-879727b79489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e18198-51dc-4d6c-8aa8-5f79f77b0092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1512753c-206d-4aa2-b1ef-9eacc8d71c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a57790f5-4127-40b4-92d5-743feaf5772c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf6bab6-ce95-497e-96fe-10aa7c7c7849",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002bcf71-c050-47df-8f15-34774ce02b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28ead18-c969-48e3-98cf-d492a58e5b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f0bf8b-d3f6-48eb-a436-00bbc8da5eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f1f840-9f12-449c-8243-1659c3d93f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85918c9f-b2cf-419b-a229-40030d9c3c57",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b1fa8b-176f-43af-8657-5dd78ee4c909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4939849f-77f9-4bc7-8ce2-14ba567bb442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610ad956-6833-4eb4-a8a0-1404a9ea6c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5f43a8-2454-46e6-9c31-c417aaec6e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8df6ac-0ab7-4c89-9d5f-748f474e8915",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf0d9b9-0189-41db-9d5f-2a98127fbd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f790793a-98d2-4d08-b038-1697b00583d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fadc03-1781-4a42-bd93-bd92b3a427b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e31a2233-0f23-461a-a3e9-3f083a7a43ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6365e726-d557-4dba-be94-1d80c7011641",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80338aa8-6f82-42bb-a0c1-900acf4d1c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e14592-eaaa-4d2a-9ebd-9b9dcf046153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ce2ad3-028a-4e8e-b316-4d9587026047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "101eef90-31b8-48aa-8666-c94359639f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3caa4aa-0787-4642-a2fe-e242a81ca194",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98d28ac-e75c-47d8-aa63-c0a23a19602f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f52831-5e7e-47e0-86bb-616141382564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad4f303-4199-4a33-8bd6-28da95f057cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8d0ca6-db19-41d4-bebf-53b71cbdf2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78536669-df58-4cf4-b09c-ae17c1b97603",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65ba2d7-1da0-486d-84ad-c708f663812b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b587c1-f4b6-45fd-87c2-9fd9ddd5000a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b09e4d7-6f31-4394-9489-d0a3bd5f1cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f872b75d-4c29-457a-8035-a56edc96b75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c6e4cb-20ef-4927-b0fc-f64bf4c5f5e0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928e2e7b-6095-4cd0-9abe-51fb364a0fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56d3fa3-fd7d-4268-a817-da67c9f0e58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a27009-cff2-4ea8-b61d-283c641d96ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f44e928f-50e8-46b7-b0ae-ff33cbb6d221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7a908a-9a37-4f1e-99b7-dbe1ac3a5341",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0967d6ff-a4ad-42c6-b304-f69683c3b396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a227c16-628a-4fa8-9b2e-4dc5978de967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99576e7-c2e6-4228-b5e4-a5af6bd5ede8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49d195ca-e9e2-42e3-b8fa-4ea25114e581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e9e8e6-25f9-48b3-927b-f439f426fee8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29718418-d429-4063-8af4-1433977872bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3522a9-aa72-4988-a543-ff5c125fb4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fbd367-ff05-4323-a17f-8aa5ee263765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "905760aa-50e6-485d-b692-dfaf14e8af8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17294cc4-9f16-4218-9df9-9a254f7494cc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da661dab-d4d2-4be1-baeb-ca731eda9ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8734252-e423-4e83-8b51-712084acc11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b460cf7-e2f4-4f29-abc5-93e8e0f0a748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb5b031-761d-4189-916a-18cf0205f880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddba21c3-c15a-4d49-9afa-644e736d63d6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf36dc2a-c22d-4231-a760-06e62564cb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d75dc0-e91b-4795-a05e-1f942b7a7785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fc5836-b3d7-4dff-aba8-84c06d0690c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b405e59f-82fb-4cc8-925e-11d118b513b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df22d401-d4b6-4e26-8207-3e85723a8f0c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33511737-09fe-46aa-baac-93b2e32e2652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a3508b-e7ce-4b7f-abe5-1a5b3137b2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895f89b6-71c9-4c72-af33-c20a173dbb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "589eb174-6599-4a68-85d1-a0fe7f0e7140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6b1d68-f631-4935-a0e7-d656ff53b908",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b13c4a3-372a-4287-84d6-62d20d70fd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d557046-e1a9-4574-b24f-3cdfaaa55d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050877e5-b90e-4238-a0c9-65f3ab2de5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8ba099-5ee5-490a-b736-5e920ac34947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef93a3d0-156e-4bb9-8989-c5fa9745c99f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128fd285-13be-43d1-87c9-8da52d357b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ef93cc-b098-4c88-92ae-4a87e581b987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e79cb3-93fd-4959-b398-8dd7483d4658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d867d3d-f688-4512-9aa2-2490071c7afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2643105a-447a-4bac-923c-c5cc9631fae5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d0cb61-f71e-45d6-be01-e9cc32388163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cedde8-8689-43aa-9c95-814d130e29b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569f0e2b-61d3-450a-9102-9d7cc3ee60e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1431da6-8963-44ee-a66a-f96f6baf226e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b485b73c-5727-4bd6-a633-e19314e8f9f7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723efb70-a507-46c7-b660-83ca60ea8705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5db972-df56-4875-a87d-c0cd3177d6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c2b893-4b67-4922-a917-d3d99d984a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "626ac488-6d67-4ad2-bd59-d04c8637a809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4ed7df-aa25-4044-a5a0-a260abb98f51",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b9cb8c-38b7-422b-a898-7de6749c89d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a699b32-8242-412c-a099-bdeb43502a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99f0071-50d1-4994-8e6e-6b425e29ef42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37e3e5fb-18a6-401a-a396-00bbce55eb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6dc001-5ecf-40f6-9e37-71efbae29ee2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63df128c-e06c-4246-a51f-345ed8e3bff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b553c66c-ad0b-4e06-949e-c5ef8758f2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdc66dd-f1fa-4df3-aaaf-0fabe27b26a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d277ae5-0389-4b37-9bef-7f7779394a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3123881-5a6d-48f5-b9ea-07ecae15c17d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556e4dfd-f85b-4616-976f-4cb8d72dc76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf23182b-1035-433d-baf0-ac92d1168aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89eb1178-a5ae-458e-ac5a-5437f1e9186c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb69e401-cf8b-4198-8c92-b6ab6b7a63df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ace631e-f137-4d4a-9351-60f08a7a19cd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e0078c-6c40-4677-986f-5b2690c651b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2cd9b0-b7e7-48a7-906c-05e0ad76af5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea72df6a-5f2e-4497-bda3-ae415b672d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0851248-83e0-43ce-b75a-b1da9e0c9c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e0b5d7-aeb4-4f30-9ce6-807f517c60e8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca681ff-63f3-4859-87dc-12ba5c674356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfad2e8-58f8-45af-81f0-357fb01c8c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5455da4d-af4b-4cab-b9f0-34244e244ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e23ef076-7291-4b98-a460-0a2e4717c2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce561e6-7a96-47c0-b59e-a88100cbd103",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab7df00-01fc-4e7c-baa9-01f8bbe0703c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4318800-7dea-4c17-81d8-b3ea713debae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70264bd9-86a5-4995-8f39-a49786e63810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cbe2dc-245b-4c02-8f7b-eb3b22991bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70626997-9cbe-4a41-9ac2-0e9bd7fa1606",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d7d03b-ae58-442d-89a7-5f2f7623d90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e25771-da62-4ac1-8d06-77a540b277e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e07336-2f70-49ee-ba70-d13d6dc0dcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33986c22-13a3-4e94-9abd-21b7b083fcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0caf4ce-6f6d-495a-bf09-5997996bb959",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642dbeda-b8da-431f-9a71-fd1b7364072a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df99c14-199f-4757-a1e7-4b9d67c3bd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52bd68d-1fe2-4306-ae1a-15252a547566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "70cf1f9a-90a6-49f5-9e33-af777c155cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d704d85-a69a-412b-ad8a-7828b2833c69",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757fbf74-3433-4209-96dc-dac5131f682b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1e0592e4-cf46-4c27-aa98-ff2904839e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e7e1a3-fdad-42cc-941c-e50ff5d54cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8b579a-2eb1-4c8d-89c0-c528a948b060"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2515a6e5-52d6-4eee-818a-2177633960bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acd7e9b5-8356-4a0a-a722-040354a3d70b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cc4ba2-e05c-41b1-a498-384e7d03e43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4797559-f8f1-4913-b064-6a43b13dcdc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5830d9a1-50c9-4da5-8604-4a85add401b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08d03b4c-1845-4710-937e-35b11dc0cd7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c56c8040-1d16-42fd-ac6b-266016668c79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41650168-3e94-4f35-a0cb-9b3cfd68c4b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b850f660-8fd0-42e2-b193-0efa17f07bc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81c69aae-ce08-4522-9bea-55e7dd0c37d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4f1e4de9-4c3e-4210-93b1-1b8b3be64c18",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95fb7c15-7256-4a48-b71c-d4ad1cca4947"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07552583-e0c8-4c5e-a9ae-5e43df5d3eb6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75b13112-4653-4d8f-8559-bf903933b100"
                }
              }
            ]
          },
          {
            "id": "8b6ea178-e103-4142-9b33-536664f209d3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9bfb7010-030a-43e7-93ca-d82600711286",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b360c342-840a-44b3-927d-702c23205ab0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0cd60a2-b141-4a82-9ea6-0de0a4dfb053"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7186302f-c8e5-4ae8-af62-1ba4e5769992",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25f33973-a8c7-4730-917e-8f701ec5f51f"
                    }
                  }
                ]
              },
              {
                "id": "a3322b16-7246-463b-a060-03fb1a4561fc",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "836270c1-6ff4-4582-8546-b49feb24569e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3feaec6-bbb9-46f5-a791-2dd2322b96b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e21f8d65-785c-4189-a9c0-ae61ef6fadc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "09fb19e4-85e9-4254-a8b9-33c03dba0214"
                    }
                  }
                ]
              },
              {
                "id": "9bdb9bca-d466-41fa-882b-c94e0245b82f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7080b7b-bf49-4abd-990d-70e7db262c84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7847908f-99b9-4f08-acf8-c3f4985024f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60184a7a-5b29-466b-a9d4-40b346f050c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d3c8a1e-811e-4a00-9e4f-96a0e2e9a906"
                    }
                  }
                ]
              },
              {
                "id": "0e222633-b2b8-428e-bda0-f6f6dc00a236",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b4112a0-6fb7-4500-9cdc-329bcd6bd4ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74ff45f4-f96a-4403-8954-d79cae5b3963"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b917b55-43aa-4eea-acf7-bb99aecd13d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0563e636-184e-4acc-92fe-d331ec7a315d"
                    }
                  }
                ]
              },
              {
                "id": "8b96c17c-0fa0-40e7-b371-53c69b017b9c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f27981b3-e146-444f-b052-42bfe8afb8a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a8be32d-7661-45f4-bb86-a27d532a432e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04ab99bb-7485-4753-9eeb-d9b9c3b89ea2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "67e3ece9-f1f2-4c7c-a862-81268d73714d"
                    }
                  }
                ]
              },
              {
                "id": "d0aab097-fd6b-4ad3-ae4d-24bceee1d54b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2eedd45e-988c-49ce-bf9c-1bcba6e5b94f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b21b2673-6e97-40a4-92f9-50777eed25a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81ffec27-4915-4092-849c-e902b17104ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ded017e8-2f56-488c-bb74-b4712636ac50"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19eba038-87af-4d6a-8bec-5f23031c9e9f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b26df970-f229-4d2c-955c-2c958977fde2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "809044c4-d7bb-4444-b431-7db943a9f1bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ff05290-6d33-40ca-976e-eb4a98790921"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dda39c81-3dee-4ce0-bff6-f2f3c5588f64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "744c0676-c715-4cee-b859-ac70eabbbaa7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6079c277-69d2-4b75-b9cb-b431ac3c1f4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bcb01dc-1bf8-434b-bee6-d9ff4c99f5b3"
            }
          }
        ]
      },
      {
        "id": "be696e55-3f59-4142-a6f9-1460275365de",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "91c18b92-c23d-496b-ab6e-db7791254caa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c99f608-43a4-4154-aa4e-c368b4064f55",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4480d012-659c-47ad-8ad5-fb771f139dd6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6f3ce7-8e9d-4eaa-a4fd-a91b30ee2a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6615219-3a11-4d29-af00-efc87b46b6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d046607c-3a7b-4d6f-8d03-37a57029b601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae352ec-fca1-4718-8c66-fb67585e2ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac3d7b7-b3a2-473a-8b06-ddf4ce9ba3a0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f1f507-b93d-4624-9537-bb09afd9b853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f00e326-5f6b-45b0-910f-faea805a1dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581463a7-ceae-49fe-aea8-0901c9baf3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aedf0ce-a84a-4646-86fb-f222a865932a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46124d7c-398a-428f-b551-75df73718bde",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8c1f21-1220-4591-b96b-e07882cd3ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d69a112-23cc-4b67-8585-0741d524cfe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6b1a21-740b-4376-a83d-9261972f0601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "041fa414-346c-4cd4-94b5-1f4adc48760b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac5e4b2-5929-43dc-b949-a012ddca6f96",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48233eb5-d4e4-40e3-bdfd-e8f45fe50d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e4a107-375e-4008-8491-9321039d0318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88571df5-10c2-4edd-b8cc-11024ecb9099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f662db2d-7e9e-4e17-98eb-40cca2209f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123f8ca2-d746-4de4-9b06-dfd541a5ed72",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6aa499-ba19-49d4-bc7d-a9951f34f24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ebdb1e-9c16-4560-a417-9d9befc1cdfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef72d99-b5d4-4152-bbcc-e0088fe681ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2711a2a4-a243-4dd7-9a07-5fb30a5b8464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c94048-50b0-4fdc-8870-a3cccec2cc9d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488bab10-36bb-463d-9e8a-e8b2b72d8f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6e2d5b-a101-45f5-ad5a-a911fb201bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbff2d3-a094-45c2-93ee-059643a4a345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c664342-cfd5-410f-a84a-17bae62311d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0ad3cb-6449-491b-987a-c9030c8eb935",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915b1bf6-c174-4be0-aaf5-75ba114443d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47011feb-75e1-4054-9a13-4dfa28aa8880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0cdb49-6562-4332-bb87-5c608d2a8bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea285ab1-dc33-41d3-a634-de68b579eab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a987cd-d5ca-4fea-b40c-13d7cf4bd5cd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980b58fa-4f44-42a8-a07a-ff35362dd4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a22b62-6bd7-4c8d-9479-89ae1aba0c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc56168d-81a6-4cd2-8870-bbc0431cb388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "120c87ae-21a8-4c0e-99fa-d453fbfca107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051196f8-76c8-40b7-8ce4-5eb4f5cce06f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9776dfd2-d9d0-40e8-9285-17c0383d3f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946fa626-d058-4f8e-ad0e-f75c3476a77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f228e271-4d29-43f4-855a-c143f3c30af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92c10629-dd0c-46d2-b962-d1bb63f2a94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f386b81-5492-4823-a25c-10e71b260e59",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd99b360-ce81-479f-a693-3c467f9d0ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71f3e47-f81b-414b-8b87-ea54dcd3ade6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb31dca-2a40-4f2a-a494-941997d330a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d41f994-ebd6-4f8e-8f57-f96608914f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20f0a54-4384-43dc-9f36-e923b1c4b1e2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3e9318-48a0-4ed2-9f22-5981ad9245d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f9f0cd-b86a-41b0-85e1-3f612acf5419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c2bb4a-d1a7-440a-94d6-d03dec5a0903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c7c861-1c5d-4083-876e-e2f7fdb0d544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e7527c-a7b9-45f2-bb20-beaadfa1820d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b700873-322e-4537-96d2-cd2027314a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a443dd7-27c2-4305-b969-b2ecc43f1537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d411c6-827f-4855-b3a1-d77b9cedf49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6790a1f-9f04-46a0-b8d8-52822d51565e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b0c525-ce29-4738-a53e-85d2f5d58c76",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384897a7-73d8-45b0-9f18-66f65387bc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87c0942-d5ba-4c9c-8de1-2c4dc1eaaf46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13875002-e94e-40f0-b4b6-ac98ea9f209c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b0b4d1-21f8-40f8-88bc-0a14650f0549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c60240-f020-43bd-860c-00fc3c87bee4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead6c04b-e160-4a80-8050-d4c6c31f3c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ca0b92-6a23-44c0-b44d-6876ec44d8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374ba2e9-5490-4eaa-bc2c-ca85ac46e05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bffebd7-9acd-4b44-8093-f92a12865e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e4dcdf-b24c-44e2-b778-33ae6fae56fd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f7c7b8-54cc-4aad-af10-47d6dcc58f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac87f31-17ac-44da-aa25-6608dc390a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec937f09-b660-4b1a-821b-b7003363edc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceeb8c07-2025-4822-8a3d-5a5a579147b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73127098-f08d-46b6-a848-25786be843ef",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2861f35-6d6a-413a-9127-697833c1bfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92298a95-1172-4074-b2ce-f937f83b0b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792f175b-6364-4f6e-8699-7689a2d80331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a15038-f33c-4a4c-8e87-2b357d679a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8108d7-18e1-4888-8fbd-3ded4f7f87e0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae55e118-3bdf-45f8-8897-baef848660b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83988ef-4f23-4234-9ec9-137f7448db93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc64830-113f-4395-85ac-43742991c3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b144ce5-82b7-4cb9-91f2-9970248eb908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ac00b7-acf6-45da-a2a2-dbc1731a1be1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4527e620-1f7b-4cbe-a9a9-e7169a91fd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42731794-b82a-4230-a4f1-7164cfb38982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc1c680-b301-4bce-b9c0-8dca1c97b807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d115527c-557d-4397-b243-cfb2d6133216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504318c3-90f6-4404-8636-e339f63574f5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940bd4ca-7755-4d05-a1e2-34791a4e44c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4162438-e57f-474e-bc36-c47b4abe4857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c1306b-c5d7-4be6-b36e-2374c4c313cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83429ed-c49c-479f-af1f-e106e0dfc99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b868e3bc-1240-40ed-8da1-5956725bb52e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfc8da2-8c73-4c14-935c-e79ffd89c784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172759e3-58d5-4444-9db8-35bb20e4412a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00b9c8f-d0e3-4e6e-84e0-cb50bc39bf57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc2d991-2df9-461e-a306-cddfc63f183c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed908398-f59d-4597-8b23-2ec299374780",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448f0627-7744-4616-a9db-ccf17fb5230d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bbf6e6-60b6-46b4-ba34-09f6cdf1ba36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38900b88-3480-4a89-945e-ca603809de0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e608fbd-e060-48d9-8933-ed00059c8aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60238b79-7362-418a-a5e9-31662e93c9de",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c014a81b-afe0-4408-8b45-5b03f197945e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f3244e-9605-43d2-94ac-1a7900224b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e1f05f-48aa-4ff7-853f-8917f93b1f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9219b9bc-c153-4b24-8651-16d72aa1a427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc4140b-b555-4115-9047-5ae4e8adbee2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596dcc5f-86b8-4af8-837c-4048cffb9c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c106ce91-2829-4e9f-9e85-4277f5445e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e23e846-6e10-43fa-9a7e-39fe4e6703db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bee5bbc-a87a-45ff-bb0b-b4dd936d9e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e463e7-f989-4024-a5d5-8604896b78de",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c444e14-e6f6-4fc6-8936-a658d416f033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c705247-966e-455b-b9ef-d45e1ed86f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1f6aaa-5f71-4da7-ac76-7234d86779e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa92698-efa2-4b84-aee1-2a0771507d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aed64e4-1c7e-4338-a08c-be1bf1514660",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95745f11-51bd-4bb2-bcc7-800e17d59534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bb5ff7-7801-4652-96da-4f8dc20d84e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06129b32-95f5-4b41-a17e-e8238363e020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4946b7c-b4a3-4b0b-a27f-2ae12fea2dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e21433-d32e-4059-846f-5dc1f644b842",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ff3a0d-6051-4a52-81c9-f7bf79285df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca05087-5260-434e-873b-8218bb7207a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0e346d-942e-43aa-abe3-352648f6cdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "661c6685-bb1a-4404-a89e-4cb2223c276c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f727893c-b175-42de-8263-082d3094d1fd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6248c394-322c-4ed3-843b-87c8c277ed2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8929099-b917-4e05-8b62-1756f57fae3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e74683-b13e-418b-95a6-85c0639df116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5518688c-59f1-4513-9d0e-7925ff864ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c2add7-ff52-415a-9da0-8cf97b1c74c4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ef83e7-b1b5-41f6-8f34-7c0f23a5e702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc962992-25cb-46c3-9f3b-058aa20f0e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bf90fc-d365-4a0c-9e2b-716121df0b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7732c7a-4bd9-4707-a5b9-d587355aab65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddfa611-ec60-4c09-9494-b45d18817232",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf025d26-7e14-4cd7-aaf2-a046df3c8cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad608bf6-66e7-49b6-aea3-bbe12965dcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef1ffd1-1ef0-41f0-b136-7f7efe9bbe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "564071ea-b885-4365-91c0-0448c1452c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f0879d-4fe0-44d2-926a-2d8e0a80354d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3987db-069f-43e5-b124-4ac4259334c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2720ea8-4f89-4b56-9416-d586d6e84f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8caee0-6ed8-4a3f-8566-e839ec3a2829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf923690-7d15-4c8e-83c6-246fddd56ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdbc196-49f4-4d8a-a5fe-32c96a235e8d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ef0577-5b05-4f2a-b58c-5b1f66b07607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6dc16e-0306-411f-a175-23e7282b9f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116ee7cc-836a-4ffb-9cbe-0a1dba4bf210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7bac41-a7cd-4b3e-afa9-372605b01e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6096fc9b-ca16-4b60-b25c-6102a9315086",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25172f3f-5119-4aef-badf-c41ee09a4524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe5c2a0-f98b-466e-bfc8-388eb9c31aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbebf7b-78ee-4f75-bf89-d6e6e1cfcae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdde182-467a-43f8-a61c-750c5cfd1110"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "40ef078d-ac53-4482-8313-8347b13031b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d08799b-6467-4955-acb4-e218ec00a4b1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8c5045-9b8a-4d4d-a6eb-b7d4d6d9c0d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a40eed-892d-445d-b9b1-06d477bd122b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de3176a-13aa-4932-936e-d7f1bd6c03db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9ca21ff-a1e1-4c94-a4f1-6fd1eb4bbadd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e5bf46d-2e98-41c7-855b-c51461318741",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4d0773e-15a3-4ac8-9abe-60741f909ad4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7822acdc-a2c1-45b3-ab20-adfcf87ac52f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a66f090-5c47-48b4-be57-07e2779e9e6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67c7d87c-7547-42e1-bf3c-5149f9c953a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1dd38fda-1ea1-4ccf-94f9-ed6f491ea7eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "757d7ea7-ead7-4073-98d0-5c5262f47016",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5112d9f3-695f-4ed9-ad54-e0bbd6bebf71"
            }
          }
        ]
      },
      {
        "id": "adf9c358-dd59-4420-835d-0786d6d5991f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b274b176-13f4-4be5-9cdd-ff01c0b40f2c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6f2d363-b2cc-4b15-9d4b-a872fd87d4aa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57b03d27-9c7d-4a5e-a303-2d8b73350400",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d80737d-3217-43cd-867e-6e74ff7e6d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fc029a-951b-41e5-a0bc-e8a35d15ef6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3a73d8-0466-44b0-9a92-dbfcbd3b69c7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e320f5e0-ca83-4113-a2f5-84bc66a31f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8880945-a507-4428-8b50-7bed84c48257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ce910-b494-47e8-9570-482e13be9b12",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863cb38e-da2c-4ae2-9542-866a174a409e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcafa34-8ffe-4390-ae29-2760e2f8e4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79ff541-fa6f-490f-93b0-7a90d512affe",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688d99b8-8a69-4c63-8ab9-ba27b84f1f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c776c9fa-738c-4e40-aaae-a0d50fdf9794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2e51cd-67fc-4715-857f-a00e95e9b543",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8b3cb9-b2c6-4bb4-b086-0252e2ca66f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391c1ad2-8e19-4412-a9cd-13992059c7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170e8e2e-19e0-46e0-880b-0e5ccf5d99d2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6e9b2a-635b-4ad3-a327-e40cde5a502e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2077f40d-f133-4536-8383-c1c02bcc7c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6518d5-dbd2-4fa5-85cc-27183fd6ef09",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83534b5-0672-422b-8fa2-83e7bb970f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56910ce-a7fe-44b5-9079-2473ec8cd1bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5233e1f2-1930-486e-98c5-908232938be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681ee0b0-707d-4f49-a57d-a1092af2102e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd551f8-041d-4e00-a919-f90586fc550b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f27242-c8e6-4df6-85eb-a347eeab0a3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794cf7f7-5eb9-4fd4-b4c2-7e3aa9c94490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de126297-cbec-4401-8562-7cf99342e6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9de16a4-27f9-4ee7-b21d-54207b6b2d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a337e5c-cf1d-456a-b547-6eebbd74f70a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa895c1-fe90-4641-a3f3-6c009d627edb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "997a8d34-93e9-4d39-b2e1-afe6f366baaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90aae124-1349-45e5-a107-db48a94f17cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d41d3e-8a6d-44c8-91cf-f0682de45568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae94a65-9a77-4d32-bff7-529c66ebf8c2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ebd032-446e-4f79-a1ab-9321402b4aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f15bbc-c1f8-4b36-8004-5601ff571ef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132a4523-6a82-4944-8ffd-2c31db27095d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb08c2c-44ce-4b71-9c14-f288f0f2ff5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d15ea6-98ae-4a31-a62f-f42b6e5cd2f6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b1b5bf-47b1-491e-8dd8-9b37d745548e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa82cf3-2cd0-4746-b950-785510864303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5f543a-a065-4bdf-a287-e2c6fd5ceae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157cf35d-371d-4162-b9cf-b37d29948da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40617ab9-c773-4937-8ce7-18d1c908e45c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18db2c8c-2118-43c0-996b-3c08f90f0c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c496bd6-a46a-4fd9-b178-1469e5761ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b29a7e-9644-4a36-882a-bfd49e04ed8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547bdd33-81cd-4174-af17-1abaf9777a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ca8993-5ba3-4a5d-b988-4191682e7256",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1793e45f-26b2-433e-b34c-41564312b1e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1006bdf-4155-4392-a3b3-72320b10e385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eee06a5-ad19-4f53-af75-fdbe6ac52471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18959f6e-505f-4ef5-aa94-1c02e879fcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b52b902-5d07-4a9a-92fc-2a9fd0d74c54",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbe411d-63ca-458c-a77c-cccd7021bf43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0506f28b-1cf6-40f9-85c4-74d91b25ec3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89f7b47-3fad-4678-a19c-842bf25648fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfe63a7-ce6a-40bc-837e-652c070e61ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafae784-8d08-4bbd-85fd-dc211ca99479",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f518fe6-c2ce-4d1d-9d5e-9e56119db2c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5be0af12-ce24-47cf-be3f-1772a978ae90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66255f5c-3556-460d-856b-64ed977b1f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803c8cb4-5387-47b5-a924-81290ddaafa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86e1683-0dbd-49f4-b87d-93f76732a1ca",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938b76e5-d2c4-47a6-8445-b0dbede63fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aac58440-3754-4450-ab05-e0df68747c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9edffc-a8cf-4202-84db-b609a14c50d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9b9e78-8294-4dac-9c3d-60ac379582ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6915e690-a33f-4566-b660-9bee7f258a34",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a645b80-c9a0-41c0-852d-a76a41586669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee994692-ddd1-45ef-b857-a575694af02b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44972e7c-ef90-462c-92c3-23ff67c651b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6944437d-5be2-4df6-bdde-8d2bd78ddaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98e1e65-5289-4a27-8fe6-570ded866ce8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b509169-3f0d-4d6b-9333-c0ce142a2fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f400505-e498-4bbc-8cdb-0bea29de4b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089f03a5-8b99-4866-8479-f5e7c055206f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323c655b-5f76-4517-8773-cd843c116aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fa3d06-b744-44c1-a929-0b85ee280ebf",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a84b96-56f8-4456-bb36-d7cc3ce87573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da14635-3f7d-44d2-8b32-54fe389b9542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d8c0bf-aa6a-4104-b26b-dcc9d3c839bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf435f4-c5ce-44f9-9d00-93dcb70d7e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fdae80-77ad-4d38-9d36-921501fd4b12",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0a6325-fd92-4770-957a-94f4cbfd59ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de3e6a7-68f3-4e9d-82c9-f446c84da19c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9636eb-1654-4db4-988a-75b442091599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d874e304-3c88-4a7c-ac85-fb5ca10e44e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d60fbe-6e4b-467f-b5c7-f5bdcadd1d1a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7139ac9-c420-4a09-b48a-b54015409f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c465d7b1-c68c-45b0-90cc-61690e48e44a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d47c46c-36f8-4056-8db6-67d241b7ce10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437e62e0-8b7c-4400-864a-65ef03a47b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790077ee-3024-4921-af95-72a0ab25cb84",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5edd705-bc38-4928-af41-df5e67366c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa082f44-b885-449b-a384-dccb056dc4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2586eeae-26b2-4166-a2a6-06fb8285d6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d075969-35e5-465c-88e5-91cff33accdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43987f95-4150-43bd-be70-7b13675f50d0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9ab26a-f3f4-47b3-94c8-132f10cb2ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380a3d54-850e-4803-8fef-cebbbebf7259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc65900a-034c-4e04-bc8a-e976337ef03d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0695045-fe21-4605-a546-56b819e4e3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45027be8-fb60-45ac-90ab-a9c4885464c6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401bc6f5-374f-443c-a8f7-4f7d292317de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc565046-730a-43d9-aba9-5907b765cbc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48390521-3d08-4342-b80a-2f5b9019686d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acdca16c-74c7-47d6-9c73-aa7d52ec9087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fac0457-5496-4e8b-9a6c-38fba2932ce3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6207233-91b8-420c-9401-97d7254e747f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0c11523-7c1f-44ec-8e14-ecc2e7fdd379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0566ee9a-1e9c-487c-8d48-c8f4bcc51801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5eb7fa-cee7-49d1-b185-2f3be419ddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea10436-8702-45d9-9725-691566a6b020",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c89e6b-b049-4964-911f-d28273a9a474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db3c4eb-5f03-4406-a0a4-d9ee05b57f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf51ace-db21-4628-b9b9-713d100be42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204eed0c-51bc-43a8-a170-ce5336e757d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2237cc68-63b9-4b37-a753-0696ea8291c0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8851d4-7a57-4d08-91b7-24b0dedb88c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5dcb385-0e1b-4114-9317-d7c85f3fc577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70c6895-119b-4cbe-88cd-fded59b1350d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44776eb6-3d32-4e41-896c-1a25643dfcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b44db8-49f0-40e9-b0db-a4452451e27b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8e7c88-072f-4c65-926a-46103b1bd44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298d5b33-152a-40e2-aef5-22ff8c998b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de1875f-8971-45bd-98ce-41500636b6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195cd908-05a9-4e35-ac23-62014b9be9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc69886-6537-493e-8371-67b1400d8963",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4008a0-b75d-4f5c-a493-f44282e4519f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c69702-b484-4436-867e-451efa5c4bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b36f072-4891-4e3a-b5c8-f2d4c1b274e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4597d79-deb6-460c-9ba6-c529658c3f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad78a12a-4e53-4aac-a394-0e09d7ee8d8b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ed2223-c325-4fe6-a67e-e286de136876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f027eb6a-a9a4-4bb3-a749-7d7d1fcbee85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7901de33-fcf5-4b40-9fbc-642005851ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e648bdb6-3147-41cc-b55b-0fe69264f848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d31e0d1-4faf-4af9-b1a9-7d712495c16a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fb92b9-1bae-45a4-b543-a2d17357a1ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca9eb3e-8958-4129-9d47-42ce18dcc169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e0c9b5-cf54-47c7-8376-e3c74dc73c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346efd77-f2e9-4227-a71a-648a3a1abcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d256975-c742-4f12-a093-ad99ee6e2c34",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89967bc2-a090-4794-89bd-0d77b671be43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc1ef325-af2e-4aa1-97d2-0d384764dbbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b1b52f-0c4b-4084-b357-494eff23e50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f986ba-5425-441a-8e24-cc900e65cc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6302d3-5d78-414e-804b-6dc1c6e4f66b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0038ff2-27c2-4a22-a07e-f10bcecc9513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cefd4307-62cc-4dc4-88b9-3ec194964918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892cd386-4bee-4265-a26f-0f9f7a281a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fc6bf6-11c9-4bd9-9f72-06a82598fcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2b9c2b-7f30-4362-bf00-f428a6af0b8a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1f6617-128e-4819-be0d-2baf75d9c0de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e816a4cf-0b8c-4038-a7fe-934ad70f92dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ae172d-6c63-4cae-9281-ad7d8c6eb241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e44f25-a05b-4ed6-abca-4fa648b98570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fb7703-b639-47e0-bad1-106d825f407f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ecd996-ee65-4b29-98b8-bd5d2992ad9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03d66c7-7056-46b4-982c-8196669a3a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d82057b-1a7c-4507-81de-b5a8708b878e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238cb0f8-8610-4f21-b34e-4c299fb717a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a597d6c-efcf-4d9b-a7f4-b7c93babffa5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fefe14f-54ec-4c99-a38c-abab27fdee35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bb8e9e-98ca-4b64-80c8-285e752f9435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831085da-e53c-4317-b9f8-6d40426146fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa97578-33e2-4cfe-a60d-f4fcdf7de783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61222a52-2bc2-43bd-a6a7-9b1ecc4274ab",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178265c8-7695-4aec-be3d-49892be91173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add4bdcc-6e0b-4a0b-b5c0-c171193c0129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a485504-ba14-4039-ad8b-1040bce46234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3dd346-a450-4a3a-994d-9ee632cffac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdf3793-5c7f-42e1-8547-4cca849bd60d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bf8023-a390-45cd-bc4d-175270945a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c759b5d-b1ef-4212-8995-8c5d7848372d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc1aec3-3fd0-4758-b3ad-686de79664d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffdfe5a-2010-4a6d-93d8-db42fc50aac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5eba2b-6405-48df-b5da-056c33f21711",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a549c9d3-edb8-4458-b65b-66da42203a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336a532a-f63e-4de0-baa5-2da43c5373a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636dc9ca-7369-44f6-9ba3-d52b0cf6e222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b3ddf6-716a-4380-bc6e-e1bfde98ae4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8a9fd0-007f-43c1-b0ca-15d1bb1cb6e8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c47cda-2301-4386-bd3b-97247c8b1b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854070de-770e-4000-ad15-08c041c73b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70176e9a-06cb-4fe7-af86-4c184c968986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d70cd57-dbdf-49a1-9453-1d683160fbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b2be28-2ab7-4043-b65d-e94884cf73d4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab86ad21-f7dc-4098-bfa5-1af2187d62a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03fe4083-8061-456c-be5f-a206151beab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "488e4ee3-9dae-4b09-9901-e4ea12ba0532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a056c99-8170-4067-af32-d13504caae44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98476a4d-14d6-4d96-8db3-0e95ffb17c48",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32169826-646b-4278-bea1-f6ea57a1d26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7873e409-4384-49e0-98f3-6cf337f912da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86359566-297e-4c0c-a2b3-704b58ef6f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df8d476-6846-4712-aaa2-f7006cfca8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ca6edd-2e0e-4af6-97fe-65c5fb5fe57d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e18d6d5-079f-4131-b0bd-7ef151611e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3477e49f-87cf-446b-852d-67ffba695f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7d97c0-49b0-476c-8fa6-f34c680e288a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70be4010-6321-4133-a9e3-879fe5eb4b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2144c99-8697-4895-89a6-e248936b06d7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3acd55c5-7df7-45d4-b950-0857c57f1eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb9c566-725b-4766-baf0-2343ec6342a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bd9fd2-f176-4d3d-a93f-1d2f58cced20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f1acce-781d-460e-a5e9-4b1a695b961d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159aea49-f7f9-4e01-94fc-5b959342dc0e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b437de-0b44-48f5-9b24-80a09151e5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62b823d-2b58-4bde-a857-2f5d1751a02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "744bcbd9-61ff-40c8-8eac-d623e06670a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d279c783-2a20-4197-b925-492e5e22bb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef17a92-fa0e-4e05-a5e8-d8d1c5cdc007",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13394ac2-9d5c-4d8a-9719-937302160194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b462e9-64bd-4f8a-bf26-df6f5e05c34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af26350-10bf-4969-ae6d-8106d957ac3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b216a8c2-350c-4d6d-8575-262c35ab381a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7a7cca-65c1-4613-9fa3-55d3e0c50fbf",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9355ac0d-574e-40b5-8e75-af4d8198420b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a625810-dd22-492c-af0f-1cf592c71d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619380fa-b573-4a16-8e00-91b0981eaf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3916656d-6d25-43e2-8df3-3166178b3c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08606b58-7902-40a5-8c5a-e08156cd8d3c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12953ab5-da33-4eb1-a2c8-5d741e233aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c8ac99-1984-448e-b07d-05fb8e678755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45cebb0-2401-4b8a-a563-5f8b1b2fddc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff884e2-b809-4915-8746-9751869fd8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4130fbf-721c-4033-916f-c687095d65b3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cee750-053c-41ca-96f0-5742e95ed0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc40650-c852-4dbc-9025-832e8468227b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc78b3bc-1538-4178-bad5-585df35fb5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3979d606-be99-4725-8c2d-64a425e83597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8e09f8-22b8-4355-9b00-1e4f54660929",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc768371-a65b-4fe3-8bef-d8437d3e0cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebc81b4-ea86-4d47-b42f-db5c089331c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd73121-c7da-4348-8bd3-4220426f7fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1436c1-2788-4770-863d-596156ec20b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fa83e3-ece1-4306-9b4a-f22ef6b38eab",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7f32c1-806c-4168-af2f-5c0bb9bfd2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67acd343-21d5-456d-be77-f53912873467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c530bd1f-1fd0-49cf-9891-1ac249fe7462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75e43f6-9513-42b8-afd6-a2f0581b0ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc600fa-13a0-4d2a-a8eb-946784ba8366",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b736b632-ab62-46ee-8fc1-15c61463d80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d661d655-81c7-48a4-8643-8b03b8a9fac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758861df-386f-4486-a263-6ae3a76466db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6f579a-ef58-491f-b651-cd099230ebbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403684ae-2b46-4e70-be29-23809fae6980",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c1fc05-ffcc-432e-9cbc-87c0c92b174b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c23155-be04-4de6-9a5c-7105913c9024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20e2ead-25e4-4770-a27b-78d39cb182b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af29c023-d887-4401-be21-6d9b91fd8554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54198cd-523c-4e72-bfd6-3aaa07499053",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca952a5-7aba-43d8-836e-d34b538f3f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90e82e1-dd05-4854-a25f-0613bfec40fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ac1651-7765-4c2c-bcc3-7fe6e5e7eab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7977dbdc-58ae-41e4-8574-88f72526d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254fecf1-685f-4fe8-bd84-5487bc84f326",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a2df23-8420-43a1-a08f-2d254db51697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8740649b-0231-4393-939c-862b3877b1e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7cfdc8-aef4-4211-91ab-2d8b249389a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07eb815-d005-4d7f-9e6d-a12414c2813c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a955b1-df1d-4a0f-a9aa-285e2cdfb005",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c76f516-5eb3-4617-b164-c85d067d9f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a048f6-6100-46e9-9a74-e727d850e4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6732bee-6985-4322-ac65-0f75faf85ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8104d925-0004-4a84-a4c5-61d59dba7e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16068e6-ea41-4e0f-ad26-cb519661139c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4942da5c-a2cb-482c-a6c3-d375d18ba405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905b3d37-dfb9-4a67-a6f6-053d2114c221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda6a5e9-66fd-4efc-8c3a-89bddc42042c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131ab35b-ebee-4b56-b2a9-c139952fc503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bad54e-3918-453b-8aa5-2b9e95e14a7d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07fd1c5-43bb-41d3-a94c-459d35a74737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a23414-77b1-4d51-bd30-08a35fd9150b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd517700-a31d-4e0b-9418-abc3754b7e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489ce708-408a-4522-98f1-74cd53122b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3e7e43-d241-496a-9ef7-81794a5a5b42",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93665189-cece-49a5-8bda-fcc36230ecba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5e2dae-eb0e-431b-a841-03bcd6592014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9375fd87-e363-47a1-a601-7b7b4eed2cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846e84b3-c2c3-42b6-95c0-554cf66a1b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abda358f-f427-4de1-9d5a-9aae6ded49fe",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b23e0b-5d6f-4a28-8327-9ce3f29887a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e37354-ce1b-447b-92a5-52cf906956d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99ac2f4-c92b-4f60-b103-c4b8689f39f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ea3d3e-a7cf-4cfc-b85f-f8e395064429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8e4f76-a8ca-434e-982e-30e0b90b006a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3143c42-47e3-419e-bebf-b95d9fc9312e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378a8ce4-19af-4941-9340-93d21b88043d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8dcb68-0223-40b6-8499-7ed336cb361d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca30bac3-d6b0-4073-b2a9-8bf2828c4a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffde100-edd5-43c8-b8db-21a8d9305a20",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebb4817-0109-4f54-a9db-b3c6d959a333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cd09c2-012c-441e-b6a2-2e77fbf95250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f6a20c-d1a1-46a9-9413-c1b2bb542098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588b19eb-9d27-45d5-9d7f-d55422177197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd628d5e-bbd6-4c1e-9602-09a240e29808",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493621dd-eb3f-4f1b-8009-9445057bee13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b82d09-d7a3-4232-b418-f734759e7cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1475e114-5fe8-428d-8f92-73bd17f50777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f21050b6-a184-4a32-95b9-e78ee11a30ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b90654e-e3e6-4db7-9438-41198f77c01d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec73acd4-9717-4914-85ab-8ca9d52b7d7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40644ccc-b089-467a-b4bd-f0ef678a6b5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f4eff0-1b6d-45a8-8653-17cf0b1b21f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77320e37-550a-449c-9dda-0c14a2bfda06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3af737-df13-4523-895f-3fd5a1dc8c71",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b0a073-43f0-4c62-b2fa-7df9078d3105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f154cd9a-e3cc-4a0f-8564-4ec2f6b3e155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9121c72d-65ce-4ea2-af3b-7b7a2de18951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa65ff1-cc78-48a3-a384-4fe548c75f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5f50fe-f96d-4144-a52e-545661fb6b63",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9586c5-00ef-434a-aefe-40013d7fd40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d39bfe-1260-46c7-bb9f-54c3fa953c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cda2b4-bae2-453a-8466-1001666c7783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1b1b75-8153-4d37-a511-83135dcbd3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b5dba9-c222-4d0f-ba5c-34c89d64e842",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840048ea-ccc5-458a-9210-b988654ff931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c1ac2d-44e9-4fbf-8fd0-9ddef9cdce1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1701bdb5-9328-44f1-b977-6fca30cc342f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f912220-bc89-4d92-9563-18b65cfaee4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e530f0-fcc0-40f1-ae4c-ac9c438d4275",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3c8d20-11f9-4371-a86a-499dad97f726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7116c04c-60a1-419a-94d6-d83e6f7feec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa677ac-a2df-4af0-8fb7-0ba804a1436b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77a62bb-006a-4212-9a44-f581066a027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa481b3-b260-46e2-8687-e821411e6490",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd6553a-8afc-4504-856b-a8bda330d499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c13d9580-1df5-494e-b1b6-747eba1dde6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3f868e-6652-4e28-b46e-3db4af4bb79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1778d93a-d6f3-4ea5-a358-dcaa67f0a60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0c8f96-f312-4aa2-917e-b9dc8dc14e95",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca671b89-2b35-4df8-bf1f-0babac165c00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb130b2b-8ae5-4a09-b9b7-fc8a6ef114e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5962b87-42b2-4ddb-9d18-8ccbd278c092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe88080d-a06a-482c-8f94-563863f36838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4cb946-ff52-4f1f-8581-c1fb75f89e36",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300f031c-fd85-4f1b-9fec-9d6de82dd474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76edb020-8263-4f34-b089-b84ba1c3f9aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8dcb6f-336c-4e2e-9ce7-88adb208aa0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf91c19e-c062-40cb-9770-7ed0d32911aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a09c4b-654a-4449-9540-7f0caf608a2d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4fc141-3093-4608-bef9-5f4bfdb47acf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "938cee5c-0c9c-47cb-a510-b09466144b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8920f208-1aa7-4f8a-a1e0-6b21e22ccab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cc2a11-3476-49fa-a75e-a6516c2c0b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be75547-310d-4574-98a6-6a377923b544",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4508270c-194b-4b24-bfe4-e73d4e41f18c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86aa2854-d4d6-4eb9-aff0-3ea9e0e2f52e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd646a3-ed32-4810-96ba-ba730984b47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45aa983a-445d-440a-b50e-001da9f41299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd8b407-8214-4499-bd79-4951ef2b5a60",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063600c6-a483-4b75-936e-75561f53cd29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61de204e-4ee9-4f40-815d-509a601cd475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41807f44-535f-47f8-a8aa-13f34dfce80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4c06e6-288a-460c-b549-737780119175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68633d0d-aaa2-4451-9283-b832e52a6dff",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d043257-37db-4c22-a016-5687e354471c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38619b73-c9f9-46c2-a521-d12f759bee6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0255975-b8fe-4038-9c68-01708f54c5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c60927-9e29-4402-ac86-ea7ac476864d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9d9b23-aba1-4036-9360-5df43a7d0d8e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0279a8f-18c0-480a-b655-5bd0471faaef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be800102-84d4-450c-82d1-67ff68c379df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9010b27e-b03e-4029-92bc-dbb7d2725e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3018403f-f542-4f7a-b822-02ee71dd9638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d62e8ac-da01-4f9b-843d-b6c6b9687477",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938b674a-c33d-4a5b-beea-16dda0cfae80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc0bdea-6235-47b4-97e7-fdc6c849b94b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07e9b8e-43e7-4638-a726-d1f6864aae80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f75db5-5931-481c-a425-ec05393165e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735550d0-3c10-4599-a483-b40634fa5126",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bd66c2-113b-4415-af6b-b08254c8edb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb03f906-a485-4aac-b057-940da3485275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b15b323-5f8c-4107-96ad-fd12766d4f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc767ae5-7c1d-4fa1-a69c-9500f801ecb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92194651-4b5f-4902-a3f9-e8069df4dfcc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea589461-b6b0-4a85-82bf-65a9309539df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5533b9af-b2fd-491d-95ec-ccff962f4c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbed378-6139-4e9d-9a4b-3de3a39da1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d705b86e-c72d-4e4c-80bf-140167420a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c639234-d315-4b70-b3a4-250d9a353ab6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eacee12-2470-472d-b94c-055ab78ecf70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe5fcfce-35b1-4f8c-9153-101b933c0a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccaa617-0210-49ab-bd1a-da977fff2db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2863e5-49d7-4fe2-9c96-005c49c99a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d23ec4f-d7b9-42a9-8f6e-4f15c3c617f7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866fb45b-e0f3-4268-9163-cbb618fd0d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da9a51c4-37bf-496b-ba8b-978efecd49bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345098ed-5d58-459b-b3d4-7e0bfa140cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe05fb0-e0d2-4711-88b7-b8afe00dc603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486c7418-515c-4b36-a542-a24bde426790",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7a04a3-3c86-472c-8e74-ffe119b2242f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e16be5ae-14c6-4827-b542-8ac71d4fa1a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37b4192-cafc-4874-b230-76760e0dd4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b013ed-c9b5-4c6d-80dc-21995a2f4104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffc9cea-bb92-4da4-9164-c7014caf0c3e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a8d8a8-153e-4818-b8d6-6989cbb206dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9cfc6ee-5d15-426c-8682-6e29ba79c168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dadd6f-b2ea-49c0-917e-32b246128a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b7c127-c259-41da-85d2-eabe49a8df2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87950343-b657-4b53-bcf9-9d1e5fa33bc8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7699d6-5a0a-4adf-986f-e610d256de82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75155ea2-5ad2-4f9b-9d13-e42bea5cc211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4d0a1f-6db0-4ae6-af8d-e29801e21bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffb9ea9-5392-4cf6-80af-b40fd700cd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe4f738-537e-421f-b82b-6c131c4df0c0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a44551-13a1-40ac-8efe-2d470fc0e282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e11b51e-8f97-467d-a790-0beb1d53395d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007179eb-d9da-487f-9ec9-a5e6b0f00e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a45c7b-fa47-47a9-9e60-8baa30eda453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ddc794-3cf2-4f93-84ce-4e1799bb2902",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e727629-4872-4d71-a438-6dd0bdaba108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82497143-9adf-4c30-9be5-eeba1aac566c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87a9635-d238-4dce-8367-01408d16c245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae397e2d-2f89-4ae6-80b3-3fa4e601a822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8022c0ec-03c6-4f70-b5dd-415db1e3d2c0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e004c1-d524-4530-ba40-a02b0598d829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf1bb096-7abd-4ebe-be1e-7c3758326ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75bfcaf-6f80-4f37-ad86-31ccabcbc054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b4574c9-0aa4-4032-b75c-0b3f79db40d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b89c144-dbb8-4bdb-ad28-090af3ca0f15",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b8c57d-e629-4a30-aa9b-3375a5ccc52c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61119217-ab8a-4c0c-aded-c247ddb4e539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da15c5ec-0c11-428a-b826-b2f6cfbceeef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4984d499-b523-40e4-93ba-83111832eed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f943ac47-30ea-46fa-b9ed-938e237102b8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29dfb67f-91ba-449a-af4a-ccd90d7b4c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d452dac0-ef73-45a2-829e-decb918505a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534e54e6-344b-4b0c-a88f-e83ff3ec26d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51578973-cb65-4fb3-a459-ae4036510021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6166e60-d119-4ea5-a320-c819734919b9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141e84a0-6ff4-4682-ab4f-45958aa7e608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115e4af3-fc55-43aa-ad2f-2c250baf35cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d568c79-aabe-452c-b76c-780f162f2e93",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16ea0be-823d-4214-be12-894efe799053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2830a5-da33-4804-bb5b-8b43549ab6ad",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596ffb0e-03b1-43b3-aa72-fa77629c1021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9af26933-91c4-4b75-b831-d01696496957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e0b684-af80-43d7-901d-93d2fe7292ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5e461e-6ed0-4fcd-b980-adc0d2f4805a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58b8e67-cf2c-480a-bcdf-b6d89b946226",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193494bb-030a-4e2d-8356-fae01ea13bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ee2787-eabc-4359-bed7-6d9fb2a3a308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d7db63-8682-4e2d-a575-ad26f8c8875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c54a0f8-4181-4cbc-8987-ba09c610f39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19981c09-0eb3-4f8e-8fec-e08765aa6569",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503d612c-ab40-4b61-a18f-c182e22622df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b1481d-557a-4d3f-a1eb-2968ebf449e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42494e90-e41c-48e6-90b2-5e4ca0a3dd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4fbfd01-1078-42eb-a98e-8007b1636202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861d84c0-db37-402e-a7cb-d97cbd0f0069",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73db4d0-497c-48a9-84a6-cdc63358c54e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f07925dd-e62c-401c-842c-a6df173368eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd75a43-cc2f-45e5-9a85-47ec38bb9982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc4a9e4-4971-495d-a097-1554ef6a0ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32652e8-f397-4e3e-8477-a632c4dd5b79",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d56e4b1-83e9-4f9c-bce7-6b83ae6ba376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ff88503-cf35-4b28-ab3c-b885afd8fd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f5ec42-a47b-48b7-baa0-c58b606b454d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7270a2b5-b2b3-49a0-88a2-bff36fb4a464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0b7ded-68f0-432a-a0e9-c939352a330b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a3cfa2-2e15-4574-931b-9c678df36864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4832817a-e5a9-4783-9943-8161e97dfcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03352044-bd12-4ce0-828f-7242d7c1cd0b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ff1def-2b7d-40a7-bc3a-78501d3c0951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72e592e-508f-45ec-aab8-61ba216b167a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c01274f-6fde-4393-9797-946e23d1cb58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d37d1f-2fdd-460c-9783-0feeefbfa97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27d7719-8d43-4a53-afaa-eabd698a02f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bedf14-dc41-4804-9000-63b4c250c188"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d084cfde-5e1c-4bd2-8d43-a7ff786829d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb44ecab-15d7-4f22-9481-d77a5f6c3ebd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6076150c-f842-434b-84b5-f1c06d3140ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe30e83f-4453-4652-8965-de320daa9200"
                    }
                  }
                ]
              },
              {
                "id": "55946629-213e-4108-9c2c-a6fdaa3df97c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d09c9eec-025e-40fc-939b-b71c919c7db1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d840870-f5a6-4eba-9b0e-20f74c1799af",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e3d4739a-4945-4448-b562-1d482cd3a036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7babc8a8-6ca8-4a9e-b8d8-fe28ca48a5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "022b0484-00e1-4d82-a460-333fed874e7c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23dc3149-4a25-4658-bb9e-f41ce33f6281",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff68372c-f4d0-48b8-8ec2-39f6093023de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "968f8e51-6f23-4d69-8799-41320c22e1a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "939f5b32-354a-474d-a826-a923fb56c7eb"
                    }
                  }
                ]
              },
              {
                "id": "d5c004f4-712f-499e-89a4-63b67173390e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2b7c3e44-72bd-4c59-9bae-b9f0dac8b1ac",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd76698-36c0-48aa-8e56-c17794015315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "45c84ebe-d855-4663-873b-816038917f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b8c935-baa2-4c1a-9324-82c6b55fa9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3511c153-e218-49ea-ab35-56750f11a114"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fb54cbb1-f5b8-4569-85d3-4eccd95b68fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28d32fbe-2f91-4ffe-8ed4-6406ed2dd762",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71a0d097-e403-4c67-8de6-b1070371493b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c4751bde-d76b-49a2-984b-b1c558590c15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc648e0d-39a9-42fb-85c1-a0476910cd7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c30c0b0-d7bf-4455-86ff-d70efa3a14f9"
                    }
                  }
                ]
              },
              {
                "id": "52b151c3-abbc-43e5-9fb1-cdc704e7fa38",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac4719b3-893d-4d20-8287-df48f5a0eca7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6b97657c-d4b2-49ff-85b5-e93418698aa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1b0564e-39f2-4e1a-860c-6b10bef30fc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b710a54e-ad66-4b11-94c8-c48f2954e8c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c70f54d6-82c6-4762-b17f-e79a925a6153",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "71753b78-d542-42be-8cc9-dfc60dc762df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "859ade53-396d-49ff-b957-fdce071d69a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "469abf79-1e55-4db7-96f6-fbced4be7dde"
            }
          }
        ]
      },
      {
        "id": "27c01836-9866-4aff-8e3b-44e33fa252ed",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6c326906-f7ef-4be5-b392-c7b51e8b4984",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5dba80fb-aba0-419f-9fdd-ef8901421849",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e79f35dd-a970-42bd-9cf4-5530a53bc596",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12dd128-eda6-466f-a8ee-270c1f6f82ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6b264f34-9c98-48f8-8a62-93ccec4cd899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b28db7-065b-42ec-a2d3-8e921619d435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b0932c7-0077-4d9a-8fff-ebd9770ddcda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85698f18-b85e-43a9-905e-51c331166bec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e73a663b-b89c-40f0-b7f5-57eb1eada22d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9df40577-5c09-4cda-b97a-7658c5f5914b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b20daebd-d82d-4373-8a2d-d5cad87cbdb2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "267a8777-56b0-4eeb-9baa-e7d8dfe39847",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4713c49f-c93e-4c4d-a5c4-49b629e47113"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45c85c38-3ebe-4642-9546-a0014604e353",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e163e81c-bf56-4831-8311-cb14584824a3"
            }
          }
        ]
      },
      {
        "id": "d521fe00-ba16-4c7d-836b-27a72f0f36dc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e9c98032-ae58-4aab-97e4-902d93eeea4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3efae4a8-ac02-4489-ae4c-b7783ad9205d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "751df1c1-1ced-44fd-b1e3-df85365daeb8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4afdc9-2943-48eb-b4b7-8746f5ff232a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cfe62d5-5e7f-4925-bbbc-74b5da1a59d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebde5355-1e1c-48b8-b50b-dcc423f98e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "660002b6-dad6-4d51-bc6f-c620f78c57cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ef8fb55-972d-4f79-a503-968895805f99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff25b7d7-10bb-4bf9-b376-8d03d69913aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bc951ac-8856-464a-9c48-8c9bce0b118b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71e860c1-dbba-4d5b-bb6b-e7f0d0de98a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c31edb9a-f345-4f02-9e98-477e011c4543",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a7c0fe55-340d-4305-b27d-cc99ad5d2723"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d3b38c8-1652-4fd1-8082-9a8d3c40a1ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d41ab703-b3f1-4586-80b9-068bddb2e219"
            }
          }
        ]
      },
      {
        "id": "e80a29a8-14cc-4343-9080-a6ae1c718d69",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1421b874-fde1-4d59-a16a-7e3ce645d027",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71508e8c-eb76-4115-9965-c2e25e16486b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3820621-4f2e-49c3-b473-2f073fe08184",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2e7312-17b6-468e-9e95-6177977424ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7b9d359-2f7d-49c7-b273-38155d55e8d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b33e24-69af-446b-8272-57409f3b6958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a5110b7-28d5-413a-bf03-29b9f6995114"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91413cfd-83ac-41e7-b1b0-c401b2b38cff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "380e257a-ba33-4173-bb67-f744c9801185"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a599dc58-1f85-4e91-84cc-6cb4ca1a817c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51992ac9-58d6-422b-b7be-b643fa963ea7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b9b0918-6e1a-42f0-9c5b-84c09407611a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "67708e55-c23b-45fd-8026-77b6704939da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7b6dc2f-dbfb-4452-96db-5793cb9727ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9382e48a-e724-464d-b657-1433bcc7a6d8"
            }
          }
        ]
      },
      {
        "id": "8c6f6aca-172e-4740-a656-d963b2816185",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a306b17-c094-42e3-b61a-414fd6c2793d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1e24a29-c7bb-4963-aa5d-dfa145af926f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5c73a798-b716-46b2-a5e4-6be1c5bfb109",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "117a60b4-3a43-420e-b651-71933eb08396",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59d29648-a597-49d6-827e-ad1c9ff6911b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 325.2439024390243,
      "responseMin": 7,
      "responseMax": 11979,
      "responseSd": 1081.9035192957112,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686789707321,
      "completed": 1686789799081
    },
    "executions": [
      {
        "id": "c5e0764d-5474-4d41-a4ae-8ce4f82a7a40",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dd27ec5d-1b2d-403d-a51f-d14a301e1856",
          "httpRequestId": "8b6562d4-fabe-4297-a857-bb012ada3669"
        },
        "item": {
          "id": "c5e0764d-5474-4d41-a4ae-8ce4f82a7a40",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ce2d4465-65e0-4fc0-ba22-8ec0e3a67924",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "6f5e0978-cdc8-4705-a3ba-cc168fa5dfc2",
        "cursor": {
          "ref": "4864265b-e601-484e-915a-184ef2911262",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b8d7d706-691c-42bd-ae95-0f4efd15f0cb"
        },
        "item": {
          "id": "6f5e0978-cdc8-4705-a3ba-cc168fa5dfc2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "882aec53-1cc0-4e2c-bf3c-d7e6d0a864f2",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1c6c6f0a-c88c-4c14-b0e3-787e5f4c03dd",
        "cursor": {
          "ref": "060cf6b4-2ad4-493c-a15e-f829578328e8",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9ac5ac47-c91f-43f6-a29a-11e7afa5f049"
        },
        "item": {
          "id": "1c6c6f0a-c88c-4c14-b0e3-787e5f4c03dd",
          "name": "did_json"
        },
        "response": {
          "id": "df7a131b-e0be-4d9b-992c-c44f901574e2",
          "status": "OK",
          "code": 200,
          "responseTime": 421,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cee4d68-2c26-485a-89cd-50f716311ca5",
        "cursor": {
          "ref": "455baeb3-c353-4422-84d6-6069160caa7f",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "53f4a83f-1b38-4fa6-a76c-a23805331132"
        },
        "item": {
          "id": "2cee4d68-2c26-485a-89cd-50f716311ca5",
          "name": "did:invalid"
        },
        "response": {
          "id": "6251b483-4768-40d1-ab66-a664556fefa6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1330,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2cee4d68-2c26-485a-89cd-50f716311ca5",
        "cursor": {
          "ref": "455baeb3-c353-4422-84d6-6069160caa7f",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "53f4a83f-1b38-4fa6-a76c-a23805331132"
        },
        "item": {
          "id": "2cee4d68-2c26-485a-89cd-50f716311ca5",
          "name": "did:invalid"
        },
        "response": {
          "id": "6251b483-4768-40d1-ab66-a664556fefa6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1330,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5f4e7cb7-ac6b-49ca-a9e6-c7feb7e3bcd8",
        "cursor": {
          "ref": "fb40ec99-1685-4117-b30d-1f6b7e245b79",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "342ab963-347a-4cfe-b510-6d77cd205277"
        },
        "item": {
          "id": "5f4e7cb7-ac6b-49ca-a9e6-c7feb7e3bcd8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "12b08953-e17d-4454-85bf-38d3e005be2a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e686e8-4656-47d4-bb85-f18d0c40254f",
        "cursor": {
          "ref": "cc078054-ae98-498e-9d3b-c2af93bf3884",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "134801f6-9b17-4ad8-b2ea-df2db1888534"
        },
        "item": {
          "id": "a4e686e8-4656-47d4-bb85-f18d0c40254f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b9c09381-2d8a-46a8-8e7d-330834ca296c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e6032f-059e-43cb-b965-4076a9b7c98a",
        "cursor": {
          "ref": "2cb37a10-79fe-4f53-9cb7-42d6c6dc170a",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "873eb5f3-024f-47dc-a217-7ccc775f1191"
        },
        "item": {
          "id": "91e6032f-059e-43cb-b965-4076a9b7c98a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "47b03c20-50d4-414f-b716-9fca1bde40dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d575ca7e-a982-431c-8670-60c16c825704",
        "cursor": {
          "ref": "0e8e30a8-0cb1-40ee-9d81-90a2d15e9d0d",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "05c863d5-e9c7-4a8e-9678-15ad72bcb45f"
        },
        "item": {
          "id": "d575ca7e-a982-431c-8670-60c16c825704",
          "name": "identifiers"
        },
        "response": {
          "id": "9ca3bcdf-56c7-4152-a034-ba498127f5a3",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e10038-2781-4a39-9b8a-bf01dc2fba1e",
        "cursor": {
          "ref": "19cd7fbe-0971-487e-b4ed-1ebadc456977",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a7b49e5c-0046-4897-a606-b475dfcaee03"
        },
        "item": {
          "id": "f2e10038-2781-4a39-9b8a-bf01dc2fba1e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5f3e6052-b49a-468d-b9d8-64ab0b781ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484d8105-9af1-43e4-a42d-a1ae16ac41bd",
        "cursor": {
          "ref": "a1bb4a27-c96b-47cd-9594-efdadcfddc2c",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d967268b-8d0e-4666-8ce4-27960c7aea48"
        },
        "item": {
          "id": "484d8105-9af1-43e4-a42d-a1ae16ac41bd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1849ede7-b7d9-4429-8599-f8519d2f591a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ace8101-606d-4c1e-892c-1582b18de3d7",
        "cursor": {
          "ref": "d5257bff-7cee-492f-8bba-9bdab49ed69b",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f7608911-8492-4539-ad3d-687cd80e6c24"
        },
        "item": {
          "id": "4ace8101-606d-4c1e-892c-1582b18de3d7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5d6cd1c9-3d02-4c5c-9e08-d440d02817eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27244a0f-0c52-4ab1-b5cc-4075885bfe0e",
        "cursor": {
          "ref": "4f80bdf8-a406-4807-ac0d-06fcf11b55b1",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b4d67d39-79d6-4a15-9720-3a35fed04d1d"
        },
        "item": {
          "id": "27244a0f-0c52-4ab1-b5cc-4075885bfe0e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f1418414-3a8b-472f-abf5-ca5629db37c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91192d4d-9386-4e07-85cb-90ef85e48de0",
        "cursor": {
          "ref": "3219758a-90c3-4541-9b0d-105bf91cc96b",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0f281844-d9eb-42c9-97f1-edf8a750e06f"
        },
        "item": {
          "id": "91192d4d-9386-4e07-85cb-90ef85e48de0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dcf12f6d-8990-4159-926f-389f7f8dfa7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d6ab1a-7b13-4d79-94b0-9db930167ce8",
        "cursor": {
          "ref": "86187560-448f-4e87-adf0-0e9f8427129b",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "db9721cf-f1d5-4563-85a1-86e2a747254e"
        },
        "item": {
          "id": "69d6ab1a-7b13-4d79-94b0-9db930167ce8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ca8c96af-4010-4a77-ab14-1c66c9c4eb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aedfe9-74c1-4170-8e03-bcd0387c3124",
        "cursor": {
          "ref": "fde00307-ef09-4baa-8b25-4bd9675d01a8",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7dcdb0fd-8267-40bf-ac17-f120796b0776"
        },
        "item": {
          "id": "80aedfe9-74c1-4170-8e03-bcd0387c3124",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9ce133e7-f8d4-4a2c-b672-bb67b53a49c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea239ef-29dd-4be2-b5c8-67f30a748f08",
        "cursor": {
          "ref": "9b318ea2-462b-405b-998b-f85470759214",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3c99d2a1-9089-49d8-a2c3-baafa69edac1"
        },
        "item": {
          "id": "fea239ef-29dd-4be2-b5c8-67f30a748f08",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bcfcf059-3b91-48d4-b027-40bfe5df5e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c543f8a6-2ee4-4044-b84f-a63e72b1ef75",
        "cursor": {
          "ref": "f715763a-e596-4b10-a52d-a0e99eb679f8",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bf92ea27-9a8b-44f3-9e11-b88ef27fd5db"
        },
        "item": {
          "id": "c543f8a6-2ee4-4044-b84f-a63e72b1ef75",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "af90cba7-41ea-41d9-b5d8-c7801129c88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9173fb56-96d0-4966-9196-b36dd1263316",
        "cursor": {
          "ref": "e3ea7ea8-617d-468c-8cac-d4c8f4e6bb9f",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c8fa4b07-b11f-454b-a362-1f97f692501a"
        },
        "item": {
          "id": "9173fb56-96d0-4966-9196-b36dd1263316",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2b19c549-9860-493b-b435-3a5f2862c9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72be122-db26-4b1a-bf5c-16d312006358",
        "cursor": {
          "ref": "788b35b9-da43-4e4d-910b-0af38c99a3ac",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "44702a7f-b5d9-4c8d-bc1b-31a9b53ef057"
        },
        "item": {
          "id": "b72be122-db26-4b1a-bf5c-16d312006358",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a107ded1-806b-40b9-ab8f-26875102e17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63d5557-4b6a-4f8d-98d6-3df555c4b5a0",
        "cursor": {
          "ref": "250ff2ec-fd08-481f-8b70-170ff1025a4e",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1eaede92-16f3-4e07-a90b-03561b42e3ef"
        },
        "item": {
          "id": "b63d5557-4b6a-4f8d-98d6-3df555c4b5a0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "66b80911-5f96-474d-aae6-1731f5941ff0",
          "status": "Created",
          "code": 201,
          "responseTime": 810,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "963122d3-2ae2-4a65-b385-6ef34651b76a",
        "cursor": {
          "ref": "c22a9b70-075c-4cf4-95fd-a41ce1099b9d",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "567264f7-df44-45b1-932a-1d131c521c4b"
        },
        "item": {
          "id": "963122d3-2ae2-4a65-b385-6ef34651b76a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6a754f7e-9b87-4b20-b25e-972d17cc1e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc15b16-de05-4ad1-94a6-1c3e6a717831",
        "cursor": {
          "ref": "0dd837e5-de7e-4649-8566-146b7fa141a5",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "49b3adc8-dfce-4880-86dd-38075aabb755"
        },
        "item": {
          "id": "cbc15b16-de05-4ad1-94a6-1c3e6a717831",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "32892328-4d14-41b3-a121-3b5ca553dba5",
          "status": "Created",
          "code": 201,
          "responseTime": 5446,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e62b7575-790f-4a03-811a-a88fa2b94a63",
        "cursor": {
          "ref": "8fb0c892-d61d-4b07-b0cf-f965e47426b7",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8ca3d273-9ff7-4827-a43d-635cf683cb49"
        },
        "item": {
          "id": "e62b7575-790f-4a03-811a-a88fa2b94a63",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d7a7593e-b5c0-42d0-9cc1-d7534195d024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd49db97-9c49-4ee5-90dd-495bc41636b0",
        "cursor": {
          "ref": "0320315f-c077-4c10-9524-2c9172ded9eb",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ef3c4244-7d22-43ab-8326-66073ffe3483"
        },
        "item": {
          "id": "bd49db97-9c49-4ee5-90dd-495bc41636b0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5f208314-a784-4226-857a-f93644854581",
          "status": "Created",
          "code": 201,
          "responseTime": 5427,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0188ac74-a6ad-4487-81d2-1ea94e0dfcfd",
        "cursor": {
          "ref": "9874d5a7-f756-44fc-a9d4-6b8a83956ca2",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "78ebee2b-2dac-401d-889c-13601b495c2b"
        },
        "item": {
          "id": "0188ac74-a6ad-4487-81d2-1ea94e0dfcfd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3ebcc097-77bf-4ee3-96fa-52987b0a9d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35c847b-62f1-41d3-a756-57bb26feced8",
        "cursor": {
          "ref": "9aa88dcb-0bf0-4a59-9e6d-ee7989988121",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e8a7aa6d-78e5-4992-95f3-e207dc81f970"
        },
        "item": {
          "id": "a35c847b-62f1-41d3-a756-57bb26feced8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "71baf6f1-c2c4-4bfb-9adb-9bfc9767c9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed39d23-0705-411a-be20-b0397974ae70",
        "cursor": {
          "ref": "185184f0-926e-47a7-a76c-bee97abeceab",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c73cbb70-7582-449d-874a-72dd2e25ddc0"
        },
        "item": {
          "id": "6ed39d23-0705-411a-be20-b0397974ae70",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "983ae997-09cd-4b29-8187-9964d27a6b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c679d0f4-eb30-41c6-8ff2-c521c8089fb9",
        "cursor": {
          "ref": "9f61f42d-e6ea-43c2-a5d6-f27722228d6b",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e1a61bcb-403a-45d1-bfbb-43261833d432"
        },
        "item": {
          "id": "c679d0f4-eb30-41c6-8ff2-c521c8089fb9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3da067e2-40ed-4e12-8525-40f374f839df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240f667f-b215-4369-8974-7c4a3c721942",
        "cursor": {
          "ref": "fb922c26-6c86-4281-ab17-31431a2daf44",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "58edb028-11cc-4ff1-b442-05e618d002ca"
        },
        "item": {
          "id": "240f667f-b215-4369-8974-7c4a3c721942",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bd5a8a34-d84a-46ff-91e3-95d4ae035670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883301a7-2905-43da-94b4-69de2ebc4dbd",
        "cursor": {
          "ref": "80d3313f-e5d4-4946-8d8b-b4bb24f939ee",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c3f593c8-6093-4d4b-852a-3832086ec6c9"
        },
        "item": {
          "id": "883301a7-2905-43da-94b4-69de2ebc4dbd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "582f7752-4e0d-4fbb-9802-da127306c5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0371581d-68e8-4d53-9b63-73f5b80fa499",
        "cursor": {
          "ref": "b557fe0b-9341-4e08-9dbb-6bf1760ee0c7",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5ada9d31-ef14-4219-b58d-1293082e1e43"
        },
        "item": {
          "id": "0371581d-68e8-4d53-9b63-73f5b80fa499",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e5917b5f-aa52-4e07-bb64-65aa0804bf2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8aed85-cb18-4b11-8c8f-fdc285f2d766",
        "cursor": {
          "ref": "6471f4be-586c-4b4e-8677-9d7f31e96d10",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1fc5cae3-b520-4631-8c4d-d3e50e5549b0"
        },
        "item": {
          "id": "ab8aed85-cb18-4b11-8c8f-fdc285f2d766",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4fbb3b8b-8549-4d0b-a037-3beceef99a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 623,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc2ab47-ad43-4e72-9299-70f3f8e4f991",
        "cursor": {
          "ref": "d3014df9-ecb3-4209-8f80-1e26301f866a",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "50d567b3-45ba-4b74-ad80-0a0d7cae3d1b"
        },
        "item": {
          "id": "fdc2ab47-ad43-4e72-9299-70f3f8e4f991",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "db6cc2b1-2c41-4abf-8a0f-4a38f5a4c07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfc5e5c-82f2-45d4-9383-11e994367ae1",
        "cursor": {
          "ref": "120f1920-f35d-4d78-80bb-c9f63abd48c4",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dd1ceb66-9fe0-4cfe-8ac5-546656780004"
        },
        "item": {
          "id": "6dfc5e5c-82f2-45d4-9383-11e994367ae1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0ce866ed-79c6-4aaf-904a-2831c3a72444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882255c5-8165-4745-88fd-803096e41657",
        "cursor": {
          "ref": "be7a13ac-22dc-4c00-bd62-6a68591db0a0",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b4899cb5-40b7-4d3a-b839-def83f54d134"
        },
        "item": {
          "id": "882255c5-8165-4745-88fd-803096e41657",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7cba4efa-3ce0-4308-a6dc-aa166b8dc486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9613d76b-cb7e-41e9-8f7a-5a23e9fad260",
        "cursor": {
          "ref": "9971a877-49ba-405d-9ab0-bc7d3585f247",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ea7d5904-47ab-4d4a-89a8-b71dfb2c80cc"
        },
        "item": {
          "id": "9613d76b-cb7e-41e9-8f7a-5a23e9fad260",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "86eceadc-a8cd-4986-939a-7bc41617e089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b528406e-6374-45ef-bcf4-167836b81f43",
        "cursor": {
          "ref": "7aea7167-d9d2-4fff-8252-ee97b0f0bc3e",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "82482b06-0a60-4c14-ae45-1b6463e59abe"
        },
        "item": {
          "id": "b528406e-6374-45ef-bcf4-167836b81f43",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cec07a73-481c-44c0-b2c4-74193d6ae22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e10138-5d2c-49e6-ad99-e7b900120c99",
        "cursor": {
          "ref": "1fda353f-9985-4b94-a9b2-8130e3fae114",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "28420c88-f249-4dba-b304-ad72e59f2feb"
        },
        "item": {
          "id": "c3e10138-5d2c-49e6-ad99-e7b900120c99",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ebb6a95a-f46e-4315-a058-31c4e72e6128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02394d9a-57a9-4954-8c7c-7c3ae9468a91",
        "cursor": {
          "ref": "5f224071-3d45-44e2-872d-9abbf80f3be7",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fdb0b2b9-f309-40b8-a988-693c38ef2609"
        },
        "item": {
          "id": "02394d9a-57a9-4954-8c7c-7c3ae9468a91",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f6c857c2-0ee4-4e25-8099-9db296ae8b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e5f5c4-3f5a-4661-8f89-f1c3dff36cc2",
        "cursor": {
          "ref": "185b2b3e-b45b-45f0-aa7c-22939348060d",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "03b0e9f2-2f8f-4152-b72c-157ab152ce2c"
        },
        "item": {
          "id": "b8e5f5c4-3f5a-4661-8f89-f1c3dff36cc2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "12deeeed-8ea8-4318-a339-8ad1f305234e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2946d5-98ad-4777-b19b-6af2de151dbd",
        "cursor": {
          "ref": "18303e68-3836-4d05-9f01-ebb5d12a1231",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8264b9e4-cb24-4824-9b0b-a3ada8696f83"
        },
        "item": {
          "id": "ce2946d5-98ad-4777-b19b-6af2de151dbd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c34be836-6384-4669-9172-4f6ddf97aad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c92293b-9263-432f-b5e6-2a966435ac6b",
        "cursor": {
          "ref": "1383ceed-ff57-41a1-b969-86df5080dbb4",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c9be9bbd-4de1-41df-96b6-fc4a3586b80f"
        },
        "item": {
          "id": "3c92293b-9263-432f-b5e6-2a966435ac6b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f9fc57a8-87ed-4e21-ac70-62e528c12f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d991d1-cbf4-4824-b0b5-15db07ee90c7",
        "cursor": {
          "ref": "7a1757de-786a-4f9a-86e9-d287be4c30f9",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cae192eb-2f8c-46d1-a576-c576d329f35b"
        },
        "item": {
          "id": "60d991d1-cbf4-4824-b0b5-15db07ee90c7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ba55ef66-c519-4af0-ae88-57bbf2633e65",
          "status": "Created",
          "code": 201,
          "responseTime": 4928,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5e41d366-2fa8-4492-8492-88556b8709be",
        "cursor": {
          "ref": "ee8f5559-5e5b-4b0a-8511-f9fa8dff85f8",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0c67590b-de54-4d8f-ae13-f3febf5174f5"
        },
        "item": {
          "id": "5e41d366-2fa8-4492-8492-88556b8709be",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "53fd9264-4e46-422d-8070-9fe380fe2442",
          "status": "Created",
          "code": 201,
          "responseTime": 11979,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "65e03f27-1174-46a3-9965-0f34d530775e",
        "cursor": {
          "ref": "b85fc9db-5f0b-4f27-9c4a-06d9dcfaa67a",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "04e7c46f-6840-4b01-9820-c4c1bdd395bb"
        },
        "item": {
          "id": "65e03f27-1174-46a3-9965-0f34d530775e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7f99bb25-c6d0-4a68-9dee-b7b7d51bb062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fc098a-cb92-4bef-a0ec-70d751d06b7e",
        "cursor": {
          "ref": "dc7d06de-126a-4529-9bdf-790910706044",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ce2fdd58-80b7-4c3b-a17f-f424597025fb"
        },
        "item": {
          "id": "73fc098a-cb92-4bef-a0ec-70d751d06b7e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "68e604ac-8056-45a3-9696-ac642860cace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f06e2f-8a72-486c-8b9c-27d4eaa46da4",
        "cursor": {
          "ref": "78fb2d5d-4ca8-44e0-84dd-8bf5d9138268",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "13ab0983-b9d5-4d60-840d-870165651b0c"
        },
        "item": {
          "id": "32f06e2f-8a72-486c-8b9c-27d4eaa46da4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a7a44f1d-6d54-40aa-83c5-5ee9997ae0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21c9772-bd00-470e-b2d5-47c99aa338a5",
        "cursor": {
          "ref": "cb6173b4-2820-4ba1-a7a9-ae121f7ff32d",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "48c066f9-29ab-46f3-a7af-ee7a612bba8e"
        },
        "item": {
          "id": "f21c9772-bd00-470e-b2d5-47c99aa338a5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ea602d5f-f1b8-4440-aeda-9f108b8689e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d4b4ab-d1fa-425b-9287-e66c5d4e497a",
        "cursor": {
          "ref": "19faa3df-5ae8-4adc-a76e-68bae29037f3",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ff8bee12-100c-4ece-ab1f-4e5ff2651902"
        },
        "item": {
          "id": "21d4b4ab-d1fa-425b-9287-e66c5d4e497a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c6944e65-e0ec-485b-969a-aafbc0555ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e29c32-ac9a-4f64-859b-ccaae5127f87",
        "cursor": {
          "ref": "120d795c-9fe9-473c-b426-797e54d747e9",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "950a77a1-4e07-49a2-9607-921ee2b579a9"
        },
        "item": {
          "id": "91e29c32-ac9a-4f64-859b-ccaae5127f87",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "385aed35-b991-45cc-a321-87fff1f09062",
          "status": "Created",
          "code": 201,
          "responseTime": 3639,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1e127125-50f2-4b06-afcd-c19d04b5d119",
        "cursor": {
          "ref": "1d1bea58-4542-46f5-b7b5-247a46486abe",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4a8053f8-5719-4cbb-a170-5f9ab8e988e2"
        },
        "item": {
          "id": "1e127125-50f2-4b06-afcd-c19d04b5d119",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "797f593b-e91f-4896-9a32-96418ed0a924",
          "status": "Created",
          "code": 201,
          "responseTime": 2284,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7764e61c-7619-4277-86e3-259b81e73087",
        "cursor": {
          "ref": "220347fa-7106-4526-9424-4e37bd7e7193",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d87d6115-fa79-4ad0-9123-2101ee6f48c9"
        },
        "item": {
          "id": "7764e61c-7619-4277-86e3-259b81e73087",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a95a97c4-89fe-405b-8a5f-57bde984319c",
          "status": "Created",
          "code": 201,
          "responseTime": 2613,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "abf4ad29-e5a8-4d8b-8f89-b570c89bf30e",
        "cursor": {
          "ref": "7de6f185-0433-4fbf-bd34-f80112e8486a",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "add4b58c-d7aa-4371-80ef-0e4b3606778c"
        },
        "item": {
          "id": "abf4ad29-e5a8-4d8b-8f89-b570c89bf30e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b1021d11-5052-463e-a2d5-cf4735144a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6273386-a45b-4d2f-8e22-f54e7c8a0cf1",
        "cursor": {
          "ref": "4e9802ee-e0f3-4402-8da2-48d2f6632eda",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "048b8597-00a0-4a3c-b5a3-2251abf49ff7"
        },
        "item": {
          "id": "d6273386-a45b-4d2f-8e22-f54e7c8a0cf1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fdccaf82-46dc-4e89-ac03-18d99f6635ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab12f3b6-e574-4405-bb0f-ef0af249868c",
        "cursor": {
          "ref": "393d6e51-2f3b-4e7e-8b7c-ea1a32e9852d",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d268e68f-1e2e-46ec-a965-e48eea89dc98"
        },
        "item": {
          "id": "ab12f3b6-e574-4405-bb0f-ef0af249868c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5322d4d8-f09a-4eeb-8210-3c0bc094dd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d345e1-46be-41b2-b231-6052c5eb6554",
        "cursor": {
          "ref": "b5a74b49-efc4-4bc5-87b0-a7e9bb16530b",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e2dc296-e5f3-47f3-a74a-72e0a1c9ab0e"
        },
        "item": {
          "id": "80d345e1-46be-41b2-b231-6052c5eb6554",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "daae6b57-01fc-4037-b8b5-1c3a6062d437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca6da7f-b546-4f45-b5ea-9b97bead7d39",
        "cursor": {
          "ref": "31aae998-1bda-4fed-95ca-edd65da58075",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b1194b6a-65bc-44d8-a25c-621fa26cc728"
        },
        "item": {
          "id": "3ca6da7f-b546-4f45-b5ea-9b97bead7d39",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "212f1b54-6fb6-4d81-924e-461a42de838b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e17aa9-85c1-4a0d-9f7a-8b92a3d4e0fa",
        "cursor": {
          "ref": "6b602cca-b7dc-474e-afad-f0ad606e4676",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8523d7d2-72c5-4d17-8815-e599ead46441"
        },
        "item": {
          "id": "17e17aa9-85c1-4a0d-9f7a-8b92a3d4e0fa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ccb7c405-cb24-47d0-b6f8-ee169c3f85b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b847d5e1-b00e-4ce8-beab-36412850bcba",
        "cursor": {
          "ref": "2e5aab38-10df-463f-9810-6e5b6b72edd1",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "126d4f89-dd39-4f06-abd1-ba9b941f3e61"
        },
        "item": {
          "id": "b847d5e1-b00e-4ce8-beab-36412850bcba",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d163f6c3-6089-4202-8d11-3dcfa3866293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8375ec2-70cb-4196-ba56-5451e6ed24a9",
        "cursor": {
          "ref": "b5b4f80f-496b-4702-bf0f-3a287b8e4fb1",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0777bdd2-8588-4ad9-b92d-36e349c3f28f"
        },
        "item": {
          "id": "a8375ec2-70cb-4196-ba56-5451e6ed24a9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a287e1be-88b4-453d-9d7f-712a242664fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f70d81-bf2e-469c-8b1f-70b56163e15d",
        "cursor": {
          "ref": "d38b760d-abec-4454-a58e-048add3b05ef",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "690b532b-b5b1-4649-82ce-6cf34b418c60"
        },
        "item": {
          "id": "27f70d81-bf2e-469c-8b1f-70b56163e15d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5bb92051-fea6-4650-b022-79b7ea7f5dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20395732-c841-4a30-9ba6-f51e6d50b829",
        "cursor": {
          "ref": "dec185e7-fdca-4aea-80d4-91c302b0699d",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "184923cb-bed5-4f61-8880-214abb9bb3d1"
        },
        "item": {
          "id": "20395732-c841-4a30-9ba6-f51e6d50b829",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9b96daee-8e67-4e22-9b74-bb5d8c8355f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca568d7c-dd77-4ff6-a83f-e20082bc9144",
        "cursor": {
          "ref": "c64ba155-abc3-461f-be4c-770273d394e9",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "88dd49fa-05b6-4e2a-a551-fefd9cc2b8bf"
        },
        "item": {
          "id": "ca568d7c-dd77-4ff6-a83f-e20082bc9144",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e4c8e74b-6cf3-4162-8032-05adb5ae52f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77353f6-7a4f-4095-bfd1-3d775e5a781a",
        "cursor": {
          "ref": "0c70ecc6-a01b-4c46-b385-4b5cb3963d69",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f9a9730d-3a77-478d-8030-79cf8bdc6969"
        },
        "item": {
          "id": "b77353f6-7a4f-4095-bfd1-3d775e5a781a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "46885893-d330-4607-b99a-9c45958524d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80143dc-68fb-473e-828a-b1ccbc3648d0",
        "cursor": {
          "ref": "4747791c-cdda-4123-a156-962c5f0dde3b",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a70e6e2c-3f3f-4466-af48-bebb68bf80ea"
        },
        "item": {
          "id": "f80143dc-68fb-473e-828a-b1ccbc3648d0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4b42d66b-e42c-427d-9d08-2782ba9744c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e9ecb6-dc9a-4546-bfd4-0ddb75d0e00c",
        "cursor": {
          "ref": "23bbc75f-5bfa-4767-82f5-2ca56a259fdd",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "852be74a-021c-4c9b-92fe-64a44b1c9257"
        },
        "item": {
          "id": "44e9ecb6-dc9a-4546-bfd4-0ddb75d0e00c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "761a0b47-512e-4977-a88e-a15348dc8619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b273bc-e4ba-4a66-85db-16e858b9ce2d",
        "cursor": {
          "ref": "24408c76-ff41-4a89-81e6-9c452e378596",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a8b0ce88-ac67-45c7-83cc-402b63c804ef"
        },
        "item": {
          "id": "f1b273bc-e4ba-4a66-85db-16e858b9ce2d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e4ed6fe9-89b2-4bca-a5d4-3cf2ff4f15c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b71d4b-1352-44cb-b7f6-39dec7e253eb",
        "cursor": {
          "ref": "82c832ed-a07c-4000-a804-5a2e0c7b9f95",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1d3d4d0b-a17e-4ed3-96d2-5fcaf9a760c4"
        },
        "item": {
          "id": "82b71d4b-1352-44cb-b7f6-39dec7e253eb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4bbe89e1-4ce7-4b8d-bc8e-ce870e98d434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2e10ee-185e-4771-8fe2-c6054d582c65",
        "cursor": {
          "ref": "f091b378-fb1a-4910-b239-f6daa0238c72",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "096a40ea-0805-4c88-8f43-43cf2d22f744"
        },
        "item": {
          "id": "bb2e10ee-185e-4771-8fe2-c6054d582c65",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8f9a4793-1545-477e-a5a1-38523a561727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7658895-bf9f-45ea-80ea-606f2c8b534b",
        "cursor": {
          "ref": "8219cede-c47a-4cd6-ad3e-684af1e258b3",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8ca4a398-3c0d-45b8-94c9-a8cc2f21b788"
        },
        "item": {
          "id": "d7658895-bf9f-45ea-80ea-606f2c8b534b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4eb4e36d-149d-4524-976f-edc94f48dbc6",
          "status": "Created",
          "code": 201,
          "responseTime": 2705,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "64a58e24-0d13-4e3f-a3a5-34a5455af2e4",
        "cursor": {
          "ref": "26669f6f-f46f-4d4a-8696-25adde879813",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "74d9363f-9a7d-4df6-bc7c-d833831f3308"
        },
        "item": {
          "id": "64a58e24-0d13-4e3f-a3a5-34a5455af2e4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bbe29022-4c79-4d63-9912-92b306df8348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4949cc04-5e36-49b5-a1c4-7e14261db965",
        "cursor": {
          "ref": "794a21c7-b10b-4a10-b646-25f299879f4f",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b45aea08-10c4-4491-89d2-90b926fa0678"
        },
        "item": {
          "id": "4949cc04-5e36-49b5-a1c4-7e14261db965",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2819b7b9-35c2-4975-aa13-752e6a658152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98be69fb-5566-4524-93eb-c26bdf392d55",
        "cursor": {
          "ref": "135070ad-c78a-4801-a46d-221252565882",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "87080bf5-1f7b-4e13-8c3c-fa6a67dcd139"
        },
        "item": {
          "id": "98be69fb-5566-4524-93eb-c26bdf392d55",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "156dbb01-db87-4fac-bb34-0040bcd5188a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db3810a-fc30-49ee-86df-cc0f8927582c",
        "cursor": {
          "ref": "56f7c561-77e2-480f-a2fd-2b649790a17a",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8fc77bd7-0a3e-4f80-b173-ba5bc657347d"
        },
        "item": {
          "id": "9db3810a-fc30-49ee-86df-cc0f8927582c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "67f82e01-68ea-45a1-a76b-ae52bef3c37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee58c021-9923-4231-84e3-6405d35d8bfd",
        "cursor": {
          "ref": "fe9e5b5b-2f97-4fba-a2b8-48e1c4892df8",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4af788e5-9381-4844-b99a-1cd5c98ec76b"
        },
        "item": {
          "id": "ee58c021-9923-4231-84e3-6405d35d8bfd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "86ac6b06-13cc-40d1-879d-e544b572e280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf6bab6-ce95-497e-96fe-10aa7c7c7849",
        "cursor": {
          "ref": "2ea77c50-c523-4a4e-858e-e95b8237fd3d",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0828c74e-cc44-45d6-96b7-8d0ed402f611"
        },
        "item": {
          "id": "cdf6bab6-ce95-497e-96fe-10aa7c7c7849",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f02dd005-7691-44a1-9c62-9b9e7f73a197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85918c9f-b2cf-419b-a229-40030d9c3c57",
        "cursor": {
          "ref": "72ef9a1e-17b4-4514-9b2f-1e95af504fdb",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9cc3ba24-b054-41fb-bf68-9d26105a3113"
        },
        "item": {
          "id": "85918c9f-b2cf-419b-a229-40030d9c3c57",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c6a299d4-175b-4b52-8a18-cac695e9d20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8df6ac-0ab7-4c89-9d5f-748f474e8915",
        "cursor": {
          "ref": "d7f5fce0-e148-40df-9821-02b481baf271",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "72a3ff74-fb9b-4a7e-b636-5e66758aabc9"
        },
        "item": {
          "id": "5a8df6ac-0ab7-4c89-9d5f-748f474e8915",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0e1716dd-49bd-4991-a9d3-1935e136e60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6365e726-d557-4dba-be94-1d80c7011641",
        "cursor": {
          "ref": "a422a48f-0382-480e-9aab-94c5e1e6a7a3",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "855df188-b52d-46cb-926e-a13d9abf4312"
        },
        "item": {
          "id": "6365e726-d557-4dba-be94-1d80c7011641",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "08764b27-1bda-4296-907e-92f30b5ed30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3caa4aa-0787-4642-a2fe-e242a81ca194",
        "cursor": {
          "ref": "018e0ec1-ee8e-4c3f-bf3f-f7d5736bec3d",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4be00741-446f-4446-9180-487868c01d44"
        },
        "item": {
          "id": "a3caa4aa-0787-4642-a2fe-e242a81ca194",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "11f57e54-cd65-4000-b15a-cff9723e04fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78536669-df58-4cf4-b09c-ae17c1b97603",
        "cursor": {
          "ref": "adb4eb44-2c7e-4f1a-a187-5e66fabb64e1",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "51450149-7d8e-49d9-9324-1b6a0d5595c6"
        },
        "item": {
          "id": "78536669-df58-4cf4-b09c-ae17c1b97603",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "04a0731e-c047-4961-b009-e854d2f66482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c6e4cb-20ef-4927-b0fc-f64bf4c5f5e0",
        "cursor": {
          "ref": "0d0c6b38-6bb8-41dd-9881-a576822a161e",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a6578c5f-d2d3-40cf-9270-64dba754e2cb"
        },
        "item": {
          "id": "98c6e4cb-20ef-4927-b0fc-f64bf4c5f5e0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "388ede85-1ba4-4b65-a981-2783608dfd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7a908a-9a37-4f1e-99b7-dbe1ac3a5341",
        "cursor": {
          "ref": "ff855645-5e94-4cf8-9631-4ca3608f26e6",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aafc51b7-97e2-4ea0-9792-a8cb1c1d8c48"
        },
        "item": {
          "id": "ed7a908a-9a37-4f1e-99b7-dbe1ac3a5341",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "66c2600c-9b0e-4818-a2e2-d43ce2e22048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e9e8e6-25f9-48b3-927b-f439f426fee8",
        "cursor": {
          "ref": "bbda04eb-0d22-4951-8c7f-6349a3c4b090",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4ac9e108-ab4f-41fe-bb49-faa983721669"
        },
        "item": {
          "id": "e5e9e8e6-25f9-48b3-927b-f439f426fee8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b8ec36bf-7867-4170-9b8f-eb0eb1840a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17294cc4-9f16-4218-9df9-9a254f7494cc",
        "cursor": {
          "ref": "205f855a-3da7-4c0e-ad02-e841c3687e5f",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59cf31e3-0f17-4279-b1fc-5f55ff330b2e"
        },
        "item": {
          "id": "17294cc4-9f16-4218-9df9-9a254f7494cc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7cf70f15-6a10-4cdf-ac78-ef761684177b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddba21c3-c15a-4d49-9afa-644e736d63d6",
        "cursor": {
          "ref": "18bbf393-e0f4-4ee4-a4d3-5341447ceb0b",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3131cf2d-e281-4890-a98f-5ced8d6dda93"
        },
        "item": {
          "id": "ddba21c3-c15a-4d49-9afa-644e736d63d6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6569be3f-96c5-45da-8219-61530995f889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df22d401-d4b6-4e26-8207-3e85723a8f0c",
        "cursor": {
          "ref": "f948b507-0fe3-4b04-b181-f27fad3b44aa",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "45202d80-2c86-4865-8820-f66792d81313"
        },
        "item": {
          "id": "df22d401-d4b6-4e26-8207-3e85723a8f0c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "51bc9065-8337-473b-974a-5da41d646eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6b1d68-f631-4935-a0e7-d656ff53b908",
        "cursor": {
          "ref": "dba40e06-5c6b-4dfa-92d8-2f3401c60d7c",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "093d8855-241d-4dcb-9aa4-78e239951f31"
        },
        "item": {
          "id": "9c6b1d68-f631-4935-a0e7-d656ff53b908",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6afb10fe-8986-47b7-8523-9a07d86a321b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef93a3d0-156e-4bb9-8989-c5fa9745c99f",
        "cursor": {
          "ref": "da6d549f-7098-4e88-92b2-3214553a210f",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "485171a7-6ddd-438d-89b9-7afd66d0d70a"
        },
        "item": {
          "id": "ef93a3d0-156e-4bb9-8989-c5fa9745c99f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2fd09c5c-8c4e-4957-9301-9b2ee7b79928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2643105a-447a-4bac-923c-c5cc9631fae5",
        "cursor": {
          "ref": "2996e865-e03f-4c5f-88f9-981384256a56",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "19eb9737-d2c2-4e5f-b5fa-a79166f7e222"
        },
        "item": {
          "id": "2643105a-447a-4bac-923c-c5cc9631fae5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dc11f3ed-db8e-4d18-a329-5820edeb6c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b485b73c-5727-4bd6-a633-e19314e8f9f7",
        "cursor": {
          "ref": "61411d4a-e2c0-435c-862a-0ffa1ba72bfa",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9a711c82-d3e7-4b33-8a32-08825534958d"
        },
        "item": {
          "id": "b485b73c-5727-4bd6-a633-e19314e8f9f7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6c75e538-daf9-417d-9aa8-2c01a26abe35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4ed7df-aa25-4044-a5a0-a260abb98f51",
        "cursor": {
          "ref": "6ffb9a2f-9da1-4057-828a-88e34676cb24",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ca060771-a6e0-4431-920d-f2b706cb82d3"
        },
        "item": {
          "id": "6d4ed7df-aa25-4044-a5a0-a260abb98f51",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "eefd7bae-08e9-417c-8445-e407322aced9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6dc001-5ecf-40f6-9e37-71efbae29ee2",
        "cursor": {
          "ref": "1a47391a-d68f-4648-8576-202fecbd0edb",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6233eef6-e6c3-4da7-845d-af5bc1fe525a"
        },
        "item": {
          "id": "4d6dc001-5ecf-40f6-9e37-71efbae29ee2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "821cbec9-5cd6-440e-8ec3-a9a258c3249c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3123881-5a6d-48f5-b9ea-07ecae15c17d",
        "cursor": {
          "ref": "fcf52d13-c8a9-4a1f-b6e5-365b89c9b2cf",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9ab201c0-cb13-47e0-82b5-6dd1919ec70f"
        },
        "item": {
          "id": "a3123881-5a6d-48f5-b9ea-07ecae15c17d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6d7ddf88-40f4-452a-9e7c-695a62732c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ace631e-f137-4d4a-9351-60f08a7a19cd",
        "cursor": {
          "ref": "e72b091d-bcd0-475a-a0f8-783dfdc59270",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3ac4e45b-7630-480c-9ccc-9a073b67270a"
        },
        "item": {
          "id": "0ace631e-f137-4d4a-9351-60f08a7a19cd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c62e4865-1fab-42c8-8118-5ff3521fd17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e0b5d7-aeb4-4f30-9ce6-807f517c60e8",
        "cursor": {
          "ref": "39f66a3f-9df2-47bd-8104-8a89c242ea3a",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c4413db7-6b07-4df3-ae97-f14c8794a204"
        },
        "item": {
          "id": "25e0b5d7-aeb4-4f30-9ce6-807f517c60e8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b32bc6f1-a2bc-44d2-8dbf-c3f4466a1629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce561e6-7a96-47c0-b59e-a88100cbd103",
        "cursor": {
          "ref": "aa4f2909-30e2-427a-9d65-09d8f023c3ff",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "af0fdd2a-0c15-4468-a72c-e2e373ffa91e"
        },
        "item": {
          "id": "7ce561e6-7a96-47c0-b59e-a88100cbd103",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "13698ab2-96cd-48ac-ba79-a3a412749ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70626997-9cbe-4a41-9ac2-0e9bd7fa1606",
        "cursor": {
          "ref": "f2d1c704-8ea2-4334-9e9e-5bc7309e8bbd",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "895cb39d-0f11-43a3-9eb1-5f1cbba0faa6"
        },
        "item": {
          "id": "70626997-9cbe-4a41-9ac2-0e9bd7fa1606",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6194d68b-f8e8-4195-85d5-b5ad2946ce52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0caf4ce-6f6d-495a-bf09-5997996bb959",
        "cursor": {
          "ref": "27312c1c-113b-4ab3-9ae9-d83760650d62",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c31aca0e-add6-40af-88a9-f87343114f2a"
        },
        "item": {
          "id": "c0caf4ce-6f6d-495a-bf09-5997996bb959",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ad710999-1bb8-49ff-8acd-f8847fa8edfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d704d85-a69a-412b-ad8a-7828b2833c69",
        "cursor": {
          "ref": "207284bf-1520-4a6a-b6bc-402195bce9a4",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1c27f971-089a-47cc-b756-a56bc46dc8d8"
        },
        "item": {
          "id": "0d704d85-a69a-412b-ad8a-7828b2833c69",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f42398c0-c80c-499b-8556-57d27fedd1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd7e9b5-8356-4a0a-a722-040354a3d70b",
        "cursor": {
          "ref": "d95fece0-f11b-4f80-8164-5c9defa11606",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d7fefec7-dd0f-4ba2-9942-7682614f9af2"
        },
        "item": {
          "id": "acd7e9b5-8356-4a0a-a722-040354a3d70b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "77d52917-94ff-4639-a496-bf6ae5ee06f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "9bfb7010-030a-43e7-93ca-d82600711286",
        "cursor": {
          "ref": "976ef7fe-1ffd-4dd8-b1cf-b5cd1119a715",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4fec6eb7-5e79-45e0-9082-7a8282ecdf92"
        },
        "item": {
          "id": "9bfb7010-030a-43e7-93ca-d82600711286",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7ae0fc0b-45b8-460b-a047-7edd9b62f510",
          "status": "Created",
          "code": 201,
          "responseTime": 2223,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3322b16-7246-463b-a060-03fb1a4561fc",
        "cursor": {
          "ref": "867c4944-70bf-43e9-ae6c-d27bbf22e654",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b807bb4c-1909-4b9b-893d-798006ba6a78"
        },
        "item": {
          "id": "a3322b16-7246-463b-a060-03fb1a4561fc",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "56c099d0-f4bf-42f3-9c4e-542bec325452",
          "status": "Created",
          "code": 201,
          "responseTime": 2330,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdb9bca-d466-41fa-882b-c94e0245b82f",
        "cursor": {
          "ref": "16df1eac-e833-42c6-81c0-143d69afc031",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "97d4191a-b921-4a9e-9b5d-32c6d4f98198"
        },
        "item": {
          "id": "9bdb9bca-d466-41fa-882b-c94e0245b82f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e9499196-6f45-4ed5-885d-db037322971c",
          "status": "Created",
          "code": 201,
          "responseTime": 2491,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e222633-b2b8-428e-bda0-f6f6dc00a236",
        "cursor": {
          "ref": "6cf00a48-969d-4d39-aee7-f0383fbf8d1e",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b171f9b6-c363-4cc7-a46c-5075690a0719"
        },
        "item": {
          "id": "0e222633-b2b8-428e-bda0-f6f6dc00a236",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "57b76330-4d19-43c0-846a-1b318753c3ba",
          "status": "Created",
          "code": 201,
          "responseTime": 2440,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b96c17c-0fa0-40e7-b371-53c69b017b9c",
        "cursor": {
          "ref": "b65b3470-4817-45de-a77c-d328f6a0db2e",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ecb8387a-9217-40a4-a663-904ddca9dee6"
        },
        "item": {
          "id": "8b96c17c-0fa0-40e7-b371-53c69b017b9c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "92c86e98-544d-4a98-86ab-9bc74eb37fd2",
          "status": "Created",
          "code": 201,
          "responseTime": 2427,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-15T00:42:52Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-15T00:42:52Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d0aab097-fd6b-4ad3-ae4d-24bceee1d54b",
        "cursor": {
          "ref": "f3ae9b2c-19f3-4213-94a3-47b621db8ac2",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c7a1b834-20a6-4bf7-bee7-6105996543fd"
        },
        "item": {
          "id": "d0aab097-fd6b-4ad3-ae4d-24bceee1d54b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6f45bc9f-3a3b-4fd4-9683-c6e5f87685fc",
          "status": "Created",
          "code": 201,
          "responseTime": 2733,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4480d012-659c-47ad-8ad5-fb771f139dd6",
        "cursor": {
          "ref": "0f4919a7-d44c-4f4f-a84c-9d170e34a8d3",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fc804677-fb2d-4646-b8e0-a449e53105d5"
        },
        "item": {
          "id": "4480d012-659c-47ad-8ad5-fb771f139dd6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0cde30cf-2944-47ee-af4b-083f02ae1aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac3d7b7-b3a2-473a-8b06-ddf4ce9ba3a0",
        "cursor": {
          "ref": "9e2ab44a-3a42-4cb6-91df-14a5ed1d2ad7",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "396cc6d8-d6d5-44e3-b237-c67b97cfaeac"
        },
        "item": {
          "id": "0ac3d7b7-b3a2-473a-8b06-ddf4ce9ba3a0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "621ecc3a-b6f5-45a7-a5c0-36437c82874b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46124d7c-398a-428f-b551-75df73718bde",
        "cursor": {
          "ref": "6f5a0a55-ef58-4c8f-aefb-dc9aceb7c997",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b97cc57c-da2b-482c-8a8d-3e56c63f7d2c"
        },
        "item": {
          "id": "46124d7c-398a-428f-b551-75df73718bde",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "af9707f1-3945-4b57-9d07-5d0f834a57d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac5e4b2-5929-43dc-b949-a012ddca6f96",
        "cursor": {
          "ref": "7f7414d5-6587-4b54-a639-c906050f4fb2",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "17755586-bef0-4e56-bf7c-ee1795ff40d4"
        },
        "item": {
          "id": "4ac5e4b2-5929-43dc-b949-a012ddca6f96",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8109a1dc-2f9f-4084-8301-cb714d771aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123f8ca2-d746-4de4-9b06-dfd541a5ed72",
        "cursor": {
          "ref": "c0cda22c-9bcf-4533-9d95-1a57379ed244",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3a9a75ac-0e2c-48b3-a8d3-4f9814a280b1"
        },
        "item": {
          "id": "123f8ca2-d746-4de4-9b06-dfd541a5ed72",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3b9aba3d-84ac-4d56-8352-8d8ef82cd524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c94048-50b0-4fdc-8870-a3cccec2cc9d",
        "cursor": {
          "ref": "c7543d38-d3bb-41c5-90ff-2fbf98f71643",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "48594017-702d-4347-9edd-f343d90aab4d"
        },
        "item": {
          "id": "07c94048-50b0-4fdc-8870-a3cccec2cc9d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d79dd7cd-5384-48a6-a081-ec6b5acf0001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0ad3cb-6449-491b-987a-c9030c8eb935",
        "cursor": {
          "ref": "41d29995-9426-4f8f-a824-b2aba1fdbb50",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8583a903-8d36-4a0e-8d1c-cf6459f4e417"
        },
        "item": {
          "id": "2e0ad3cb-6449-491b-987a-c9030c8eb935",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d68a24e3-bb34-444c-84c5-ffeb03e56f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a987cd-d5ca-4fea-b40c-13d7cf4bd5cd",
        "cursor": {
          "ref": "9cfd8285-acb2-413b-ba35-27881e21c28f",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c47f9eaf-8f95-4084-8d63-027c3db33edd"
        },
        "item": {
          "id": "c4a987cd-d5ca-4fea-b40c-13d7cf4bd5cd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "497acd76-ee5e-4592-aee8-806f8ed5ce3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051196f8-76c8-40b7-8ce4-5eb4f5cce06f",
        "cursor": {
          "ref": "4099f8d7-0d62-43e7-ab9c-c6c08673e262",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "86d8a421-bb72-4850-b9bd-8801959c77c3"
        },
        "item": {
          "id": "051196f8-76c8-40b7-8ce4-5eb4f5cce06f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "216aefb3-d16d-40b7-855a-1cfd1a369fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f386b81-5492-4823-a25c-10e71b260e59",
        "cursor": {
          "ref": "800b4c64-71cb-41d0-9c3c-0636cd81c0e6",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3a374a6f-0515-417f-821a-89710b472a1c"
        },
        "item": {
          "id": "4f386b81-5492-4823-a25c-10e71b260e59",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8d28d57a-bb0c-4751-8387-f19d78253656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20f0a54-4384-43dc-9f36-e923b1c4b1e2",
        "cursor": {
          "ref": "51da0c02-c8bd-4528-a783-921c42bf9b97",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "96fd4d55-e1a1-4778-9fc7-e58760080ff3"
        },
        "item": {
          "id": "b20f0a54-4384-43dc-9f36-e923b1c4b1e2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0081ed98-5748-42f7-bf7a-79f47f71f62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e7527c-a7b9-45f2-bb20-beaadfa1820d",
        "cursor": {
          "ref": "5c506cac-38f5-4c58-a450-32304ac902fe",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c0cb8144-f0d7-4cec-966a-98e1ad1c1437"
        },
        "item": {
          "id": "30e7527c-a7b9-45f2-bb20-beaadfa1820d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f03fc255-d396-4025-bc39-18785c66b86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b0c525-ce29-4738-a53e-85d2f5d58c76",
        "cursor": {
          "ref": "7020cc16-8ffa-479c-8987-387003f9df4f",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d1da70b5-3c25-4fe7-bb07-0780e047b68d"
        },
        "item": {
          "id": "c5b0c525-ce29-4738-a53e-85d2f5d58c76",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2de8a613-6711-4dd4-b811-51556e283e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c60240-f020-43bd-860c-00fc3c87bee4",
        "cursor": {
          "ref": "c6df004a-ce2e-41fb-a7bb-cddc108ab2e4",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eca06e35-296b-42cf-acb3-c7ebcd0258dc"
        },
        "item": {
          "id": "b4c60240-f020-43bd-860c-00fc3c87bee4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "730d8f45-5410-4d68-91c6-610ff86dc9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e4dcdf-b24c-44e2-b778-33ae6fae56fd",
        "cursor": {
          "ref": "ba50507a-d802-4ac0-be2f-720c9e8693f8",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "191680ec-87ce-4723-bd11-8b13ab0e2c2d"
        },
        "item": {
          "id": "a6e4dcdf-b24c-44e2-b778-33ae6fae56fd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "069e9ee7-4378-4d9c-be8b-6f7e8fe91a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73127098-f08d-46b6-a848-25786be843ef",
        "cursor": {
          "ref": "61f7963b-cd06-47bf-895d-b48343b41fb0",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fafc20e3-0fac-4bf5-a626-4507b84ac3e6"
        },
        "item": {
          "id": "73127098-f08d-46b6-a848-25786be843ef",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "30f48d2a-5910-49a5-9b75-b98a52668e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8108d7-18e1-4888-8fbd-3ded4f7f87e0",
        "cursor": {
          "ref": "49324a52-3da7-4cb0-905f-fab43a0aa145",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f82698e9-2fa8-4c7b-8f92-a10ec228a5bd"
        },
        "item": {
          "id": "5e8108d7-18e1-4888-8fbd-3ded4f7f87e0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a81b5a98-fa39-4008-917f-8e07bb6d2402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ac00b7-acf6-45da-a2a2-dbc1731a1be1",
        "cursor": {
          "ref": "96af3aa4-64f4-43ca-ab97-d39ab7ea4981",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2ae0d818-2bd0-44a8-a1c4-df71b93a4a0d"
        },
        "item": {
          "id": "13ac00b7-acf6-45da-a2a2-dbc1731a1be1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0470274a-8adb-447f-9a33-3de621ce45e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504318c3-90f6-4404-8636-e339f63574f5",
        "cursor": {
          "ref": "5d02e07f-5cb3-4f2b-89bf-93fbfd0f69b0",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "73f05197-0e04-4388-8ca2-5627e4aeda20"
        },
        "item": {
          "id": "504318c3-90f6-4404-8636-e339f63574f5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ddd20d13-0d4b-49fa-a05b-fcbfa9e122ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b868e3bc-1240-40ed-8da1-5956725bb52e",
        "cursor": {
          "ref": "901d9fb4-f53c-4e59-ae83-967cbef93d45",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2cfee6bc-6a5d-46b2-b248-8f15d962ceac"
        },
        "item": {
          "id": "b868e3bc-1240-40ed-8da1-5956725bb52e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "273c9f8c-8707-4e57-8205-3c90a6d85d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed908398-f59d-4597-8b23-2ec299374780",
        "cursor": {
          "ref": "fea1c153-c905-45b0-a861-ea088c37e130",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8716e104-abb0-4ce7-b973-01791d17b749"
        },
        "item": {
          "id": "ed908398-f59d-4597-8b23-2ec299374780",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7c0e720d-ccab-4e61-ae61-6a860a0660d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60238b79-7362-418a-a5e9-31662e93c9de",
        "cursor": {
          "ref": "d391a381-db77-4755-83de-c166b1e67e03",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "238959d6-89dd-4a04-8da5-63e7f82fadc4"
        },
        "item": {
          "id": "60238b79-7362-418a-a5e9-31662e93c9de",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cec91fee-b300-444a-90b0-5752aae3a946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc4140b-b555-4115-9047-5ae4e8adbee2",
        "cursor": {
          "ref": "7ee9963a-5272-40ed-bd22-9de9840c6d62",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6a92c3be-9d79-4fe9-878b-a1061856e0c3"
        },
        "item": {
          "id": "8cc4140b-b555-4115-9047-5ae4e8adbee2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c7d58fea-b074-4aa7-afc4-00d4dff7778a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e463e7-f989-4024-a5d5-8604896b78de",
        "cursor": {
          "ref": "e4439949-5a0d-49c5-bf3d-991fcdd9f308",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9727e7e5-48bf-4c4e-8e9f-3505a85c9603"
        },
        "item": {
          "id": "e0e463e7-f989-4024-a5d5-8604896b78de",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "241e9caa-cb18-471e-8962-af4cd6bfea34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aed64e4-1c7e-4338-a08c-be1bf1514660",
        "cursor": {
          "ref": "bd36638c-fc3f-4eba-9af6-d20210384ef2",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5243304f-b53b-4142-9cc7-0589a502cb0c"
        },
        "item": {
          "id": "3aed64e4-1c7e-4338-a08c-be1bf1514660",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ee57e871-cf55-496f-9689-ae4939c785f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e21433-d32e-4059-846f-5dc1f644b842",
        "cursor": {
          "ref": "51d920a6-9617-4293-b0fa-c9204df4bf62",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e4a12bcb-a150-4219-8472-19fffc32ca95"
        },
        "item": {
          "id": "c9e21433-d32e-4059-846f-5dc1f644b842",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eff66b7b-fd5d-4cda-8e66-78e37a2fea91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f727893c-b175-42de-8263-082d3094d1fd",
        "cursor": {
          "ref": "d1ed7d80-f7e2-4497-8442-bb8cb5641b25",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "772440a6-6e27-465c-886e-a177da38972b"
        },
        "item": {
          "id": "f727893c-b175-42de-8263-082d3094d1fd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6a3c7c47-41f4-4275-8a69-5a058ce02332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c2add7-ff52-415a-9da0-8cf97b1c74c4",
        "cursor": {
          "ref": "c767cef1-bb48-40cc-8cca-561f1542fe32",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "db32e379-4d34-4145-b469-e2f2aa5db9d3"
        },
        "item": {
          "id": "a9c2add7-ff52-415a-9da0-8cf97b1c74c4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2a401ca6-c09b-4a0d-b7de-abc8114b347f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddfa611-ec60-4c09-9494-b45d18817232",
        "cursor": {
          "ref": "8c595038-d665-492c-a2a8-0963e7a4cc02",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1f580392-f449-49ea-8a9f-5ed53df13a48"
        },
        "item": {
          "id": "8ddfa611-ec60-4c09-9494-b45d18817232",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4bb85b44-cf74-4376-8d6e-973ba7ee5792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f0879d-4fe0-44d2-926a-2d8e0a80354d",
        "cursor": {
          "ref": "2cfc2695-3b6a-4003-97d2-d79bcd4a6fc8",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5c3f5f74-a98a-443a-af26-2c226c5b487f"
        },
        "item": {
          "id": "21f0879d-4fe0-44d2-926a-2d8e0a80354d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5f5cb552-9940-4a22-96f7-b7708198126c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdbc196-49f4-4d8a-a5fe-32c96a235e8d",
        "cursor": {
          "ref": "8dc9fd86-c739-4ca5-9c26-7f975408abad",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8cbce914-9bce-4797-b97f-53c3c09c5d7e"
        },
        "item": {
          "id": "ccdbc196-49f4-4d8a-a5fe-32c96a235e8d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "551566a0-aa43-4601-adf9-28e2704c552c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6096fc9b-ca16-4b60-b25c-6102a9315086",
        "cursor": {
          "ref": "4597bed7-2b0a-43da-8bda-645b2c0fd55f",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3d5cbfe7-ae8f-47d9-a011-c032065cf6d8"
        },
        "item": {
          "id": "6096fc9b-ca16-4b60-b25c-6102a9315086",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c7e0f82f-2b0d-434e-b2a5-88fa321bacca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d08799b-6467-4955-acb4-e218ec00a4b1",
        "cursor": {
          "ref": "0c765c46-310d-44fb-924d-c3b78e424d71",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b3c5e578-7df5-4ba0-9977-19d42e8eb175"
        },
        "item": {
          "id": "8d08799b-6467-4955-acb4-e218ec00a4b1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "364b76c2-1b93-4988-a320-6811f87bf531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "57b03d27-9c7d-4a5e-a303-2d8b73350400",
        "cursor": {
          "ref": "cb923e20-397b-47dd-99a9-e36c4361055a",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a95d9fb2-f3d4-4daf-8804-c23e9f70e125"
        },
        "item": {
          "id": "57b03d27-9c7d-4a5e-a303-2d8b73350400",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "09071174-9875-4824-b84f-0e3034d9f625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3a73d8-0466-44b0-9a92-dbfcbd3b69c7",
        "cursor": {
          "ref": "301273d0-e13f-4237-8c30-85ebe2252e40",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "17c77ec0-c707-4708-8c3d-8a729269c641"
        },
        "item": {
          "id": "9b3a73d8-0466-44b0-9a92-dbfcbd3b69c7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c6182b0a-c831-4124-b739-aae78cc7e231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359ce910-b494-47e8-9570-482e13be9b12",
        "cursor": {
          "ref": "57cf77c7-8cd3-4a30-accf-c320de532da2",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d08150d3-ff21-4af9-bc6a-fc26c32af5ea"
        },
        "item": {
          "id": "359ce910-b494-47e8-9570-482e13be9b12",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fe1c960f-d133-40a1-afde-3263a1c38538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79ff541-fa6f-490f-93b0-7a90d512affe",
        "cursor": {
          "ref": "8dcb4386-5156-4eaf-9c17-7ad8edee38a2",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "858edd8b-76f5-4ac9-b78a-541af86432db"
        },
        "item": {
          "id": "e79ff541-fa6f-490f-93b0-7a90d512affe",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "af809bc9-b3ca-4265-b0f8-cf16617d1695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2e51cd-67fc-4715-857f-a00e95e9b543",
        "cursor": {
          "ref": "793e622d-f6d6-4a69-8b15-be884d0fd717",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2607544b-2bcf-4f5b-b29c-e2d995be34d1"
        },
        "item": {
          "id": "9e2e51cd-67fc-4715-857f-a00e95e9b543",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "19368190-b80a-4248-9ade-8eea7be160d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170e8e2e-19e0-46e0-880b-0e5ccf5d99d2",
        "cursor": {
          "ref": "ac9c4786-ecef-43f1-ac74-7def63c9ac79",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "13cf9855-b13a-4434-b90c-5804868e0e48"
        },
        "item": {
          "id": "170e8e2e-19e0-46e0-880b-0e5ccf5d99d2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "21a34b22-ddf5-4b7b-8e76-df53cd7635da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6518d5-dbd2-4fa5-85cc-27183fd6ef09",
        "cursor": {
          "ref": "c65f4b40-d5c2-4c78-b4c8-6ccdf1be9d44",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8a290067-3146-4d46-8404-b9a7d43bb645"
        },
        "item": {
          "id": "5e6518d5-dbd2-4fa5-85cc-27183fd6ef09",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cbda4ced-bcef-4866-8be6-60f6b031338c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd551f8-041d-4e00-a919-f90586fc550b",
        "cursor": {
          "ref": "4e4b2aeb-74ca-4550-95d5-472ccbf04b37",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8e3cfc2a-5523-4c7b-bdc3-b6ff3a5e3e3a"
        },
        "item": {
          "id": "cdd551f8-041d-4e00-a919-f90586fc550b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f0147338-ccf9-4b7f-b75d-3db9901232d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a337e5c-cf1d-456a-b547-6eebbd74f70a",
        "cursor": {
          "ref": "43592480-5cda-4243-b68d-047f108fe0b3",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0e07d50c-01e1-4bb3-a9ef-9a1d1d63bc7e"
        },
        "item": {
          "id": "2a337e5c-cf1d-456a-b547-6eebbd74f70a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8d9063fb-a152-4427-9f48-3d0d93220969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae94a65-9a77-4d32-bff7-529c66ebf8c2",
        "cursor": {
          "ref": "c4ca2e17-a27f-4ddd-88dd-b68f36368980",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "013a7cbe-189a-4a71-8610-4ca2bb880153"
        },
        "item": {
          "id": "3ae94a65-9a77-4d32-bff7-529c66ebf8c2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5748be2f-ff47-4811-8973-7ca30bfd2e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d15ea6-98ae-4a31-a62f-f42b6e5cd2f6",
        "cursor": {
          "ref": "ce020924-8864-4584-9cd0-940a23665eec",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c7912f07-856f-4ee5-b32d-09d1160068c0"
        },
        "item": {
          "id": "78d15ea6-98ae-4a31-a62f-f42b6e5cd2f6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a378daad-d957-4b57-a59d-28ab18316d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40617ab9-c773-4937-8ce7-18d1c908e45c",
        "cursor": {
          "ref": "d055aaac-4912-4afa-8faf-a72a771c56c7",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8552e1c3-a5f0-48c6-8b25-b59f5ab2eecb"
        },
        "item": {
          "id": "40617ab9-c773-4937-8ce7-18d1c908e45c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ffd8550-2d52-41ec-a411-b9a169de075f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ca8993-5ba3-4a5d-b988-4191682e7256",
        "cursor": {
          "ref": "fe5754b9-c0cb-4507-86f6-57b02cae5789",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c85d18e3-4e4a-4759-bbe0-7860ab48413b"
        },
        "item": {
          "id": "b3ca8993-5ba3-4a5d-b988-4191682e7256",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d4c763c3-f8a6-44e4-ab5c-c30359e3aa35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b52b902-5d07-4a9a-92fc-2a9fd0d74c54",
        "cursor": {
          "ref": "2adac8cd-8479-4639-9fad-4a33f80ce952",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "422d435e-5c73-43f6-8e0f-341afd6aa1fe"
        },
        "item": {
          "id": "3b52b902-5d07-4a9a-92fc-2a9fd0d74c54",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "75e33550-7603-4180-b9e6-f862a1f6cbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafae784-8d08-4bbd-85fd-dc211ca99479",
        "cursor": {
          "ref": "816973f8-7c3e-468e-9acb-71883aae7cb7",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1d38ff59-6619-44ea-a4a4-88ee9b539565"
        },
        "item": {
          "id": "eafae784-8d08-4bbd-85fd-dc211ca99479",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b930f606-ceae-41e7-9626-cb00803d8518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86e1683-0dbd-49f4-b87d-93f76732a1ca",
        "cursor": {
          "ref": "40ceeddc-6f6e-40a8-bd13-d79e955ba9e4",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "01665c79-38ff-4255-b628-cf4fcbe75dfd"
        },
        "item": {
          "id": "a86e1683-0dbd-49f4-b87d-93f76732a1ca",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "64eb8771-d266-428d-8046-09dc21efafe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6915e690-a33f-4566-b660-9bee7f258a34",
        "cursor": {
          "ref": "deb7ceca-1205-455c-99f5-2331515f3a2b",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "300f05db-bb5f-4761-ba6e-d9c24cdf493a"
        },
        "item": {
          "id": "6915e690-a33f-4566-b660-9bee7f258a34",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7b412fe9-5c6f-4543-94f0-272704025898",
          "status": "OK",
          "code": 200,
          "responseTime": 312,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "e98e1e65-5289-4a27-8fe6-570ded866ce8",
        "cursor": {
          "ref": "1ff59ffc-3915-45d4-a8d9-b1b996b9e124",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dc3bfce4-2fb0-4bcb-af3c-6eede03cc440"
        },
        "item": {
          "id": "e98e1e65-5289-4a27-8fe6-570ded866ce8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "83c898a3-9934-426f-a9db-24434be21bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fa3d06-b744-44c1-a929-0b85ee280ebf",
        "cursor": {
          "ref": "b81f868f-4524-42c3-a5c3-d4d330e36471",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "abeda25a-d978-434a-b0f8-cb25d8217907"
        },
        "item": {
          "id": "73fa3d06-b744-44c1-a929-0b85ee280ebf",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f01f7840-ebc9-4a7d-a8e0-4749ca738734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fdae80-77ad-4d38-9d36-921501fd4b12",
        "cursor": {
          "ref": "aac90277-bd66-41f1-9488-a26f72bef83c",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3e1f9bcf-9568-4a6b-bf33-f171b748ae7b"
        },
        "item": {
          "id": "f9fdae80-77ad-4d38-9d36-921501fd4b12",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "32f03c47-60d3-448b-ad4a-3ae3a3d4f7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d60fbe-6e4b-467f-b5c7-f5bdcadd1d1a",
        "cursor": {
          "ref": "9f3a39f3-68cb-4322-ab65-a65b6cb2278a",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8275a2bd-d8bf-4f86-b08d-90af6a796ccc"
        },
        "item": {
          "id": "96d60fbe-6e4b-467f-b5c7-f5bdcadd1d1a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b457fa19-1e9e-46c2-af9b-afc529a997e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790077ee-3024-4921-af95-72a0ab25cb84",
        "cursor": {
          "ref": "3a4d21d3-011d-46ae-8964-eb31135d93f2",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b559c6d6-8b14-4e55-89fe-3350a688a8d7"
        },
        "item": {
          "id": "790077ee-3024-4921-af95-72a0ab25cb84",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c680258a-1caf-4e6a-b6c6-06dc3e0585af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43987f95-4150-43bd-be70-7b13675f50d0",
        "cursor": {
          "ref": "76a0bd25-0c45-4932-a1dc-680ff77250ca",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f4a7449b-9714-4029-8459-82908fb41d9c"
        },
        "item": {
          "id": "43987f95-4150-43bd-be70-7b13675f50d0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "809760c4-2726-4a6d-a88c-a6d25956bcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45027be8-fb60-45ac-90ab-a9c4885464c6",
        "cursor": {
          "ref": "88a6041a-863c-48d9-86ec-68248f770805",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a5b40be1-db2e-44af-9b65-02b1d8814faf"
        },
        "item": {
          "id": "45027be8-fb60-45ac-90ab-a9c4885464c6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b87e3542-899d-484b-855a-8f5f2967cd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fac0457-5496-4e8b-9a6c-38fba2932ce3",
        "cursor": {
          "ref": "17f12fdc-7980-4eb8-bd6c-e3f2eaea7fb8",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "64a0059b-e2a7-4045-b169-d6dadcb7c1b6"
        },
        "item": {
          "id": "5fac0457-5496-4e8b-9a6c-38fba2932ce3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9f831609-cb8b-4210-9459-0372d8eeb6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea10436-8702-45d9-9725-691566a6b020",
        "cursor": {
          "ref": "64bf48f0-e48b-49b7-966c-e69e468bc5ee",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ea4328a9-ef8a-4971-ab0f-25177e4d0973"
        },
        "item": {
          "id": "cea10436-8702-45d9-9725-691566a6b020",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "54316297-f9c0-471d-adaf-8c390fe87ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2237cc68-63b9-4b37-a753-0696ea8291c0",
        "cursor": {
          "ref": "e2ab9971-86ba-426f-b43f-b3f327623a35",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1f60b600-55a8-4ab5-be30-03e978d7969d"
        },
        "item": {
          "id": "2237cc68-63b9-4b37-a753-0696ea8291c0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1f1d7002-82e5-43a5-9960-f3f2ece4beb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b44db8-49f0-40e9-b0db-a4452451e27b",
        "cursor": {
          "ref": "20785398-43d1-44da-8e28-e2ef962d1388",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8a0ef730-03ff-45ef-a415-f7cc59a6bd4b"
        },
        "item": {
          "id": "c0b44db8-49f0-40e9-b0db-a4452451e27b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "274d3ee1-ca13-41a1-9764-7396293dd218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc69886-6537-493e-8371-67b1400d8963",
        "cursor": {
          "ref": "1e9a9c62-1fe2-475b-beba-e2ab3402bcea",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "99005c90-5b84-4b11-8e31-c4389d215a6a"
        },
        "item": {
          "id": "3bc69886-6537-493e-8371-67b1400d8963",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8ee090ad-8255-49f2-863c-b412c52128f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad78a12a-4e53-4aac-a394-0e09d7ee8d8b",
        "cursor": {
          "ref": "6857c3a2-2d59-40da-ab77-76eb1cd04876",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "08fe47e6-c472-4ceb-ad7a-a228bf11b14b"
        },
        "item": {
          "id": "ad78a12a-4e53-4aac-a394-0e09d7ee8d8b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "04780e6b-1338-4fb4-b773-10b9923d0230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d31e0d1-4faf-4af9-b1a9-7d712495c16a",
        "cursor": {
          "ref": "9079c6de-76b7-481a-a53d-a46161e5b904",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "47eede43-4455-408c-94bb-67c75a45d0fc"
        },
        "item": {
          "id": "6d31e0d1-4faf-4af9-b1a9-7d712495c16a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f1f94fe7-1ec8-4fbd-8eec-1a8fe7beb844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d256975-c742-4f12-a093-ad99ee6e2c34",
        "cursor": {
          "ref": "253d5d32-e21f-4674-92ba-7fb188b775dd",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b53aa5e9-a154-456f-af25-6fbff9db9541"
        },
        "item": {
          "id": "4d256975-c742-4f12-a093-ad99ee6e2c34",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a1f3269a-b2e9-410c-a71f-daf7858d763e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6302d3-5d78-414e-804b-6dc1c6e4f66b",
        "cursor": {
          "ref": "d0157758-a842-4981-846f-b3f74c8f9add",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4989788f-9ef8-42ef-8fad-b1dfad665ab0"
        },
        "item": {
          "id": "8b6302d3-5d78-414e-804b-6dc1c6e4f66b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6992f35c-3fff-43c4-8d70-88cff39e6cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2b9c2b-7f30-4362-bf00-f428a6af0b8a",
        "cursor": {
          "ref": "cafc7dbf-a83e-4795-960d-7038cd3dd1e1",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ca26f3a7-8a43-474c-8553-aa67c9884911"
        },
        "item": {
          "id": "8d2b9c2b-7f30-4362-bf00-f428a6af0b8a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "010509f9-0f17-4f8e-8c90-c5ede9d61d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fb7703-b639-47e0-bad1-106d825f407f",
        "cursor": {
          "ref": "f020da3d-ce37-4707-bc53-95e0738996b7",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d6bc41bb-af07-4b4e-b66e-45fa1bfbfea7"
        },
        "item": {
          "id": "67fb7703-b639-47e0-bad1-106d825f407f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dfce0f5c-3cdf-4c3d-81f1-f4360ae99773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a597d6c-efcf-4d9b-a7f4-b7c93babffa5",
        "cursor": {
          "ref": "54752581-b848-4e91-8193-64746e16b879",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7b3c66ff-72c5-4be5-b8ea-00565ed0f0d7"
        },
        "item": {
          "id": "8a597d6c-efcf-4d9b-a7f4-b7c93babffa5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d81b1286-15db-45a8-90d7-554fe8cf8679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61222a52-2bc2-43bd-a6a7-9b1ecc4274ab",
        "cursor": {
          "ref": "e1b0cd44-ef65-4dc0-812c-9b7835c99b4a",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "041635ed-8c49-4cfd-81ac-471c09b075db"
        },
        "item": {
          "id": "61222a52-2bc2-43bd-a6a7-9b1ecc4274ab",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c9be2b6c-5b27-4938-b4b3-f837f9eca67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdf3793-5c7f-42e1-8547-4cca849bd60d",
        "cursor": {
          "ref": "605c574b-9344-42ec-9cb1-de9f034fec0e",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "448016e5-7b10-4ee6-812b-6324dc8b9413"
        },
        "item": {
          "id": "cfdf3793-5c7f-42e1-8547-4cca849bd60d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "48262e21-de6f-4240-8b19-cf4ea14a8742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5eba2b-6405-48df-b5da-056c33f21711",
        "cursor": {
          "ref": "9d76d897-5a00-4a91-a4e9-737c27aecba2",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a38561fe-0120-40ff-932f-6810796dec57"
        },
        "item": {
          "id": "bb5eba2b-6405-48df-b5da-056c33f21711",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "32cff1cd-e824-42a2-8837-d05a62b25b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8a9fd0-007f-43c1-b0ca-15d1bb1cb6e8",
        "cursor": {
          "ref": "1de6acf4-05be-44a5-a8d9-38d8aba8915e",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c0372cd1-5857-46b9-b3f2-f7be9e2ea2ab"
        },
        "item": {
          "id": "3d8a9fd0-007f-43c1-b0ca-15d1bb1cb6e8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e62dfca1-9df3-4e1f-afe4-053e9ef7fb99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b2be28-2ab7-4043-b65d-e94884cf73d4",
        "cursor": {
          "ref": "f3a62dc2-6183-41f1-83e1-2ed9e76bcc7e",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4d314367-1144-44c7-bb78-ad97b60acad5"
        },
        "item": {
          "id": "f5b2be28-2ab7-4043-b65d-e94884cf73d4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dec18cd6-4068-41c5-843c-fb2b7586b1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98476a4d-14d6-4d96-8db3-0e95ffb17c48",
        "cursor": {
          "ref": "e904af65-f425-4c5e-96b8-7ec606395581",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a9225f90-37e4-40b8-9050-7f4e4cd336e5"
        },
        "item": {
          "id": "98476a4d-14d6-4d96-8db3-0e95ffb17c48",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "86032e46-75d7-445f-9611-a657dc04d000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ca6edd-2e0e-4af6-97fe-65c5fb5fe57d",
        "cursor": {
          "ref": "c5e8ef17-40fc-4136-9553-29b69d32e929",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "65160adb-aedd-479d-b784-c60d20bac52d"
        },
        "item": {
          "id": "72ca6edd-2e0e-4af6-97fe-65c5fb5fe57d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7b9ace31-b2c0-4eee-8435-60777b35e0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2144c99-8697-4895-89a6-e248936b06d7",
        "cursor": {
          "ref": "26716bf1-dce7-408b-b985-a451834a9676",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c66bf88d-4a47-42b8-8d14-ee48f466060f"
        },
        "item": {
          "id": "a2144c99-8697-4895-89a6-e248936b06d7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9b5058e2-2e90-435f-8ddf-fe19b659a534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159aea49-f7f9-4e01-94fc-5b959342dc0e",
        "cursor": {
          "ref": "3a8c5cdc-b151-4815-9879-18208e26b668",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bf634b14-7fdb-4fc4-acb3-1fa3f0285506"
        },
        "item": {
          "id": "159aea49-f7f9-4e01-94fc-5b959342dc0e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4304da1f-452b-4c99-b608-4fe3dba7e2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef17a92-fa0e-4e05-a5e8-d8d1c5cdc007",
        "cursor": {
          "ref": "0cf5fd19-5335-4a66-b605-9d8fc257933e",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4a7dab26-4069-42a4-95ac-bd426296948b"
        },
        "item": {
          "id": "2ef17a92-fa0e-4e05-a5e8-d8d1c5cdc007",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "509b28f9-3eb8-4f81-b6ea-181219b95bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7a7cca-65c1-4613-9fa3-55d3e0c50fbf",
        "cursor": {
          "ref": "341edd10-4849-46d0-85e1-c70d3a08a708",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a0027763-7bcb-4b97-af31-98e4e298fbad"
        },
        "item": {
          "id": "ca7a7cca-65c1-4613-9fa3-55d3e0c50fbf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a3234f94-260f-42e8-8218-03c03ca1b528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08606b58-7902-40a5-8c5a-e08156cd8d3c",
        "cursor": {
          "ref": "f6a72970-d8a6-4378-aa2f-3348b54f51a3",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9a47dc3d-00d0-4c9d-813f-af9c628bb2a7"
        },
        "item": {
          "id": "08606b58-7902-40a5-8c5a-e08156cd8d3c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "359228c8-c1ef-472d-9c20-6b73eb36042b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4130fbf-721c-4033-916f-c687095d65b3",
        "cursor": {
          "ref": "e923a080-b70b-47bd-bf19-7bc448456764",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fbd855d2-5863-4a3a-9ffd-0c0b66927e81"
        },
        "item": {
          "id": "c4130fbf-721c-4033-916f-c687095d65b3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e51a0ed6-0fed-426c-8459-547c1942b87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8e09f8-22b8-4355-9b00-1e4f54660929",
        "cursor": {
          "ref": "a8bdfb93-6944-41eb-b01b-fbff33c3cfa8",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "39ee295a-9d4c-451d-aacd-b9964befb49e"
        },
        "item": {
          "id": "aa8e09f8-22b8-4355-9b00-1e4f54660929",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "12d45e17-8053-4c35-a3f5-2851b43af4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fa83e3-ece1-4306-9b4a-f22ef6b38eab",
        "cursor": {
          "ref": "14fc9c2b-40c3-4a7e-9a8a-53a576d7945c",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2a8cc870-6cc3-4ace-b1d7-dffdd0fc3213"
        },
        "item": {
          "id": "66fa83e3-ece1-4306-9b4a-f22ef6b38eab",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6a9ebae2-1078-4c9c-8f5e-48e092691964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc600fa-13a0-4d2a-a8eb-946784ba8366",
        "cursor": {
          "ref": "caad38a7-926b-4179-84b3-da34aebea0a1",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "564ba0aa-6e2f-4e31-b324-0af17a349168"
        },
        "item": {
          "id": "3fc600fa-13a0-4d2a-a8eb-946784ba8366",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bdb8a1b1-3180-497f-9862-334af1edf887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403684ae-2b46-4e70-be29-23809fae6980",
        "cursor": {
          "ref": "b48dcd40-dbdd-4f33-948a-572fb4d8ac54",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c97affbc-1c3b-45b7-bfd5-e3299a83cc95"
        },
        "item": {
          "id": "403684ae-2b46-4e70-be29-23809fae6980",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "04e71db6-3776-45be-9515-c240e3a50c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54198cd-523c-4e72-bfd6-3aaa07499053",
        "cursor": {
          "ref": "35768fcc-e1f2-4cb9-a38b-cae5df4ae376",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5660c51e-494b-42e1-8df9-1fbb74388c67"
        },
        "item": {
          "id": "a54198cd-523c-4e72-bfd6-3aaa07499053",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "675e37c0-d45a-4ea5-9dbf-895f1f93fa02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254fecf1-685f-4fe8-bd84-5487bc84f326",
        "cursor": {
          "ref": "934e5936-67bf-4337-bc9e-d69ba7799ec0",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c16b7808-d1f0-443d-8f9c-1a44b5500413"
        },
        "item": {
          "id": "254fecf1-685f-4fe8-bd84-5487bc84f326",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dffe85ad-df44-407a-afdd-c21089ba9688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a955b1-df1d-4a0f-a9aa-285e2cdfb005",
        "cursor": {
          "ref": "9f54b8a1-a9ff-4085-8687-37db8283ff4e",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7d9e31b3-6c75-420d-be33-cb79f4acce93"
        },
        "item": {
          "id": "36a955b1-df1d-4a0f-a9aa-285e2cdfb005",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8243dbb5-17ba-41e5-9585-c1c87f123389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16068e6-ea41-4e0f-ad26-cb519661139c",
        "cursor": {
          "ref": "4daef5e5-1df2-4b4f-9f36-4c8629acd19a",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7954b70e-cea3-40b1-b74c-f07bdd8ec280"
        },
        "item": {
          "id": "b16068e6-ea41-4e0f-ad26-cb519661139c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2e0a5919-c732-41b2-9dd3-60047c481c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bad54e-3918-453b-8aa5-2b9e95e14a7d",
        "cursor": {
          "ref": "c7b5f8c9-af32-4ee0-a640-32e065325929",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bfbe8f94-06f4-461d-851a-05eb538c8dbc"
        },
        "item": {
          "id": "15bad54e-3918-453b-8aa5-2b9e95e14a7d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5aa994a0-ac3f-43bd-b5e1-b065cf571df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3e7e43-d241-496a-9ef7-81794a5a5b42",
        "cursor": {
          "ref": "017ad7b9-439f-4c12-b2d6-0da110f1db96",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f472595c-0f9f-43ba-ae81-0b13fcbbe471"
        },
        "item": {
          "id": "0b3e7e43-d241-496a-9ef7-81794a5a5b42",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0ceb688d-6163-4e53-b326-dfd491a44717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abda358f-f427-4de1-9d5a-9aae6ded49fe",
        "cursor": {
          "ref": "7d6bf7fb-54f9-4cb9-a38a-792e060b8298",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d71ba8d7-df27-45d8-a29c-e244ad78643b"
        },
        "item": {
          "id": "abda358f-f427-4de1-9d5a-9aae6ded49fe",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4375473c-9452-4941-8d86-d56f2b2623f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8e4f76-a8ca-434e-982e-30e0b90b006a",
        "cursor": {
          "ref": "c02c39a2-0937-4f97-ab47-a381e2408176",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2c4a2d10-13f4-476a-94ea-7cf3e03036d0"
        },
        "item": {
          "id": "7e8e4f76-a8ca-434e-982e-30e0b90b006a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d70b7ced-b048-47e7-b04f-f637675d4f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffde100-edd5-43c8-b8db-21a8d9305a20",
        "cursor": {
          "ref": "d2dd60c0-eaba-4c33-a8a1-a3bd330d5f4f",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eef1d551-e335-4d9d-9464-d73517e3a8e6"
        },
        "item": {
          "id": "4ffde100-edd5-43c8-b8db-21a8d9305a20",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2b378376-32b8-40af-a2e4-e459ee242689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd628d5e-bbd6-4c1e-9602-09a240e29808",
        "cursor": {
          "ref": "5cbe97b3-a5ff-4264-b932-de602f5375d8",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "536a38dc-8167-4a66-bbda-6b63f8f4246a"
        },
        "item": {
          "id": "fd628d5e-bbd6-4c1e-9602-09a240e29808",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d2d1e0dd-4b45-4f42-8070-692ec90d6970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b90654e-e3e6-4db7-9438-41198f77c01d",
        "cursor": {
          "ref": "f55d41f4-3e84-43cd-b41a-3d9b499968de",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "80dc7729-b542-4bb8-b886-c6065ac54158"
        },
        "item": {
          "id": "9b90654e-e3e6-4db7-9438-41198f77c01d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "522c6498-3d1e-4996-840a-5bad870cdb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3af737-df13-4523-895f-3fd5a1dc8c71",
        "cursor": {
          "ref": "e4789a8f-a3d5-4af2-93c9-7acff50dff31",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c9fa1437-bd3e-4fbe-9feb-ebcb087fac45"
        },
        "item": {
          "id": "1a3af737-df13-4523-895f-3fd5a1dc8c71",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2b54a569-7b32-4bd7-b2bd-d7db2f795c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5f50fe-f96d-4144-a52e-545661fb6b63",
        "cursor": {
          "ref": "3ecce9a0-8ae1-43de-8463-df8d07e74f00",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d30cb7d3-8b0e-414b-95f2-ec65dc704681"
        },
        "item": {
          "id": "be5f50fe-f96d-4144-a52e-545661fb6b63",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "46a3999c-b38c-493c-a382-b02789fb001d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b5dba9-c222-4d0f-ba5c-34c89d64e842",
        "cursor": {
          "ref": "593072c5-19d1-47b6-a7a6-2a78d00a2575",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d9d884c3-6273-4cef-881c-13a15a03f862"
        },
        "item": {
          "id": "e1b5dba9-c222-4d0f-ba5c-34c89d64e842",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "659b0669-97be-4619-b2a5-7eb1c0a8d575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e530f0-fcc0-40f1-ae4c-ac9c438d4275",
        "cursor": {
          "ref": "61b69bdf-fe9d-4d3a-a454-68fb08eb4909",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e96bd765-a3fb-439f-add3-3bd2b2513479"
        },
        "item": {
          "id": "23e530f0-fcc0-40f1-ae4c-ac9c438d4275",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "90acc2eb-884a-49e0-91d2-3a48748f7ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa481b3-b260-46e2-8687-e821411e6490",
        "cursor": {
          "ref": "b964aa4f-464b-40ca-867b-14022548a625",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6add4628-5750-47eb-93ef-463259434d00"
        },
        "item": {
          "id": "efa481b3-b260-46e2-8687-e821411e6490",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "83dd2c34-54f1-46f7-866e-a2635de13fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0c8f96-f312-4aa2-917e-b9dc8dc14e95",
        "cursor": {
          "ref": "74b42e30-ba17-453c-b655-bfb74a37a4e4",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dc1e5d0f-9d2f-4f88-bce7-4580f42ba335"
        },
        "item": {
          "id": "ce0c8f96-f312-4aa2-917e-b9dc8dc14e95",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "738e84de-bdd8-4a5f-88ff-90eda11605aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4cb946-ff52-4f1f-8581-c1fb75f89e36",
        "cursor": {
          "ref": "fdbfdf6b-06a6-4574-b906-1b14029b0000",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "611d0abe-1301-4acb-8d69-b4ab84c863c1"
        },
        "item": {
          "id": "df4cb946-ff52-4f1f-8581-c1fb75f89e36",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "883ec14b-aa81-42c7-9fd6-63729caf6beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a09c4b-654a-4449-9540-7f0caf608a2d",
        "cursor": {
          "ref": "7c908f6c-a033-4bfc-8d29-12e03fe58c52",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "205aed4a-dae4-4cb4-99b7-a5ce2c19edf1"
        },
        "item": {
          "id": "69a09c4b-654a-4449-9540-7f0caf608a2d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b4dc0607-c6a0-4c5a-b4c8-3d13c30ff35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be75547-310d-4574-98a6-6a377923b544",
        "cursor": {
          "ref": "63b59b0f-1733-4492-8ba0-0f4836e24ee5",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f181a32b-0a27-45aa-93bf-932a48468f62"
        },
        "item": {
          "id": "3be75547-310d-4574-98a6-6a377923b544",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6aab2389-f04d-4219-8306-3dae2c612244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd8b407-8214-4499-bd79-4951ef2b5a60",
        "cursor": {
          "ref": "6a52cdc9-be78-4a31-b43a-dc1a0857d246",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2879eb70-152d-432f-9e23-3040bee58821"
        },
        "item": {
          "id": "ccd8b407-8214-4499-bd79-4951ef2b5a60",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "07948ff0-a3be-454d-8581-c1d28cb391aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68633d0d-aaa2-4451-9283-b832e52a6dff",
        "cursor": {
          "ref": "7c32b436-4132-4412-af68-a6c8d298f21e",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5c6227fa-e215-4de3-9c76-aab36621564f"
        },
        "item": {
          "id": "68633d0d-aaa2-4451-9283-b832e52a6dff",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "de599644-de56-4a2e-90db-36584340b7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9d9b23-aba1-4036-9360-5df43a7d0d8e",
        "cursor": {
          "ref": "5e4087e4-605e-42fc-94b1-60e42e45af4b",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9695ef47-cfee-4736-9bf4-d3b2f8151d75"
        },
        "item": {
          "id": "cf9d9b23-aba1-4036-9360-5df43a7d0d8e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5c4fc873-b96e-4e89-8abf-9d9008585934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d62e8ac-da01-4f9b-843d-b6c6b9687477",
        "cursor": {
          "ref": "5450cd6b-0e0a-4d08-8b39-9e36c40dd88a",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bdea640a-da77-4562-bd7a-f78f9dae71fb"
        },
        "item": {
          "id": "6d62e8ac-da01-4f9b-843d-b6c6b9687477",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e9fb8c1f-723b-49f1-8e9f-f87fa9ac5f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735550d0-3c10-4599-a483-b40634fa5126",
        "cursor": {
          "ref": "637ea40c-b8a5-403b-a201-447894c1eea0",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5a35c697-5603-48bb-a8a1-2d0827c2e4d0"
        },
        "item": {
          "id": "735550d0-3c10-4599-a483-b40634fa5126",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8eb5d6e1-7dab-4de2-8360-22169b71b616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92194651-4b5f-4902-a3f9-e8069df4dfcc",
        "cursor": {
          "ref": "4a91f38a-258c-4363-b344-a6dac6ebef47",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9f098622-06b5-49f6-838f-c546fc11784c"
        },
        "item": {
          "id": "92194651-4b5f-4902-a3f9-e8069df4dfcc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d3a9949b-c3de-48d2-b642-987012b407a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c639234-d315-4b70-b3a4-250d9a353ab6",
        "cursor": {
          "ref": "7eb9fa26-8594-4d00-a8e8-3936ac2354af",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "79020dfd-a634-483c-8023-be332a2641e8"
        },
        "item": {
          "id": "5c639234-d315-4b70-b3a4-250d9a353ab6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "950aa485-f943-4bbe-bb14-333ef3d26457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d23ec4f-d7b9-42a9-8f6e-4f15c3c617f7",
        "cursor": {
          "ref": "66c99575-45bd-4b71-b813-972302e373f0",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6979b974-b096-4548-b7da-50cbad3664ef"
        },
        "item": {
          "id": "0d23ec4f-d7b9-42a9-8f6e-4f15c3c617f7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c636c342-f759-4807-8f9f-eed030ff1fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486c7418-515c-4b36-a542-a24bde426790",
        "cursor": {
          "ref": "17efc599-a393-4da4-8135-4a0efe9d5677",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dd0edf5f-d6b5-40cf-939a-03bf3a81e0d4"
        },
        "item": {
          "id": "486c7418-515c-4b36-a542-a24bde426790",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f1f822f8-6692-4cf8-b015-885f245dec08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffc9cea-bb92-4da4-9164-c7014caf0c3e",
        "cursor": {
          "ref": "a67fb3eb-d75b-4c84-972a-2eab2db3c8bb",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4383c8d8-255b-4cec-a78f-f8f286d11f6d"
        },
        "item": {
          "id": "bffc9cea-bb92-4da4-9164-c7014caf0c3e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "db6379ff-6eaf-4369-8c95-179a159300d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87950343-b657-4b53-bcf9-9d1e5fa33bc8",
        "cursor": {
          "ref": "e4687805-bc25-45e1-a57e-89f037a01c5c",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "64c95b41-a55f-442a-a16e-350a3df86e38"
        },
        "item": {
          "id": "87950343-b657-4b53-bcf9-9d1e5fa33bc8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "11796a14-c551-4cf7-87ae-84bb689e8f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe4f738-537e-421f-b82b-6c131c4df0c0",
        "cursor": {
          "ref": "c73e63a4-7c4c-4efb-a490-070347409c38",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0cae4638-18e2-4540-96cb-6c8f3c986618"
        },
        "item": {
          "id": "bfe4f738-537e-421f-b82b-6c131c4df0c0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f15f055b-3484-43ac-bb96-adad2564fd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ddc794-3cf2-4f93-84ce-4e1799bb2902",
        "cursor": {
          "ref": "d73274be-b430-4e2f-90dc-82d2f750a5d3",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b6929a60-31c1-4594-bd5b-7f720325364e"
        },
        "item": {
          "id": "e0ddc794-3cf2-4f93-84ce-4e1799bb2902",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6592cd6c-1e5f-4539-acb5-22947db3ab3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8022c0ec-03c6-4f70-b5dd-415db1e3d2c0",
        "cursor": {
          "ref": "479ed5dd-335b-4cf7-943a-a511378b5c3c",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d9ba74cd-1180-4300-9f8d-340a18217e0b"
        },
        "item": {
          "id": "8022c0ec-03c6-4f70-b5dd-415db1e3d2c0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "16644c20-dcf1-4112-a6cb-6289024c420a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b89c144-dbb8-4bdb-ad28-090af3ca0f15",
        "cursor": {
          "ref": "fa5d8af3-2458-444c-a8bf-3a168759505b",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0ed9e08c-136b-492e-8c14-3c8c5e43179f"
        },
        "item": {
          "id": "6b89c144-dbb8-4bdb-ad28-090af3ca0f15",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b0bce26d-f1c4-41f0-93ac-3f11a03e7bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f943ac47-30ea-46fa-b9ed-938e237102b8",
        "cursor": {
          "ref": "d16c5e99-57ef-4d21-a8e4-ba50fda63750",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f374c65f-15ea-453e-9509-4d48dd8b8928"
        },
        "item": {
          "id": "f943ac47-30ea-46fa-b9ed-938e237102b8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e3186f63-7640-4920-9b91-d6e1402acfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6166e60-d119-4ea5-a320-c819734919b9",
        "cursor": {
          "ref": "54ef97a3-0dfe-4858-b62a-e2d6abd22464",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9efba641-396d-4a71-8280-a956e913b8a1"
        },
        "item": {
          "id": "b6166e60-d119-4ea5-a320-c819734919b9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7e1c7e72-6781-4578-9d6c-b1077a610421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2830a5-da33-4804-bb5b-8b43549ab6ad",
        "cursor": {
          "ref": "9c757cd4-237a-470f-9d2e-77ff9db82d14",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "002a3854-8305-463a-ae49-6cfbb6892a7e"
        },
        "item": {
          "id": "3e2830a5-da33-4804-bb5b-8b43549ab6ad",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "79090089-ac7b-48da-896e-810be8315465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58b8e67-cf2c-480a-bcdf-b6d89b946226",
        "cursor": {
          "ref": "c7814bb8-cc58-47b5-9280-81b41bc28720",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7ee50263-4fdc-4e7a-a5a3-038bea974fd6"
        },
        "item": {
          "id": "d58b8e67-cf2c-480a-bcdf-b6d89b946226",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "bb6f5e74-4a52-49fd-b596-12b5e67cd163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19981c09-0eb3-4f8e-8fec-e08765aa6569",
        "cursor": {
          "ref": "bf07d116-2e01-4289-968c-4ff3bd904b88",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "eb6a1af6-35d9-43f5-9f0b-7b4e5c9ca98e"
        },
        "item": {
          "id": "19981c09-0eb3-4f8e-8fec-e08765aa6569",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8c3f15fe-4052-48d1-a46e-a65cc16f73f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861d84c0-db37-402e-a7cb-d97cbd0f0069",
        "cursor": {
          "ref": "f52c779c-b508-4a44-a49d-e6630c70eec7",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "844dacfe-2b86-416e-a6d9-5f7d6ad00b2a"
        },
        "item": {
          "id": "861d84c0-db37-402e-a7cb-d97cbd0f0069",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4423f096-edc1-4703-8241-5d380b8c9357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32652e8-f397-4e3e-8477-a632c4dd5b79",
        "cursor": {
          "ref": "a25229c6-4fb9-4904-a3b6-26b07f7ac680",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e16a9104-75e4-4b3a-9ffc-cc043e112ad0"
        },
        "item": {
          "id": "a32652e8-f397-4e3e-8477-a632c4dd5b79",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6cc40e56-a05c-4e30-9514-7ed5a4db0a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0b7ded-68f0-432a-a0e9-c939352a330b",
        "cursor": {
          "ref": "ae715bac-d0be-472d-96af-d54c22ba9b2c",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "db3f5f86-240f-46b4-80d6-f513b9da2cb6"
        },
        "item": {
          "id": "6a0b7ded-68f0-432a-a0e9-c939352a330b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ca9b55d9-82a8-4256-8a95-d0933fa2215f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72e592e-508f-45ec-aab8-61ba216b167a",
        "cursor": {
          "ref": "007d6612-7272-4e24-8c4d-67e9fecfe34e",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8b834127-e315-4f3b-8932-e3e90032c073"
        },
        "item": {
          "id": "a72e592e-508f-45ec-aab8-61ba216b167a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "96c70c63-54b1-416f-9824-122bad101e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09c9eec-025e-40fc-939b-b71c919c7db1",
        "cursor": {
          "ref": "f01bdc2a-891c-4b6b-a470-e47c9bc5343d",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "83ce19b5-8908-428f-bd69-1464134a76a7"
        },
        "item": {
          "id": "d09c9eec-025e-40fc-939b-b71c919c7db1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "947ecded-bd0f-4f5a-8ef1-216633c71155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2b7c3e44-72bd-4c59-9bae-b9f0dac8b1ac",
        "cursor": {
          "ref": "42498a88-490b-4cbf-b7d3-3ad2000ad00d",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a2e2f7af-39d4-4e2e-b326-037b959258c4"
        },
        "item": {
          "id": "2b7c3e44-72bd-4c59-9bae-b9f0dac8b1ac",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "706c96b6-f1ef-4ee1-8c3d-a627f64bda0f",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d32fbe-2f91-4ffe-8ed4-6406ed2dd762",
        "cursor": {
          "ref": "9139644f-6939-4313-89d0-cd6713772a98",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cff0dde5-50c9-4614-84b7-1ea8cf93cb26"
        },
        "item": {
          "id": "28d32fbe-2f91-4ffe-8ed4-6406ed2dd762",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1b3f4ef0-db52-48e2-8da5-39b689e86ab3",
          "status": "OK",
          "code": 200,
          "responseTime": 2474,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b151c3-abbc-43e5-9fb1-cdc704e7fa38",
        "cursor": {
          "ref": "fd373e0b-f544-4525-88d7-51cf22bb8332",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "52cfeb2b-4b65-4190-8885-a9b4bca73dfe"
        },
        "item": {
          "id": "52b151c3-abbc-43e5-9fb1-cdc704e7fa38",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "de8c865a-6e09-458f-8595-dd546dee901f",
          "status": "OK",
          "code": 200,
          "responseTime": 2475,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79f35dd-a970-42bd-9cf4-5530a53bc596",
        "cursor": {
          "ref": "a2ebb21e-92b7-47b9-a2e8-493e570dc885",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f61a5425-f281-41fe-bb7c-3c2cad7bdb43"
        },
        "item": {
          "id": "e79f35dd-a970-42bd-9cf4-5530a53bc596",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dddcc6d9-f185-4807-916f-6624fc278ca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e79f35dd-a970-42bd-9cf4-5530a53bc596",
        "cursor": {
          "ref": "a2ebb21e-92b7-47b9-a2e8-493e570dc885",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f61a5425-f281-41fe-bb7c-3c2cad7bdb43"
        },
        "item": {
          "id": "e79f35dd-a970-42bd-9cf4-5530a53bc596",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dddcc6d9-f185-4807-916f-6624fc278ca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "751df1c1-1ced-44fd-b1e3-df85365daeb8",
        "cursor": {
          "ref": "02002afd-dbcc-45f8-b543-16131a435269",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5212fe70-2319-4b88-b1c4-86dd94ca9b95"
        },
        "item": {
          "id": "751df1c1-1ced-44fd-b1e3-df85365daeb8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "48c1f46d-d01e-4289-992e-bce283de6b11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b3820621-4f2e-49c3-b473-2f073fe08184",
        "cursor": {
          "ref": "10509bc2-7a63-475b-9faa-ffab4c5b136a",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "606d5d16-933b-485e-81d9-c72972c9b0b2"
        },
        "item": {
          "id": "b3820621-4f2e-49c3-b473-2f073fe08184",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e0a8cec0-3175-434f-b66f-5a7d828cc16e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}