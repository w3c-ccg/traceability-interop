{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9e906072-35bb-4600-b89c-a6029a4cbec8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2957aabc-6bf7-42e6-8ab5-bbe1ab6fdb41",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e736b32-b4c5-4793-ab91-12ab016ee794",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "273bf40f-9d4f-46c6-9295-f0913c7c55c2"
                }
              }
            ]
          },
          {
            "id": "4cd88a14-f883-4d68-8d30-3739a057fd71",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d332616-40fb-46a8-8479-aea8cc57be9d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7ec869a3-2c22-441a-a524-735532e26a3b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "133e5d84-dd34-4a1a-b19d-8dbf375be613",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1654123e-3775-4f97-904d-9ceb306dd7b7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b6a3db5-7075-4851-8a28-8bdf4dbc18ac",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46322dd5-697c-4cc1-bea9-ad262b9ac666",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf598cb5-8470-4c11-8165-0be70733d20e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a733ff54-c806-4d0a-bbac-827cdbbbdf7b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14b94d4c-998e-46b0-bb70-558ef2fece4f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "048ecd95-a223-451b-a172-f030670e7791",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a04323a-008d-489e-9d52-1009825f8a3e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3542cc7d-0880-4555-a1d1-c8dbe6f69341",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "76ad181d-de11-40be-8e0e-d69669833e66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e586aa5c-5be3-4ada-a580-99a42412ed04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6534c947-9f95-4744-bedf-09e5d9a5eaaa"
            }
          }
        ]
      },
      {
        "id": "7523ed3f-4c07-4194-a92e-07f3e5b7bcdc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "862399f6-be2a-4816-a038-997cc6807ccb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05cac5d1-67b0-4042-ba2f-2f1fad8572f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "56e19c58-56a3-4dd3-ac06-38b7c6bece1a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5809d8dd-edd0-4002-9cdf-ee07a11b8bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "835592f5-c625-4b66-b733-bd6077aa6683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf0200a-9ec0-49c5-86e9-bdeb81f21440",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86c8120-cd64-422c-9e4a-b30ce39ea156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3e654b5-888e-4e43-aa6b-6fd9e69d2d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d9970f-702d-4573-b024-bf5ab662f457",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21540a62-ed90-46f7-891f-6929ec7ab5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "714e0b0f-b26e-424b-b545-b9f1f94a815e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6e9e0fb3-23d9-47cd-bf3c-0775e9159f67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4961ad4e-ef1e-40cc-8eac-b2c58abfd4a5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7ddf0f-73c6-46d1-ac28-26c94436a6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "741d1275-18bd-469e-ba06-699aae0a868d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bbe461-b1cd-4ed4-af0a-47b3dbb0b10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a5209b-d35a-4f68-b411-d16ea9779ff4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0d3e9747-db5d-46f3-803d-3a9af7f6ec05",
            "name": "Positive Testing",
            "item": [
              {
                "id": "67434d97-d935-4b3c-9548-1624e159c720",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31ba4416-6f65-4510-ad47-d7dbda4a1b03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ad8baea0-7781-49b5-a002-39febc89875a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93b46ce7-f07f-4813-bf45-e329a0242e3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "69d72081-9a31-468a-8267-069026338813"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee7dc109-c48c-43d8-80a7-2ab7b374c9dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f02935c2-bba9-468b-a282-2288e18fbba0"
            }
          }
        ]
      },
      {
        "id": "9bfd56fe-e755-4081-bb7a-7318dedd6217",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "55e2d8bd-3117-49cb-87a2-bb8e1e6dcb03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4a96bdc-d643-453c-bb36-7fcdece9f765",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ebda7428-7111-4e1d-bafb-5b0f167efaaa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86c9f5a-a00a-414c-bc47-30a7dbdbb031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727b4b98-b658-4216-8a5c-6ea41f3ef2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95b5526-72cd-449e-b8fd-0eca3c894953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f81c6dd8-7fdc-43e4-8a9b-d365ab1567d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e664db8-c352-4e9d-83c4-8254e65938c5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2343081e-105f-4876-862c-7276ba680bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4fef1b-635b-425a-9fa6-5e1f7bd55600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1532242e-cf7b-44ce-a639-531105633aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91c579f9-7bad-497d-af4b-ddb611d90de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ed2109-9919-4ffc-bfd6-7700e88f2370",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abded918-4001-4d8a-9056-946a7af36aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af935692-237e-4571-bdb9-3d1b0afafed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d240629-38c1-4e60-9e6a-4a5306f4df72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c7d3182-bf78-4f81-a6e0-79bbc436e440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f862425e-3190-4245-b488-93ac412e2870",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbde68c2-9761-4821-a33f-22e1af5c177e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90315ca-1ee8-40be-9eb9-83f907d6361d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c1bb6a-58d6-42cc-9416-8e23f81e19db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd52623c-cb48-45db-945d-8a1ecd8c2869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f137b9-fd63-47b4-bfbb-d0130510b88a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b116707-a516-4236-a03f-05b8786a54b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4368bcd-2428-4c1e-86d8-f6960db3d4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80015a63-80bd-4577-9c3a-21e5e73c952c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1034f29e-9812-4b0e-95f0-b4ea149c9e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527da349-608f-43bf-874f-911eb77b8b72",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696bbe75-ef02-4440-af55-de63f743a83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398fee13-b5fe-41aa-bc77-78f9cb21e11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bb888f-5be3-4084-a563-262a8fec7fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc11eef3-51b2-407f-8f87-9fc2af6daf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdcb27e-35ba-4656-8d43-3b9c4dbde1b4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55488697-6046-4c72-a199-5b7b7db403a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f568842-b1f7-4980-a44c-c3cebc810fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d324df80-333a-42bc-96c4-99c65de82f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d36439aa-fdaa-4708-b973-533fd5c3065b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e21390e-c44d-402e-8739-0dc52d88b4df",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa31786-89dd-4190-95e9-221b02f7d089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92a078d-9ddc-4c42-9787-ee3fcbc122f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44301851-8a65-45ad-9b55-d3972b295657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "191b861c-7bd3-45cf-a54c-d7b43a6ddd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a367c3ec-8e79-4d32-bca6-92f8e47f225c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2baca1e-a156-4b79-bf5a-0abc3c03f423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944959a2-1ed9-4d99-9700-7ece748c5dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566ea1ed-7bb8-4248-a26d-fcb23f9e7393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b1cdd4e-ec99-48b7-ba38-82bd4a166b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965da6d1-f706-45e0-ba54-1ef6fc24b27f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5736002a-9ecd-4ec9-9d77-9ef7e6e91a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07618db9-b945-406d-9f5d-c8a9db2d7871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7922ab96-1599-461d-b38d-019235f4dfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2879c859-7c96-4ae2-b21f-cb4eb302d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7212b8-77be-4b86-a849-113bac84d8b9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71dedc0-57a5-425f-9e19-365fcd1cd66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0adf0d1-a46d-4e18-95af-c1b918cdbf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cd560f-c552-4bfb-a22f-5610a036170a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b34c22b8-ce2e-4b0f-b400-bf1cf51b5dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5133ac07-811d-4032-b78e-05cb2b5dfbbc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54780d1-14d0-4b96-a866-cdfabcf3111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6d40cf-3c82-40a4-9762-818fdc5d8fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e986fe-a0c9-4397-ac2e-237f86f74fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6de46ab0-f3e1-4eb6-a1ad-a684405eafa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb64537-c170-45ab-a680-154801a2378f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275ce326-df32-4792-9b61-513597bfda1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be2cdb4-81cf-48a5-a2f6-873f4db44e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51de1ef-7cfd-436a-b6a7-744647318663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e39ba11d-687b-4d44-a645-42082d8177e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a5f52d-3dbb-42e6-bdff-0c374c6cf289",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7b1b27-eb3f-426f-839f-37fbd97c75af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5afdf0-f08e-4a41-8ddc-076a3541f6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd078d8-c03c-438b-ab5f-e7098f150d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "478f2216-b322-40ed-9975-1ea3b8ba0f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fc5b69-c2b2-4389-a08f-b71eac7c14ae",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7800faaa-c5a6-403a-826d-e02f71122bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73f30ee-1db1-4bd8-8d47-801bc9f3cc09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccfc1b7-b280-44bc-8d53-775b6741b737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ee1532a-616d-40fc-a211-9c0a32550a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfee471d-3052-4da0-b16f-c163fabbbdfb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9885f5f-01eb-41b3-8c05-dfa552941d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07291b23-a605-4aa7-9a15-8caa2846884e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7372f1c7-dcfb-4bb5-8296-f0385444f5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3129f835-89d8-4b03-9c66-23f20b6c6e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7317c6f-c7a2-41b7-8c4d-555311153864",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c6305a-b758-43ca-87a0-330735757a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4deea875-5ad5-441c-96c6-e2295cfe8b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0a3198-977b-4599-8b87-1364042fe41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05624bfa-080e-4642-bc7d-c011c7bbfcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd670129-e141-4603-a48b-25c2d605fac2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6248c3da-58b1-49ef-a691-ee0f45022375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f174345-3c9f-4550-a20e-d32dd0f15923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02cc869-efb5-40d6-bbb0-038ed77abe9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f2033f-81b3-4328-abca-8f0c1d1625cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49563eb3-a895-44ad-8354-74ae5cf1047a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49c1a34-70b6-46c0-8889-81319a670b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57640de3-1fae-4822-b17a-61905b870488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7337a686-4297-4a98-9b88-e13ef76e72b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e16b2be4-88db-48ae-87a5-80d0c86389e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a3213f-85e7-4ff5-8341-ac96efc9b21f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ac1259-229e-4408-8d00-5425f8399654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b9bf2e-49fc-4863-b9f1-a17b7e1c4e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f776f2a-75ed-4543-b199-a096d9cde66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee09a46-4e9b-4ca5-a1aa-6e13d7b34d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2faf59-fc6c-4004-9482-dafa8388368e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa785d17-c9ab-4b22-b4e2-96f0de6d739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9847dadd-1869-4a92-8644-d70157077b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635800bc-e5a4-40bc-949b-c1ffc70c2db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ca3424-969f-4bae-a3f6-a3120b176812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6226bf4d-f202-4edc-85da-0efd831ba96c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0212ec8-4fb8-4ac3-88a9-d819c93a12ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7674de9-d26c-465e-9a10-287bec8b34cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcf4b2c-8b8a-4f81-81f0-d3559bfff842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf35693-ff87-4c36-926d-641596604804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1142bedd-6684-4af6-8b57-0f8b2dc911ad",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a715ab6f-fca4-451b-89ea-b8e3697d5008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6697c8c4-8c0f-4f0c-83e4-f10a77588d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84f0361-90e3-47fb-87b2-c6918a4cd588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01a1019c-c146-4e85-a1d0-72af0cd2b85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a4e989-b395-4bce-867a-72d594fec70c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f58282a-6d60-4153-a9c6-17fb8c596baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2f3c00-fe64-40ff-8947-cfcfb19dccc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e04b5d-9a77-4fe8-9676-0962bc866f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "048db09f-a801-43e3-8142-0576ae0803ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d28eb2a-2b13-4739-a8bd-fe02e3aac7cd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae6ae9d-2d82-4845-a692-e58a55ac40af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bfdda8-4062-4290-af5a-00bff56b538f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7da14f-d4ca-469c-97df-c35ad23843a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a65fe6a1-0ca0-4663-b687-4e19f6b8d366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d837905e-22e8-4ed8-bb4c-542f0268be97",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ff3b67-23ff-4eb0-8c5a-d764a8d6ac75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fcef06-a1d4-4324-8fe0-9f3ddef734da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98ead41-f39d-46a5-a511-955e9dd7677c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3c2187-58a9-4e43-a918-7826c60ef818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36eb51be-c36a-4922-9fdd-f41623a48c1d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ceadfb9-3cad-48b2-bf80-5dcb371b9392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5746665b-b8bd-47ee-8311-b079fc63de1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8388d45f-659a-4337-9d87-677d7f60350b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be886b2c-3f7a-4a9b-98f8-95a068a1e559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bdd67a-2b96-48ba-9914-a7d1b2f72b4f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85505531-0c29-4435-bd5e-51539181ff07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be4e749-89c8-4ee2-84ef-83e11477e05f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7361c7-aebe-445d-b65d-fa5e71b6dca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae03fb71-6dc8-4a9b-95c8-0492baf6b31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ad4f25-7524-4c16-b8d8-12d1aea49ffd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b000388d-0925-4641-9ebc-51818b862060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da815eb3-c1df-4464-af6b-0c7d3ba77c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3908802-ec94-4d85-8b86-96b777c4cfa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2c5e47-c028-4bf9-8c05-8d59f48a317a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512d7fb2-eb9a-4ec3-b1bb-b78227731a2a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d06664-92fc-4b9b-aded-9123e3231ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1aa97d-3096-403e-a9c4-572e525e2af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3b4f91-14f9-4b8b-bb60-2eaafc54734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7315b5-4f28-465c-897e-ac7336d95c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751c14ef-8788-4db2-8a95-5a1d64d0acf2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a20901-dc4e-4214-ae3c-1e872e6a2cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b68450-6a56-4601-8fda-51c016236fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3dcafed-74d5-4006-81df-bc9b10c10140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e5cef1-7f38-442d-9c40-e00a64bb3e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646f2ab8-d881-4a98-84eb-a2ed1d0ca1eb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8c965c-ce7b-4afa-a8dc-866168385b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d7239d-c854-4fda-9de8-2db1e132c261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f656b81-98a6-4378-a61b-65b63a51ce1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53dd615c-aa69-4f73-bbe8-da633bed060f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a23991-e525-4f95-8d23-0b8e3fe4f07b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff05e35-2a36-4e90-955a-f107bf0a55be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b5d2cc-b703-446c-a1c1-a3adeb0435a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cd4083-f753-4bd6-8a05-ddbd9b469c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d999d7d9-dfb6-40da-924b-04b111a5038b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118dfed5-8998-4e1e-baf8-03aebabbe45d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbbca24-4392-4ac2-852e-3998f2186b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7911c8c1-3f67-46ac-9baf-ef342dcb2c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf6ec27-ff22-4d9a-8466-8430a798ca9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "368cdc70-8f71-4311-a000-8a4a1483244b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8190c4ba-1b4f-43b5-9205-3fb785aac465",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a81dc7-209d-418f-ba57-ae7a009c10c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d43bd8-0962-4dd2-8845-7df2e3749de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f0be4e-ce1b-4276-b0cc-14a5ab86a4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d206a8-8949-4b7e-b363-35849396f2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63942e9-3a13-41a0-be2c-27c38a9314dc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1a0b29-27fc-461d-ae58-0c20c4ee55e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e195b391-620e-48c0-ae72-a6e5f0bb37f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e79ec0e-843a-4c5e-b94c-1fee726a7b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5454da8-e032-4b3a-9f9b-8758b7a6a429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d0148c-0fb4-484a-b2dc-237524c0e49a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a1b837-fa69-4195-8250-5eeea1a1fa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59b6376-e731-41a2-88a5-7cb50c953ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc98d8a4-81f2-4cd3-b9e7-14d58a82a54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d800191-cc7d-4632-a2fc-5b16ebba0dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d3b387-eb96-4ac8-b495-0026fb11079a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b29a479-df92-4dc3-b137-4b3db60945c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94febeb-50d3-43aa-8ef6-afad85c45053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b02959-e58e-4580-a2c9-31107ef8abcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f63c339-c43a-4dc5-b2cb-36966466bc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e2d983-148a-45a8-861f-45925f0734fa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab375ae5-4d09-4a38-a781-f8e6bf1d23a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d31e7b-5bce-44d9-a67d-81ef98ae0654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d05992e-5312-43ff-b2c0-379bd0bb5fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "50ecfb64-b1b7-4866-8746-23b29a63da4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d82c4a2-3d61-424c-b843-4897792cb4ae",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4ded62-4b64-44f1-a05c-0bfe851fd191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040e9488-455e-497a-90fb-7303694d7928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9fd65c-8479-4044-acd2-0cc6ca2c7c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb557efa-bad3-47da-b4e1-0c04f07e24a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f172adc7-857a-4056-b477-e92e9e652211",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2577310-7218-4f28-ab53-50fcd8b1548a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bc1dc2-6305-44e9-820b-10edc02b33fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4775fd2-3d4e-47a9-8d89-4d3d2f87a663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b81b14e5-3731-4cbd-b7fd-b5c5d7c44cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7b4ae9-005e-458f-a2e5-d5164ed93fa7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb92c66d-2922-4ed8-8471-9f9ee6edcf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9e137a-5d35-4ce4-8001-d7df4e018bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90e6632-1ddb-4864-8db4-d01c87d6eee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f0782686-9b0d-41cc-8442-0b51a3012cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040dd71c-951c-4377-afe8-13afd1da9f33",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df21ca7a-6d2b-4528-a595-e47379db13ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56a2c3b-f0a6-432a-8a7f-5ed5f9745131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c631f569-c6d2-45ca-a3a5-0f2bc6df4937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "75432d56-6f8f-4f6e-8338-a2d7d60d9bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a11d27a-93e7-43e5-a4b6-b638b890fc34",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b403a89-da5a-42f2-aa8c-e0ea0abd12ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464e454b-65a7-4994-9cf3-6942befde6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a35222-5d14-4972-bb67-187cb91081b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0848e0fa-c75e-492f-a117-1f82fc00480c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57947021-090e-4ea5-be5a-3a2d2e37243e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c58fefd-0d9f-4459-b316-b6f43690be7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81303c33-889b-4cb9-a614-391dae86b83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839edd2f-4a48-473a-aa63-a141cf7344ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "859f387d-8cb0-46e2-94d0-799dcc168564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84330845-af66-40e5-b969-28ebcccbacec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d223ace1-fdd5-4dbe-b973-cb137811bc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df549744-a9a3-4888-be56-4405811a8c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645c3b95-4908-4f78-b4b2-c24fd00ec4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de0d8af2-35e1-476b-a8f2-06b2bf55bc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b43236-5c2e-4014-89f7-ab1360b23eda",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4801ac8-0cdb-42ff-a0f4-c8a65055f21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bf5591-877e-4e3c-8945-3324b146619b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7c1310-9ed7-40ba-902c-afb2badbe2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a9fa973-3f02-46f5-b8fd-f7e9d59bb79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92c79cb-c3f1-4f31-8388-8a54d81a352c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf805a0-4b71-430d-baee-8ae462062c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8adef55f-f39f-4af5-9b7b-e4044eb18cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f180c0-65ce-4146-a86a-8d154ae79298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5425d52-bbd4-460e-b23d-de7176156256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7afcaea-f0d3-4013-9d36-1484c4b29d39",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d128c47-7b08-4b3b-b758-d439786a6d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62635ba7-5993-46d0-8f6e-bb4c51c333bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a14c822-5ae6-43aa-9951-ca22ec0b7102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31ba588c-256f-4b2c-93b6-81b154e02544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8950c54f-617b-4ac8-895b-81ea6ea1f858",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90561fd1-3864-4aad-a07e-161a371c601b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea52160-e9d5-40ef-bc0b-0386b409ccec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63538dc-a6d3-45f4-b704-c6b2940ac5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc1b357-432b-410c-87bc-fc602b680b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75591a3a-602e-4b0d-88cc-8e37e712b027",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6c4d42-daa9-46e4-9ede-c72aab4b0db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa79c42-bf7b-4881-86c4-e9a328d8ef9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de874a1-c8f5-4c1d-8170-3a5053c1030f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f67fcd2-7957-4cc5-a890-7c41b61e2743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3760848-c8d2-466b-aa9e-7a86d3ad42ff",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33dfed4-f588-4c9b-9033-3530c2972b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6cfe3e-c07d-4bcc-a269-85e0f330e75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b9f5cd-f092-4743-bcd8-572a4be027a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "24b44fed-25b8-48de-a612-f448ee3f5fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7797bf0-2723-4c20-b7a2-b2bd1d3b60c4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7397a1a0-1fde-4adc-94d4-20d7169eaecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0ac251-12a2-4195-ad1d-900b845e17c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f350233a-1535-4e66-bddb-7e597fcea81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41d732f7-2767-423e-99c2-da96ecba9a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc30d30d-5714-4d07-a232-4090e4af11a1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f751b6c3-d8c4-4e69-bb6f-44e6f3af037d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03db99cd-e9dc-4632-b60a-6e7ea12303b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc0ea77-47e4-4fee-8b70-6b8d1028ee8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a509777-06ce-423c-a744-5b7806b88248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06976cad-fead-41ce-890a-52f6c96b5813",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424aa7ae-eb29-4fe4-b925-3c2c28b25a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9012d13f-d780-4450-ab86-3e05bacda425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b56ef34-83d8-4219-8c7e-72c64eb960c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b5eee8-afc2-4ad0-9c91-264d06291991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca56202f-e3f0-41d0-8b1d-e6235bc2a5ca",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23519a3-8f79-4571-a5ae-2460492fa1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b3613f-c4ee-4fac-9029-b19a70f90187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebabf18-0287-4a23-ba5b-6477157f1317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d2cc517b-2a00-4e13-9987-57b6f3f94483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb251f1-c602-4a6d-b4a6-76c648bb440c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02880a0-80fa-44d1-9ec5-ec6f48290318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0ba601-b5c5-4abc-b96d-ab6c59b6be87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a83250-f138-4945-990b-9b1ab5dd89f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "18b2d532-d639-413f-aa44-59adf6bd5657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d1273f-d796-4498-9ddb-ddb7848afb41",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335eb7be-5e4e-4ea0-8615-41db4cb16616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a3a334-14b9-4383-8606-efbca5386e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0091d13e-57aa-4d58-a569-c09ba1f0719e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b499723e-7620-4dff-bac1-ab3a7408fb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187a58eb-a4b5-4d2e-ad58-0a3b02c09535",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f6ac2e-4c1e-4b2d-b4ce-36bf8b51a3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9253d8ba-9d5a-4139-8c1d-bbcc414cf480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ecdc0f-9b07-489c-889f-79cf35255244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d53e2ea-83ae-4160-9de2-c4c590591c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2c509b-c10c-4f85-a5c4-9a350bd64110",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a7600b-2277-427b-9228-e2c69e7ce4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6883c9-b59d-4351-abc8-f3afff4ed8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509bd03b-77aa-4fc4-babb-4d7dc6643637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bef9124-5306-4131-9b91-d8116231fa4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6509fa-c6e4-4fe8-9a08-bf6963f8a2b2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff10ac2f-bf19-40e2-882c-a7a87fdd7c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f70050a-b01d-4d74-b9fe-253216a38633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed373ff-6fb5-4768-81f1-df3b90ee8af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e284c74-7a01-41c6-86ae-c79e035953ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73c704c-9f2e-43ed-9080-dc06983d5e28",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ee00a4-8024-46e4-a845-af7db12abfea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ce621d-e88f-4508-b34c-f0feb986d684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fba9d7c-b1d3-4d91-94d8-1afe437bfdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "59891cb6-ff44-41e2-9773-387f62d186b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14aad206-f2e5-4949-8ae8-f1b9f112d69a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc8f580-906d-4ee9-a410-b13f179b1455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e2101e-8428-4e6a-ad8c-66a9e888d712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480a4fd2-7937-4e44-b601-dc186f86e6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac6529c6-898b-42c2-99a9-2299099a2410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285b3d04-5119-4100-904a-4cc7ed7a837e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b7db11-42f0-4d56-910e-e5127b504e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb9ce7f-c42e-436c-b56f-9c424d0dddde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50d846a-d692-4e54-961b-aa5f51767881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa2213c-9916-47e8-b523-7c876b4f2626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82b6304-249e-43cb-a0bd-8e83253f555b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8559b04f-d6f1-4160-90dd-59a97a82b057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457bbfb3-5d84-4fc5-9736-ba1af541d26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8e50ca-fcc1-4ab9-aa82-07d0174d858d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d909c4-db50-4e19-88c7-c3b2a5c892dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d56c55-a5a0-4f84-a66c-0430d5a10e82",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d18db5f-ae05-417b-aff8-4762015d6d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3774fb3c-4a82-4399-bdf2-e53c9b5e1ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bacdf25-b2ab-44f7-ad2a-f696e0788c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8291b1c6-5d2d-420d-b502-1fb468ffb9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e0ff8e-93f0-4288-87ca-bab28b57cd6a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe96adf-cff9-4623-b794-6fa8b1427962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84977f8-d2c1-49a4-a028-aa101a604cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bbfffd-4836-4db6-9c98-28c0c35284b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e086f339-5ca4-40d1-a373-67c631e31224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1436afb-02cf-4556-ab34-9281754bc10e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e3238d-1155-4d77-97bc-89d9ae9b10a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90ccd4c-f291-4e0f-93bd-761e69eb62d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0e0def-a077-4c0a-8284-a8dccac35766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf5f72f-cebd-4617-8d66-5a7579e1a8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ed4b2d-3e9f-4159-bb9f-5b84824bb94c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2347633-9b05-426b-a3bb-b290625d77f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2881387f-8820-456c-b2d2-bd764d5a6074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d543e24c-be45-4233-a296-bce38cb8f093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "226f230b-86da-4fff-8b08-ff6a7547498f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb64b91-63a4-48fc-b576-2bbdaf69c1b5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e004e0-0bfc-41d9-b70b-c141cec39cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ed3926-e6e2-4768-aee6-9127f7c969f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de550d65-15eb-4ac8-b934-d2b6e97ae314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cbec27-5034-4fa3-9841-a46e29924b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84544d9-98bb-4a4a-afa5-daeeeb4f7381",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cff300-efd4-479a-9968-422957633c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb4773b3-5191-45cb-be1d-b4201a67f5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47204a71-2ddf-4ee3-927d-a8536478d88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b19c4ca5-005a-4c37-b4c5-675bf6b84905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3262b679-8832-420b-935e-c6cb20366489",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c636fbc-b409-491a-8ec9-16380ca75f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70821bb-9382-4964-b57e-bcb5b5fd0de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c6dc31-248c-48b0-a63a-9b238875824b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b387e7-e2c5-4b63-9ffa-fd661e8406d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cee904-8667-4ee5-9f8d-2f03cadf6fac",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce1a501-063f-4f77-89c0-ced3a1aa5bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65e808a-9a45-4379-9101-2be1f26028d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586edd2f-5e34-432e-a674-6b6813b19e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8fe1fae-08fd-432a-bd4b-59513dec4f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7740039-2d31-4aa7-9eb3-1164f1143ebd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e13fd50-1cdd-4b37-a8d2-9fbd7c4e1771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133e5fec-74dd-45c1-b225-634c24b8c8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ed5107-f6f3-4b3a-b717-808a61b0e212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99a32bfb-1ae7-4769-8e91-3f6e2b6ea1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107fcf4d-68ed-455e-9702-d1a6f8c116d0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57b81ca-dfb0-43c8-ba9c-11447bf068d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da53d24e-d587-48fc-8068-527f90a495aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9503d18-52db-4fa7-9bd8-53d664871b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33e45d74-7586-429a-a90c-ba6027d016c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a765445-e9e4-4900-b62b-06e8e712305a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0626c5fc-1934-4f63-9a68-d5d81a5ea028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c696f762-86cc-47a1-bf0d-eaa4d8be33a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78346da1-7c23-4bf5-a173-5ea1cfae26ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf58640-bbc7-4820-b45b-f4f8ef5d6dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07000a38-5ed6-4c46-88db-cf809d465cf8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92154020-24ea-4740-bd2c-db250ace9eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1e83c6-5304-40c5-9bb3-dc23231ed766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a876ced-1ef3-42aa-83e3-645480669b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "078ef536-a36f-46d3-9ff9-9b7ad5e5cef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f821d682-62b4-46e6-88d0-cb8695b6b489",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91340c9-495d-4f73-b42e-a358cae6c770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7301f684-9af1-4de9-a836-018f06fd4607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7350e009-a3ca-4aa0-8b07-c99597bdc1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "767d8d69-b149-41ce-bdc7-09a3d4616125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f060128f-71ed-413a-87ad-277efc3965de",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4721212-af3b-4c86-be52-c1325a8881a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "843557d1-2f45-4be3-9b68-0f5ac75d7e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcc7bf4-b1b6-4c1e-91e1-9f732bdcfc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd38611-64f5-4710-95d5-d17983390702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d7ca89-9258-466f-bf07-6ec9ac83a192",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54b7414-feb3-4ff9-983b-c022ea81c614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c44e8e-6206-4d59-8a08-a77073612929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80d29fd-884a-4324-8eec-b88eb1595b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae9785f-b01b-417e-a05e-04d57d42937c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5316d1-455f-4dec-abd7-eb83097bbd61",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8533f5a-e4df-4cce-a213-745589970892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb44a4d-5ff3-4dcc-908d-b8334a129e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58714919-5f66-403b-973b-bc2d03a7a764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af9879f5-3b4c-44ea-ba65-cf794fa91697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb79ec9b-da42-4eef-ad33-22ba10de9abd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ac46f2-6b98-4924-9b35-8ae00ea3fedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1f0ebb-11cc-4dcc-be1c-372b2539b55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c32962-7221-4695-8fc1-83c194a2c488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a52e0d-cb31-4be8-90f7-abb710e05b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e62dbfe-f731-48be-bc12-acf8a74e97df",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ca1c53-8e5d-40df-81bd-17352f8a6209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b584e434-b41d-4f76-846c-93d2850cb5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d24d2eb-7daf-4515-8e89-318e83e66c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0f869e-94d6-4a10-a2d2-bda0ea682084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10da02e8-9838-4a26-8071-95e386b6daca",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bcd831-9234-456f-89b8-33152d1a5403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3206df87-20d4-453d-8561-75827eed95d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36acd3a-800a-47e7-a22b-26665a457a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7c7da1-f5c7-442a-bf80-126684b169c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd77f943-254b-4d5a-b647-e46ffbd92058",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e7a6f2-06a5-424b-bdac-0e14babba0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e06acd-6fc0-4034-9192-634c1da10c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1e51fa-0566-4f0d-81a8-41119c9f060e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8014ace-22d3-40e9-8ebb-5d8a917a48e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13ceade-67a5-4b64-a678-2b7d6af96316",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2ed100-efb6-4469-9193-06a578030092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cbaba1-c429-4f25-8706-04aa56850fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20284438-e578-45d2-972d-2179a062d273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a74e3536-ab45-4c03-b1b4-09e07dad8626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf16ffc9-fa0a-4882-85bd-1e4e4c4194ed",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871e85f8-5e41-49ba-bda2-14c46095d9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f660b9-4ac5-4313-b039-f69f9df1d1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6ddf4c-6a9d-4e4b-8601-9a9b343e4524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "591859ae-300d-4ab0-b323-8672e6866dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a60c24-53fa-4923-872b-a856c3060f00",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86e8922-4331-4e89-b5bb-7b82a642b025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962517d6-27e2-4344-a966-3f6927463dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c338a54-9078-412e-890f-49af36aaf29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "346ae91f-02c4-403d-80bd-6004b309a6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a91cf3d-3404-4238-893c-1d7b75bbde76",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1258a316-24e6-4eeb-a271-8e2e091be874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746701e3-4fa9-4996-a4e2-36a5c75e8e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c990a52b-b57e-4baf-bb7d-1733d9e00922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "80e36c8a-0545-4bae-b8f0-835139d5ad7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ecdbf1-4558-4f15-aa41-24ecc0e946c4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1543ded2-2db0-42b3-b3bb-329869b5125c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0a6bd5-59c0-4d3e-8152-c3c3ea0a6ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d74e04e-2cd5-40de-960c-4ca9a8875855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa81fa24-a840-4d0b-b8cf-4b877398902f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05804159-100e-46f0-8a0f-1bd1cbf45050",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf2660d-b336-4c37-b2dc-926df52ad618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c46ad1a-47df-41f8-9828-723c19175d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f3b44e-b87e-47e2-b706-5cef1444fc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "46964791-b5b9-49fc-b46f-1ad71a4cd8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03d2fcd-0303-44d0-9a52-4179b7b53ed4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a307a95-5231-4d66-910d-ab53d113200f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0dbf8682-88f0-4c49-b889-e3cd9b40f916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37226fac-c095-44e7-9652-05d00f7e1ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "658bd6c4-4d4b-4ff6-9e46-4d269ad7f787"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "32d14217-e4b8-441f-a52c-ab7ae3f7c140",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75ea6b16-7a39-402a-bf08-bf903bfa1e96",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98344246-992c-4701-8d7c-da20c3c28940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "797c758d-9c9d-4bc3-84de-f27d2eaff339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c16a65-8cf0-4116-b23c-864c0fbcc678",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eecafe92-c70a-4203-b663-d6d60b26b65d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5555c000-c602-4402-9b94-b7fadb8e990f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94af9596-9e11-4f48-a038-a6d7e3cc2580"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86be5ffa-cece-4dc7-86c3-cdfacfe04cf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5921919-4984-4a0f-9f97-ecfbe90b903c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b1c6a30-e96d-462e-b070-e8bad171072b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "578417b8-aa2f-4167-b190-fa1661bd76fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c68daee-1278-42d1-973e-d2d2ffd2dca9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4a3ffaf-ea10-43cd-a2a1-09ac331dbe5a"
                }
              }
            ]
          },
          {
            "id": "3d5258ed-67b4-4fbf-b21e-5da930507afe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cfe0dcd0-93cf-4add-b316-e79eeee0ee52",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "165b3420-6b3f-4ac7-9b7b-b95d7a76cfcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98c94a8c-cd31-49c6-a8c7-67cc841c2d90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8871bac3-1ee2-47de-90db-05c877afb7d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a72efac0-de65-49e6-bc5b-decc14db4f8b"
                    }
                  }
                ]
              },
              {
                "id": "134a8c8a-f42a-47ab-b639-080d63d4eac3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7571981b-8907-4fdf-a8af-53096ef1366d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4b0ef11-81e2-4303-b7ba-0d1cc84ea878"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83854696-d38e-4f8a-b969-b3ebe592b8b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e4e5a8e1-e7f9-4844-b988-ee88b21558bc"
                    }
                  }
                ]
              },
              {
                "id": "0b919b37-7fe3-49fe-ac14-bc6e43592972",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4eee1c1-93a9-4e85-90a7-eb049fff7e45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0835c7c8-6b76-41c5-90f7-a72faba73fa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89fd3850-d0c3-47d6-9913-533514fe9e72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "90364e66-13af-479d-ad49-69c22cbe08b7"
                    }
                  }
                ]
              },
              {
                "id": "9e870c7e-8380-47bd-8b4f-3ede9dfec4f9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83f70efb-1f9c-47dd-83ba-b6313a7be2f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b65ec8e-357c-4401-b452-1e602be70ed8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a6eac00-f420-4f68-97bd-3cade6257c71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "239ccbea-f8e5-4b0b-9e9f-d5ceb2603c53"
                    }
                  }
                ]
              },
              {
                "id": "f53a80c5-897c-41e6-83c1-e5439adc207f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c9aa66d-e607-432b-99a3-5248a1d9b1d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c44dcf39-45bd-40ce-b1f2-647f33e10385"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b8af14b-c443-4cd4-96d3-e4ae3e541fe3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0d4292a9-48a0-4a20-ad7b-f5399ba321d3"
                    }
                  }
                ]
              },
              {
                "id": "39ec416c-137a-4c4f-b259-b27150d256d7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae95bacc-2cec-4f9a-bbf2-9998483750c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3fc617b9-aa86-475b-a7c7-6281af35198f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caf2364b-f9d8-47ad-9666-6ce4b6c26815",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e6135902-8136-4c39-9e06-3a8e2b95b793"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65ac0c08-93c9-40fa-9207-9754fdb00fee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8e20b80-8b0b-4471-8ddb-5c58ab69fcbc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "13282956-8bc6-4888-b7b2-2c2bd166cae8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd066b9e-d980-4ead-bbc7-3b7046968ece"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c07aab7e-692f-44cb-b075-d1e6e25fd0d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b0a61cac-a27e-48a2-8a60-116bc51868b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9582d302-f7f0-4ea4-a0b5-003a6e451cfa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3387dad-53b2-426f-84a3-d7d1b3066981"
            }
          }
        ]
      },
      {
        "id": "c77e622f-ef4f-498f-aa98-b2a54c1abde8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6479c8be-0c28-4e0b-96b5-b0ae1854c6ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1427a873-49f7-4148-bf2a-51923badcfe8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7a818d2e-7962-4258-88e9-5423e11425c5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96a0d92-de8e-435c-9fb6-67f8db851e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2e9366-952a-448f-8a9c-e0f79b5e2df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978363e8-4896-4bad-9bd7-a30fa416496a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "31485075-6078-4609-9bcd-8b4559a22279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a515232-cc44-4528-8910-b1dff96f45e6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d143a34-1ab2-48b4-ad6b-32be454328e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfec6a7d-306b-45d2-92bc-34b9e04cebc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31a36ce-efc6-485f-a5ae-310797aa2cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e267a4-d2d7-4fd3-80fb-03b20a8ac2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a1e301-64cf-4bf8-868b-2bb6261bfaf4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0c39c2-d402-4bed-8503-1407f6cea2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd55395a-8143-413d-a8d6-69622e8a9913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8831494-7b45-44e5-b767-07e80a7852b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "554fd2dd-6e4b-4a5e-b56f-2386560558b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33572a6b-7d15-48aa-833d-5a965f351783",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d643d45-20ef-4f6e-907d-933c3a049b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad27bb7f-aa56-4346-9330-613e88a2e042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbcc7ea-a08e-4560-a247-e29da4658f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65f6e321-e913-421f-ab2b-cf12f7c051a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222a7da8-19bd-42fa-84c9-190d0c5e823a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757553cc-6c17-4d12-8ae1-d4204adf8db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a8b2ea-a566-4949-bd06-d21e883133a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12ba3a0-310e-48b3-a27a-36f41f0a1172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "681c2857-684f-4b6d-929c-ad98fa32833c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732ebbc3-f57b-43e8-b677-3f967c5e3c14",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de244de3-626c-4624-abe5-606ed3ae42ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892348b0-d673-42fd-a6ce-5d8e2dc629a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab4fb4e-9666-47aa-8ca7-003f90fe0bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcdc05e8-fb08-4e74-ba91-9d48a7d6e8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182e918d-3465-4dfb-960c-004dfacda2a8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3470a6b0-34b8-4f72-aa61-3ec806575079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d9351e-668d-4344-9a06-804874bf743d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0814fd-84e8-403d-8107-68a873fa473f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7440322c-ecf0-4ccb-b355-f26835a668e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfc1a87-2c99-451c-8c6a-61c95a919835",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6f6309-3070-40eb-9daa-6ab303fbd2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76827ca8-26c9-4ac5-9c24-30c4ece159ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa19e2e2-6abe-4169-b951-3b885f598f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75bb03f6-f2df-4b4c-a545-3f3bd1d24620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c979c0f-0810-4a28-a8e6-1e4299a38e54",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd52a96-50da-4338-a2d5-c0b0f2721dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47652025-9cab-4f36-8d97-4ee22b16ff06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249231b3-0ba5-4edc-896d-4ef95e73ea6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "749f1f53-249f-4265-85a6-f571c724e2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3638cc5-1536-45af-a477-c3a5b6f30cc0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efbaec9-c237-4e17-a02f-6bd6bc6876f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c8fa6e-5b08-4f74-9cbc-35516079ba33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6957f940-d6db-4f8e-9f21-e42f9d2c7cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfb2565-a90e-4004-a307-6120cb1d8bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925e29fa-8442-41ba-b9ca-987282251af0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2091ca5-9ff7-49ab-a2ca-056726630fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed24f485-c93d-4409-89ea-666be3942b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d4da52-1677-4150-b3d6-9ae32cdc13b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca49e2b-fed2-4adb-9198-a9dfc410b963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d19b9e0-89c0-4158-83c3-aa5c24daf99b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c163fd6-23eb-4932-82bb-fe6f5fdb7582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d32418-827c-4160-b753-2ac5c1f05adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5437d5ab-5ab6-49e0-bed6-7652a53b2b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c298af32-eec0-4710-b938-e2763fda68d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2598562-16f5-4b7d-89d6-bd6467b403fa",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bc18e7-fdfa-40b8-8814-23251f51f697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5653e7-b9ed-4e49-be57-60c93e6d0d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23abecc1-498d-4545-b1fa-5df36e8f1d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ed76d0-b5ae-4608-842a-c206abb96b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723fb217-949a-47c8-aeaa-6f42d1f9d4f0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc38a35d-228e-4e2e-8ec4-767b956b95f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfa8e42-b8bf-4749-84bc-9d60615fa73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a602ec-7d05-4f46-b70d-a9dd6ea9cf40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9be6617a-4dcd-404c-b3f3-8d99849da434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fa1196-e904-422e-a3fb-9335ba6859fa",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cc5a82-aa7a-4279-8961-f4a632980a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c23b4b4-c65c-4eda-9153-128da9a8437b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ce9531-5443-4c17-a8b6-914ee398b17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5009793f-9373-491d-b12d-549334154a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb063d27-217e-4830-ac70-4f147153308c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716d86a0-9fd6-412b-9e55-a89072f64262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2ac3d1-7bf0-4a91-8250-c352c1cbc0f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b012efad-31ae-4501-beb5-eb00e28c8c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcabf9f-b682-4dc7-bc73-6567a922b7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecd4e15-0b14-451e-9587-e1a3b6903c8d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff0ca3a-d157-4dbf-b87b-a6567fc8cf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f782537a-f2f0-4556-96da-3bd52b920cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea9b39b-e53e-4309-8ca5-23a0668ac432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5b5cb2-d948-4a7b-ae87-b9874fbeb2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c7c88c-552a-4c8b-b48d-0fc5ba5fc36d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300be48f-aaa3-4223-abde-42241d7aff12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd6abe5-947e-4674-abf2-c7eaa1a9f78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13375d56-c0d0-4d63-92e0-b2061cc32708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eefc249-dd25-4ea6-92e5-33b1a57c016a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df00282-000d-4fc3-9868-33bc5b48737b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3206893-64c2-4d4f-b401-b38877d3cdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ee5898-6ac3-4dea-90f2-32eb0ba46e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e40c74-8414-4c7d-8509-bf7e4d4ca031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a03398f4-8fb2-4412-9190-93e12dffa2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082b580b-69fc-409a-b1ba-45114600688b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaa6ba6-2cd3-43a3-a0a0-8b9643422c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad4346d-6a04-4747-86ba-03d3de5a1077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a19426-e1bf-456b-80bf-55e611f9bea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d57621aa-f904-4c8f-8300-82e43a8a8cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd616587-64e2-4ba7-9542-614a32eb48d3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1772c821-dc8b-4768-b4a4-5fd03168bf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccb1b0c-34a9-42a8-a18b-c2ba55502b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9558e3fa-1c81-463a-b36a-35ca58e981c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e708a583-1e93-461b-88e3-fb16dc44372b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957a3bc2-5b65-4f6c-84d9-13f652d234fc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e871ec97-7997-4c3a-bc59-5b6dcf5c75e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c93953a-689d-4b2d-b655-e221ad811fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a443318-e6ac-4869-90cd-5440e07646e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcd3364-75eb-44f0-a716-5d94ad1b545d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c13f9cf-c0ac-4ee7-8441-8ec88d44e0ca",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6474d2be-3565-4096-b41d-8f9812ff9913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c83990-065a-4a0d-8e12-57587c15592f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632f8d61-f950-451a-a073-b571c4fd3df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91ac3c8-f260-4843-b77a-d2684be4cb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3349e40e-f227-427d-8f88-e02cfa5aa804",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ff01fb-2609-45b3-905d-8d6a3a8a3589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4348b968-caaf-4fc9-8d32-2240ac3cc9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c282334-406b-4d9d-83e7-c5f9c70151b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cfe1aad-992e-4aa9-b6aa-7ec04cae77d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5150b4-c864-41cf-b77d-a571617d0089",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a3b5b8-001f-4030-9c1e-775cac1b0b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131d704a-c9d0-47b0-a396-71d6bfa86d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7a77a2-fb0a-480e-87fa-a67690190d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "640a3feb-1267-491a-92cd-bac797ea6470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2659b36-5a00-42b1-81a6-8158656985eb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4524c3-05a4-49e9-a278-eb4481335ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ee039c-1906-4889-b64c-cec7af7203bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab55c5d-3452-403c-87cc-6921fcdd0d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9195e2-2d72-4107-9c1a-4a7d05043113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096aada8-6149-4859-8f24-8022dde20fc6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358dc7e0-cc7f-4a06-ac3b-d99d7b6a17c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107ffb21-f868-4821-a3f4-5f93b958c451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3fd1db-9a6e-4da2-ad75-5a3ce5a609cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "057ecdf6-64a0-475f-b067-5f31398b58be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7263a2c0-0c9a-4feb-84ec-2452a8768027",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1abca2-c3a1-490d-b1d3-639bcf4182e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576e381f-f2c2-45a8-9606-2351d0bbb0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56348422-0873-4ebe-839c-9acb8fd6274b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dae60d30-3eea-401e-8c0f-1f97ea5b8089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98584d3-8153-40d5-899d-75eeeb14bc90",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34960e56-c679-477f-908b-ddf3b59ba385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526ef5ab-6963-429d-81d9-2d58ae7e8bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e50c4c-3379-43c2-93e4-0d6f75dee690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c03882a3-70e1-4a1c-a3e1-148217d3577d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc4a654-ad5b-4d98-90fe-f527d9745288",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867740d3-81b2-4d0c-9bc0-882dbd24e823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f310052-5fc3-417a-8a65-5e09d672929e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48142697-86e1-49f8-80b6-fd2b8fdd02d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4efe67ec-f403-454f-949c-fb6b41da7485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81bc9fc-56ae-4a12-92ca-6dff8b448e2b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da26a36-4680-4cab-a622-9b071fc539d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4c1eef-2b9d-46a5-be22-c1ba29fc703a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6820e0-d5f2-4c36-803c-1056cad29806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6f3f346-9b51-4fd2-b59f-58921b00a522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4090e38-cc3b-48c5-b1d9-fbc69eb2b65c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3f6572-e469-475f-8a2a-9b08000ca9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696581b3-4c86-4563-bf5e-c6fec6d1666f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f669de-3bcf-42ea-ac1a-c830cafdd9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dddd47c-d7dd-400e-93bb-c58945b7e36a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e3964c8f-9c68-4ccb-9b4d-453a2c2493d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d61ef66d-982f-4734-9b6d-ea48c28711c2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72799c65-73e2-4f23-a2c7-87e1aca6d957",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d34d98-eb7f-4875-a752-f96ee4991ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2832a752-c1ef-4212-9c08-93a9de193b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b440984-456c-4068-9cbe-261c28cca4c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08691097-4c74-49d7-8e8e-0876f60b4777",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e862566-25df-4ece-8070-4dda7bd94a0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4957a035-cbb0-4dfb-8256-728b27e7730e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc3e9aed-e26e-4189-92f7-ce256f28d070"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d84e6fdb-bd2b-4ec5-bbae-4c9697080796",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6f1ca8ae-6c4c-4c22-9414-9b636875f8ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c25b97f-5c37-4824-ab3d-f9db3dec7237",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de9806d0-ccf5-4771-b93b-2cb5baedf72b"
            }
          }
        ]
      },
      {
        "id": "e3091f62-ed42-4335-a437-bbff7c35cdf2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "06a1714b-3db2-4639-9d04-e6224a0a1300",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06ce66a7-31de-47a2-91ce-1ed6ba44c2fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f073993-7e93-415f-beba-85a9d264f2e1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec0c2ce-fb60-407f-a42e-98999a76a1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0c21db-e58f-4244-96ed-c4902997434f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53bc159-8b4a-464e-9a8a-64825a65625e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d86444-0397-46f3-824d-decd9af0561d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e5051c-c765-4b34-90da-8d45078ad259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6c5f82-d509-43b9-95c1-520e1417b56a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30a220c-46fd-4111-9112-89d0e0a5218f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef30d63-a724-4973-b464-063a6fe50018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148c59f6-f4f2-481e-ae76-8e3b72bd1a28",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a2812d-df95-4f6a-8326-cc027d9dcb37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b539542d-fe05-43f6-97ac-050c887548c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439e25e0-af64-45d1-ba27-2221acbdd6ee",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48aea861-8e48-4904-8811-81cfefb2dd19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cbc2e2-5078-4044-abf9-5e687da38f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b71a43-b003-4fdb-8b1e-beaee805968b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60935a1b-5bfe-4304-8d17-57b42e9733db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147070fd-8f28-4950-a4b9-8aa1d2b23ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26018735-df67-4a84-8527-9bb20bf9445a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef0c48a-2dc3-4e2f-ad43-0bcdd689733c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad47b381-8076-4a8f-9aba-97ba0bda215d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdc0421-7056-4541-bd1c-0b2960bc4873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f064c0f7-69bd-4e6a-b0f4-c894cf4e3684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ed02f5-ad3e-49d0-9197-a05de3971af4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f158d26-de95-43fb-ac1c-33584e303e23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8681e8-3cfc-4535-afb3-e32eb60a9355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcf7f76-738d-4921-a965-ce6e28661b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e9b246-4e60-4e7d-aaa8-109661dbea8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28452369-8365-4035-b91d-5605d2e3d466",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55250abd-52b9-4fa4-88da-21ef5917f0a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a5f4eb-32a7-43ab-99ec-590b9d3d6929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa0a863-2036-4178-9513-f64ccf9e2560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc17142d-f68e-417b-bfde-ebc6c27a581e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3197e8bb-9cb9-4916-b889-e95a33a2a1b5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cf68e7-2329-4b87-82c9-1a58d0d99235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ee8f25-e8c1-4243-827c-020a5269ae6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b730e7c5-59f9-4489-ba74-436851f45ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5791f593-98fa-4c82-9029-d7631c698c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f9a8e8-e5cb-4f14-8aaa-5df86a45de52",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de7a07e-2579-44f1-a9bc-538cc29ba036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b944eaff-a081-414a-b2c0-aa45b8ba21ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46511b4-d059-4060-b05f-0b630d5860fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbd3550-67ee-41a5-bf3f-ec0f8494a4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2357d386-91d8-429a-8e83-c15978596ca7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83769b0-a855-4b5a-8f89-2be5af68d3f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ff9bba-1f26-4d4b-9962-a0e4eb3e0640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6eaf6f-303b-4e7a-96d4-57705102d5fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb4301d-23a7-4606-8c6d-563b1c0e7d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eb50ad-6317-4e5c-b28d-bd0b9f84ee5d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24735a18-14e3-4e0f-b52a-23839dea731a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f331baf9-8e60-4111-a792-ad8f43daea76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0538ddd-5a4b-447e-9224-351e761d1999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23bd2637-151a-4e4c-8442-f685dd172032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db9728b-aca7-45fc-b3d3-7cc42471ec1f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6b583b-e81f-46ac-9388-78fa736f91ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5772107-ef52-4f4b-9b78-506327ad90a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a33848-a540-4177-85f5-98fb1d7ce1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba079cf-86b3-4034-b8ed-380eb618e474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329b2dad-cedb-47b1-8d41-cbac1cc9669f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcc87b3-6ee0-458d-86d8-86b3c39aa678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b859d9ec-e59f-4a52-9979-0cd4e79de60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c050a06e-3b32-49dc-ac81-126fbd2d7b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a488843-5e9e-4d68-8f3e-34f83009b09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5529882-2ba7-4c8b-bdbf-8ddda0f2ef65",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6c2426-d019-41f7-9d9f-e0119245483c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ea7658c-a531-4f26-90fb-eb5dad871327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0de0c8-16de-4f58-8739-ce6a74644f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435385cb-5b04-4cb7-ad02-00a200121b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90faabb-f812-43ee-abcd-e0428a254996",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc371365-9d55-40d9-ace8-cfee7f81137e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2adb90-704a-44b2-b7f8-bfb547d5f180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b31da6-d2f0-4ac9-a52d-47e0272bebc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6644ccc-c0bb-4e15-a49b-bf35422220dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0323ca2-bc25-4b7e-aeb9-35036d9d1c04",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5032ecbb-e034-4d72-abaa-fe4e91c06d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f3f8a9-edc3-4faa-8455-081d27dc260d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98b992e-6eb4-4b55-a1a7-f50072a8c696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc8c753-5c24-4bdc-8997-77ee86e80af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1553a3-9873-4e7d-bf9d-ecf34c1ff42b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66cdfa4-1cd1-404f-8e2e-3f7d89372aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24abf5b-685c-43e0-87b1-1989d80e31cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240d15de-a3e8-468a-a267-d610111343cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cacc9935-9ce9-4ba2-b0d4-95e7f23cb3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05417ac-5104-4414-b6cc-485f046b56c1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee71b699-48a2-414b-9bc4-0da6bfbfe09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b2c18a2-3d87-4c9a-a06a-534b736bd2bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27bbb9c-d3b3-4be9-8da1-aef646afd763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9b0ea0-fa01-4639-aed2-6f27a060053a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eccca17-6404-4f6f-ba2a-fe5f312857e0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7da65bd-4893-4167-b9a2-a520102174b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1537918-4fd9-4934-9121-0591c91c8da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f997c9-c3d0-4dcc-b1e8-dd8179674509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc947789-0684-4891-8132-e61ea34f9522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dbc223-1227-43fb-bc71-6752886db9ff",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cac4ffc-0efa-41e3-bdd5-304e8d2b3860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffd6868-b380-44fe-a5ab-59293e721831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb60fe88-211e-43c3-bfe1-88d55151a302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916d8bf0-b9b3-42b1-91c0-e2d47e810c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d35cccb-34b3-4bd5-9519-f9e6c7df4c0e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1bbb16-d82e-4b98-baeb-a84a1aa6e4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ba5eb4-f75b-40a4-bdd1-2eb1d04c84bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe67455-7614-4018-830f-8d23dc9c4c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f9eef1-891f-46d8-b2f7-8c9ef2fe52e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ab35e6-3e5f-41c6-a9f8-9bf080b5b7f2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a79146-0a37-4ffa-963a-fbff52cdef29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f5f7271-6a44-4a3e-8800-ac6bd9b7d255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8526b638-0596-4cd0-8d9b-71f10e007424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6645033e-b81b-4a78-9b80-357583728bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c5dc38-e6f0-4b1e-b4ff-fa4e4edbd501",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52d0940-8733-4624-8047-ebc159a3dd38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffcbac52-3074-4016-9ccb-53b914bb0b0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b461801-0e4e-4783-a703-8c2301d6c401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b270e8-21db-4956-9bae-6d0b3ecb31c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f332c2-1fb7-4286-b022-7f1cd1360bf5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451c6269-a397-46da-9c2f-685eddd5c30c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd794e4-1127-44cd-97a8-98c6e17a6d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bd22d5-f1f5-4546-b873-3ffdd250c6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7668ef2a-265c-4ed6-96b0-7c15d4815556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af6fcb3-2109-4e14-8eee-cf976802f39c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a7f0c1-f162-46f9-9119-195f1dbd5e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc055c4e-9771-4823-adcd-09d036bbf898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c7bb19-8972-40be-828f-d8247b612e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08430f23-d277-4496-a77b-c135ceca9301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b763b3ba-f1a1-4491-9101-d8c6912dd30f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49e87e7-be9d-429f-9d1d-98379334071c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e59df0-9de0-437c-992b-23f305cbc106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98efb7ac-3555-48a1-8f0e-bc867b3774b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb4db2b-d791-4404-bd61-f533d2393957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80db118-4daa-47ed-9434-521768eb1c7c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce58a95d-4c05-42f8-803b-2731a4da86de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "053d3296-1567-4dd8-97be-8a2bb4a96c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea6071c-b42f-4442-a67e-4b21b93499f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fe9964-8d7a-4527-b628-32f06764e526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926c0815-c1da-4310-baa9-a289c0f0fb8b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06438423-299b-4559-be67-291f4d5dbc30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc54e0c4-8657-43b3-a377-d50b4a52c52a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7aa345-811a-487f-9db3-07eadaa337a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78318dba-1a29-42fa-82bf-3121873ba4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f25f11-1a23-43de-b36e-4759e853bf17",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920c7293-4344-47f3-b286-9206d29cf7d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d6bcc4a-d8fd-4516-ab11-79a2e5fe80b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61c1716-9e5f-4128-9d5f-3823469e5ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8fceee-e1b7-44b1-bc99-3c36941fda10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c81b17-5087-47e1-a755-1120152e9cc3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57907600-a29c-4328-a1af-55bbfdd5b9b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b70c4d9d-eff3-4b38-85f4-06475febd9eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3738fe-9d6b-4e37-9d42-399243fbd075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401efcf3-c9c4-47d7-bc7b-f72a599553bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4643788-1dc1-485d-be3f-98c0484a6773",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9203dd7-ee04-46b7-a1de-60baa0371004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5e5f8fe-d8d4-4e12-9794-b54df2ebc591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f03ca21-315c-4a7f-ab57-c7375ade4372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73864e81-e3c2-4547-999c-2504e0e6b092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e66408f-d041-47a4-a7f8-c5728f456f40",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac18872b-4b2f-4c98-a105-009e78d07f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2ee7047-bff3-4bbb-ab90-57b79b31c42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5890583-5723-420e-8297-9c14c49cf61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c0d625-709f-4505-a169-6ea98a6c9dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ae48a6-a916-4c59-85de-60f6ebc749be",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baee1873-d6b9-46ab-9b53-ffa1dc839edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cfd90e6-6776-49dc-9e8d-1f9d57b3dd4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cef637-6375-4a1d-a9c5-8799e26eb0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac50b6c-1076-463b-8512-1e8d6c2492a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3568da24-fe3b-445e-a0cf-8b636c847e7f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17550d7-75b3-4950-b759-b182650a71e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c2d871-62b2-4222-842e-45753c1d5aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a72ce2c-07ea-4104-b08e-5e79325ffabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524598b6-5f88-4e79-9922-ce378a33a00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473fe77e-b638-49a6-a0e9-dc2b892a777e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d53c1e0-57f5-44bb-8817-42578f236bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84feafa2-8dd0-428a-ac7c-4042422ed0ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c73ea6-e31c-4e21-ba07-a303812b5ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358a31dd-9929-426e-ad83-089a31830312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038a6039-cba1-4937-9896-d5e37f8d8075",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3d1021-526a-480e-b67b-e37b4558abd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a4c35e-9135-45ad-8f93-cb6534119914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4a51f8-d5ac-4beb-a014-1c808519a0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb5180b-42d0-4eb4-9234-5c58dc7f7cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede7d80e-7f73-4e5b-82f5-86e7cc1dc4bb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d47e63-2c8a-4013-99e9-5cf7500cee3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5fc6b1-a8b5-4cdb-bf8d-65edf64c10b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c085cc5-f7d2-4c48-bb99-2b3b0c349521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7031e6d8-b4d3-4c36-866b-e6d06af77d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dd88cf-c40f-4707-9eb6-a056b47b97a1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10fbb8c3-1dc0-4857-8bac-4aa09bb0b218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c412cbb8-dadd-437e-bccf-355fbe0a1317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617a639a-fd2f-4137-a9ce-9b87d6038857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f9b749-5693-4ab9-a365-e3dedbf8bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d1a922-5049-424b-b335-b6924cb5842f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb8fd5a-1c90-47db-926a-e2bc552b1368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de0f59e-77b4-4392-a60d-e7b717e40b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78214984-4dc0-4daa-a0ff-49785f7d5045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31da67a-98fa-4878-b9a8-38ed24aa5292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fd6f7a-df94-40da-80b8-78894b56bbab",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b2098e-7afb-4136-9052-cde45d87dd36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc291e99-3bba-4e52-b27a-ab0f6d9ee2ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c726f5-f61c-4b26-bde1-7b7006faaf1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781521a5-fcc0-4cf8-a7f5-f9b0442a295f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f65fd7-7d25-4127-947e-c09f0bb58066",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cacfe30-0af4-42bf-9106-3c2768a4ce1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4b06c1-dad9-4cec-b1c6-551975d59a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1127f657-adf3-4040-8052-35be9deb0fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961c70d0-bf48-4e6d-966a-1ef2e413a1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6722f22-6dd3-4ea3-89e3-715698db9925",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e09f6d-bccc-48b5-96da-f73e64bba013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a024ee-40f0-406d-9e8f-8b4334446607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafca222-b8b8-4025-b815-d28bb74797f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086a947e-d8d6-403d-a8e2-f368ed12e43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e888dd50-c973-4ddb-8ba5-be6d49315af2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004f42d8-e442-41e6-810d-518418fb4a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbe4cec-c131-4a85-89a3-0ed4ca5451e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870ee5c7-d5dc-4649-b97f-05df650890e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e6ad9f-ea5c-4705-92df-9c4d778e0aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13a6d0c-6c8d-407e-a508-600d17d6bd32",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a015adc8-5522-4f39-92b2-806ebd390051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31140a9f-e0c8-4bd7-9d29-3670eda50d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15af1613-7cd2-4edc-a414-1f488339a967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425060d1-63bf-4fa8-bcd1-f396bfe483cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75b6e43-7323-41b3-b7e7-de5321212595",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dca4219-2346-4577-95b3-c41fd5108caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd00b4ef-9401-4501-ad83-c16daacf3f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dde5d3-eeab-4c54-a7e4-885b1d4a914d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d92a9e-9956-4197-8e31-2c7b9673affb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25f0b4d-a6f7-4d1c-92e8-05074f7bf856",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66210d9d-0eec-46b6-891e-78f83e3d21c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22abc83-5680-4b91-83bc-83e2c5447b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac02f61a-adee-4fa2-b60c-cbfdfd8d7e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb50473f-2690-488d-81bb-c231a4978252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adee660-8ca2-459a-b1dc-07912cba74d8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba031ef3-c102-4deb-94a9-3f5a39c1f635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324253ed-1f20-4ba9-a9dc-b5e298e7942d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23aadf51-e6d1-49ba-837a-1e7d076881bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d34dcd-1d45-4b23-946b-69c2ca3b3fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1554371-db13-4cfd-9bee-b9eadeddb864",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c3b468-9200-41b5-a0b5-fc4fb69581e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5660b997-775e-4bde-b9ab-712c693179c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4181e46-83c7-401e-8fde-87b97f52f453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e927885a-0eb6-4904-9a62-04dbc592eba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0632e6-1389-4431-bcb5-5bb1d252f3de",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da0f797-cae2-44f4-9547-248db33e4a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a7b36b-6269-42ef-9740-fb470df3ff0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708878b1-bc3f-42e8-8ec1-9ad23735ac5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21cd21b-cd07-4623-8ede-b66e4387b50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aeb00ad-3cf0-40f2-a660-8bc4e8818eaa",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b1b17a-8e4b-4fc2-9e43-ab9f5c8dcba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea567b1-5bbe-47f2-b900-985c794ef997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450a4c37-d8ba-41fc-9fd8-746230f00c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383b3ba0-58b6-4b7b-af69-3f227b1c0c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faab2d8b-8082-4df5-aaad-cb1abe6f3b5f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78b4ad9-868d-42c0-a0dc-bdd529070783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9dedd5-1c97-4c51-9a98-07c02360d01e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404031e6-6e09-4d06-b081-b14b865a9edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab008e4-b6ff-4ab9-9d55-96ba3a1950fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7560a5-4fae-4e31-9e4e-5ba0eb541e89",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9b48cb-03b9-42eb-94a0-764a387ffba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d474818c-aa37-427c-a048-afd088569567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364ea59d-5fed-4c7a-99e1-028c60b3d82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1da356-ed1b-4eb5-b082-a34a03e0577a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5baec898-b0f0-40b6-9ea9-193e601e6725",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474530a3-1a78-4996-a390-375ef95f42b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ae8547-f178-42b5-acb5-f709da38ce24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62934cf-b528-4278-a7af-da0f367820a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69e60d5-3398-4ba4-b5b2-b80725cb9b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ad0a6c-4a39-47f1-a009-c59fb05e326a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd4569c-29cd-41b5-b7e6-b7c800777ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802a8d46-0527-490e-b34f-3c5d0246c554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb031e3-8000-4726-949b-c7e00b8991ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f63820-da4d-4532-9f06-d1c2a13189b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67ea501-8d8e-4574-a327-f306dad05e54",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798d2b05-3996-4703-b4eb-36a05bca67db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bf582b-d8c2-49d4-b02e-5f3780add0d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af9eb5e-75df-4eba-b8b5-c1ec51247835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d37f2f-d277-4e48-bc02-558039cc6798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc366cf-060c-439a-8697-8c3c7131a380",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845949d4-52ee-4b6f-8cde-b3db85415c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f58021-79e6-40f1-aa6f-fedf82026f0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903eb385-4725-4c25-b028-67e5cd708ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b417e23d-c1a8-4bf9-a670-ac7c81d18036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724576e2-ce07-4192-8268-88f8c263b69e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2e41d7-43b5-4378-9edd-aecbefcfe489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5b8dc8-c6d4-4a4c-ac2d-af61a908666a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fec7c88-2c63-461d-848e-d2919695b937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b1ec0b-6c4d-4a0f-9cdb-ec17b8e2f552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443d76e7-3d97-4fb6-a6db-4fe6a532e9bf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ea3eb4-12b1-4b15-b4f3-2b64b5d48c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f154f20-1042-44c6-b540-baae01dde3bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51310380-cf1a-4c85-8833-3c6ab22f4247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f7c720-697a-41c8-9c3b-5b1e027d05b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf0614e-d1ef-48f5-a383-52eff2e669a1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8782073-5895-44cb-aa8d-d40113723666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd4240e-ad45-4d67-aee4-7674de9945e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c990d30-bc45-46fe-9532-7d37a938b26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebeb5b10-8959-4db6-99f4-3310d3022509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f73c42-a021-462d-9a1f-ec971dc6cb00",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167d89d9-baec-4762-9eeb-2afe1c1b500c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc81134-362b-43a3-a612-bd1bf2f98f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a25446a-159b-4b77-8058-3325b873a222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8969f37-5d7b-4fa8-a32b-4bd041446e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eac2d7f-bf39-44e7-acc4-06baf3caacbb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc812c2d-293e-4609-a511-2383c66170d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f92cd7d-e93b-452d-8187-4fc65fe58243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4ecbaf-fa7b-45a5-94d4-7fef5f0a2c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1f98c5-fa0a-4435-8479-ab0496859b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54cef78-8821-4fe5-8601-476ff7eaba90",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa344be-7f30-4c68-9e9d-e98cfb8ede46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1b8135-8499-4b60-b2ba-9712daa8ce02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02f6d76-7c29-4860-9c1a-becae0fc72b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d35dd1-85c6-4a64-9015-febd0594ab37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bc58e9-e6ea-43e9-b86b-e39ba4a58285",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de43eaa3-4722-4eb0-90f3-f850da455fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "554bb609-6256-4cc3-beb7-87130a532793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d695675e-3a8f-4776-9313-0e3a44f44cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e44ecd7-22e2-4029-afb5-5409ec09d667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16e0dae-f6af-40c3-9e1e-aca0662be175",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10613d9f-0788-470a-afd7-c5b59f2e9748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "655572db-80ce-46f5-b09f-193b5e077182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bba355e-ff86-4721-8fa8-11bfdbe5e016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ff0c83-7570-4075-a989-a46ebe2cf1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726ed536-5d06-4e81-adaa-2a366d7f8576",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bb42bc-8d44-4a0b-9eb3-6a10bb1789d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1772611c-7c06-4ed9-b608-b2ab0bce5267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70769e59-bd89-420d-9f06-e092fbd6b9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef37339e-181a-4969-b0b1-1d7e436a68ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac73eb04-bdae-4eed-abcc-69f52aa2505a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b5394f-59af-4d57-b844-e11193a6e84c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10472238-eb50-49ae-983b-7eac5923acd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984c950e-12b0-4390-a29c-efe4788be62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13103a3-89dd-4b7c-bd9d-cfa49d645811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab07aa8e-57d7-463a-a630-ee9fd2781743",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45560a0-ad51-4deb-a60e-866b7af9cacb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81bbb6c2-861b-44ea-8abc-3af0e902d7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "424ec8cc-63b8-403f-abb1-7763b9410b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3eb1786-4100-46a6-8bc4-053c0f1e4ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867599ce-2fd0-4121-9bbe-6ae28f338fa5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7ae1d0-9db9-4eeb-aecd-f247f8a22268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb71828-95a3-430f-a88e-098ae16e37b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906e6d9b-3ea4-4484-9f98-30ed86ad6b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477c63e1-bbd7-462b-a842-53b1d49c43d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdaec72-76c1-4ce4-a11f-3513aeb46f7b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724a031e-65d1-47de-8172-73ec303ccd94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e1a1ad0-998f-4772-b7e7-935f0f84b4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163dbaa4-5860-497e-b4f9-bd1dfdf72ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbfd47b-f8c4-4997-9cfa-f9f50912ca7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237536ca-2f56-4348-86f2-889623be770e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1fbd6d-19dd-4087-81ba-71732a170c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7747b8d5-8015-41cc-af6e-507f5cf45047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef9a130-5cf8-4881-a37c-324dad43882c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ce3014-e136-45e9-8041-4cbd97fc3e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b4f2f3-d8f9-440c-9390-a257c4781c8b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2184ac-2dfe-4ea5-a94f-fd2800485c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf98166-92b8-424f-90e2-3484fedad2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54fe568-9283-4dd5-b9a8-93b8a796df36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "025bc0e2-5c3d-4054-9501-1743f681457c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67244c94-3b0d-4691-b01c-a6a9af6d897f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7afd0f6-778f-4855-9e7b-98190a41c090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344e6493-0b6a-4ba8-a05e-b4c6bce5bdea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ca5f18-5dfa-430c-b927-40c439ba3371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a1d31d9-abc1-43c2-82dd-72f2bffd88e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56466419-6d8b-4342-b835-71bb25132da4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb81865f-6469-4899-972d-683f7804f3f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34a824a-51f8-4a2a-b695-8bd61a128cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d94edc-47a3-4317-abca-0bffbe50589e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be27fcdc-50e1-4aca-9555-2f84b1fe8e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2180a75-febd-44ab-a54a-61b96a5de5a7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb39c90-48c7-4c9b-9f0d-7f39085c97ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a64a794-11b3-4f7a-9570-601edba9d5c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6918bcc7-a915-4958-aad6-c5eab8744c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a2c086-1c2b-44e8-871f-7dea3410ec24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b23e3c-2c22-4b7b-b91f-75c59d39f2d4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2255c4c-8ebb-45cd-b3fa-244d6fbb7f65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "184c9770-da4b-482d-8e7c-89e03065af5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62632044-483c-41d7-b5a3-16ae0cc30fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59726bf6-819a-42bc-8f82-f2f349ec14d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294652b5-b064-4967-a202-40dc58869a4d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a689984-9c1c-4f19-bc5e-15af5d2fbfa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95de1d84-c3a9-4783-9f5c-737e51981c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f83e841-3cd8-4104-bfa7-83e5b80fd592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e006a39-7699-4563-be5a-e64f752da5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e5de6b-9887-4b06-aa5c-9fcfe0985118",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b7dbbd-33c3-40c3-978c-5b5eb7c91877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42971e99-b880-4d34-be18-f3046e0b05a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de094e9-a295-4443-a338-b950c9686001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2979b9a9-4587-4f5d-bfab-eae16b279397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167fe1c4-a2ac-45e1-9a51-2fa4bf09dd07",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652df7e0-68fe-47d7-9c9e-55521b2e2487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "347d44bc-d9b2-44af-a6fa-149d8c1cfe78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f221296-a95d-4ca3-8433-724c41a3b814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801da96f-cc3b-433a-97c4-617ff1fd6d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d726194a-e74f-42be-8689-907fd3cd4b36",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4715a60b-46f7-4f79-bcee-58ac4880df61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b2a6cf4-320e-4bb8-a203-5a699ea02f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "224a5785-4138-476e-99a4-5c88810f1ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36750736-85da-4e78-9dc3-47460ebdea16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b0c889-83cf-4085-bc43-b5d050fa6673",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822b93e2-0778-4c70-94e2-f9a343d9213f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c38aa5e-2a4e-4d89-9b05-6f5556a3c177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4569897d-9c4a-4d61-9aef-de92df719f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99272258-2d88-48d7-a9e3-8e8b75846d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941f9c1d-09be-4d33-8e4f-db5936518351",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4c83e7-aef2-40f1-8728-6add0bbff4f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c073534e-36ba-47cc-935a-28fe2f349659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7af46a-ddcb-4eab-b505-5e812bcf83d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b29fe70-a5f9-45b9-810d-43423367723d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b774ada-8c06-477d-a32e-dbb3e74627da",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c5b3a7-718a-48af-8352-9ed54f26cc5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea0b06c4-5a71-41e5-a800-41360ed40bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0717876-4a05-409e-8e53-646a71311b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2830386-3eb6-4e92-90c2-d38bc41d8082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedf9129-4a2c-414b-85ac-b061b2fc8bff",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02acc27-6d84-4150-9a87-e4cf111bd87f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24c8d684-57c2-4fc5-a212-db5ff1c3cfa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9388c12a-8b32-4995-bb3c-4e855453e4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ec8596-d897-488d-9c6f-115a4b0b1642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f5a90b-286f-4007-9f08-b3f69a6d79ef",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368a0c35-9806-40e7-9643-77e721fceb22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d3ebe4-eb8e-4458-8e53-03133db0bd63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f9f3bb-5876-4533-8436-813c18c6ef87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297030d0-d298-4371-b71f-ed0c98e66a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fb23c5-8e1d-413e-82b7-475ef3f2274b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faa8063-7bfc-4697-9fdd-95c0d2041db5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b412003-200b-4049-9279-2095580592c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff983e25-9979-467a-8b6c-1d3d1921b8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbc9a77-6a13-49df-b2a4-814979d1b64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5934212-e885-45e5-a6cf-b7faf713432f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8d1cd5-053d-4c1a-a159-32bbacd90dee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07133c31-5202-4e78-9bf5-2d09c8edbb0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d01304-dea2-4702-af82-49e8a45c63d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8c5cfe-d231-4b8f-8e90-b80a1d66d7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca542f5-a1a8-448e-bd92-dcfa3e8e327c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c598335c-078e-414c-bc25-2c27d33ca83a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f012951-88d5-491e-b3ee-c1da77dc7216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0746b1-39b0-4192-862d-a10cf229afc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb57cdf3-4c2d-41b0-9342-ceb2ff310f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a7b668-ff70-4382-930b-58ca0a9e31f0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9e72dc-1f94-4329-aa87-e90e5bb7d631",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35190c8f-e4cb-46f1-8a82-1f708a2d6b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6eb303-9395-4a6f-8022-8468dd07f16b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa23e06-c4ca-4c90-ba21-b11b0b7325ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e648a1-744a-47c4-ab01-5b8896ae7b3c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac9bc7c-0410-44f7-8681-99e67c20f4ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964aaf69-8eb8-48b3-bd81-9f5d676e3b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d33be3-7591-44b4-ada9-5f2026a77bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836ba143-3f86-4b46-95d1-4ed30a45e392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc749dc6-2695-4407-958d-d1df71eb7dba",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba827a5-e4cc-4d41-9561-f968cb153245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e01bf17-1171-4c11-8f10-ab764e4c78b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725f646b-8774-403f-a82c-b018e1ea8ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2780928a-fef1-4aaf-b4a2-3243595085be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a49f539-e897-4c27-9818-47769ed9267e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06f2cf3-8206-4a79-94dc-f353877de137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb3e842-3938-4faa-af49-099a1fd1ac50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c91276b-ec9c-46e6-afb8-675925651393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feef1685-1088-4115-9a8b-f67b0c63abb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f255f001-5c8f-4412-aa91-c1721d9dad0c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ac8e7a-a6ff-4380-a62b-d41ab69e2317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a5c09df-df06-482b-bd46-ad7467f45c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d090ec-3659-4c0e-8514-178c2fd92316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd16c09-c77e-4d8f-9ca8-2717772e90c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43855e8d-75ea-4f12-852c-86d3871ee7ed",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3741377f-9618-4b03-bfdb-2c42bd0c03cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c3bd074-de51-4ae3-bdb7-35ea9e46365f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af7c45c-b711-46e8-842f-7af7961c69a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6103413-0ae3-4dbf-b14d-6f337d9fde7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3968f691-467b-4bcf-8a7f-b3e750cbdf72",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175276c5-ed18-4692-bee4-f8e12e2eae05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb9a3fc-df0a-4e8e-afe3-8781a0a6d98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd0dcee-9bdf-4a70-b3c5-3ab6460f99e5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d56b9f8-6ed4-4306-ad2f-3c2f2986ee55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c5e735-1206-4403-a421-d9a7b713175f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20ceb3b-7b5a-407f-94f6-23ffdf19f7dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc8098d6-da72-4d79-96d6-b9d2748124bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1a1e37-884d-46a1-9e5f-7f7056c510d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee381a58-2c70-4fa7-aef4-59839692fc45"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab8acb49-5012-4d78-9ad2-48d6bd607f67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad68aebb-fbe4-4389-87f7-a1d21279ea80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05280b51-95e4-437d-a49f-1d8526e76f18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3aae8a35-bd93-4e23-bf38-b9c2f486754b"
                    }
                  }
                ]
              },
              {
                "id": "e7242449-d9ab-4666-8f30-72bbf3eb5ac2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd29bcb4-83f0-495f-ac9b-abb0c3331a30",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55142b14-9bb0-438a-8283-3c5744c453ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bd5f8be6-301d-487f-9e1c-0b8d0e64f4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1969d1-3c5b-4dae-8411-a3a7a314e9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f21f214b-da78-472c-88db-bb5d6ec28568"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cdc296d-a0ff-4dcb-85d0-306badd03b6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8785063c-3f58-4cd7-981b-3f60cc70bcae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a77d739-8b0c-43b6-aace-81a3e549ae06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7eb8e9ee-b066-43b9-82e6-1ee907cbeb07"
                    }
                  }
                ]
              },
              {
                "id": "37db178a-2bfb-4c1a-8ec1-51de795da2b9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9538f6f3-e10d-4101-8532-382b1e227de5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5408eb5b-7e6e-46a2-95a2-a104f4346b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ff75b718-54a4-4ba7-83e3-76f817e2a186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99b3800-4194-4ffb-9ce5-309ca94c6c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a39b7e6-99bb-4e04-8ded-c8334a6ee981"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a9695be4-8573-4f62-a0e4-febf8b820a1a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e7d21a5f-cdb0-4d63-b4fe-62b735d2ae33",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e05d460-7e9b-4cfd-943c-2cac138ef759",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "596de9a3-89fc-4b5b-99bc-cf27136e699f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f43d7ca1-f167-49b2-aaed-40c71bedb7b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76188029-784a-4013-a957-7909e0489e5b"
                    }
                  }
                ]
              },
              {
                "id": "2d85faf6-60e2-44ab-8219-2efc6c5c1e71",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec2ca610-a46c-4d1c-8377-292bcfa3425c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0e36f4ba-d357-4308-b3d7-4234ecfec291"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8aab6e66-d4b5-4ac3-ab48-78675f0838d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab336760-8443-414a-8a68-69b53aa9567f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b0f3e74-9ac4-4e7f-aeb9-c44bf33efe06",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3a9e961c-8c76-4ad9-9ed6-df71cb5b9c37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f456a3a-3bdb-4bfa-b6e1-766a19e83262",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14dd698b-836e-46d1-a988-6304fa03ca9d"
            }
          }
        ]
      },
      {
        "id": "f49c3b23-6db7-49fc-b86a-4d650f8f0ece",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b166bb6a-a086-4b3a-8a06-681dd5f9ecdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41f082ba-5d2e-40be-a998-a4b0fe4858f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02c14ff2-2687-4249-9bb7-be83f368383c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6ccd77-05ea-40dc-98ff-0f968f49fa62",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a9eb7e9e-0342-4687-878c-978f78cee6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b195003-4be1-4565-a12f-c0156fa9f311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98179ffb-d451-41b7-bed7-80b75322e638"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46a1b24b-ea86-435e-9225-8f0edde65b0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f80a6a87-ad99-4d94-bc75-4cedc0ba78ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2fb06a2-9918-4c86-be9d-a3d5107e3f21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d99096f-5e17-4f80-82df-34a9f47e88b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0de7f778-f471-47eb-8164-ebd48743f629",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a7aa11d7-b341-4016-985e-b6e7e85e02df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9155a3ff-08d8-417b-a9e3-d69cf970d8ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29e67b66-0aa0-4e4c-89c2-fc7c0c8f7d49"
            }
          }
        ]
      },
      {
        "id": "640431fb-8626-4dfe-8c6e-9b44d56a7595",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4d5edb14-1584-4df4-b6a4-18fd4c8bdba8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e383fd9-f6da-43ce-915b-e0050f74395f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5260b89-f68b-4bce-8fb7-ca797e8f8f77",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8254bd-d3da-445d-943d-ce9c62b0d8d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2a3e9df-cd1b-4f23-b800-126d1a30f320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c051de1-962a-407f-93b3-eca519bf212e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8aa00e16-bcb4-44c2-a7ec-4bc82c9db39d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6de95b2e-cec3-4a23-b10f-3f56beab17c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebe8021d-33c1-4003-a31d-9b6aee164684"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92eb70d6-ffd4-4b15-9711-79cb11b89b47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e3913f9-b672-4cf9-98c9-6a2b68ce4424"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "886e5a31-4119-464e-aa71-1e6b05f69568",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "84ca6545-016e-47c8-8e13-9057ed9c37d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc0e43a7-644e-4ddd-b15a-b4d2042a81f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ac300d5-0594-4718-b28f-7cc1719253ea"
            }
          }
        ]
      },
      {
        "id": "2eb30979-5697-4407-824e-f3eca409168b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "30b69f26-97ca-4acf-b4cc-6ad81ecb6dd5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b666c063-4ef4-4ed3-8ad7-c1240a202154",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c3fe32c-7dcf-49b7-abd2-cc378d29c7ef",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f854879-019b-4f50-85fa-48ea6a16652c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5879c42d-cf9b-4deb-a2ce-17f52f5b5d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf60d01-24ad-4d2c-bdd1-7d721f8e4014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88c60ab7-7a43-46ae-b8ef-9ee1a8088349"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1379d3dc-d398-479c-bf37-3c6dec964813",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fb25997-b25f-479b-a0df-06cd8d7b36ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6507677f-9e4a-46e7-9327-1ccc1516566b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37b16bcc-1f90-42d8-a265-8cd71df6f5e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "904cca84-2697-40af-b2ab-b5c2fb4b013c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "722b37b5-6a1e-4dd2-87a8-7c9deb10fd5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ce70154-1354-43d0-a711-a911296fc659",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc8622ff-6dac-4764-88a2-7007bb13789d"
            }
          }
        ]
      },
      {
        "id": "33b5648d-4574-45a5-8d36-8e80ebbdac11",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce0cd760-0276-4878-a575-3e5305e208d5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c22a14a-edcb-4d28-8c66-a3982cd3f396",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8fa95d4f-d5ac-41ce-8952-6d3b6f505488",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60a79302-3d70-44bc-9b07-116f457c9648",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "faeab77b-55ae-47bb-8d8d-749df145a745",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 309.5406504065038,
      "responseMin": 17,
      "responseMax": 6902,
      "responseSd": 950.5772595619595,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687221655381,
      "completed": 1687221745071
    },
    "executions": [
      {
        "id": "2957aabc-6bf7-42e6-8ab5-bbe1ab6fdb41",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d5ca9ded-5932-4291-bff6-a6d3ba373d27",
          "httpRequestId": "931082cb-280f-485f-96a8-5750e30ec743"
        },
        "item": {
          "id": "2957aabc-6bf7-42e6-8ab5-bbe1ab6fdb41",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b1a16952-e777-40e6-9ddb-3fd316ac439d",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 0
        }
      },
      {
        "id": "4cd88a14-f883-4d68-8d30-3739a057fd71",
        "cursor": {
          "ref": "2cc7abdc-956b-4c0a-8230-befc4a510d88",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "afe74f2e-bd10-44c8-aaad-112e7d97b840"
        },
        "item": {
          "id": "4cd88a14-f883-4d68-8d30-3739a057fd71",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "254978e9-324f-46f4-8b52-ff4599584073",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 0
        }
      },
      {
        "id": "8b6a3db5-7075-4851-8a28-8bdf4dbc18ac",
        "cursor": {
          "ref": "f3726fd5-1be3-4693-aa5c-f78dff24be3b",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fe6dc6e4-69aa-48d8-9ad4-cfeaa3dba987"
        },
        "item": {
          "id": "8b6a3db5-7075-4851-8a28-8bdf4dbc18ac",
          "name": "did_json"
        },
        "response": {
          "id": "8ed0ad7c-4488-4e34-a3af-dc50c863514a",
          "status": "OK",
          "code": 200,
          "responseTime": 277,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e19c58-56a3-4dd3-ac06-38b7c6bece1a",
        "cursor": {
          "ref": "617fee0d-9b66-4326-bd04-7b94e918f48e",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d555f40-ea4d-45f3-97f3-e054d8e52e06"
        },
        "item": {
          "id": "56e19c58-56a3-4dd3-ac06-38b7c6bece1a",
          "name": "did:invalid"
        },
        "response": {
          "id": "c3f32925-cd0f-40cb-8611-81dcd25fe7c9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1607,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "56e19c58-56a3-4dd3-ac06-38b7c6bece1a",
        "cursor": {
          "ref": "617fee0d-9b66-4326-bd04-7b94e918f48e",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d555f40-ea4d-45f3-97f3-e054d8e52e06"
        },
        "item": {
          "id": "56e19c58-56a3-4dd3-ac06-38b7c6bece1a",
          "name": "did:invalid"
        },
        "response": {
          "id": "c3f32925-cd0f-40cb-8611-81dcd25fe7c9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1607,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8bf0200a-9ec0-49c5-86e9-bdeb81f21440",
        "cursor": {
          "ref": "932102b2-a3d3-42d8-9052-79a0c135e390",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1e52bea3-5dfa-48cc-81e2-56a961e5439d"
        },
        "item": {
          "id": "8bf0200a-9ec0-49c5-86e9-bdeb81f21440",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a5fed835-df96-4f6a-9725-c622b076684f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 119,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d9970f-702d-4573-b024-bf5ab662f457",
        "cursor": {
          "ref": "fec95ae8-51da-41c0-af42-8b55c1247d58",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0ca93cc7-80d8-46e4-8651-0960a91d2f38"
        },
        "item": {
          "id": "e1d9970f-702d-4573-b024-bf5ab662f457",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "83f5f3f1-2ab2-4118-b344-0cb4d797e3fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4961ad4e-ef1e-40cc-8eac-b2c58abfd4a5",
        "cursor": {
          "ref": "f1834d6f-bace-48e9-a3f4-974db211ed5c",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9e2c15c4-10de-4963-8e4b-2522bfa8e57e"
        },
        "item": {
          "id": "4961ad4e-ef1e-40cc-8eac-b2c58abfd4a5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cd1d80f7-c2ea-4069-959d-a174cf8229ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "67434d97-d935-4b3c-9548-1624e159c720",
        "cursor": {
          "ref": "39d22b44-233e-4cde-87d6-71a3f0eb0f5f",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fcb8d82c-0c9c-4220-95ee-ddddd60db6e4"
        },
        "item": {
          "id": "67434d97-d935-4b3c-9548-1624e159c720",
          "name": "identifiers"
        },
        "response": {
          "id": "6bae54df-5cb2-4fd7-a816-138dbbbe1793",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebda7428-7111-4e1d-bafb-5b0f167efaaa",
        "cursor": {
          "ref": "1bb42f94-d2ee-4890-bda0-1124b2ac11c0",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c51e9b08-8502-4f1f-a9bb-edd4c948877b"
        },
        "item": {
          "id": "ebda7428-7111-4e1d-bafb-5b0f167efaaa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "21e5e8d9-7450-4b60-9bcf-0684e4b0f658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e664db8-c352-4e9d-83c4-8254e65938c5",
        "cursor": {
          "ref": "788495f3-615d-45cf-8e36-8f3b6adf29f7",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "91a28d6d-9c8a-42fa-9bc2-8627befb0929"
        },
        "item": {
          "id": "9e664db8-c352-4e9d-83c4-8254e65938c5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "41dc55bf-847f-4033-89f5-7917f703cbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ed2109-9919-4ffc-bfd6-7700e88f2370",
        "cursor": {
          "ref": "23d2d672-7ae9-4efd-8a8f-922f02e21d31",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8f211a92-a9cc-4e43-8ef9-1f1aef925ea6"
        },
        "item": {
          "id": "41ed2109-9919-4ffc-bfd6-7700e88f2370",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "387f2c25-edd9-4ce0-a164-b515567c7c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f862425e-3190-4245-b488-93ac412e2870",
        "cursor": {
          "ref": "f05a897f-6ef7-4579-9b0b-2b8bb18b35dd",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0fb7371-091a-40a1-8211-581ce77658b0"
        },
        "item": {
          "id": "f862425e-3190-4245-b488-93ac412e2870",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7322afda-95e6-46ba-a436-189362cc4fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f137b9-fd63-47b4-bfbb-d0130510b88a",
        "cursor": {
          "ref": "889c750b-0461-4cfd-a661-d8d32a5f075f",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "00f21e1e-549f-4667-8e3d-a473666004eb"
        },
        "item": {
          "id": "e7f137b9-fd63-47b4-bfbb-d0130510b88a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a0eb6a4a-a797-4457-af28-7d32914c0326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527da349-608f-43bf-874f-911eb77b8b72",
        "cursor": {
          "ref": "aa631984-1c1d-4850-8223-73d60fb4a713",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8f34c57d-8c9a-4f97-a37e-2269df33a264"
        },
        "item": {
          "id": "527da349-608f-43bf-874f-911eb77b8b72",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "440ba4ca-5bfc-46e9-8c51-46a546ee68e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdcb27e-35ba-4656-8d43-3b9c4dbde1b4",
        "cursor": {
          "ref": "ac84af5b-4838-45db-94f9-7c90c26a5c41",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5d5b8b94-0ec0-45a2-be5b-c7d8a0382105"
        },
        "item": {
          "id": "dfdcb27e-35ba-4656-8d43-3b9c4dbde1b4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "790abb59-4a4e-47f7-b009-6ba826100e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e21390e-c44d-402e-8739-0dc52d88b4df",
        "cursor": {
          "ref": "fc6790d1-382c-431d-b5e6-ab15d36f3e3f",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "eb11b1a8-3ad4-4399-929a-f79d88bce18e"
        },
        "item": {
          "id": "6e21390e-c44d-402e-8739-0dc52d88b4df",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0690c175-ac39-4c84-8260-4e2485116371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a367c3ec-8e79-4d32-bca6-92f8e47f225c",
        "cursor": {
          "ref": "c6145d9f-3bff-4dd9-8417-84cb2d6e922e",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fdace8da-7f41-41d3-b967-a5e2ac4e89d1"
        },
        "item": {
          "id": "a367c3ec-8e79-4d32-bca6-92f8e47f225c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "218e6114-82bd-4c64-9d94-616949a588be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965da6d1-f706-45e0-ba54-1ef6fc24b27f",
        "cursor": {
          "ref": "35ff61b7-fe00-4c10-8987-1424e669ccfc",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a52bbaac-2780-4e00-8506-f39a84fbb310"
        },
        "item": {
          "id": "965da6d1-f706-45e0-ba54-1ef6fc24b27f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d37285a2-be5e-4311-96f2-0d919122ad7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7212b8-77be-4b86-a849-113bac84d8b9",
        "cursor": {
          "ref": "6981c396-2352-4642-adcb-ff58630b4d3e",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "45e025a5-8f7c-4e5f-b65b-7cede117dabb"
        },
        "item": {
          "id": "bb7212b8-77be-4b86-a849-113bac84d8b9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c88c88f9-61b3-4fb3-92e9-63a1b04eba30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5133ac07-811d-4032-b78e-05cb2b5dfbbc",
        "cursor": {
          "ref": "c47fb5f3-8658-4be2-b48c-1f52164a6c6f",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9e0a6de5-951c-4cab-9900-87ec932d2e36"
        },
        "item": {
          "id": "5133ac07-811d-4032-b78e-05cb2b5dfbbc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f0df31b4-db46-4d58-a1ac-d7459b01ec5d",
          "status": "Created",
          "code": 201,
          "responseTime": 1650,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "beb64537-c170-45ab-a680-154801a2378f",
        "cursor": {
          "ref": "636185f6-de09-4bd1-8e88-aa7ab069d67a",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "27d2f125-b5b9-4a12-8a44-6f5782fa283b"
        },
        "item": {
          "id": "beb64537-c170-45ab-a680-154801a2378f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ed7b055b-fb49-493c-be1c-9a9bfa7650c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a5f52d-3dbb-42e6-bdff-0c374c6cf289",
        "cursor": {
          "ref": "ba74f09a-a53e-44c3-a9ca-9f99809fb5f8",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "74d4c7cf-dddb-485f-8a5b-7a4a34a71446"
        },
        "item": {
          "id": "f6a5f52d-3dbb-42e6-bdff-0c374c6cf289",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5421aa6e-d8cd-49a6-8f4d-75a2ff23a559",
          "status": "Created",
          "code": 201,
          "responseTime": 6510,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f2fc5b69-c2b2-4389-a08f-b71eac7c14ae",
        "cursor": {
          "ref": "59dc8108-d416-4a9a-af24-16edc8f9941b",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ce7aee7c-3a57-4ab8-aace-ef4b686479e0"
        },
        "item": {
          "id": "f2fc5b69-c2b2-4389-a08f-b71eac7c14ae",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4f5b7e0-e941-4c13-89e0-87e9104cdb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfee471d-3052-4da0-b16f-c163fabbbdfb",
        "cursor": {
          "ref": "da14b197-c18d-48fc-85eb-bc70fd8e8fa4",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a60d30bd-4217-41d0-8888-b50098161135"
        },
        "item": {
          "id": "cfee471d-3052-4da0-b16f-c163fabbbdfb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "68197b7f-b30a-42ab-8662-5869960339c3",
          "status": "Created",
          "code": 201,
          "responseTime": 5126,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e7317c6f-c7a2-41b7-8c4d-555311153864",
        "cursor": {
          "ref": "3e1e3ba9-a36c-4312-aa32-dfbd3f6326f3",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7063fffd-9291-42c8-8f5a-b363d1546e21"
        },
        "item": {
          "id": "e7317c6f-c7a2-41b7-8c4d-555311153864",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4a450bbc-4afd-4488-8cd0-e0de5204ae0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd670129-e141-4603-a48b-25c2d605fac2",
        "cursor": {
          "ref": "3183512b-a2b3-4c60-8966-3180ca170aa4",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "23b792f4-9c82-4ff6-aa4d-5729cbbb873d"
        },
        "item": {
          "id": "fd670129-e141-4603-a48b-25c2d605fac2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a0b609b3-67f3-4f27-b0c7-7dd912b1177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49563eb3-a895-44ad-8354-74ae5cf1047a",
        "cursor": {
          "ref": "50222c09-af48-4649-9f3b-30d5878107f8",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cf2e5ae0-57d3-4353-abfc-3252fdb4e3cd"
        },
        "item": {
          "id": "49563eb3-a895-44ad-8354-74ae5cf1047a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bbc0fe89-439b-4537-aa08-ae7cce809dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a3213f-85e7-4ff5-8341-ac96efc9b21f",
        "cursor": {
          "ref": "2bf3ac6f-5e91-43b4-97ed-f14876a77325",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "54d5fe53-9075-4472-89b7-91d1c715e66a"
        },
        "item": {
          "id": "d1a3213f-85e7-4ff5-8341-ac96efc9b21f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dd78aeb0-e603-4456-a812-cbb090046055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2faf59-fc6c-4004-9482-dafa8388368e",
        "cursor": {
          "ref": "3c3622fc-687d-4b55-bb70-13f2d62c2b80",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9376bd3d-c421-422e-afb9-6c36efd1eb77"
        },
        "item": {
          "id": "5f2faf59-fc6c-4004-9482-dafa8388368e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ce33e780-a3bd-45ba-8670-59341a5d6961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6226bf4d-f202-4edc-85da-0efd831ba96c",
        "cursor": {
          "ref": "3f7af098-dbc7-48c0-b0a9-03ec738215df",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "73ed4cdf-820b-40cb-a16f-9c3a8a428942"
        },
        "item": {
          "id": "6226bf4d-f202-4edc-85da-0efd831ba96c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3b98a235-9512-484f-a4e8-7827dc0d0714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1142bedd-6684-4af6-8b57-0f8b2dc911ad",
        "cursor": {
          "ref": "f9771255-a9e5-4ad3-99c9-97c34b061aa6",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "924daac2-e012-4c51-842a-6974da3700cf"
        },
        "item": {
          "id": "1142bedd-6684-4af6-8b57-0f8b2dc911ad",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4797e1c2-1188-492a-9f9b-0e07354d161b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a4e989-b395-4bce-867a-72d594fec70c",
        "cursor": {
          "ref": "d5ec0b29-c923-40c5-b325-66f1b964a6e2",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ab2684bf-af67-4c1d-83d8-0dd60327ff6a"
        },
        "item": {
          "id": "88a4e989-b395-4bce-867a-72d594fec70c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "105545d7-1017-4b89-90b6-fd02f9d23f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d28eb2a-2b13-4739-a8bd-fe02e3aac7cd",
        "cursor": {
          "ref": "2a5ab73d-d823-47d4-a3d5-9328f7d7ea02",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6ab1dd93-9735-4458-9443-5d2ec7a838dd"
        },
        "item": {
          "id": "8d28eb2a-2b13-4739-a8bd-fe02e3aac7cd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5e414744-bcac-4425-9e43-fff8a9f1e64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d837905e-22e8-4ed8-bb4c-542f0268be97",
        "cursor": {
          "ref": "f9235d78-4044-4431-a227-36b908f825f5",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4f431216-dfa8-4766-9cef-4af123e05904"
        },
        "item": {
          "id": "d837905e-22e8-4ed8-bb4c-542f0268be97",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f1ed0e79-2702-4590-8076-49491430d81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36eb51be-c36a-4922-9fdd-f41623a48c1d",
        "cursor": {
          "ref": "ee4ec1b5-c79b-4183-a9bc-f32f510b82bf",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "32ffc6f4-4c4d-44e4-af2c-c56d3d6b23d1"
        },
        "item": {
          "id": "36eb51be-c36a-4922-9fdd-f41623a48c1d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "882dcd00-74b6-4b11-8c51-72f345520e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bdd67a-2b96-48ba-9914-a7d1b2f72b4f",
        "cursor": {
          "ref": "2b9f3a73-43a6-4997-8def-c1525123f8e6",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "91305e25-5f81-48ec-9270-4386f534d20a"
        },
        "item": {
          "id": "03bdd67a-2b96-48ba-9914-a7d1b2f72b4f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5273c503-5303-4e00-b13c-456439824e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ad4f25-7524-4c16-b8d8-12d1aea49ffd",
        "cursor": {
          "ref": "5000d6e6-d083-43f4-8d1e-da75ea0de1ff",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cb023107-c346-4e14-8e67-620e49a7b7f1"
        },
        "item": {
          "id": "a3ad4f25-7524-4c16-b8d8-12d1aea49ffd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "81b56fed-ed82-4f7e-a9ad-df8050c62cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512d7fb2-eb9a-4ec3-b1bb-b78227731a2a",
        "cursor": {
          "ref": "1205611c-15e2-477d-bee9-2abb3854d3b2",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "847e813d-0ac2-4a6c-939b-cdbcd6b538ee"
        },
        "item": {
          "id": "512d7fb2-eb9a-4ec3-b1bb-b78227731a2a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "331423a2-4b7a-47d4-b331-d9c27db2908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751c14ef-8788-4db2-8a95-5a1d64d0acf2",
        "cursor": {
          "ref": "547e028c-3777-4edb-b59d-950214b1c3a1",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "43c90acf-4852-443f-b6be-fff5a2113aa9"
        },
        "item": {
          "id": "751c14ef-8788-4db2-8a95-5a1d64d0acf2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dc867e31-4619-4666-bc7f-4367469e7db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646f2ab8-d881-4a98-84eb-a2ed1d0ca1eb",
        "cursor": {
          "ref": "26635d2c-99cc-451a-a453-568c6393d2ef",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "49c37ab0-478e-4972-8b73-5ee9e29e44cc"
        },
        "item": {
          "id": "646f2ab8-d881-4a98-84eb-a2ed1d0ca1eb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a79e0b0b-3871-49e6-b034-db4173e1ef34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a23991-e525-4f95-8d23-0b8e3fe4f07b",
        "cursor": {
          "ref": "88cb67fe-5bea-4ba3-8744-50da51cdb3f3",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ec3a8914-4fc4-488d-ac83-aeb933dd1934"
        },
        "item": {
          "id": "e7a23991-e525-4f95-8d23-0b8e3fe4f07b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2b1da5c8-5b51-4052-8106-aa0db98507c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118dfed5-8998-4e1e-baf8-03aebabbe45d",
        "cursor": {
          "ref": "2f20fa74-6a25-4142-a456-a30e90c6747e",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e7f1c864-c365-416e-8a6e-a802bd505347"
        },
        "item": {
          "id": "118dfed5-8998-4e1e-baf8-03aebabbe45d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6316680f-22e1-4894-91ba-2fc2ae40be3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8190c4ba-1b4f-43b5-9205-3fb785aac465",
        "cursor": {
          "ref": "d560f2cf-c7a5-48aa-9dbf-01a2353c1b34",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4fd0b24b-0cd8-475f-9fd3-c476d80efa22"
        },
        "item": {
          "id": "8190c4ba-1b4f-43b5-9205-3fb785aac465",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "40b0f7dc-42a1-40c7-9a96-dd8427f940d5",
          "status": "Created",
          "code": 201,
          "responseTime": 3963,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c63942e9-3a13-41a0-be2c-27c38a9314dc",
        "cursor": {
          "ref": "0ccf70a1-5770-463b-a6c4-f3ed9b441f4c",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "68d08fff-fd16-4c04-94df-bb5fe0ef39c7"
        },
        "item": {
          "id": "c63942e9-3a13-41a0-be2c-27c38a9314dc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6deb410c-0338-4b60-bb58-5d96f3ab87a4",
          "status": "Created",
          "code": 201,
          "responseTime": 2936,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "16d0148c-0fb4-484a-b2dc-237524c0e49a",
        "cursor": {
          "ref": "7d917506-cdf8-4bdc-99bb-388eca5a8823",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "35bff95f-b29d-4c73-9d00-98d205dc8fa2"
        },
        "item": {
          "id": "16d0148c-0fb4-484a-b2dc-237524c0e49a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fb0102de-df3c-49ef-ad45-06003e9ec624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d3b387-eb96-4ac8-b495-0026fb11079a",
        "cursor": {
          "ref": "fdccafc8-2bb7-4254-bead-3b798294cc22",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0deffd05-0616-47d1-90c0-7c22ff20684e"
        },
        "item": {
          "id": "87d3b387-eb96-4ac8-b495-0026fb11079a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "10272f62-90da-4929-a58b-8379769a0d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e2d983-148a-45a8-861f-45925f0734fa",
        "cursor": {
          "ref": "4edf17c5-c673-4199-8412-5a3a2d1fe663",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c46035bf-91a4-4499-bf8f-9207be1454d6"
        },
        "item": {
          "id": "15e2d983-148a-45a8-861f-45925f0734fa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "14a01cc9-dd04-4234-bd5c-6e50f5ccde3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d82c4a2-3d61-424c-b843-4897792cb4ae",
        "cursor": {
          "ref": "156778f6-0d20-4245-b6c4-02f045f4b48f",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e6b00d8a-0dd5-48a7-a056-9838acadd502"
        },
        "item": {
          "id": "4d82c4a2-3d61-424c-b843-4897792cb4ae",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "daed83bb-ed80-4b72-af0f-b373f04ac305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f172adc7-857a-4056-b477-e92e9e652211",
        "cursor": {
          "ref": "2cc00bcf-c63a-44cb-b0f6-1f5cc9a203e1",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "83cce449-0853-47af-9c65-62b10b1229a5"
        },
        "item": {
          "id": "f172adc7-857a-4056-b477-e92e9e652211",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ff037fb4-0dc3-45ac-b466-25b4f3d39028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7b4ae9-005e-458f-a2e5-d5164ed93fa7",
        "cursor": {
          "ref": "33c12e9d-6a3f-446e-bd99-5a249c9cda3a",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6ac95816-75a9-492a-8864-32faad5d7a5a"
        },
        "item": {
          "id": "0c7b4ae9-005e-458f-a2e5-d5164ed93fa7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "383235e2-6fd0-4116-b54a-4b63119bf644",
          "status": "Created",
          "code": 201,
          "responseTime": 2973,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "040dd71c-951c-4377-afe8-13afd1da9f33",
        "cursor": {
          "ref": "631e4df6-80e2-476b-953d-5db0132d2125",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "312013c8-3aa6-49f8-9bf0-d23bd4bf7959"
        },
        "item": {
          "id": "040dd71c-951c-4377-afe8-13afd1da9f33",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1e665475-c437-44a3-a514-c0bda950f0fd",
          "status": "Created",
          "code": 201,
          "responseTime": 2395,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0a11d27a-93e7-43e5-a4b6-b638b890fc34",
        "cursor": {
          "ref": "e89b4e32-d25f-4e83-8cdb-54f42f1a668d",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e2830daf-aac7-475c-a186-47ac36091976"
        },
        "item": {
          "id": "0a11d27a-93e7-43e5-a4b6-b638b890fc34",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2f4f10bf-82bf-4484-ac7d-4c5392752bff",
          "status": "Created",
          "code": 201,
          "responseTime": 2978,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "57947021-090e-4ea5-be5a-3a2d2e37243e",
        "cursor": {
          "ref": "5a2169db-03bd-4ed4-b3e7-ac314a26ac62",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2c6bca56-ebd4-428a-831c-8ac6e872691e"
        },
        "item": {
          "id": "57947021-090e-4ea5-be5a-3a2d2e37243e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ccd98b34-5cfc-46da-a5c8-0849875757e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84330845-af66-40e5-b969-28ebcccbacec",
        "cursor": {
          "ref": "9d2f8baf-15c4-4a57-997f-c21acbda4985",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4fb8f141-9bce-4ed7-8fe8-432ff28ef840"
        },
        "item": {
          "id": "84330845-af66-40e5-b969-28ebcccbacec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d3e070c9-2489-45ba-82c0-24880c9dfdb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b43236-5c2e-4014-89f7-ab1360b23eda",
        "cursor": {
          "ref": "31319933-1306-43ed-aceb-7c51fdd05681",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ef18151a-a720-412d-b339-8ff28b1907bd"
        },
        "item": {
          "id": "49b43236-5c2e-4014-89f7-ab1360b23eda",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "244dd03b-c52c-47e3-8c87-6ad43ac0bf21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92c79cb-c3f1-4f31-8388-8a54d81a352c",
        "cursor": {
          "ref": "2ea43e57-7e36-453b-a442-c9008fe46228",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4dbed0c4-d3b7-485f-b86c-d15d7d5dcd69"
        },
        "item": {
          "id": "c92c79cb-c3f1-4f31-8388-8a54d81a352c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7c9df39a-7a96-4545-a59e-044149abad97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7afcaea-f0d3-4013-9d36-1484c4b29d39",
        "cursor": {
          "ref": "88c2e238-da29-42e8-866b-c1033cbdd08a",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9b3de143-c583-4119-92d7-e2a452771892"
        },
        "item": {
          "id": "b7afcaea-f0d3-4013-9d36-1484c4b29d39",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "12718057-1750-411f-b519-de1ceadf18b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8950c54f-617b-4ac8-895b-81ea6ea1f858",
        "cursor": {
          "ref": "ebdf7e03-afdf-4d28-8268-dc429d317157",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a3124c1c-8a2f-4ef9-bb94-1a37de54e781"
        },
        "item": {
          "id": "8950c54f-617b-4ac8-895b-81ea6ea1f858",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8885290a-eedb-4ac2-a83a-0a114bf8ab70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75591a3a-602e-4b0d-88cc-8e37e712b027",
        "cursor": {
          "ref": "5d1cd99b-3493-4d31-a1ed-4c2f76d42591",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3ad69404-04ed-4260-8195-8832383670cc"
        },
        "item": {
          "id": "75591a3a-602e-4b0d-88cc-8e37e712b027",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2e2ad286-18fe-43f1-94f2-4331e91563d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3760848-c8d2-466b-aa9e-7a86d3ad42ff",
        "cursor": {
          "ref": "84a0f98a-1984-4af7-b758-a9d0689cbab0",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "94519bd4-8501-41f3-aec6-2020aaaf9396"
        },
        "item": {
          "id": "f3760848-c8d2-466b-aa9e-7a86d3ad42ff",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a1434a57-8b93-4fbf-9414-ab84dd08835d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7797bf0-2723-4c20-b7a2-b2bd1d3b60c4",
        "cursor": {
          "ref": "08860619-15f6-440c-9248-f7d6cd042ad1",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4e5f8747-b780-482b-ae5e-c4950e68bfcb"
        },
        "item": {
          "id": "b7797bf0-2723-4c20-b7a2-b2bd1d3b60c4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d265133d-dbe9-4e9c-bc01-6e976fbd4161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc30d30d-5714-4d07-a232-4090e4af11a1",
        "cursor": {
          "ref": "e675ac68-4bca-4236-9de9-5debb052d9dd",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5e7cd81d-8d84-49e2-a75c-608d4a802d35"
        },
        "item": {
          "id": "bc30d30d-5714-4d07-a232-4090e4af11a1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e0f66e3d-4e60-480f-8c12-8f0eb40c75c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06976cad-fead-41ce-890a-52f6c96b5813",
        "cursor": {
          "ref": "3fb072f8-498b-43b6-9ea9-f0dc4bc6fe31",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1f7c3593-766f-4c68-80f6-f4f8c9434364"
        },
        "item": {
          "id": "06976cad-fead-41ce-890a-52f6c96b5813",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0c7cedbc-3a8a-44d7-858f-6c77a221bfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca56202f-e3f0-41d0-8b1d-e6235bc2a5ca",
        "cursor": {
          "ref": "316455dd-9683-45ea-ab16-71214faf32ec",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dc41f44b-c160-4437-81ba-6f9170781265"
        },
        "item": {
          "id": "ca56202f-e3f0-41d0-8b1d-e6235bc2a5ca",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a0912119-4014-417b-95e8-15fc1b1cf975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb251f1-c602-4a6d-b4a6-76c648bb440c",
        "cursor": {
          "ref": "0db54cfe-a9ea-4422-bd3a-38d2b457d940",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "16c57bb1-4de4-4b98-93f8-36ff11d8db57"
        },
        "item": {
          "id": "6fb251f1-c602-4a6d-b4a6-76c648bb440c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0cbeacfc-83b3-4d61-9a99-fe853225bcc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d1273f-d796-4498-9ddb-ddb7848afb41",
        "cursor": {
          "ref": "7e3bbbd0-701a-4d19-a757-3cb60cb2a1b5",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "76591123-fa67-46fe-be26-dcdadd7d4753"
        },
        "item": {
          "id": "94d1273f-d796-4498-9ddb-ddb7848afb41",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "830b2db3-53c2-4344-9336-880da8149f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187a58eb-a4b5-4d2e-ad58-0a3b02c09535",
        "cursor": {
          "ref": "95f46734-411b-4ed1-9661-801ddc5c1bc2",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "453be724-ea97-481d-834d-bffd1f0bbf84"
        },
        "item": {
          "id": "187a58eb-a4b5-4d2e-ad58-0a3b02c09535",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "150c7d01-5a89-419f-9eae-ac5bf33f200d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2c509b-c10c-4f85-a5c4-9a350bd64110",
        "cursor": {
          "ref": "055759ac-7f7c-45b5-a38e-a96573f8ddc1",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "587cd265-f387-4671-ba6c-f95832b01490"
        },
        "item": {
          "id": "6b2c509b-c10c-4f85-a5c4-9a350bd64110",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "648757da-3b47-4632-9bdc-3221255331f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6509fa-c6e4-4fe8-9a08-bf6963f8a2b2",
        "cursor": {
          "ref": "9c7f7f6b-4035-489d-ba8b-41654c31e997",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d9830930-0b02-4ba3-99f7-c6338bc78583"
        },
        "item": {
          "id": "fb6509fa-c6e4-4fe8-9a08-bf6963f8a2b2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "175c64e1-4960-4f55-9e0e-09f694c874ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73c704c-9f2e-43ed-9080-dc06983d5e28",
        "cursor": {
          "ref": "93936ac7-e451-47a7-8594-a047c5803e3d",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b598773f-9de6-4482-b5fd-313833cf5492"
        },
        "item": {
          "id": "a73c704c-9f2e-43ed-9080-dc06983d5e28",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1531f519-0b07-4a6a-bbed-3028de7dbeec",
          "status": "Created",
          "code": 201,
          "responseTime": 2078,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "14aad206-f2e5-4949-8ae8-f1b9f112d69a",
        "cursor": {
          "ref": "c15c1b51-376e-43fc-af60-bcb3cf860f0e",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7300656c-f5ef-4cc5-af81-b7559dd5e377"
        },
        "item": {
          "id": "14aad206-f2e5-4949-8ae8-f1b9f112d69a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5d1e424d-bde7-4c63-9f11-013a476f4dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285b3d04-5119-4100-904a-4cc7ed7a837e",
        "cursor": {
          "ref": "9fbced27-09c1-4750-8e67-d75a739cace1",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1963d7a6-5705-4f61-b83f-5e8cdd243103"
        },
        "item": {
          "id": "285b3d04-5119-4100-904a-4cc7ed7a837e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b040c899-19c8-4628-a0d2-50e8e927330c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82b6304-249e-43cb-a0bd-8e83253f555b",
        "cursor": {
          "ref": "0d8b15d3-2d4d-40b8-8b3f-7a4ce140818f",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1a5ac083-201b-47f8-87a2-1871e893137a"
        },
        "item": {
          "id": "d82b6304-249e-43cb-a0bd-8e83253f555b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2b288f2d-e4ca-4afb-ace5-92cb701e419f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d56c55-a5a0-4f84-a66c-0430d5a10e82",
        "cursor": {
          "ref": "3c85bbf0-68af-4546-953d-c3e17c602794",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a8a88edd-15cc-4b1b-803c-c52a76e0dc19"
        },
        "item": {
          "id": "f3d56c55-a5a0-4f84-a66c-0430d5a10e82",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "79823cc2-9a84-411b-a7da-c88a7067525b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e0ff8e-93f0-4288-87ca-bab28b57cd6a",
        "cursor": {
          "ref": "15298f7d-24c6-4d8d-9543-543923fb31d1",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ae96d07f-8065-49b6-9a47-b2f400eed635"
        },
        "item": {
          "id": "c9e0ff8e-93f0-4288-87ca-bab28b57cd6a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c38d8274-656e-45d9-aa82-ca3d13bd4289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1436afb-02cf-4556-ab34-9281754bc10e",
        "cursor": {
          "ref": "e1b3408e-4593-4637-9cbc-6da5300f6f87",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "34afdb6c-d026-4edb-8a46-0a244d70c6d0"
        },
        "item": {
          "id": "d1436afb-02cf-4556-ab34-9281754bc10e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3b69c262-47ff-46b9-838e-dea368347f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ed4b2d-3e9f-4159-bb9f-5b84824bb94c",
        "cursor": {
          "ref": "084070dd-5532-44d9-91c9-47f0417d8fac",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "90a1df65-604b-40c0-ae6d-507c9a4f8ac4"
        },
        "item": {
          "id": "54ed4b2d-3e9f-4159-bb9f-5b84824bb94c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6504417d-3a57-437b-b43a-ea95dffa7e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb64b91-63a4-48fc-b576-2bbdaf69c1b5",
        "cursor": {
          "ref": "47f3016c-c632-4f40-a96a-aa1f5b65add1",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3077c040-8586-4ccf-b6cc-9b1396c1db62"
        },
        "item": {
          "id": "eeb64b91-63a4-48fc-b576-2bbdaf69c1b5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "afa7aea8-f388-48d4-9a94-27b9d0cc760e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84544d9-98bb-4a4a-afa5-daeeeb4f7381",
        "cursor": {
          "ref": "26abc66a-e363-4e58-b55b-b987f15b90bc",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c79607f4-bd2f-4fc9-b0c4-09b014bd1579"
        },
        "item": {
          "id": "f84544d9-98bb-4a4a-afa5-daeeeb4f7381",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0fe9c04a-b478-4773-a68c-355254f79090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3262b679-8832-420b-935e-c6cb20366489",
        "cursor": {
          "ref": "cbc8fc34-6235-4dfb-ae8d-b077a620ed86",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "bb017e66-746c-4be0-ab85-8c1a4982d05b"
        },
        "item": {
          "id": "3262b679-8832-420b-935e-c6cb20366489",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ef26b305-ac93-4fdb-b4fd-60285bc87b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cee904-8667-4ee5-9f8d-2f03cadf6fac",
        "cursor": {
          "ref": "0e752734-801d-42f2-b559-a47700887ba7",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7919f2f5-ae32-4a69-bc1f-fa4735292e55"
        },
        "item": {
          "id": "61cee904-8667-4ee5-9f8d-2f03cadf6fac",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1033246d-a737-4fc9-8e2d-4653a4d0e549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7740039-2d31-4aa7-9eb3-1164f1143ebd",
        "cursor": {
          "ref": "20a5cca3-a7d2-49d4-9d8b-9acbe591d402",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d39851f8-7ec5-454b-a4c1-9f6fd09df6f1"
        },
        "item": {
          "id": "e7740039-2d31-4aa7-9eb3-1164f1143ebd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "520541f2-9381-4770-87a5-9d4929c2f745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107fcf4d-68ed-455e-9702-d1a6f8c116d0",
        "cursor": {
          "ref": "15045bb4-d99c-4799-b1f3-fd30a9d04c93",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ca4fd3c9-1eba-4d0b-825e-8fc68e2bfe48"
        },
        "item": {
          "id": "107fcf4d-68ed-455e-9702-d1a6f8c116d0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "57b36f91-8082-42f1-aa9c-6db4b7dc8859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a765445-e9e4-4900-b62b-06e8e712305a",
        "cursor": {
          "ref": "b9f5ac6b-170f-46d0-995f-bbef2baef9bc",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "88f455d7-d51c-4cc8-b3a4-a11494d905a9"
        },
        "item": {
          "id": "8a765445-e9e4-4900-b62b-06e8e712305a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b9da92c4-e14d-4e95-a36a-ad4004666eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07000a38-5ed6-4c46-88db-cf809d465cf8",
        "cursor": {
          "ref": "aa662517-0c8f-4271-86c0-3b8d3bacc25b",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "06351e46-5b0f-4e95-a757-36479ee29f67"
        },
        "item": {
          "id": "07000a38-5ed6-4c46-88db-cf809d465cf8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3065fb5a-6316-4c13-983c-105d79ebbf55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f821d682-62b4-46e6-88d0-cb8695b6b489",
        "cursor": {
          "ref": "af2f19a0-1e35-4a6a-8e8f-f6f6cfe30b44",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "153877fb-9aef-4f21-8efe-2f2cd1028ff5"
        },
        "item": {
          "id": "f821d682-62b4-46e6-88d0-cb8695b6b489",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a3e8f50a-9bf1-4b11-b85b-16c38822d93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f060128f-71ed-413a-87ad-277efc3965de",
        "cursor": {
          "ref": "f2430149-7f5d-4abb-ac7d-b6360bb18be3",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f2492bc1-b818-470b-bc27-13a72a1a1c13"
        },
        "item": {
          "id": "f060128f-71ed-413a-87ad-277efc3965de",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a62d82db-15e5-4427-a00c-8b88e01871a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d7ca89-9258-466f-bf07-6ec9ac83a192",
        "cursor": {
          "ref": "ad1352cb-3329-41ed-9f4b-f3f3b92fe70b",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2d582477-c154-470f-b789-469b40afa3fb"
        },
        "item": {
          "id": "60d7ca89-9258-466f-bf07-6ec9ac83a192",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bd8227f6-655d-4edb-a68b-980fc1b7d185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5316d1-455f-4dec-abd7-eb83097bbd61",
        "cursor": {
          "ref": "bdbcb647-b37a-44a9-8910-bc16e2351fa1",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "efb96d3a-ddab-4806-b3ba-68822e19261a"
        },
        "item": {
          "id": "4b5316d1-455f-4dec-abd7-eb83097bbd61",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c7ab765a-75d3-43fa-b839-f051f7c4223f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb79ec9b-da42-4eef-ad33-22ba10de9abd",
        "cursor": {
          "ref": "142c9d6b-fe79-441d-98ee-9e039de3c6c5",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "14a5502a-ff5b-4005-a229-50f7a52068ea"
        },
        "item": {
          "id": "fb79ec9b-da42-4eef-ad33-22ba10de9abd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "194c0fc2-3029-40a1-8c10-d75e91b3b8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e62dbfe-f731-48be-bc12-acf8a74e97df",
        "cursor": {
          "ref": "ad73db28-6301-492a-82a3-82b310af9ddf",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "51092b3b-75fd-485f-b019-e3db0cdb62cf"
        },
        "item": {
          "id": "8e62dbfe-f731-48be-bc12-acf8a74e97df",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5dc9e39e-2ee6-4bec-9292-e95437e6fab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10da02e8-9838-4a26-8071-95e386b6daca",
        "cursor": {
          "ref": "bb064e8a-e692-4033-bd36-37c663abc275",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4dbc02cf-0dbe-48a6-8a3d-849e7e81fe36"
        },
        "item": {
          "id": "10da02e8-9838-4a26-8071-95e386b6daca",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f6f3681e-180d-4218-859c-be08200def7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd77f943-254b-4d5a-b647-e46ffbd92058",
        "cursor": {
          "ref": "aa904a88-4230-4fa7-a80a-09fe812b406d",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a73ab968-6f90-4dd9-be47-ea661529822e"
        },
        "item": {
          "id": "dd77f943-254b-4d5a-b647-e46ffbd92058",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "80c44413-12f6-4b48-9629-fd602275e589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13ceade-67a5-4b64-a678-2b7d6af96316",
        "cursor": {
          "ref": "bac3bb64-d962-4ca5-95a3-079a4a0f1586",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b0ece6b5-72aa-4fdb-8d9d-b095b6a48c1f"
        },
        "item": {
          "id": "a13ceade-67a5-4b64-a678-2b7d6af96316",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0c79ea53-fbe7-4b2e-b90e-67d7e7e1ca1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf16ffc9-fa0a-4882-85bd-1e4e4c4194ed",
        "cursor": {
          "ref": "5a705397-d6ba-4905-acf0-1569734c1468",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "00f1254d-3920-41df-b885-b3be2af184a0"
        },
        "item": {
          "id": "bf16ffc9-fa0a-4882-85bd-1e4e4c4194ed",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "10f42edf-0de2-44ec-ae52-90a0927c207f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a60c24-53fa-4923-872b-a856c3060f00",
        "cursor": {
          "ref": "d0cf9654-91c9-4a1a-9c33-0dad3d5aec64",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "082b1f71-41d5-4146-bac1-3d3ee9d85ab6"
        },
        "item": {
          "id": "e6a60c24-53fa-4923-872b-a856c3060f00",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1ab440e4-9e42-4c91-84c4-abb32034c076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a91cf3d-3404-4238-893c-1d7b75bbde76",
        "cursor": {
          "ref": "3f6f7493-657e-416d-86ee-4c4135431c9c",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "95a19e95-7ae1-4e81-ba69-91534e135fc2"
        },
        "item": {
          "id": "9a91cf3d-3404-4238-893c-1d7b75bbde76",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "60d9363f-9cca-4d77-a293-6e58e2052a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ecdbf1-4558-4f15-aa41-24ecc0e946c4",
        "cursor": {
          "ref": "621f9a17-582b-4723-a68c-d1c535698cad",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8aa29530-4a39-4c7d-8ed9-3ebf5d0c13ea"
        },
        "item": {
          "id": "a6ecdbf1-4558-4f15-aa41-24ecc0e946c4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "77025758-0ac1-4c30-b1f0-e3dc3dc8228d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05804159-100e-46f0-8a0f-1bd1cbf45050",
        "cursor": {
          "ref": "72ff09d5-217e-4126-b118-7f68e59499e0",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f0d198f9-2e5e-4adf-8e09-9b871c791bfb"
        },
        "item": {
          "id": "05804159-100e-46f0-8a0f-1bd1cbf45050",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "547b3641-a81d-4fee-b455-099409eb086a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03d2fcd-0303-44d0-9a52-4179b7b53ed4",
        "cursor": {
          "ref": "8dc694f8-4fb1-4074-a7ec-6d0bc44d4c20",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9bc5b1d4-55a2-492e-8f6e-14fd115c3353"
        },
        "item": {
          "id": "a03d2fcd-0303-44d0-9a52-4179b7b53ed4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a24c9b2c-b932-4b9d-a327-7697a4bc3cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ea6b16-7a39-402a-bf08-bf903bfa1e96",
        "cursor": {
          "ref": "d10bb8a5-62ac-4971-b4e7-b2b84242c590",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b5864196-5675-41e0-a82f-f84ff058b4d6"
        },
        "item": {
          "id": "75ea6b16-7a39-402a-bf08-bf903bfa1e96",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "40ca2836-4795-493c-a8a3-55006f5150d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "cfe0dcd0-93cf-4add-b316-e79eeee0ee52",
        "cursor": {
          "ref": "26610804-6ca1-4bf5-9de2-107aac64861e",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "27b31f0e-a891-48d3-8776-4a7668b49ea8"
        },
        "item": {
          "id": "cfe0dcd0-93cf-4add-b316-e79eeee0ee52",
          "name": "credentials_issue"
        },
        "response": {
          "id": "68b696ce-43c4-415d-b6f4-d89ec692a5d9",
          "status": "Created",
          "code": 201,
          "responseTime": 2011,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "134a8c8a-f42a-47ab-b639-080d63d4eac3",
        "cursor": {
          "ref": "18b1d92c-5dd1-4dfc-a851-475c5c003bba",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bb9641c4-93f8-48e1-9b4f-33a7664731bf"
        },
        "item": {
          "id": "134a8c8a-f42a-47ab-b639-080d63d4eac3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e5a44f26-93bf-46e6-93aa-1a44d918a8c6",
          "status": "Created",
          "code": 201,
          "responseTime": 2788,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b919b37-7fe3-49fe-ac14-bc6e43592972",
        "cursor": {
          "ref": "43e96162-9be1-4226-aa54-47c03dfe414f",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8a6de834-5de3-4a2d-a79f-6119895a62c3"
        },
        "item": {
          "id": "0b919b37-7fe3-49fe-ac14-bc6e43592972",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "662ccfa2-8331-4d35-86c8-687728d6e12d",
          "status": "Created",
          "code": 201,
          "responseTime": 2346,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e870c7e-8380-47bd-8b4f-3ede9dfec4f9",
        "cursor": {
          "ref": "82b77aa2-4b0a-4f6b-addf-0ec17fdecdc9",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "83c8fa8e-69ba-4e5f-976b-6f7b8c2bcd1e"
        },
        "item": {
          "id": "9e870c7e-8380-47bd-8b4f-3ede9dfec4f9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d4fe6490-4a33-424a-bcc6-7d71717346a1",
          "status": "Created",
          "code": 201,
          "responseTime": 2509,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53a80c5-897c-41e6-83c1-e5439adc207f",
        "cursor": {
          "ref": "bd8fd927-d88c-4144-8bbe-c0ee52529b66",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "330f71d1-c9b8-4423-889b-26e895285cb7"
        },
        "item": {
          "id": "f53a80c5-897c-41e6-83c1-e5439adc207f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "478cdbe1-0ee3-463e-97fb-745bc13dbea5",
          "status": "Created",
          "code": 201,
          "responseTime": 2292,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-20T00:41:51Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-20T00:41:51Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "39ec416c-137a-4c4f-b259-b27150d256d7",
        "cursor": {
          "ref": "d1166812-ee5b-4077-b0fc-eb0b3b7b0c2b",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d9e84b9a-82f6-45a2-9161-52222ffe2ee1"
        },
        "item": {
          "id": "39ec416c-137a-4c4f-b259-b27150d256d7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c7215462-789b-46c5-8496-cbeae5d30467",
          "status": "Created",
          "code": 201,
          "responseTime": 2659,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a818d2e-7962-4258-88e9-5423e11425c5",
        "cursor": {
          "ref": "96baef06-8730-426f-b93b-1b4a6d0aa33b",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bcad12c9-85fb-49a5-bead-92071f087797"
        },
        "item": {
          "id": "7a818d2e-7962-4258-88e9-5423e11425c5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a6169be3-b537-4ddf-8cc9-fdce065928bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a515232-cc44-4528-8910-b1dff96f45e6",
        "cursor": {
          "ref": "ed0a3170-2346-4e5a-9e30-0a14b8acf159",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4ef1380c-6cb3-487d-849c-9dd58b619959"
        },
        "item": {
          "id": "7a515232-cc44-4528-8910-b1dff96f45e6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "47132bb3-16a1-46eb-b9e5-fe0051421d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a1e301-64cf-4bf8-868b-2bb6261bfaf4",
        "cursor": {
          "ref": "af8365ba-0db7-4fa2-923a-360c969e771a",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2010d52e-8002-42e8-8752-879c7ce8a413"
        },
        "item": {
          "id": "d2a1e301-64cf-4bf8-868b-2bb6261bfaf4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d952884f-5cc8-4634-8410-9b90189ebcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33572a6b-7d15-48aa-833d-5a965f351783",
        "cursor": {
          "ref": "bae86ddf-d4bc-4802-bade-6e7f5d690cc3",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "62f302b2-a3e4-421d-9415-81bd53570860"
        },
        "item": {
          "id": "33572a6b-7d15-48aa-833d-5a965f351783",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2947ed04-4313-432e-9893-bcc5982a7fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222a7da8-19bd-42fa-84c9-190d0c5e823a",
        "cursor": {
          "ref": "3ab7c7c1-4a22-4d7c-b26a-7573bc63efc6",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "abaf6051-c1bc-45c1-bc03-279b57b4c3b5"
        },
        "item": {
          "id": "222a7da8-19bd-42fa-84c9-190d0c5e823a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5e927a8e-77fc-4a44-8125-62965418b23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732ebbc3-f57b-43e8-b677-3f967c5e3c14",
        "cursor": {
          "ref": "d491f472-7899-4bca-921b-f4bb4a1c6af4",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7743c5bc-ffad-4a06-8219-6fa908e4c64c"
        },
        "item": {
          "id": "732ebbc3-f57b-43e8-b677-3f967c5e3c14",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "da049a0b-1209-4ab0-bc95-c105d245768f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182e918d-3465-4dfb-960c-004dfacda2a8",
        "cursor": {
          "ref": "df26c06d-9693-4f76-a0f9-f93afae8bdc3",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4ac9ea24-03e4-405b-836b-45877d7457c3"
        },
        "item": {
          "id": "182e918d-3465-4dfb-960c-004dfacda2a8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "30e24a73-dc4e-4da7-a091-dba1d83b3a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfc1a87-2c99-451c-8c6a-61c95a919835",
        "cursor": {
          "ref": "73f8cb36-bd83-420a-8a91-7b468fc66ba4",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "413784cf-fb3a-4dec-afc2-aa1539c84538"
        },
        "item": {
          "id": "5cfc1a87-2c99-451c-8c6a-61c95a919835",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b540b983-55e4-4433-9739-dec65d9bbeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c979c0f-0810-4a28-a8e6-1e4299a38e54",
        "cursor": {
          "ref": "020b84da-c623-45a8-86b0-1dfe89a37c87",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "20a47700-f973-48c6-9bc0-9a8f68491807"
        },
        "item": {
          "id": "0c979c0f-0810-4a28-a8e6-1e4299a38e54",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8063fe8e-03b7-4a59-8e7f-8af01548d7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3638cc5-1536-45af-a477-c3a5b6f30cc0",
        "cursor": {
          "ref": "d4cc082b-1eb5-4b7e-8fc5-b5281180e668",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0ac98828-b73d-4df3-8212-6970bf92cb59"
        },
        "item": {
          "id": "d3638cc5-1536-45af-a477-c3a5b6f30cc0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "91e54d92-ac4c-4dc5-8869-ba8ad6c9f841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925e29fa-8442-41ba-b9ca-987282251af0",
        "cursor": {
          "ref": "d602caa8-774c-4357-91b0-8492117da39e",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5776436a-cd51-4df9-85d6-85a87c9eada7"
        },
        "item": {
          "id": "925e29fa-8442-41ba-b9ca-987282251af0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c7e86e93-1736-462e-8391-71c26e664d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d19b9e0-89c0-4158-83c3-aa5c24daf99b",
        "cursor": {
          "ref": "3d2361f1-b164-4270-b842-e08543101c33",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8a004905-39d2-4ee9-ae91-777bee225406"
        },
        "item": {
          "id": "0d19b9e0-89c0-4158-83c3-aa5c24daf99b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a4db658f-6b17-4da2-b330-29c3bc9c861b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2598562-16f5-4b7d-89d6-bd6467b403fa",
        "cursor": {
          "ref": "919a6532-9caa-42be-addc-cf24e462a977",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "656f18b6-aa5d-4d84-a9d8-0189e099522f"
        },
        "item": {
          "id": "e2598562-16f5-4b7d-89d6-bd6467b403fa",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1fa503a4-a089-4891-80c7-09a02c15e0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723fb217-949a-47c8-aeaa-6f42d1f9d4f0",
        "cursor": {
          "ref": "ca24cc23-4bf6-47d4-83f6-70cca9642c39",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f2829bb8-9fdb-402c-8f34-359867645fdb"
        },
        "item": {
          "id": "723fb217-949a-47c8-aeaa-6f42d1f9d4f0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a9d11826-67ec-4e89-bdfe-23469b7d30bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fa1196-e904-422e-a3fb-9335ba6859fa",
        "cursor": {
          "ref": "3bbdec77-8ab5-4867-8a52-d30fd5606cac",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7c589290-6ecf-4ac2-b0b4-05306f63ed1b"
        },
        "item": {
          "id": "96fa1196-e904-422e-a3fb-9335ba6859fa",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "da3947c7-5762-4bf0-b5a3-5e678f6b686a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb063d27-217e-4830-ac70-4f147153308c",
        "cursor": {
          "ref": "e7c9a1d6-0c55-498c-b863-45213019d876",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "36507335-e882-4390-a2f9-d94c60a22d8a"
        },
        "item": {
          "id": "fb063d27-217e-4830-ac70-4f147153308c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "edeb7b8e-9114-4f17-981c-c248a382b373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecd4e15-0b14-451e-9587-e1a3b6903c8d",
        "cursor": {
          "ref": "5a56672a-2a4b-40b5-abe0-6dec2bc059c4",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e3512c1f-9afc-42f3-b207-083a05cea228"
        },
        "item": {
          "id": "8ecd4e15-0b14-451e-9587-e1a3b6903c8d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "39c1fbd9-8b77-4ef5-99bc-9ada4109214e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c7c88c-552a-4c8b-b48d-0fc5ba5fc36d",
        "cursor": {
          "ref": "88476155-03b9-44d5-843c-aed02c4fc83e",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9a658576-aca1-4b55-b310-3def9e0904a3"
        },
        "item": {
          "id": "c2c7c88c-552a-4c8b-b48d-0fc5ba5fc36d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4cdad0bb-3773-4788-91c5-53096f67ff21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df00282-000d-4fc3-9868-33bc5b48737b",
        "cursor": {
          "ref": "ca5248cf-8864-462d-860d-180e94eb0e78",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1e67f1d5-8ab8-4d50-945a-ff545adc24f7"
        },
        "item": {
          "id": "7df00282-000d-4fc3-9868-33bc5b48737b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3e057918-abf1-4639-ae16-f78fa689ecbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082b580b-69fc-409a-b1ba-45114600688b",
        "cursor": {
          "ref": "515d443e-a815-42fb-8fbc-939e25ccd4ff",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b932454b-f846-41c1-a153-6b4c206d5262"
        },
        "item": {
          "id": "082b580b-69fc-409a-b1ba-45114600688b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "df010ffa-d6f1-4822-b1f4-c9caed9a6bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd616587-64e2-4ba7-9542-614a32eb48d3",
        "cursor": {
          "ref": "87436eca-539c-4f95-9a02-ca26985afc3a",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d09dc71b-88cd-4b0b-88e2-15737de4384f"
        },
        "item": {
          "id": "fd616587-64e2-4ba7-9542-614a32eb48d3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d50c76ec-3957-4763-af94-da3bf0fcf0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957a3bc2-5b65-4f6c-84d9-13f652d234fc",
        "cursor": {
          "ref": "6430fe4e-5f1a-4efd-aeb0-deca28ccdc44",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1c1311f7-4158-47bf-a98b-b43a5360fe44"
        },
        "item": {
          "id": "957a3bc2-5b65-4f6c-84d9-13f652d234fc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e24bf522-c8a8-44f9-b316-f19dcf35c918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c13f9cf-c0ac-4ee7-8441-8ec88d44e0ca",
        "cursor": {
          "ref": "8f4b54ef-111e-4d22-bec3-874e94c059cf",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6156173f-a46f-454a-b72a-c31157848169"
        },
        "item": {
          "id": "8c13f9cf-c0ac-4ee7-8441-8ec88d44e0ca",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0f1d0089-92c6-429b-a1c9-5d4ecb15d225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3349e40e-f227-427d-8f88-e02cfa5aa804",
        "cursor": {
          "ref": "bd09bfd1-18c3-4efe-b5ac-a3863425b44f",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b8c2dcc7-7efb-41ca-895a-78cab5df8722"
        },
        "item": {
          "id": "3349e40e-f227-427d-8f88-e02cfa5aa804",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ffe2b0fb-86d1-4b06-b33c-e5137bf4c6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5150b4-c864-41cf-b77d-a571617d0089",
        "cursor": {
          "ref": "c570f7fd-8f4f-4346-b64b-19b513491b79",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "31e7a289-a290-4352-92ac-f2ff7a274804"
        },
        "item": {
          "id": "fd5150b4-c864-41cf-b77d-a571617d0089",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8e356d35-42a6-4031-9c90-55c2591daae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2659b36-5a00-42b1-81a6-8158656985eb",
        "cursor": {
          "ref": "bb111c10-e145-4853-b709-a03df5a1a97f",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "497ee07f-dea6-45ba-ba1f-31adb029f940"
        },
        "item": {
          "id": "e2659b36-5a00-42b1-81a6-8158656985eb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "849fbc3b-d1f5-41db-8313-df89286fca05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096aada8-6149-4859-8f24-8022dde20fc6",
        "cursor": {
          "ref": "c9923d59-488a-4929-bbc2-cbba10e6ffdd",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "abc3e1c5-0381-4cba-a98e-d1dd41a2173e"
        },
        "item": {
          "id": "096aada8-6149-4859-8f24-8022dde20fc6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0db2a7c2-5998-4745-b5c9-2d304b31f67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7263a2c0-0c9a-4feb-84ec-2452a8768027",
        "cursor": {
          "ref": "4effe34a-7b3b-4ca5-9f5b-8ffb2a1c4cf8",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "949e40b5-934c-490f-a81b-bea182314d16"
        },
        "item": {
          "id": "7263a2c0-0c9a-4feb-84ec-2452a8768027",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4f4dcec3-3f91-4031-b93a-7485990cf9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98584d3-8153-40d5-899d-75eeeb14bc90",
        "cursor": {
          "ref": "6bcff08b-3c6a-42c8-a51b-d34f1df1ffba",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3c49b82f-1a0a-4da0-a625-7755dbca0e08"
        },
        "item": {
          "id": "e98584d3-8153-40d5-899d-75eeeb14bc90",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "830d4397-5bf4-4d58-9eaa-574c7c28174a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc4a654-ad5b-4d98-90fe-f527d9745288",
        "cursor": {
          "ref": "9f43ff6c-55db-46b6-b452-2116b54e4be1",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f9b65f83-ac3a-4278-b08c-f35f7e2b8158"
        },
        "item": {
          "id": "fdc4a654-ad5b-4d98-90fe-f527d9745288",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "86f71f93-eeca-48b0-8fda-3a8ce02a1480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81bc9fc-56ae-4a12-92ca-6dff8b448e2b",
        "cursor": {
          "ref": "cdf96507-888d-442c-ba38-52c36fc7f597",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "28422b1a-faaa-4c59-8d0b-d6247ec6791e"
        },
        "item": {
          "id": "f81bc9fc-56ae-4a12-92ca-6dff8b448e2b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1ab67824-5978-48c9-bc4d-2a78ad0e76ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4090e38-cc3b-48c5-b1d9-fbc69eb2b65c",
        "cursor": {
          "ref": "bfbcb456-864c-4cb8-ab71-b77296a09f2e",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "353ff12c-2ef0-4ab4-8218-c4a29cdcf948"
        },
        "item": {
          "id": "d4090e38-cc3b-48c5-b1d9-fbc69eb2b65c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e5fda4e1-e813-4168-a139-a37897609dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61ef66d-982f-4734-9b6d-ea48c28711c2",
        "cursor": {
          "ref": "7f3367cf-de72-43c1-be56-1e56527a709e",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f4abfbd5-826f-488c-8b50-cad6c64dfe7b"
        },
        "item": {
          "id": "d61ef66d-982f-4734-9b6d-ea48c28711c2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6dc6e83e-5923-4cef-ab86-d92d7664377a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6f073993-7e93-415f-beba-85a9d264f2e1",
        "cursor": {
          "ref": "74d521c6-59d4-40f4-bd27-8839fe4a6f26",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7f7e14c7-8bf3-4984-94bb-7b5fbc4dd10e"
        },
        "item": {
          "id": "6f073993-7e93-415f-beba-85a9d264f2e1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ac102881-037b-4436-a449-976eaebf800f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53bc159-8b4a-464e-9a8a-64825a65625e",
        "cursor": {
          "ref": "10baaf22-046b-47b9-9cb8-04efa6893c84",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "17801b75-85b1-4cff-8ddf-0a5dd7166e48"
        },
        "item": {
          "id": "f53bc159-8b4a-464e-9a8a-64825a65625e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a78449a5-581f-4edd-9a0d-e0da10eaf04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6c5f82-d509-43b9-95c1-520e1417b56a",
        "cursor": {
          "ref": "089e5892-348e-45ce-a0ba-a2c648414858",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f3ed8dc3-7d36-4a84-923c-04b8133683a5"
        },
        "item": {
          "id": "0a6c5f82-d509-43b9-95c1-520e1417b56a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3f952d4b-bec1-41e1-9ad1-1d57479555e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148c59f6-f4f2-481e-ae76-8e3b72bd1a28",
        "cursor": {
          "ref": "04a36d53-5887-48c4-9420-6b1c2eeaf1d9",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c2966604-e146-46eb-a204-bc639605de88"
        },
        "item": {
          "id": "148c59f6-f4f2-481e-ae76-8e3b72bd1a28",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4c7c5cbf-cfd2-4ef2-94aa-10d6f2450649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439e25e0-af64-45d1-ba27-2221acbdd6ee",
        "cursor": {
          "ref": "0867a249-2b25-4350-91d4-5341663bf2be",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "186dd072-2a51-47c8-9d32-d12a906fcfcb"
        },
        "item": {
          "id": "439e25e0-af64-45d1-ba27-2221acbdd6ee",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "84f0310f-3e08-45ed-a9f5-22a4241a866a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b71a43-b003-4fdb-8b1e-beaee805968b",
        "cursor": {
          "ref": "2aca10c1-cbc3-4476-8d85-19961ca885b4",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "28a508e4-a7e6-42d3-bb85-d36a85bfad13"
        },
        "item": {
          "id": "13b71a43-b003-4fdb-8b1e-beaee805968b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8dac3a42-784e-48cb-95d2-9a0459376ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26018735-df67-4a84-8527-9bb20bf9445a",
        "cursor": {
          "ref": "9eea9c83-8a07-4479-9559-6d9567fb55ec",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "aba82123-57b1-4dc1-94e1-fd0493903613"
        },
        "item": {
          "id": "26018735-df67-4a84-8527-9bb20bf9445a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "def472ec-2d1f-4f07-ac40-0b3a4ed636f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ed02f5-ad3e-49d0-9197-a05de3971af4",
        "cursor": {
          "ref": "a0476fcc-67c6-4361-a76f-1059b9d5761b",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b6b41406-2d5a-4431-b559-b7faaed68e39"
        },
        "item": {
          "id": "d5ed02f5-ad3e-49d0-9197-a05de3971af4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "df75876f-663b-454c-8727-4f483d4884a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28452369-8365-4035-b91d-5605d2e3d466",
        "cursor": {
          "ref": "d5fd3f76-45dc-45ed-b78d-55313761bb88",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "865e843b-6321-4a39-ab26-498dd038ef01"
        },
        "item": {
          "id": "28452369-8365-4035-b91d-5605d2e3d466",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "54743b2c-3b47-4ca6-b67d-31e1908f2d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3197e8bb-9cb9-4916-b889-e95a33a2a1b5",
        "cursor": {
          "ref": "6c8b0232-fbc4-4d5f-be1a-b8046c13aa60",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "facf9cbf-7078-43a7-8cf6-0f50a7a91897"
        },
        "item": {
          "id": "3197e8bb-9cb9-4916-b889-e95a33a2a1b5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "96721491-b5a3-40c5-8db5-3610dd36d06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f9a8e8-e5cb-4f14-8aaa-5df86a45de52",
        "cursor": {
          "ref": "e349920a-9fb3-403d-806f-c668e0596ea7",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3b29f741-dc24-4a69-80c5-dcbd41c78f0c"
        },
        "item": {
          "id": "b5f9a8e8-e5cb-4f14-8aaa-5df86a45de52",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9954b836-a63a-43da-9c8c-df1698c9dcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2357d386-91d8-429a-8e83-c15978596ca7",
        "cursor": {
          "ref": "0c346b1f-20f1-45ca-82cb-202a74374ba6",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "364d0202-6b7c-4ce2-af98-6e17772f77d7"
        },
        "item": {
          "id": "2357d386-91d8-429a-8e83-c15978596ca7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "95ec39f8-7ca0-4c29-a404-f9c476adacb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eb50ad-6317-4e5c-b28d-bd0b9f84ee5d",
        "cursor": {
          "ref": "b59373bd-7b9e-4328-96c3-fcf216f847f5",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fd573036-1070-4bfc-a5ba-a09138c9bab4"
        },
        "item": {
          "id": "35eb50ad-6317-4e5c-b28d-bd0b9f84ee5d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2c2d4901-074c-4dff-9c4b-fa96d48e82c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db9728b-aca7-45fc-b3d3-7cc42471ec1f",
        "cursor": {
          "ref": "3a1bc08f-c77a-4818-afb2-a616c186afdf",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "65b866be-9438-4138-8b8f-271dcb2dcdd3"
        },
        "item": {
          "id": "4db9728b-aca7-45fc-b3d3-7cc42471ec1f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "45138f69-9a6f-45d5-a96f-4d20087a174c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329b2dad-cedb-47b1-8d41-cbac1cc9669f",
        "cursor": {
          "ref": "878030ea-ed0a-49a6-8e63-8c86fd79a410",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "774e4c4b-f8fc-4c23-b58d-10e627aa6c67"
        },
        "item": {
          "id": "329b2dad-cedb-47b1-8d41-cbac1cc9669f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9dc05387-fe67-491d-8db6-24a2677f401d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5529882-2ba7-4c8b-bdbf-8ddda0f2ef65",
        "cursor": {
          "ref": "b854b18a-dfbf-4f97-9454-d9e711a82e78",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8675405d-e4f6-494c-83f5-cae582b6b6bd"
        },
        "item": {
          "id": "c5529882-2ba7-4c8b-bdbf-8ddda0f2ef65",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "33de51d1-6823-4189-85f9-04414bd1cb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90faabb-f812-43ee-abcd-e0428a254996",
        "cursor": {
          "ref": "c039cd18-b5da-43d7-a017-476ad91c0cb3",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "12b35270-1291-4dc0-8e35-878827df3c3f"
        },
        "item": {
          "id": "a90faabb-f812-43ee-abcd-e0428a254996",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c2b04236-f057-4ec3-9d76-b3a7c9d4ce71",
          "status": "OK",
          "code": 200,
          "responseTime": 326,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a0323ca2-bc25-4b7e-aeb9-35036d9d1c04",
        "cursor": {
          "ref": "3e48f151-759f-447c-bd6a-1595b914e583",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "db24eab5-5449-4853-a365-78d77eeec6ca"
        },
        "item": {
          "id": "a0323ca2-bc25-4b7e-aeb9-35036d9d1c04",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3d44ba84-9655-4151-a835-da1a1a76983d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 688,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1553a3-9873-4e7d-bf9d-ecf34c1ff42b",
        "cursor": {
          "ref": "39b866b4-c39e-4ac7-b1fc-6588fc7f377e",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ee039bec-b8fb-41c3-b20a-279a371d33d4"
        },
        "item": {
          "id": "7f1553a3-9873-4e7d-bf9d-ecf34c1ff42b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1e77fcd2-32d9-43a0-aa1a-8bf30e2611d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05417ac-5104-4414-b6cc-485f046b56c1",
        "cursor": {
          "ref": "cc05660a-00d6-4164-9170-d80b9e9b9b40",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "605d474e-16f8-4b8f-95fe-5f0b21e41354"
        },
        "item": {
          "id": "b05417ac-5104-4414-b6cc-485f046b56c1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a133010d-d262-4067-a1b5-a8c2d5e348b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eccca17-6404-4f6f-ba2a-fe5f312857e0",
        "cursor": {
          "ref": "4e8cde62-84c8-4c52-ae70-9ff3c48e37fa",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8e6ad2bb-7ed1-42a1-80cc-1a463a2f4762"
        },
        "item": {
          "id": "1eccca17-6404-4f6f-ba2a-fe5f312857e0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "db364508-5ee5-4c32-85b6-216202937652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dbc223-1227-43fb-bc71-6752886db9ff",
        "cursor": {
          "ref": "8f851756-6b50-4625-a668-344115187d86",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "231d0018-dfd0-42eb-9c4e-61d7656f7194"
        },
        "item": {
          "id": "50dbc223-1227-43fb-bc71-6752886db9ff",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d673fe2f-5683-44cc-a1b3-8ec614b9deac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d35cccb-34b3-4bd5-9519-f9e6c7df4c0e",
        "cursor": {
          "ref": "ef0b4fab-7d83-47ab-9989-787a86ba014e",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "595e1fcb-1396-4a44-b49d-492026861d2b"
        },
        "item": {
          "id": "4d35cccb-34b3-4bd5-9519-f9e6c7df4c0e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "994ae22b-8194-478e-a9ff-cd93af52d619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ab35e6-3e5f-41c6-a9f8-9bf080b5b7f2",
        "cursor": {
          "ref": "ecd94b06-4cae-47ef-ab72-17710a7e386a",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2161e623-9b27-4216-96f8-665b0c2811b6"
        },
        "item": {
          "id": "56ab35e6-3e5f-41c6-a9f8-9bf080b5b7f2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6215a346-c205-45c2-9e0e-ebb51d6e304f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c5dc38-e6f0-4b1e-b4ff-fa4e4edbd501",
        "cursor": {
          "ref": "53dd1c5e-a608-4648-a160-eb75f660f533",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ee6d6c74-76e7-431d-8d4f-301dbe5d1a90"
        },
        "item": {
          "id": "a6c5dc38-e6f0-4b1e-b4ff-fa4e4edbd501",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "53705ede-9533-4c06-bdb3-ea23ff496ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f332c2-1fb7-4286-b022-7f1cd1360bf5",
        "cursor": {
          "ref": "fcb47c57-fccd-48b7-8039-ae443beef2a5",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0d8e0ffa-8822-4d8f-a8b6-3fefd62190fa"
        },
        "item": {
          "id": "e6f332c2-1fb7-4286-b022-7f1cd1360bf5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9e381d20-54fc-4794-a174-8bea066c3cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af6fcb3-2109-4e14-8eee-cf976802f39c",
        "cursor": {
          "ref": "2d2f1ab3-571e-4fe6-9407-e053265ad424",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "72439fff-95fe-4265-869e-a81dfd256cfd"
        },
        "item": {
          "id": "1af6fcb3-2109-4e14-8eee-cf976802f39c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "90e8ff0b-593b-4825-b5c8-8516821c8136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b763b3ba-f1a1-4491-9101-d8c6912dd30f",
        "cursor": {
          "ref": "68ac4161-8dd9-4d7d-85c5-36566f2ffb63",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e395ef5d-4560-4752-ba31-e7a2f3dc00f3"
        },
        "item": {
          "id": "b763b3ba-f1a1-4491-9101-d8c6912dd30f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "72711a6f-70ef-489f-ba7c-eded312925f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80db118-4daa-47ed-9434-521768eb1c7c",
        "cursor": {
          "ref": "5d1f1be2-59ad-4b04-a62d-45555b441ddc",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c037a018-a40d-479d-9fc0-4ea7f34eb5c4"
        },
        "item": {
          "id": "c80db118-4daa-47ed-9434-521768eb1c7c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2da43737-4218-45de-a2f8-5e943864fa32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926c0815-c1da-4310-baa9-a289c0f0fb8b",
        "cursor": {
          "ref": "b2d58474-d22a-4f7f-9ffd-658a52e8e041",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ce775f64-21ca-4e55-854f-6449d4864ce6"
        },
        "item": {
          "id": "926c0815-c1da-4310-baa9-a289c0f0fb8b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1da3c598-0ec5-4c08-9ce7-8db6e82d33cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f25f11-1a23-43de-b36e-4759e853bf17",
        "cursor": {
          "ref": "d8234942-a480-4efe-b30f-14cd9a53ae1e",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4eb148e5-7329-4869-b7ff-f76a34ccd43f"
        },
        "item": {
          "id": "f1f25f11-1a23-43de-b36e-4759e853bf17",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e6b5a8c8-294f-4688-b02f-07414b2dd13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c81b17-5087-47e1-a755-1120152e9cc3",
        "cursor": {
          "ref": "d69ac94a-6bd7-4fdc-9245-2d31ba726ac1",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b758209e-8c99-4665-85ee-a8f1360700c5"
        },
        "item": {
          "id": "39c81b17-5087-47e1-a755-1120152e9cc3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a165ce9f-0e6c-4235-90cc-c9e7b67c81a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4643788-1dc1-485d-be3f-98c0484a6773",
        "cursor": {
          "ref": "82e446bc-b1c4-4ec5-8382-de8b3e63e347",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "81d1f1d8-bf0a-4014-981c-841a4a39b796"
        },
        "item": {
          "id": "c4643788-1dc1-485d-be3f-98c0484a6773",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "869ed2c3-a634-4890-b7e4-0d391b780c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e66408f-d041-47a4-a7f8-c5728f456f40",
        "cursor": {
          "ref": "adf01e74-fd09-4b88-a77f-e20135d58960",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "262835e6-50bf-403d-b86a-7bdbd1bf05ad"
        },
        "item": {
          "id": "9e66408f-d041-47a4-a7f8-c5728f456f40",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "796cc53b-6ef8-491b-b971-5b0ba056262a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ae48a6-a916-4c59-85de-60f6ebc749be",
        "cursor": {
          "ref": "e6473fb7-ebf0-43ef-a539-27e693d0a8cc",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "61a8e284-263f-4d29-b798-d26a273f2b51"
        },
        "item": {
          "id": "02ae48a6-a916-4c59-85de-60f6ebc749be",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8dacb9e3-c7c1-4d92-82fe-fda60ced2a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3568da24-fe3b-445e-a0cf-8b636c847e7f",
        "cursor": {
          "ref": "adbd871c-61f2-4c5f-bf8a-f0f772c78739",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "550a9c37-3470-43e5-bc87-c6becdeacbbc"
        },
        "item": {
          "id": "3568da24-fe3b-445e-a0cf-8b636c847e7f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "334bc5c2-48f5-44f9-a17b-0dcfecb60ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473fe77e-b638-49a6-a0e9-dc2b892a777e",
        "cursor": {
          "ref": "243d34ff-828a-41bf-9c76-a7f541c650a9",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c7db7865-08cf-46b1-bb44-8ebd8f67640a"
        },
        "item": {
          "id": "473fe77e-b638-49a6-a0e9-dc2b892a777e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "65654997-3392-433d-8dd0-e2b8829a1712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038a6039-cba1-4937-9896-d5e37f8d8075",
        "cursor": {
          "ref": "a26cb8c9-8e2f-43f2-9085-76bceb08dc87",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c20f8cec-010a-4431-b9ab-3441603c3cfb"
        },
        "item": {
          "id": "038a6039-cba1-4937-9896-d5e37f8d8075",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "69d581e3-9617-44e3-be08-ad215024e828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede7d80e-7f73-4e5b-82f5-86e7cc1dc4bb",
        "cursor": {
          "ref": "b1cac735-4396-42bc-9170-c2bb4b0591cf",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "229d1266-ca66-48c8-bf03-ae722f25faae"
        },
        "item": {
          "id": "ede7d80e-7f73-4e5b-82f5-86e7cc1dc4bb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d530c324-dfdc-4d47-8034-6c2857168635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dd88cf-c40f-4707-9eb6-a056b47b97a1",
        "cursor": {
          "ref": "80117ff4-0937-4522-beaa-392127c9a2df",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b357fa12-416f-488a-a186-87a545cc8e5a"
        },
        "item": {
          "id": "f7dd88cf-c40f-4707-9eb6-a056b47b97a1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4e901271-1120-4a28-8ddf-4a2ec8bd1ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d1a922-5049-424b-b335-b6924cb5842f",
        "cursor": {
          "ref": "8b4013b3-b725-4138-ad58-ac131ec30399",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "59f148cf-9117-447c-8c7d-4ee4bd9ed279"
        },
        "item": {
          "id": "25d1a922-5049-424b-b335-b6924cb5842f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b1a6dad0-3c2c-4857-ab2e-0da1e709c495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fd6f7a-df94-40da-80b8-78894b56bbab",
        "cursor": {
          "ref": "6efa69c6-5d1e-46e0-b60b-4e4c3c56c946",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ded18a84-8d9b-4005-808c-54d2a1bc0f2d"
        },
        "item": {
          "id": "52fd6f7a-df94-40da-80b8-78894b56bbab",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "62997889-bd20-4b8e-a0df-d8493348fa09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f65fd7-7d25-4127-947e-c09f0bb58066",
        "cursor": {
          "ref": "85dab8c1-e5b1-4ee1-874f-a213493fff37",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c70730e4-30af-446a-aeec-f59a56be4cd0"
        },
        "item": {
          "id": "83f65fd7-7d25-4127-947e-c09f0bb58066",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "837eeb39-d746-4a2b-89cf-ea5febccc162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6722f22-6dd3-4ea3-89e3-715698db9925",
        "cursor": {
          "ref": "de0713c7-b279-4360-9022-4db9bc84e895",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "63f274b0-f295-45ed-9bbf-097a653ae3de"
        },
        "item": {
          "id": "b6722f22-6dd3-4ea3-89e3-715698db9925",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8227cd04-feff-42e8-9457-20d1b251c3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e888dd50-c973-4ddb-8ba5-be6d49315af2",
        "cursor": {
          "ref": "4987172c-d309-4d64-b7f8-1fb5798d3ab2",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "eed83bb5-233e-4efb-87f4-46c735e15d04"
        },
        "item": {
          "id": "e888dd50-c973-4ddb-8ba5-be6d49315af2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "83d0d70e-1a5b-4d6c-be0d-1ca008e2d4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13a6d0c-6c8d-407e-a508-600d17d6bd32",
        "cursor": {
          "ref": "c27c81ef-c4c9-4bcc-b3dd-d2d9a540f84e",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "83791e07-01c8-4350-a37b-0a53234f690e"
        },
        "item": {
          "id": "f13a6d0c-6c8d-407e-a508-600d17d6bd32",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f9d63d2b-f654-4470-8ddc-ac84382b09c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75b6e43-7323-41b3-b7e7-de5321212595",
        "cursor": {
          "ref": "dc9a8db7-8792-4d3a-a51f-a4a939cdec06",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5538ca2a-fa1e-4801-871a-5176c0180ba6"
        },
        "item": {
          "id": "b75b6e43-7323-41b3-b7e7-de5321212595",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "27ddbf83-db97-42c4-81b9-7d719844d9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25f0b4d-a6f7-4d1c-92e8-05074f7bf856",
        "cursor": {
          "ref": "bed76bf3-f94f-446e-9e30-b661607cb6d5",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "50f58275-9788-4c6b-af63-64ea89fef08b"
        },
        "item": {
          "id": "b25f0b4d-a6f7-4d1c-92e8-05074f7bf856",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ffbf0700-d9d5-426a-9db5-ec9234253415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adee660-8ca2-459a-b1dc-07912cba74d8",
        "cursor": {
          "ref": "d6310f88-e8c4-4544-b223-d3c7297bad14",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "af14f18e-631f-4ba1-8a7d-fba53e55478c"
        },
        "item": {
          "id": "3adee660-8ca2-459a-b1dc-07912cba74d8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fc923081-c11b-4f5d-be12-4321f50285cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1554371-db13-4cfd-9bee-b9eadeddb864",
        "cursor": {
          "ref": "1feb2fe7-6a0a-4a29-a50e-24c21e38778c",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8d8f477c-acdf-4156-91b4-00140961f308"
        },
        "item": {
          "id": "c1554371-db13-4cfd-9bee-b9eadeddb864",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a0921251-18b3-4929-8539-7da810484db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0632e6-1389-4431-bcb5-5bb1d252f3de",
        "cursor": {
          "ref": "b8da19c9-9f8a-4ab7-8b89-19c22c2218f1",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2fcd0a67-4cfd-42a3-bad2-9734cad4eb7a"
        },
        "item": {
          "id": "dd0632e6-1389-4431-bcb5-5bb1d252f3de",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ba1bb265-f0e0-488a-b896-1d788781f8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aeb00ad-3cf0-40f2-a660-8bc4e8818eaa",
        "cursor": {
          "ref": "e018da48-5117-4413-b6bf-682881e9da79",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "adef04f2-976d-492a-80bc-7d2ca027fc67"
        },
        "item": {
          "id": "3aeb00ad-3cf0-40f2-a660-8bc4e8818eaa",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5688cde1-cc09-43fc-a6cc-a8eb4d00dcac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faab2d8b-8082-4df5-aaad-cb1abe6f3b5f",
        "cursor": {
          "ref": "349a9af0-c66f-409a-a594-42e1244bef87",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "478b8755-6a3d-41c7-900b-e97a4203f158"
        },
        "item": {
          "id": "faab2d8b-8082-4df5-aaad-cb1abe6f3b5f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "58be9af6-0887-40cc-a97d-c2435c94d188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7560a5-4fae-4e31-9e4e-5ba0eb541e89",
        "cursor": {
          "ref": "adb69d24-cbe4-4292-836d-d32a4aa5dcd2",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "175730e3-5093-4afc-986d-53fca1b5a63b"
        },
        "item": {
          "id": "2d7560a5-4fae-4e31-9e4e-5ba0eb541e89",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "62124804-0c00-4fed-9b7f-2c802b85c37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baec898-b0f0-40b6-9ea9-193e601e6725",
        "cursor": {
          "ref": "84bb11ac-be97-4d81-88ea-9c2d9ed1c300",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e1dfdf71-bcf3-40be-bec4-bfeae01af05d"
        },
        "item": {
          "id": "5baec898-b0f0-40b6-9ea9-193e601e6725",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1fb2ae6a-f519-4f01-b72a-85fe228ad1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ad0a6c-4a39-47f1-a009-c59fb05e326a",
        "cursor": {
          "ref": "9f144cc2-46ce-4b61-85ac-5fbb2b7ad3f0",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b4a19112-bc8a-49a8-b5bf-d7b27166cca1"
        },
        "item": {
          "id": "75ad0a6c-4a39-47f1-a009-c59fb05e326a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2c3fe796-c6a4-4030-8102-beea21dea806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67ea501-8d8e-4574-a327-f306dad05e54",
        "cursor": {
          "ref": "a3e3fa2a-8170-4da7-a85b-6c0d51684a95",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "35cd8d7a-f38a-45ff-aaf4-c99fec6c8499"
        },
        "item": {
          "id": "d67ea501-8d8e-4574-a327-f306dad05e54",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "220b1b03-66ba-4d32-912c-457c3974a1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc366cf-060c-439a-8697-8c3c7131a380",
        "cursor": {
          "ref": "68f1a7dc-9f64-4c1e-8280-4f6d1a0fb325",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f8f128a1-0ea3-4d42-835d-d4b235cad086"
        },
        "item": {
          "id": "2cc366cf-060c-439a-8697-8c3c7131a380",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "47668733-4656-42f0-a589-5b5f65c193f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724576e2-ce07-4192-8268-88f8c263b69e",
        "cursor": {
          "ref": "59b843a6-5309-4c33-a748-312661d48755",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d523ad7c-aac7-41f8-beb8-3766b13fa175"
        },
        "item": {
          "id": "724576e2-ce07-4192-8268-88f8c263b69e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "11938e89-50be-482e-9a07-020ad192a17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443d76e7-3d97-4fb6-a6db-4fe6a532e9bf",
        "cursor": {
          "ref": "969ce43e-1736-438e-a1b0-efc01d9758e0",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "eba319b6-854e-4aa4-94d7-e5af5cc4c7fe"
        },
        "item": {
          "id": "443d76e7-3d97-4fb6-a6db-4fe6a532e9bf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3cc2d53e-d5ce-47e8-95cd-e9ca156bcb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf0614e-d1ef-48f5-a383-52eff2e669a1",
        "cursor": {
          "ref": "cb5e4c2d-687f-4a07-b2fe-bc8371a2abfd",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f4bb80c1-dbb7-4d5c-b238-b347d6d1c999"
        },
        "item": {
          "id": "2cf0614e-d1ef-48f5-a383-52eff2e669a1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6e30d674-c590-4ca4-9671-0098300e5b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f73c42-a021-462d-9a1f-ec971dc6cb00",
        "cursor": {
          "ref": "f08c5938-1def-4b47-85a1-f5171a90e9f4",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cef23242-295f-4634-aa00-b132b604356e"
        },
        "item": {
          "id": "f3f73c42-a021-462d-9a1f-ec971dc6cb00",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "856b3df8-2a7e-439e-ba6c-3999faf361cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eac2d7f-bf39-44e7-acc4-06baf3caacbb",
        "cursor": {
          "ref": "cd4398e6-e390-4f35-bf8b-94952275e8b2",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ec6d6ee8-9067-4936-9e64-1c50037abeb5"
        },
        "item": {
          "id": "9eac2d7f-bf39-44e7-acc4-06baf3caacbb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7fce059b-f989-4f41-9ba1-16332777fb2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 869,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54cef78-8821-4fe5-8601-476ff7eaba90",
        "cursor": {
          "ref": "91e4e344-380a-4eaf-8cc9-d85d2b3a0fc1",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "35cd92d8-38c6-4ca4-ab78-9b3dda8e11ec"
        },
        "item": {
          "id": "f54cef78-8821-4fe5-8601-476ff7eaba90",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1e5ea5b9-6a4d-465f-8de9-419696cb7dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bc58e9-e6ea-43e9-b86b-e39ba4a58285",
        "cursor": {
          "ref": "dc801f69-d888-4260-9f80-3aa65467ad2c",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4bd36eb6-fbf3-4ab0-a538-dc44eb2704c1"
        },
        "item": {
          "id": "47bc58e9-e6ea-43e9-b86b-e39ba4a58285",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4775ee92-6d9b-440c-bca3-0f7fed7c42bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16e0dae-f6af-40c3-9e1e-aca0662be175",
        "cursor": {
          "ref": "0d6b0de1-04a2-421c-b409-b33750948dfe",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "acb2a5d2-6828-4292-9c6c-18d8855676be"
        },
        "item": {
          "id": "b16e0dae-f6af-40c3-9e1e-aca0662be175",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e60d5ebf-9f30-4296-b6ec-10d3d880b318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726ed536-5d06-4e81-adaa-2a366d7f8576",
        "cursor": {
          "ref": "d6435069-c468-45a5-8e6f-785d5d80c099",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1ce731c6-99af-4396-9215-f2d730f1e914"
        },
        "item": {
          "id": "726ed536-5d06-4e81-adaa-2a366d7f8576",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "753a79e5-7d51-45aa-9a50-1721d076c97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac73eb04-bdae-4eed-abcc-69f52aa2505a",
        "cursor": {
          "ref": "27400fee-9a14-483c-b900-0ab4e8aa3b7b",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0d8bf582-2817-4f9f-b7d7-93310758658b"
        },
        "item": {
          "id": "ac73eb04-bdae-4eed-abcc-69f52aa2505a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "287c1442-3d02-438d-a05c-9094de11e001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab07aa8e-57d7-463a-a630-ee9fd2781743",
        "cursor": {
          "ref": "a5deb6d0-ce59-4045-8163-c482a3be1a1b",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f3cbea95-70e2-405d-ac64-90479550bf1e"
        },
        "item": {
          "id": "ab07aa8e-57d7-463a-a630-ee9fd2781743",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e0ff03e2-9920-49be-bc4c-69db1abdde91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867599ce-2fd0-4121-9bbe-6ae28f338fa5",
        "cursor": {
          "ref": "20455cc1-47d4-45ac-8d59-93655480ca6d",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "523c387f-7f5f-49d5-b4d8-dba7b6aeea98"
        },
        "item": {
          "id": "867599ce-2fd0-4121-9bbe-6ae28f338fa5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7da58523-4795-4f19-9dea-e8d8b82d5466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdaec72-76c1-4ce4-a11f-3513aeb46f7b",
        "cursor": {
          "ref": "a247b103-c02f-4020-a26d-24a8ea0af965",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e06b6a66-f7cb-40a4-99e6-9225d460bcc7"
        },
        "item": {
          "id": "7cdaec72-76c1-4ce4-a11f-3513aeb46f7b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "29f00e4a-a1fc-43ce-b9e5-1792cececc02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237536ca-2f56-4348-86f2-889623be770e",
        "cursor": {
          "ref": "068bd343-9d79-4770-9c5c-4d9ef2843dc8",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5bff0a82-6b7e-4e45-91a2-66435750846d"
        },
        "item": {
          "id": "237536ca-2f56-4348-86f2-889623be770e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0fcf6142-0748-4d31-a188-24ed774ec09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b4f2f3-d8f9-440c-9390-a257c4781c8b",
        "cursor": {
          "ref": "0451ca1e-084b-4e0e-a4d9-2d759dc25c2a",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "85dad767-fb66-4126-a4ff-efba2732d829"
        },
        "item": {
          "id": "e7b4f2f3-d8f9-440c-9390-a257c4781c8b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8fd7b2fc-1c40-4938-bd45-f9c02cb6b476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67244c94-3b0d-4691-b01c-a6a9af6d897f",
        "cursor": {
          "ref": "5c25f316-a319-4b1e-b8b5-7dcb479c3be4",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "11509e54-8633-476b-beb0-10ce4904566a"
        },
        "item": {
          "id": "67244c94-3b0d-4691-b01c-a6a9af6d897f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4adf4221-e9db-4a3a-a419-1b5136ebd8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56466419-6d8b-4342-b835-71bb25132da4",
        "cursor": {
          "ref": "e04643bf-280d-444b-b82c-98ad9489db05",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "95db97af-58dc-4c48-9f94-7a436c5622cf"
        },
        "item": {
          "id": "56466419-6d8b-4342-b835-71bb25132da4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8d283072-49c5-4258-81f3-1a69c0c9269f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2180a75-febd-44ab-a54a-61b96a5de5a7",
        "cursor": {
          "ref": "85f8bcb5-ed14-4598-a356-04d47f92e839",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4fa2dd8c-9e49-4d93-8207-2544c5c0efcb"
        },
        "item": {
          "id": "c2180a75-febd-44ab-a54a-61b96a5de5a7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "33a3ec4b-bed9-4826-bdfc-bc635936df6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b23e3c-2c22-4b7b-b91f-75c59d39f2d4",
        "cursor": {
          "ref": "d0967968-80db-49bf-aa41-5b7784b2001b",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "12859d4f-6067-4cac-8b82-b4717554fed0"
        },
        "item": {
          "id": "27b23e3c-2c22-4b7b-b91f-75c59d39f2d4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c808bda6-64c0-4809-8532-f981f7489a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294652b5-b064-4967-a202-40dc58869a4d",
        "cursor": {
          "ref": "00b4a1c0-2fd0-4513-81cb-129797c03d17",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2dec2e62-d4a5-4720-9b90-120a77fafeea"
        },
        "item": {
          "id": "294652b5-b064-4967-a202-40dc58869a4d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "14c96c8a-4c1b-40fd-bb76-f87e7080add6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e5de6b-9887-4b06-aa5c-9fcfe0985118",
        "cursor": {
          "ref": "5785b411-cf13-4dc4-b02d-ee76ccb87cc3",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "832db738-d2f0-481c-9584-ca8d8712757b"
        },
        "item": {
          "id": "56e5de6b-9887-4b06-aa5c-9fcfe0985118",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "865749cd-739b-4474-b83e-0bc156401519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167fe1c4-a2ac-45e1-9a51-2fa4bf09dd07",
        "cursor": {
          "ref": "cc73254d-bdf6-4e6b-a23d-ac5b68a522b2",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "40839425-bf14-4384-a515-c53f01aad208"
        },
        "item": {
          "id": "167fe1c4-a2ac-45e1-9a51-2fa4bf09dd07",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f8ab883d-2ff1-4eac-92ea-88d7de0335ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d726194a-e74f-42be-8689-907fd3cd4b36",
        "cursor": {
          "ref": "a00026d0-d4b6-4b43-8f3e-c3bcbd7340ed",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5d0f9aa5-5749-493b-bf68-503bfe27dee5"
        },
        "item": {
          "id": "d726194a-e74f-42be-8689-907fd3cd4b36",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "836ae403-f82f-491d-8518-222847fd3142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b0c889-83cf-4085-bc43-b5d050fa6673",
        "cursor": {
          "ref": "56ca9272-881f-46d3-8e4d-481e2eb1350b",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "90511733-5874-4a1a-8b6d-334f63e71e40"
        },
        "item": {
          "id": "d8b0c889-83cf-4085-bc43-b5d050fa6673",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "12442625-b2f0-4560-8731-575b135e51a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941f9c1d-09be-4d33-8e4f-db5936518351",
        "cursor": {
          "ref": "c42fefd1-8628-40ae-b41c-d7bdb11a61f9",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "730d87cb-fc42-4681-a9ba-3285a2ad26df"
        },
        "item": {
          "id": "941f9c1d-09be-4d33-8e4f-db5936518351",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f48f4b69-aa7e-4ac7-8672-3750581e98bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b774ada-8c06-477d-a32e-dbb3e74627da",
        "cursor": {
          "ref": "bdef4f6f-d413-450a-b304-72e914e2f6e0",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "95569075-83a7-4a7c-af5c-f67891084fb3"
        },
        "item": {
          "id": "1b774ada-8c06-477d-a32e-dbb3e74627da",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "070033f3-3443-4674-b0cb-bf79075ad917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedf9129-4a2c-414b-85ac-b061b2fc8bff",
        "cursor": {
          "ref": "90a24444-f901-453f-8ab6-8c165f244635",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "75a6362d-6c06-4f6e-b011-a2fbe859e1d4"
        },
        "item": {
          "id": "cedf9129-4a2c-414b-85ac-b061b2fc8bff",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8d658369-30ba-4e88-b007-5a663518a7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f5a90b-286f-4007-9f08-b3f69a6d79ef",
        "cursor": {
          "ref": "d61390be-698f-4418-ad99-c31679543ae2",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8242de72-6562-445c-afd9-0e132dc87a82"
        },
        "item": {
          "id": "25f5a90b-286f-4007-9f08-b3f69a6d79ef",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "38ee5c2e-c4e6-467d-a10d-59bf1b6878a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fb23c5-8e1d-413e-82b7-475ef3f2274b",
        "cursor": {
          "ref": "7418a79a-4fe7-4faa-84b6-f521835cebc5",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "62637817-8c54-4de4-a4a0-5458ceabf875"
        },
        "item": {
          "id": "88fb23c5-8e1d-413e-82b7-475ef3f2274b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2dc91516-0df5-4023-b62f-6a16761c6944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5934212-e885-45e5-a6cf-b7faf713432f",
        "cursor": {
          "ref": "033d1c03-d468-4a1c-acd7-1266d48c94a3",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2ca75d1a-669d-4bea-95ce-bd834491d765"
        },
        "item": {
          "id": "d5934212-e885-45e5-a6cf-b7faf713432f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e1e9c4ad-4bb3-4160-9c3c-1f2c32defb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca542f5-a1a8-448e-bd92-dcfa3e8e327c",
        "cursor": {
          "ref": "73078ded-53e8-4b65-891d-76e5cd780894",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2eefd45e-bfb6-4830-875d-103050a4512a"
        },
        "item": {
          "id": "cca542f5-a1a8-448e-bd92-dcfa3e8e327c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fb5c32c4-7873-4be1-b8bb-114047e326d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a7b668-ff70-4382-930b-58ca0a9e31f0",
        "cursor": {
          "ref": "c09880d8-d1cb-4b02-b51f-8f52bcbd65c4",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1e0754fa-bb9a-4df8-adaf-493b48a4377a"
        },
        "item": {
          "id": "e1a7b668-ff70-4382-930b-58ca0a9e31f0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d3df7e61-bc0c-4db8-9d0d-b7dc70735635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e648a1-744a-47c4-ab01-5b8896ae7b3c",
        "cursor": {
          "ref": "78bebca7-4b6a-4ff9-aae9-eee99b463c34",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "765bdaaa-65e8-45f8-92e6-1a0c0f9b9d28"
        },
        "item": {
          "id": "21e648a1-744a-47c4-ab01-5b8896ae7b3c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "33e26a09-506b-438a-a268-6b4eb0c360e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc749dc6-2695-4407-958d-d1df71eb7dba",
        "cursor": {
          "ref": "fa31f5b3-f8e0-44b0-a6d8-c97df1af5dac",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "55560f70-be70-40f6-8949-7365509189a0"
        },
        "item": {
          "id": "dc749dc6-2695-4407-958d-d1df71eb7dba",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "699498af-6e9b-4551-b884-f8563e0182e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a49f539-e897-4c27-9818-47769ed9267e",
        "cursor": {
          "ref": "5967d31c-2f60-4e20-ab9d-2cd5dd23b580",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0e7a2cb5-3702-4afd-98e0-b31147067578"
        },
        "item": {
          "id": "0a49f539-e897-4c27-9818-47769ed9267e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "161b1d3e-36e1-42aa-9330-0aff7b89a10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f255f001-5c8f-4412-aa91-c1721d9dad0c",
        "cursor": {
          "ref": "a49c3d27-cc2a-4751-bb2b-c460b2abe387",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cebe4ea9-0c61-412b-8954-c246f713329f"
        },
        "item": {
          "id": "f255f001-5c8f-4412-aa91-c1721d9dad0c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1e7b5733-8099-434c-a242-42b37aca2142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43855e8d-75ea-4f12-852c-86d3871ee7ed",
        "cursor": {
          "ref": "bd0dad5c-f7ed-45b6-b362-407c854f8b55",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ca317487-a6cf-4582-aa3d-116108d90407"
        },
        "item": {
          "id": "43855e8d-75ea-4f12-852c-86d3871ee7ed",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5cef8371-c05a-4bd2-8cbb-936bfabc8e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3968f691-467b-4bcf-8a7f-b3e750cbdf72",
        "cursor": {
          "ref": "2a2b28db-4962-4ca0-8fe9-65fab61f93c5",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8c1e6356-588e-4063-b68c-4c787a9d5f2a"
        },
        "item": {
          "id": "3968f691-467b-4bcf-8a7f-b3e750cbdf72",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "97506f27-2163-402c-a263-56128a992bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c5e735-1206-4403-a421-d9a7b713175f",
        "cursor": {
          "ref": "377d095d-1204-485d-8d82-ce55328ac354",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "228f976d-39c2-48b7-a989-8530f6400a45"
        },
        "item": {
          "id": "91c5e735-1206-4403-a421-d9a7b713175f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5ae62e67-0d38-4e84-b187-951ce871bacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd29bcb4-83f0-495f-ac9b-abb0c3331a30",
        "cursor": {
          "ref": "d008aac2-0232-4b6c-89cf-c5e8cac01869",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c1880151-41f1-4338-83ef-0dab64907463"
        },
        "item": {
          "id": "dd29bcb4-83f0-495f-ac9b-abb0c3331a30",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ec151569-dd3f-4d52-9db1-565ef4aa4432",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9538f6f3-e10d-4101-8532-382b1e227de5",
        "cursor": {
          "ref": "cbe1e100-6ab2-411c-8e9b-6bc2b37248f0",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a86d8baf-61e9-4e44-bf0f-591891fef7af"
        },
        "item": {
          "id": "9538f6f3-e10d-4101-8532-382b1e227de5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1987db46-076e-4402-b9e2-0ea645481c6a",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d21a5f-cdb0-4d63-b4fe-62b735d2ae33",
        "cursor": {
          "ref": "fa45443a-cd5f-4067-9e9a-235132dcbdc7",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "90050d48-77e9-436d-8c0c-cce61019125a"
        },
        "item": {
          "id": "e7d21a5f-cdb0-4d63-b4fe-62b735d2ae33",
          "name": "credentials_verify"
        },
        "response": {
          "id": "958d55c6-cd10-4677-8637-bf8f5ffb63f1",
          "status": "OK",
          "code": 200,
          "responseTime": 6902,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d85faf6-60e2-44ab-8219-2efc6c5c1e71",
        "cursor": {
          "ref": "c5646a8f-c00e-49da-a4d5-250ecfd21719",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6c015f7c-5441-4d99-b4c9-4fa4a8ea8394"
        },
        "item": {
          "id": "2d85faf6-60e2-44ab-8219-2efc6c5c1e71",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6eced119-3097-4e50-96ec-dedd68fc874b",
          "status": "OK",
          "code": 200,
          "responseTime": 5552,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c14ff2-2687-4249-9bb7-be83f368383c",
        "cursor": {
          "ref": "2f670ebd-d43f-4579-9b3b-cd35434d6fe2",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "58296450-a7d1-4d72-9c64-9d578d1e30b9"
        },
        "item": {
          "id": "02c14ff2-2687-4249-9bb7-be83f368383c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe097e32-5273-44f6-89f3-7782c5cb3993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "02c14ff2-2687-4249-9bb7-be83f368383c",
        "cursor": {
          "ref": "2f670ebd-d43f-4579-9b3b-cd35434d6fe2",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "58296450-a7d1-4d72-9c64-9d578d1e30b9"
        },
        "item": {
          "id": "02c14ff2-2687-4249-9bb7-be83f368383c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe097e32-5273-44f6-89f3-7782c5cb3993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e5260b89-f68b-4bce-8fb7-ca797e8f8f77",
        "cursor": {
          "ref": "37919d68-e898-4e99-839d-63acbb9238d7",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b1dfe68b-c195-4354-8536-344cc4315c67"
        },
        "item": {
          "id": "e5260b89-f68b-4bce-8fb7-ca797e8f8f77",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a3ab133d-9869-49e9-b192-3d209fb80f1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "2c3fe32c-7dcf-49b7-abd2-cc378d29c7ef",
        "cursor": {
          "ref": "e2a918a3-a912-4f7f-b409-1ee912db2d25",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f1bd2957-2c59-4287-b2ba-176c56b5f371"
        },
        "item": {
          "id": "2c3fe32c-7dcf-49b7-abd2-cc378d29c7ef",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bc383be8-a999-48f3-8619-20875b38f9fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}