{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "285d7731-f8a1-4bc3-9b24-91504ff99eaa",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0e4e1aa4-a867-4200-a550-1836a4f19afd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5c28ee84-4ab3-4018-bc9b-8fee479af469",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b1f614fa-f9ba-440b-b72e-938f8612738e"
                }
              }
            ]
          },
          {
            "id": "648adb9e-8564-4fe9-b3d6-ff539973584c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e0850bf-2b30-4c14-92a1-12120d46f907",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6b99ce4e-7a6d-4f1b-8e65-d2d1dd88dc4f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "af3653a7-4e0a-40cc-a1b6-e766a0efd6f7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6512a7a5-20c9-4f77-b55f-ad9c6be1aaad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e739510f-5f71-4fd4-a4cc-5e9d03851750",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b55db4b8-bdf3-4c8c-9983-7d1463523ae5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cb8ad64-179f-4d02-a4cf-d4feaeb72580"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f737e642-84e1-4653-afed-9bdcfb5c0677",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09a1459d-b5c2-40b5-af13-06cfb5e1fcdb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac48f4d3-ccbf-4bab-868e-30b7502ff70e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6662433-ec84-48cc-a0c7-98c803db8081"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71298c59-85a6-4f96-890a-3cedc71dbd33",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ec9b9da0-6855-4784-9a86-fdea79abb019"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e1a8f4e-8dbc-45e6-ab5e-6acd6a090890",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8cdfb305-6886-4cc0-9fa3-b183594401ba"
            }
          }
        ]
      },
      {
        "id": "01007806-fb59-4598-aeb1-767961e35cec",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "03fcd2d2-5dd4-47dc-82d6-19835d0e48ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32803576-6973-493a-8604-ac5a59fc548e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "43736e93-0406-4c94-862b-103c551ff949",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f28c345-057e-4149-bf53-e8a7db5a2fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc674e2e-640c-4759-a242-785d21b2164e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1ca490-d3c2-42a4-b42f-7aa2eda761d3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885a9130-1838-4800-83db-8c84bb9d2da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3d64ae7-716a-47cd-afc0-f0f8541f2a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2b9b6d-b795-4cae-8917-daedeba75eed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f7e908-4636-4654-b4f5-8aa305a37880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87013003-718f-4264-addb-6085a1b1dc21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e52738d-0287-4ee8-9906-3db1424904c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cede8d0a-7451-484e-8c4f-989453bd152e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57b0819-4f21-403c-b6f8-0dd9a7a799ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b0973b6-f5b1-4242-9c4a-30c437bdf28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3347ab29-e22b-4d2f-877b-1e1e190b10af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b38b17-ce4e-4d89-9780-d955e5df33dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a23934f6-53ae-4df6-adc2-d6745f73aae4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96f1352f-935c-435a-b323-60457b39f804",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff866f45-b043-4775-9ec4-ff9724b98199",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4a5625cf-110e-4f64-9cd2-76ba0247f5ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e5be3ed-22ca-4e60-aa5d-8954cc5d3750",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "961e2c35-b751-44d3-8f41-c70d0f90bc3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a4f0495-55c5-4d39-8a58-24e79918f936",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43c33c16-4dd3-4d4f-838e-20a3f4b62a5f"
            }
          }
        ]
      },
      {
        "id": "0c1e0b03-91d3-47d3-918b-e1b7cf4c6a2b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5e85ba11-341b-46bf-9ecb-e7e166dcfcd1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "807823df-bafc-4da0-ac42-f35816f8e10c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "94d595ba-c0b3-4ffc-a364-1004a9cb3d19",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7b0556-6719-4ff1-8c65-a10e75b778a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeedb0ce-f18d-4aac-bd12-dddb38abc97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943fe863-7278-4b34-92d8-bdebd4a88cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12aa960f-e014-4b88-8a4e-22f63d4218e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058e826d-86ce-4fa5-b94f-33c48d275623",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1767f21-a03f-4598-bbe5-ec91172108da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc87b1a2-de40-4f3b-9778-25a85ecfad57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bf1ad9-38e1-423d-8379-d4c59b3a7ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b5c4bc3-1ef3-4b27-9f3e-81f2ab14c3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123277df-a5a4-42e7-abe2-852f78754352",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6aa5afd-198e-48ea-8c2c-a7c810361807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32103127-293f-4a67-9008-ec8a3e6eccd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bc5c86-d54b-457c-9b9a-8c3b68a3b0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6158f5f-2adc-40f1-b26d-9725cb40c086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557f5eb1-8cb3-4c8d-87e2-71de8174e2c2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea7c795-7f3c-4ec7-907a-b4b9d9ed874f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebd9a8a-85ce-4046-9900-3e6eb2ee66b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c797eca-ab52-4234-ab80-fa8d645fe753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30246bbb-2d60-496b-9c3f-071a21848fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c5e749-d61d-48c1-9edd-690ade0b9cc8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc29cca-b116-4ceb-aa3b-7ee1d1051422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6542c1-476c-40c8-9eed-a6ee549c6c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c73c0b1-d66f-430d-a5df-aab8dd7ea876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38081c8a-b0f5-4c77-b2a4-404863fc6bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06bcc11-2c8c-4d35-9680-c31c3b0a6e87",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0244201-69af-4a6b-883c-134fffa0a50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458e3fa0-dedd-4053-9edb-91595ea12600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c640980f-8a03-4aca-be2c-87d5b48efa77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d59c9c8-570e-424e-a711-9d9316b3d2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81627d4e-b1f7-4d62-b856-7f666dd5f5f7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfee2233-6bb4-49c8-862f-60c8dc769412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36f55dd-d21a-49ea-bb53-d7430f72283e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6979ef0-a18f-4981-a33d-c5f9adc5b304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db67824d-6020-4b65-868e-f593bab6f718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385d8f81-7393-4d02-831c-587d391fd1ab",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8453b905-2312-4157-b475-c9a344f95eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a203e11-1554-4125-82f7-5748be0fbf3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc17c376-8325-4488-bb9d-23fc0a43c6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e229caf-7a63-4f6a-9f39-ed33acc352c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed823ac0-123b-4df3-bffc-2397b864f6cb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5490d76-e2f9-4b1d-a72d-54f56db5614b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09395452-5162-4820-8ff2-83f22f1d3b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aee3c4-e6b1-451e-861d-8c6cdb17b6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "143f9d47-127d-49bb-9b7a-85c145590a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090c7c2f-ce9d-45e8-a68a-eb2616017c32",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdca689-5734-491f-9f1f-4a0acfbae3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7464efc5-bfba-482f-a72a-99672f1db833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5d4830-d3c0-4cef-b08e-2b924b97eb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c5a5482-da68-43c0-84b1-21d773e66cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85adaee7-ce10-4a9d-8d61-1f465ec1b54b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74482570-a6fc-4efa-848c-498df49e76f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a42ea90-b5e7-4b1e-8c57-ebbfe708a25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19abfc2-9790-40ae-83da-49eee8670d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c93ac76-990e-494c-be3c-d8b5b3c897ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8578591-8f44-4e30-8f4a-63cce1db3e74",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d66e1ca-2803-4cfa-aa59-f5d099894cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560e42b5-e918-47c4-9874-129ff4ca05d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efd277c-82c8-40d3-8630-d10e899d3655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a33a4c0-183e-427c-a720-a7bf888efe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5da65dc-ed57-46e7-9fcd-62990a5ca88b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcfd48f-1c9f-4b61-89fb-d919940581d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed08782-fa0d-4831-86c8-ed0bd4010a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797881f1-ebe0-4d3d-b9cd-4096fa093e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eff0d2b-6f9a-4917-b859-33e8d712288a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06aadad-9db8-4da1-be91-b42cbb9e826f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe3b30d-3aad-4a4f-b034-1a61a9cb6200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4ef0eb-520c-48da-b30e-ff832b3a3ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78192f80-2302-418c-ac1c-80a810af9f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22399f5c-566f-43dc-8268-85d07129bee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3254b226-58d9-437d-902c-50e3776b2f2d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0583372-8e72-4356-a03d-a7351c439188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d35278-ddc1-496e-b355-8ac88a18d167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a600d816-3143-4ab7-80ff-433fd34817a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e901dbe-9141-4f01-8b4c-6db1740ddd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e99c5e5-158a-43bb-95b0-dd48dc74d2f5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c498dbb6-5346-41e2-88dc-f30badddeac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c685334-f500-41b2-ac50-eb644c82b2a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3c2cc7-2a22-43ea-af85-5a22bfaeed3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb22620f-68cc-4ab6-bfea-d196c82728ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaca328b-b0f0-4735-ba3e-124499af7dee",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd2a57b-cf49-41a9-b067-d2955acdb2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e609bb2-8b57-4c4f-99ae-d740f992e795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f720e91b-0356-4ac5-b7a5-f76a04005420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "845d4b98-0455-496a-9919-6428507e7b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601a56e3-8ee5-49be-a937-d8d3a3d696b9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2412ccf6-a379-445b-9407-7898554776a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cf4798-9b14-4c66-9278-a19de199653f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b2e3ca-cd8f-4155-bc66-20c5c2dc7c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9caed883-589d-4de7-ad1e-e114ef40edaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e584cc-6ded-460e-89d3-2aebf807ebe5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8446b408-9c12-4e7e-a5d7-ee8324af8251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa82dfa-4692-406e-8c4f-527ad043406d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450fd11e-2890-4901-aed2-2b0d43365c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76f7b7f9-5999-4cf6-a833-7573c4b44b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b540f295-a5b1-4f17-ba2a-136afb181188",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9021557-0a16-48b7-b7a8-7d1167b60410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6c62b4-986a-4f0b-a5c0-148d521e0463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95661684-e881-4c7d-a2f3-da1e69623eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d189903d-b3c6-41ad-b396-37795363e2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0795413d-b1f0-4722-8c94-3148db9ab917",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f46e21-360a-48d2-a62c-605f1c1ee52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb4505e-bc13-4d3c-b7e4-2a1fa55f6a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098aef3e-2bf3-4625-a17e-fae6664ad4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c28f0f6f-c915-4348-9052-f4f3c1d09f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a955fe6-d32d-405c-9c0c-b1224fdc78a9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a4713e-f48f-43ce-afc2-a886f0ee3399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348cc03e-0cde-4b13-9684-90f890e6f957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39da133c-c21b-46b6-933e-fafa7bb043b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "442f9d1f-945e-425c-8510-74258ab9eb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b546841e-0e13-4234-81db-15458518855a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "687f53ca-e8c1-4e42-b633-06d0be6d68ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efcfb22-57d1-45d3-a66e-14d504661d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31fd71c-92f3-41f6-b1cd-5ac7476c71d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2557670c-373c-4e36-912c-11f6c219ae24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c043d3d-5ded-4717-b084-9bb0ea44f7c3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2e4f11-875b-47e8-90a8-631b91435198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562f0244-6c4e-4222-ae14-b5736477f747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d5dcb1-4485-4618-9ed4-f93d338693ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3dc2766-cc36-4641-9249-dc00e6402429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ada0e4d-3f82-4888-86ad-aef7ff140c1d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a3bfba-eee7-4632-a95a-33137587ef2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da85eec-3f7c-483d-b638-6a5251d05a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b8962e-0ff1-42e3-aa3a-ef0bd7f6ea65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb99dbf-d4a9-4c67-bd74-644c6a608f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fad777-cde8-4514-962f-75387e2e42e1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d280b31-facb-4725-974d-1a69b1392768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2400f6d-252b-4a9b-ad8e-338d73f73d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c70ac3-8d9f-4c0d-8359-4cb752be7fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a953244-a117-4cd6-af1f-e1a73724a283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cce298-ca56-4fc6-937f-31b3dd5383c1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ea731e-1951-4317-b2a4-112274f986e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7485a4b-aa4d-4917-a2f4-49cbb5b3afd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20c7677-b8fb-4f51-b515-7a1f42aa56e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99364406-9c46-4e71-995c-ec031ed30e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d716e6-2776-4095-98b7-4cdbbc6ef198",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f551e49-3ed8-4f52-9a91-c074fe9bee25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0170314e-24ee-4f12-b428-5356314e6253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d052ab18-910a-4f23-bc82-a587000afce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "adf6257c-c637-4bc8-9a0d-f500179c534e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8118fd-5bdc-4130-939d-1b756b0bc858",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6614d5a3-6f58-4680-b408-753afce329da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d648a84-75db-49c3-adf3-501761e381ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb9748f-0fb5-4fc7-8daf-3cd6a094ac6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dcd1a57-1692-4ece-af6c-04bb4c978388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525494a5-e782-4291-84fb-83ca7c391808",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650daa02-ddfd-4d8b-9d35-e26736d52971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5134f6e5-cc77-4411-9511-6f651c3817de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f7ab24-f88d-454b-8afa-2774796bdd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "67ec8ea5-7c1a-487c-a617-038c1abc09d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b7c4e7-d736-417f-8d0a-0d9201193b50",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc3e405-d65b-407f-8ee7-6d05515a655b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bd5e66-73ab-4b2a-9703-9b42c940a671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4a553b-bff7-4a57-bf65-c27d4eff948a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "593b6a64-2b9b-487c-8abc-30ee0462c32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d971abcc-24c1-468b-92d6-c0922e799f0b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448273da-1139-4cd1-9f86-9e571d1cd37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f63db4-2ad4-4afe-b5c7-f1af7e68e2b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5db896b-23eb-46af-9933-89120d090c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11024011-a415-4f56-af59-ce64429f23e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8e0a12-2860-4e74-b67c-8136f0c749e6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb92a30-9d84-46cc-84c9-3536e2103b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370647ee-3bac-44e2-9d5b-96ef036173ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a2c5e6-4f6f-4a54-9dfd-41209fb1c59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1f9a77-5a3d-4a90-accf-ee3111b0c4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f622ab0e-c7db-453d-960d-2c2857dcdd61",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c755c54e-37a6-461e-b530-436bb876c0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364a8703-a28e-461d-9abd-b850e33d1946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ca3a4b-f8f0-4daa-b170-a411bfe39b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15c45d82-a1cb-4c6c-9c71-cb1211992656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969ba6c8-ab44-4ba6-8ce4-cd168d01c781",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62af75c0-62bf-4c93-9640-4103e6129b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ce9d51-1931-430d-a2af-1edac13b2b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c89124-860e-42dc-a6e3-e2f5388f7173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f904b2a1-5e52-484d-98e0-9c7835bcf9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f335649-a62b-4443-a0b5-e4162938127d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33f538c-4973-425f-b82f-8dfb479d6689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff2b66e2-5687-4db4-8757-3ea8ef469e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1242f96a-d9af-46cf-a1a3-843dc953bed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dda86771-cf21-46d6-9d7f-1cdad35a70d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812dacf9-eb40-413e-8686-1bdee2c0a300",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a31f2e-3270-4677-84af-9dd5a859e075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075cb6e5-7446-457a-82ac-11148b3b2526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93c8055-ac67-4878-b1f8-927da6881b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce49342-c63c-493c-b3b9-84819986b21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0fc905-87c8-40d1-baeb-d13156eb4a48",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d517e6d4-c551-41b5-bfa8-776fc5d67aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892cb3c5-2df4-413e-a726-20633e803ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d796df1-6287-4063-843d-7a9d987232bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "327a06fe-56bb-4026-8164-26caf8776f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942e749c-fa60-4e7b-b9e7-4cae174f52e3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fca732c-181a-42ea-b2fb-e8c00c94df01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5abe65-c1cb-47a7-9500-29b9a57b1311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895ad9f1-f49a-41f2-aab6-653e6562a341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4197dc43-4948-442d-b377-3242417176e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50c51a0-5052-4b56-b493-51acdce7c485",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c193e7-b160-4ee0-8549-b72a8028550e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b02632e-5ba9-4199-b656-9147601f3288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d15d3ea-f892-4000-ae5d-14f599144917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f5210c-6343-4d71-b1d6-46430dcfad37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5007d618-0a2d-42ef-8cf9-72ea3969f8df",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cf1e4b-0e36-4c77-8dc1-0a8af9f92005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269ca49f-0e21-4213-ab07-9dea53b20de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07514894-0998-4a06-b081-8a605685b9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b538cbb8-677f-4e1a-bcfd-e8f1d143a415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3709fb-d4ca-4286-8874-ae8b76809018",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c02ce8e-322e-4c21-bc44-3ec42ffceba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1114dee9-4e8f-4be7-99dd-a5cf667a3295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2fad5d-2395-4542-a7d2-6ea854fc9e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8ace51-2229-4e60-ac41-ed229b2d8a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c0afe3-7613-49ca-858c-fcd64a9f487b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e1e9c4-b635-4a84-a076-e52707cfa9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dae9150-af61-451c-91d5-c7bb07e7f626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f646d9-f083-4d79-9c39-7cd41024b32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "38190929-5e7e-4904-85e0-b381da70368e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7524bc9-b3ea-41ba-aaae-c6d0aace94b0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193b0646-4df1-4fe0-93ab-7bfcf1e0f10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6410d237-2e17-471f-bb2f-ebf017b0b26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f30b9b6-b2df-47eb-aa2e-47ef1b96f10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a95300f7-744f-4f06-8699-34d31daf9870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65556c3-d608-40d0-b4c1-4e0b20d92ec2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f56c32-73ae-483d-9360-1e6b6feae615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48957517-65a2-47c0-a48a-7c22081d2fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64023e55-7172-4828-9a88-7858f2d75a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2ad17f-2891-48e8-96e4-e4eaa648726e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58a7e8e-b126-4478-97ea-4164672f7aa7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b5ce01-66b6-474e-aae0-379bd2f58a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83c8c45-4c66-4076-8539-e31b84fafb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5f92d8-ab1c-407b-9db6-b01e67021dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "855783b0-ca0e-4957-b62f-0ab3af81cfd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3325b00d-dd65-4bab-856d-1c1c3bd5091e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b49528b-d8a9-42d2-a385-4934821ac676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a5d7b7-5e05-44e9-99c6-f4010b46ea87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5226c63-6d4c-4fad-a422-2a642b3f31ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca49e27-59e6-4e3b-a4db-552ca26937fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a322806-1977-4460-bdee-172fa73ea0d6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882e73c7-3bc4-4b77-8887-271447905b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db73930-ffcd-41b2-b8e3-a86fb4e8ca73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4768c0-dd5a-44ec-ada5-9f7c0306491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7352af55-a25c-4dae-9b7e-8d9a84add5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e70d9c-5349-41ad-bc37-6054ceb4a788",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6cc51d-9ac0-4551-ad63-5b3ac576f719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8f7073-ceec-444a-b53f-4af0aceb4640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c989e150-df35-4ef4-a95d-b06b8e9e3402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc68ccf5-1728-454a-9101-456c9adada50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14edc34f-0623-4d98-90c8-7c2765296891",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce34ead-ca22-4ed1-9b34-42be1a63f82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3400f2-b328-4e22-bbbe-8c90fed1f775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d57ac65-df6b-45a8-b141-efe5c2c132d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f86dcd5-eb99-4d78-8b05-cd4f6186f50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b460f93e-89db-4983-94f8-d9fc3684e8a6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91d4077-e57d-4718-adfa-5f389d6b60c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ffa1a63-ce87-4e42-b860-64f6d6fe19e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d31d23-c7e0-403a-b943-3cd826585e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6934af68-01fc-48ed-97a2-f8dc3a0bebb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb79f31b-bfc8-4bed-8d44-99c0cf7943f5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d807b12-eed0-4f4a-a2ef-1e8607a77379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffde6a3c-286f-4084-bf99-e5ee93b1ca63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919ced9c-fb83-4a3c-951f-e346fd2f679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1946ba0-ad79-414d-8289-6247f98fd855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36bfefd1-efbf-4ea2-918c-ffe3bc72f550",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e6e56f-d3a7-4d41-ad29-b6b8bb1423aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcc5e87-62bb-47ab-9c09-53e7196d991f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac74323-6e59-44c3-b61d-a65d5b485056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc8ca9f-f499-434e-87d7-9b8dda7a2c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4899e7a2-c278-449b-a15a-54086cb824d5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4fdaa5-e6c4-4a9e-b6e8-539cc791206f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391413ca-85ab-4d52-9041-b32fc0f0cf4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690a68f8-87f8-47ad-808a-05933af629c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d34a803-467e-4d6c-8fc0-dbe9f7e39b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c930981d-df82-4e35-8ced-bedbb7f3f206",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13950e5b-1af5-4e2a-9a41-fff8f7bcb37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daabfe19-b8ba-4ab4-ad9f-16d4868fbabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17e0a0d-7634-4c99-abb4-ce1153bd7dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1f2085-8da0-4cbd-9a99-5bec7de25fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab84569-404a-47cd-aa36-5b792b8a9c67",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72083b9b-9928-4629-9fa9-4f60cf290f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903e54bb-f534-4809-9600-48d9da17cf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987644ac-b20a-40ba-8486-d47eefd26be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9da4ed-6ef3-41a0-ac63-8aba8c1e8fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650e9482-cf1e-4db6-a81b-7ef270cbe968",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ba1129-6818-4815-8dd0-c85ff528aa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cb936f-5188-48c9-8536-56a74f7ff69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebef9779-29e9-4003-92b3-f8895ddb3a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca6ccd3-2458-4c8e-a5b6-39d3362892d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db03d51f-282b-48d3-85a1-ae9b46b08765",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db070f2f-d419-4e18-8d4f-614634c2a3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d1cb61-9758-48e1-93a5-17e3df8e3c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b03d3a-764e-43b8-8ea8-fbb5c0d57859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e71782-af73-4ddd-bdb4-1b394abdee81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3762a12-c6a2-4fe7-b510-bb332d471db1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8aed59-9cf6-4ee1-b1f2-770a323d50a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892bb96c-f9ca-44f4-9991-299cba69e294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d5ed88-2f91-4a94-b5e8-3677c649ac80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1519a1de-db6e-441e-b87e-24ae30d1a841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc415922-d779-4789-8586-e251333f1724",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51250f5-c745-4f83-bd3d-1c3b04190a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e7485e-49ba-4041-b2a8-558ab223ddae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f291fcff-97be-40c1-816e-92367a2283bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5f6b0f-419b-4a24-9f37-428e9186737f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c07068c-d7fc-4601-9d6b-f8d8932ddc7c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58acd53-faa6-46de-9432-0d29443be121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc3905f-32d1-44ad-8c11-0c0895cb44bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc359ded-61b4-4107-a8cb-7922f1c9de9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cdff4d-3701-46eb-b44c-f0507221f7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d7708e-e356-4a79-9859-54ebb9c1be38",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc9299c-9e1f-4796-849e-547389078afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca845127-34d9-413e-928c-ccc493f6e1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94023857-a32f-4a7a-a8b5-301fcb6ee1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "862fada3-189a-4c61-9155-63d4205067a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ec793a-5351-475a-987a-5a0fcbdb4433",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445134df-9214-4a5e-9eab-5947e07b699e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4713071-2ec4-43ee-b5b7-62ea150cfd4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c832cd8b-f778-4207-942a-87e5edc8b457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f12d90-8e0f-4356-99d4-da08386db230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ec283d-38cb-4127-924a-b6cf1ac877b7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e479ae-8dcb-4039-83b1-06381b0c0f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32ffe58-8d0e-4ee8-87bb-c2cf326fe788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9c6190-ba2b-4642-9d9d-668862b47fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0242c538-ecdc-4b2f-8caf-0a1c5340daf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41357dfe-c66b-471d-b949-e2ab694be818",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da1fe04-602e-4a99-815b-d2deeee88b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f307d66-10a0-4225-8bd8-26c3349e5080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a34664-e9ab-4ee9-8dc1-ea33e97a06a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b386eaa-a84c-44ad-adf6-4b94fedbaa5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13315ea5-4465-4c3c-a3f2-fbeae6fdd72d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f4aa32-6580-414e-bcef-a2b4b3b0dd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9effbd-a6b9-4ed6-aa5f-39d92e1b10c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be54848a-94fe-46c9-aee1-19414faaee06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce053af8-6d96-40e4-ba22-d9c634a4f24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cad35ed-17ef-4cbf-92fa-5c9c0045caae",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b7e15d-0286-4488-a308-6ab79fd9cce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093fb0d7-6a34-4532-bb6f-49b70127d609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb56cbdf-814f-4e32-ae71-f1b7dfbe91d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da3ca070-3d45-4b73-8006-c0203d83c1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60d7415-b249-4e95-ae78-11677eaf65e8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7124324-747e-4e28-be3b-07a06f45d248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8edfe4cf-f3cb-4042-8900-4387246368a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236c4e16-ef0f-447e-a911-870889c235f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8edda24-996b-4c7c-9dda-6fbad3f3aac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40a9ddb-ae6b-4a92-bd41-0ee2eff66db1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39de0d9-b163-4d0b-8f6f-ffee5f75da51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f583574-ccba-42ca-87bf-0e9fb3955e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95322821-06d7-4755-8ba2-dd5b60069ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8996a8d4-8e15-4a97-8385-992458234da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2770e28b-10ae-4223-947f-7d293fab53bc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57946ca2-24cd-4a5a-b2b2-594d18d193b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5627c6ea-aa62-42a9-bcb0-bd263a4e6c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ea9544-fc78-4e6c-a18d-dc7af4d3007f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78134dda-cbc7-4627-a010-2ce19dc6bfa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee4fd04-6ab7-48da-8bbb-246b87c80275",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab851b6c-1e50-4348-8244-88a5e44f23d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba298bf-d2ae-41eb-8acc-c46d52fc2117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140372c1-926f-4e24-acdb-9bdf39399372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78e8f8a2-c3b7-4824-834f-b4074035b04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623e0bc9-5973-49d7-a6ae-22ea64840666",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef93a305-41c6-4c2f-b595-083fe4e0071d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4737a5e-ac14-4791-88db-806e7f216a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6c1afc-3b3c-4610-83d7-5c21ced8b549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8096cde3-a3f3-44d4-8cdd-8f9af9f3396a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67641049-71e5-4e93-a79e-a7fa65c6a2c2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19845c4-dfb9-4144-ae66-50c17641adbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ed33cb-2d29-4bc1-80e8-24e20a6fc3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3127744e-be23-44e9-953b-04d782dace72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0226077a-e45a-4fe3-9ff5-33a870c48ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da51b270-59c2-4601-a3e4-b8121c7a6b63",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa46220-b24f-4ad1-bc9c-91835c10a172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcc8842-23a7-4753-a0c5-edb38e066398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a453044a-6744-4aca-a8b1-75719c50ec02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0705fad7-00a4-419e-9602-8c8cbbdd40d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3953394-7b4c-4d58-9614-b2fb9332859a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b0a7ae-2183-40e5-8487-57e086ea4ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ffc68b-886a-47cf-beed-1fc75fa57ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844c6d67-7c79-4331-ad5f-9987a614633d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c680fe32-dafc-4853-aba1-45a2c239560f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300cafc9-2156-4166-a4c4-84b70bcb7edd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2fc7be-df57-45a3-af84-03e9dbf92853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a511d0a3-7a63-40c4-aba9-87a03c437571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192ab464-35a7-4626-a077-3b9b2e4dc5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "539abab0-3c3f-47b0-a63e-aa3822de613f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640f1e1b-d6e0-4cd1-90c8-085517d8f836",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa92017-2740-4535-a775-80b62e133213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d93eb0-9e99-4792-aa34-0c89653d57fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d602dc47-3d33-4067-96ae-2c6eb1a6bc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30bd8960-cd59-4b68-ae6e-93f56ffc64c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4672bc1c-e083-44dc-a283-1136ff201d20",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd7818e-bfda-4557-907a-fdfbea95e53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5f7d4c-8160-4358-8f08-08b7b0e4f486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eceac1f1-691f-4574-b01a-a0ca5690fe6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18f4d4b4-54d8-48ca-a691-ef40c2c8e9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cd02f8-8fe4-4aa4-9007-eefd6a57fb3e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b772af-6f38-4ba0-9e3e-37f2a264df88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e801cdab-8137-4134-9526-acda1c457ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad6501c-a8e1-40c2-8b3e-70b8a0a1f88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "562fe88b-b691-4042-9fd8-edbe1948d87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2340a73b-f938-4fe3-afd7-e2ccb2c3e042",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2864c2-37ae-4c68-b724-7931e95b64a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d00be65-2741-41f3-80e4-6eed7bc935e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87878ae7-bde4-40a4-bccc-52caf814ca81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5a3947-4217-4740-b5c5-619b628dfe5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b5b530-9669-4635-9dea-2bb76b8e3d5a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1406d69d-f7e6-48a3-9aff-ed500738b89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c144b616-d9ee-4494-a0ae-b0accff87996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958bac88-5b40-4b84-978f-c66cc2fb0880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a254cb2-8ee6-47cb-8072-ec30b3127a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac85f6d-fe9c-4ef6-8446-e673c792844c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03af15e5-2821-4896-baa6-a7d29ef80fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d78bff-4d43-4ba1-b88f-572f351fb960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dd7b0f-85da-4f64-bf87-4bc58db613fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a195fe-017a-448a-a6ab-595060904037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b36ec9f-ba7c-41a3-9299-4424d116efaa",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931adbf4-2aa7-4c8f-968b-0a508d9ad39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e5f778-b6a5-4dea-9ec0-5beb43fa4280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b591868f-7843-406f-9813-f035cfc0a13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc9bb52-e19b-439e-b538-d98889ffa708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc4a99a-8015-4f0d-8055-7621e3fd8622",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5756a26-aa1d-4ac4-a597-d5bd626fc171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661d7b17-8fb6-4758-9e37-5e57d2302820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc9853a-6166-49b2-8957-44118bc189ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2476a57f-6a4e-484e-9161-9a148da6dd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f26ea2-9968-4864-bdfd-83a6607b6c81",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bacfc8-eb56-48ca-820a-5460f13e9373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd00bab6-fcd6-40d5-a1c1-a2a4266a8b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50435c4d-5b7c-45c0-8eff-f4027962ff48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd09294-2d75-4e6b-8fbf-6770f9afd37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01d4935-96e6-4f74-a006-1a05c24b2a68",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecabe49-5f3f-4d6f-8f74-fbcd34916a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293bca0b-0516-4615-9092-9c53c4a495d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56876572-695f-4a7e-a30f-dd2382a96ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9940c07-79ca-49cb-87fe-1795f42528d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84da2767-e813-4afc-b17b-649f60565536",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b41640-c9e7-401b-985e-d02f7bcc20f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101a6dad-14e3-4e7a-9c8e-138e43e24a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8a4303-a0be-4f21-acf5-d41c7b394aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e205dee5-ece1-45df-b1f6-198801f3ca1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87546b27-13fc-4f1d-83a8-d0bb5b6eafc8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad188cd3-2f78-413a-bf5b-3aa432bd6b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3963363-4c8d-467f-a368-6b4f8281750b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc1975e-47a5-4fe0-a8fb-072a7c3d236f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aad6608e-3cbc-44f6-b270-155c5abb0b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9974de85-dbcb-4920-83c5-2c269e79415e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eb71b2-c533-45b4-8b8f-64dd94726538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269dee61-3645-42ed-a976-8eb2808e0d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d0afc7-ab28-4d8d-b29a-e5502629e4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "652de08a-77d2-4731-bfda-406041a4f52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18974403-2045-4660-9347-c6527f046247",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fec0b7d-b27b-4834-893e-0d0a9f3c8264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394ca4ad-2fe4-41a7-91d5-986956b41072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b76a3fb-0842-4c8b-9e0a-534c7982a228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d33f9afa-02b5-4464-bdb4-62bdad11ac83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe794bc-f742-4773-9104-f75cce404abe",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a305f7-619a-43cb-89fb-6d349221b1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015cec3d-c7a2-4593-af0c-432786c0d093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21b497c-875a-492d-bbc9-d288add1ce44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "19a0893f-4e99-4065-b40c-2c92db454936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9351a8b8-9d88-49f1-bc92-8fde69eb614a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d583bd2-b602-4ae6-ac57-16692acb3b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c9256a3d-f4b0-4a00-a8cd-afe6b0ee147b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67307ee9-1f47-48b1-b1a3-5e613cff0f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e6183b-342f-4408-b96f-181d5c6b68a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3d6ed7a-7efd-4ab4-a12d-716a0e07524a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7049b2c9-cfc4-4144-9dd2-ab211096800a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58398ca8-eb23-492a-9553-77a7be26a102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58919b3b-5aef-4ed7-9b73-c0c4bd9a2a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f102c64d-da72-4cb6-a4fa-97830d719cb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "316c8aee-a067-4bb0-b9c0-b5d36d81c1fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "377fd945-dd2f-4f74-875a-03fb22723ac1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1075d354-b615-4c2d-a667-fcf9f93b3b7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9070bfa-6074-45f2-9895-919ef1e1b625",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c02b21ad-251c-4067-a37a-f6f22a979491"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6121f42-1a28-4ef5-9cf1-5719cda303ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce8e5653-06ec-4b3e-a861-b5b0da5c22df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1adfaec0-a16b-411f-890a-98427c89463d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c68c1cc6-db08-45c7-a7b8-79d8b1a6b995"
                }
              }
            ]
          },
          {
            "id": "ce84eec5-0f11-4260-8f5b-7c4b661903bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "53d13198-9d84-4b7b-925b-1063e154f68b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "494c22d9-40d7-422a-b202-a961ef0df4f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e31d82b4-a471-4b68-ae29-4b340c04f9bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98ca93ac-09a6-4299-b14e-78404e1f29e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "deb9777c-3352-415e-897b-f13041962fbe"
                    }
                  }
                ]
              },
              {
                "id": "912e4876-0036-4d7a-bb48-ba9689edf54d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94aaffe5-b9c5-46ca-8149-bcb9302fb7f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6eb5ae6-4a75-4913-93a0-ae544bc76a2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8ad7b6c-8b52-47d3-9ed9-da569b89dd52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b4c04db3-b929-4684-99f7-503514a415fd"
                    }
                  }
                ]
              },
              {
                "id": "7b2de53e-0dc6-4564-bf05-1adced9eeae8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a957d2aa-2885-48fb-a92d-ee722b68b9ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c7db39d-1396-425f-bffa-5678c20ae934"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac511ead-e72e-4746-a544-e4a34fd11a00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05e8a3e8-5abb-4ac2-8307-3ce69ff62724"
                    }
                  }
                ]
              },
              {
                "id": "3f8063b7-359b-434d-8859-f9102c5c8118",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8004dcd7-53bd-4d0d-a1f0-65f3ab0ab6aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f1f1516-102c-4b87-9a71-49dab1405351"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cd9acaf-c773-4236-93bd-22583f5560ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ca117eb1-a0c2-4f34-97ac-4fe13709d3ca"
                    }
                  }
                ]
              },
              {
                "id": "40ded71b-86e8-43a4-ae2a-4a099eb8dc0e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e85a3b8-e5a5-4c98-83ea-13e3e6210e72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2be34fe3-3ae9-44f7-803a-5c61222579cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f370fc78-df2c-4674-80d1-28b804452732",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "79506181-04d3-4b68-80ed-0ba9db683b37"
                    }
                  }
                ]
              },
              {
                "id": "6b25d7f8-2a34-4c29-a3a0-10ca52c99e26",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a1d9372-8caa-4872-9778-199c5993c87f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "abd74cdf-e7d9-4e11-8513-7a9305b512d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac4c7499-0660-4ed9-9e8d-ec58bde24d36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd9719d9-f9d1-4279-8292-526847543004"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb1a1fc4-a3be-4c5b-bf97-99b2acf08453",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf79edb2-2348-43e1-9bc3-a3db74bbbbcb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "719c99bf-4fd4-48e8-a553-e7d030350e42",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86d409dc-7062-427a-bd07-89297a1fb20a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2492faa8-1088-43b6-9231-bd8bce8ee25e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c98bb2a9-94ec-43b0-b55f-6405d75e3421"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b1923f0-78cf-44f7-8d73-214108323ca4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c8ccdd7-c985-465e-9d62-9e71ecd9b6e6"
            }
          }
        ]
      },
      {
        "id": "04a4cf3d-65b6-4695-a629-f0d29cbc467b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a6a127dd-a680-494b-a6ec-3ba38431e94e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "977e2e24-cf19-4a3e-aefd-609ad48c868d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6382fae5-1510-4774-afe8-bc0056c4c7c3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567a74b7-5a28-440b-adaf-35d12a7c0e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8bc3f9-7685-4290-ba85-3e0a025599eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d378e55-4226-41c8-a04f-91a969f3640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae68332e-ff11-4ed8-a343-459a84c2d78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2ea40f-b485-4806-a549-8bf69b6fcb5d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3784526a-9ba0-4235-b98e-7bdd7773e25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d29220-a1cd-4404-8b3f-9775cdfaa434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338f635f-e08f-4845-9cc1-e66ddcf547e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9ad1ac-9fb7-44c0-b47e-5aab065c2da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8816eb5-d108-4680-ba2a-92ab389573c3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a7baac-cf20-4b26-a273-f0f661cf60bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7f3101-42b3-4c1b-937b-1f90df908d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b10d0b6-5fa2-4f2c-909f-669fa5140704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31aaf0a7-7af2-4de5-96c9-24b953780e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675ff5ef-efe6-496d-a027-d752ab2bf3ee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38758903-4e06-49ba-adf2-a124ba145596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31be8a8-ba32-42d6-a106-65397921d5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61115341-8c02-44fe-9568-395bf6e17e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88a7ae7b-5015-4612-967c-469c85e637a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937a3e84-8893-48ee-86c3-196b582f3bab",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def3ecac-51ab-47d2-90b9-d2ef794ea222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee79a5e-ff88-45b6-bc4d-016501251b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0a48a5-cb91-4c6a-8be5-57ea8249f711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e23aafca-ebcc-468f-ba81-1a261285efea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9074d87e-b91d-42f1-8b86-1f091373b758",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c43254b-282e-4eb5-9e7f-a07c4b37a2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "461e746c-da64-4e35-b28a-22437ff51fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d73568-a6f7-4b7f-a456-40a4f05e9951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00b91535-ff6a-49ec-8af3-1d3bf3f229c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8875073c-fcc3-46e9-9b86-8261f35856e6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05535cd9-0c91-4993-8aaa-f657d00b8fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8c1ebd-371e-43e1-a2ad-fac536d61eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154aa768-faeb-4814-b691-085025c05145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "509b673b-00ba-4551-8dc2-aa4200ef6341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed9770c-5964-40e6-a3b5-b9b6df05a2f1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cbf143-f651-46d8-a9eb-aa81072fa65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1e41bd-9466-4094-a39c-4e97995fa291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081763ad-c927-491e-a95b-34eea5542dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58a8b62d-365a-484f-b148-be882dd2f600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc364815-0909-4f3d-9fe1-af1fa115adf5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79119902-7cd0-4ecb-9edc-f7956e422fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff140c17-e4f1-42eb-a0db-3c2f7e51a757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc412ff-a036-4696-a357-7505b831b654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b28a082-0cfc-4a79-ab17-734affbbc88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c8aaff-95e7-4d7e-8c01-4a9d095ec8fe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f298a3c7-a3e8-4aaa-aa01-b63909389a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a622ba-d619-4a99-a1b5-015fa9a1a7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2512efa7-7cb6-407d-88c5-0a05510ef5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cdb2573-822c-436d-90e9-8872cf8255d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c2515a-2b6e-4704-b789-1b2595d69ceb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee7364d-1fc9-4d63-8177-5956d83eccb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45ab24d-339e-4978-bea6-31dc8d174c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd48fbba-07b5-439f-9702-62cab1c5f723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c81e5ac7-44dc-4be1-b3fb-e354da9c8dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38677fc3-7e2a-4c7b-8ba5-8864b9e62817",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375d9e0e-371a-4b2a-b9e8-b803f43dae57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cad5d0a-7fd8-4104-8c7b-a1b42cc36ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a01760-2d55-4f25-b3f7-4a55a4003ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a66e6140-aa7d-4b56-b782-732cae0d5b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2817540-4ce8-4dde-9c90-ddaadcd0b5fd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1353b2c0-8802-4b01-87ab-b34bfe1e6b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c1a003-7e46-4739-b0e9-cb55b9708ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ceb2a1c-bba9-4979-a33e-9eec8c65a836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b77ece8-3005-4cf7-8807-186c737a2b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320858b5-1bca-4725-8821-f667ad879450",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dd714f-1887-4cbf-8ccf-502fc2541b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412a77ae-37f5-4d0c-9ec1-9b012eafb9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a72379-ba3a-45e5-bfa4-eb3e5fa07c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d77244f4-aa27-4c06-bc90-89ab817402f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00aa15b-48d9-438a-84f5-2ab5f1da26e1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597877fd-2f3d-41e4-971e-aad820a8569b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747cb1c3-64bf-4b2f-b8c5-a57ea5a9616a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f6c12b-32d4-4f2b-a4dc-dc6f63e331f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f49f8a36-015d-4acc-b423-1dafa78ce92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe92c013-caa9-4b7c-878e-a998141f07c1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c608ee8-1546-491e-a481-5ac78cfba5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5b2ca0-deeb-4f92-8179-7ecd7f54c307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f215c0-fe33-4668-b95c-83c6c2e976a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a174e768-f257-40e4-a94b-b5eb98a77968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc31512a-aa03-4dc3-b80f-1e04af7b8a92",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb01e62-cb27-4110-8574-6aa14a3ec254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73e7f06-dffb-4951-9480-bfe333740f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc8cf1f-c888-4b11-9d49-818e3572ff12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "380197ec-8961-4852-aa0d-e5786fc6cc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f286d18-0aad-41d2-a9b9-c3b72f02e8c0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988fe88c-b8e0-499c-b7b4-5c941c515673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7645325-0509-4213-b869-c90533b0661e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe3bd84-0b32-49fe-9e64-303634b1e957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "43cfb806-ebc4-4fc9-8c2f-b616cd320d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c2a2c6-deb5-4f1d-8bcb-12c6a44748bc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35776c6-be7c-4244-889a-1da6d05eee91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7cccfc-2ec8-4e21-9558-d545745fe593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4f6fd4-8a5f-4131-bf14-15d111ae0096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c186b979-35e3-4f9b-a03a-7fc24caea734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21304d5-15fd-426a-8ad6-f66ec086fd45",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9c0992-d544-4f1c-aa1f-a166ae9611f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be279e6-84c8-46d2-b7d8-01e6ac24164a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5531d31-380a-49be-bb00-8f3f149bbae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a56200a2-1f51-47b0-bf39-62c615b245fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aea7e1a-389c-47a7-ac77-5ef587a6634e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad078edf-e641-49d6-b4f4-0b529044a71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7863c2e0-621a-4783-a948-725f97d02b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c506c1-cf91-46fa-9ffb-d0e7c9c70f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44f8fe18-5575-4118-bf0e-e8c127245a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bf0ded-4fc4-4f80-aea0-fc3059a2968b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b97ca49-c760-4d1b-90c3-40ffee45a62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ef9703-1c03-410b-8552-be82edfe2e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4178dbc-ad3f-4eef-8e12-38ed65cc6705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2cd91f6-9383-487e-8891-8c8ee86f83c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b47d1bd-a51c-4abe-bc50-da12e38ed3f4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab64ddb-6d50-4c8b-83f8-2b56338a437d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057f9ed7-90e1-4427-a1c6-9a6c6a257c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f465d6c2-af54-4b97-82e0-e3378de0458e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "098c6aa6-d192-4e00-a1f3-1f1d402262dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aa50b8-858c-4e3c-ada9-6089e19d6468",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5ac987-0c19-4bd1-8e9b-9d2a541f1956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82a4631-afd4-4a61-b13e-6f96e6ae6ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731ed27c-a2e5-487c-aced-f8f1a1402373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a251be8d-58a2-4fd7-87e2-73705d85a9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c0219b-1296-45ae-ab13-9987d6adeddc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2729dc94-75c1-4cba-b7da-c1b1e1846c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed47d41-ca53-4588-8d65-c8154915d27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80901ea9-7dfb-4cd5-aa9f-52a51161b40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d79d697-7199-4fbc-aae3-a7f459ffc3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33595bfa-d817-49b8-9a6c-c27781a46c1a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f415eb10-1721-4863-ba86-32c09093a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4ebfaf-6640-404b-9034-74dde6a6ba1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a716f2ea-5e45-4e8e-926f-5eac3c548301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "353dcb07-69b4-488a-af97-ef15f5e95507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378e98a7-a85a-4d8b-bb0a-a47df524da52",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1480583e-0952-4f25-9003-89087c4c93e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c32e7a-6d9c-475e-965c-eac7dc07b4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf78e93-7264-47d5-bdc5-7d5fb800d68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0dd455-3de0-4bad-8ca0-c1c3fa426c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7902e0-d3a4-4fd5-84cc-7dd21a149d68",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e597c343-2691-41db-8e00-4296baaafb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a31d4cc-4686-49f8-b3f8-fb06b836a39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1acd399-b798-47c4-8a06-01d44b8f0028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f483fb9-a0c1-4a6c-b1a4-5afac5d0d965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4976de-b4ce-4ee2-a885-3fb6da10d655",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a6c275-6dc9-49c0-8e72-6c781873d907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3db7912-87a7-4162-859f-de471e8ccb96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c448610-36b2-42f3-baf2-f748c830076a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9053a006-1b8d-433e-9009-f08435ccd4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3041c082-0e79-4d4e-b718-6796a4486c6d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8422c8e2-62fa-4668-9b38-66bd596850b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaaa756-9f71-4d99-92f8-82943efb4747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40004c91-cb72-4d63-844d-e2c651c74fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce38125-4da2-49dd-95f4-5d2f45f06190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2903f02-5e5c-486f-97ab-f81153567f9b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97a9993-2c89-4d41-838a-c30ea9387c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9f7752-d4fe-405d-b4ca-97bf2f49acc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a043d93c-6106-4032-836a-16a770b585a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82ea9872-9112-44df-b280-f80d3a2daedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0ba6ed-6036-45b5-b52a-3d42c7afb96e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb8fede-0e23-42ed-8e60-b28830809199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1ee499-6d50-467e-aafe-dc096102707f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba5e3d9-db09-41bc-91fa-3848e9aa088c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb933ea7-508c-4258-8309-a88f16233b56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6a97971-64aa-4bfb-baa9-ad80aadee973",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef6d3e76-5f25-4bc3-8ce3-c6b86865c9e4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a288d3-5cb7-4c0b-a0d3-dc3bd7a81ed0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "336479b3-b6a9-4ec0-9279-ec416db93ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc75c7b-17c0-439a-ae99-4cdad032c086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12a76a1c-d335-406d-b8d5-44d4fd17859a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cf3f544-0f21-48d3-8416-a7d5610c5cb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ba2aff4-7307-454e-b243-3e3bd2ac168a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "36b57aec-bdb4-445e-8ddf-b585474de04a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6583880-eed8-42ce-9b1b-cd12c9b33923"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aeec22de-1686-4d19-8b80-fa00ff2ca7a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bcaba853-2928-4198-8855-14a4d874eaf5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bacc158f-d137-4d59-86d1-58574d809585",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fec1772-7dd5-4934-9dd6-2cd56a4ea89e"
            }
          }
        ]
      },
      {
        "id": "4d61f59c-531f-4761-b577-1a6178fe2c36",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e3b955e0-92ab-4032-8e2e-c0e31146dfaf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08cb7e7d-c490-430b-8ac1-836d24647380",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e09f9488-4365-48a7-bc14-2563e54db2cc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb65e3b-0a55-466a-98a1-54a217d06699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034edd50-6d87-4151-a487-a8e89bb3cf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1659760a-94ff-4a90-adaf-17284260872d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf5ec63-e657-476a-98a1-b1b7cd0d98d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4334291b-cb5c-4d58-a86b-31c8d04493cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d9fa35-40ec-4e1f-b34b-78d64e560ef4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ab31d4-5d8c-4ef5-ba0f-024d0a6c7078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09ef2fe-add0-43ca-86c9-4b1c0a29efa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fb6360-936f-47c0-a5ae-aaddc6487a44",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66b668d-b09b-4c24-95f4-6a595d36f6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482c0427-4d30-4436-a8c6-f8f7331524bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a684cd3f-a4e4-4524-bcb3-556fc2c04f66",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d51241-b36a-489f-bf13-ad0184114d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6627a8f-1c79-4ea6-b242-8478dbcfcf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cd5fe0-aa11-47ab-86f4-5d17bd3cabe0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cc221f-b0d0-4fd5-9c9c-95f9e0621df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6264aef-8020-4e44-a761-d9af2efbfb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4729919-d462-4060-9057-3f169531008a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66ce0e5-47f0-4a7f-8266-74642099406a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f36cd69-59a1-4790-b9c9-eb114de09162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85420282-af5f-465c-945e-e62efc56de1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673625bb-c44f-45b4-80a7-ccd3777eafc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5950bf59-983b-47b9-b729-c62174ca9385",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b85f711-09d6-45f7-af7d-00f5fc9e68b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8baf4142-d353-4861-9d34-2e833524a6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e29d8bd-f5d0-454b-a70f-34e6dc0f57ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255425dc-bb4a-4d1b-9f85-9d79a4374916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8e4210-db29-4b17-b4a3-f803421951a5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed46090b-a16a-4f73-8ff6-435ba48f07b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11449db4-5b14-4bd9-934f-76e9ab582fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9f51d2-9fce-4bd1-930a-081a78edf1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1c0e6b-d22f-4eb9-b576-4ac637662dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c349435-e7a8-4b25-b910-4673d95c196d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7ccb2d-e3dd-401c-83d8-344bff835a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05b633e9-ce91-4995-bed3-caa19a879aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bd8109-3342-4248-a104-e479161648e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7fe077-5eb7-4c8a-a8a7-eb440b03acf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b398a0-152d-47d1-8be0-edd9285d1ce3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60343325-cd69-424f-88ab-97573ea6d4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7d457c-3f36-4863-90c7-3adc9f62806c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d4c8f0-00a2-4c2b-9b3a-3c116484e604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689aa423-0ff2-4c3f-8960-a3fada4bea8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960e674c-9f43-43a2-9d5e-e63966baaa2b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e126b5cc-f63a-4c02-ba3b-28769c5af857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6666bf3-e36d-4b46-a64d-8aa19d276022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c9e342-2831-4dfb-ab4e-2ef29f988c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1878848-56f3-4db7-af32-2ed606fa7576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238fb32e-b187-465c-8465-d0c95c9bc7f7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83afd95-dfac-45c9-8308-842e491b2b29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4d9fcbc-3be5-4437-8271-90524a169bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c159b563-3381-4888-ae36-c18e18035289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a977a02b-68c1-49b5-a5b2-a3c49b951818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4369e688-4700-4c2d-a28e-a677edfbd3eb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af45dda7-10c4-40c6-a866-ee29c000d0cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef8416d-cd07-4fa6-9cea-16756bb4bb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "332cb593-5dd0-42d5-800f-533b1e0c1ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b3fce9-3fdd-45a4-8092-42ec2725138e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b90ef3-b0f0-4f39-bc10-1efddfe482c5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37a958b-fe67-4ea7-a645-0e7201618765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a005d322-8526-4d47-ba16-0d14e279a454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4782259-d831-4ced-a059-f4d426a414a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca0d7b4-084c-4515-8fdc-ee5b621420f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277260c0-7a14-4513-9226-8a5935a82980",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fed3f0-308b-4376-bb0d-f226a9de4755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44637e78-a2e6-4828-ae9c-4efd4da0116c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5e52d5-e1fc-4e63-b02a-af86df286b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c3ad04-e062-49ee-b9b8-92c44d513626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156bc176-8fd0-4d96-99cd-c11f734d7f8e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cb7dcf-b87d-42e6-a376-d9589ccc2490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8271cf-1089-4255-967d-e6ceb6361ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782531cf-6296-4226-9a79-048a7d08f19b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53d48ca-4dca-46bd-b95a-72558ac76381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61955773-17ad-4e37-b80c-4b039587e448",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44df33dd-c41b-4d27-83f6-c4a7a4fd21b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07df089e-8e44-4d5b-8b50-f5b6b2a96795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458006ae-ed31-45b4-aa2f-5a25f7af8a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b3404e-92eb-42c0-9af3-fa3f6e1418f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb65511-b680-4645-9d75-3b69c5e6c662",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21687c8c-2eab-4370-ae75-735b4dc4431f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c98ed6c-0041-4e98-a954-22b4eb71e5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7510207e-26e7-44bd-8be8-95a338143667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8ae1d8-c945-456b-b8b4-ac93381a494c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a76b86b-bcdf-4865-aa92-585f36b476ca",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ef1020-7513-4fe1-b3a3-d751289de78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873276de-ea5b-4446-b1f8-0221912a0e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d46cb8f-89a6-4662-8b56-48d07b4ac605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6998a82-4e7e-4f30-bb01-5d77678340fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f334a3-6ed1-4ca7-863c-40afedf4fd51",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a357be-f1c3-4aac-9b3b-ed7ca4d6d201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1825668-d6dc-42cb-820b-0ea755720a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b00d3f-17ea-4ba3-8474-53610a1f8d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e09c9d-151c-4e78-bfd4-4594d5709c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2cd3c8-6734-42e0-94fc-d84c8f1009cd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73699ece-b3ca-4ce9-b142-b52828e3c822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce0c33d-b539-4243-b91e-917b48689653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c32f6e2-5f80-417d-85f8-5f98d2b485e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9c860a-6056-4b45-9459-765b398dc137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab2e3f5-c576-44e6-a66e-40cfed756d30",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f2f71f-c7bb-48a5-ae2a-c06a61310e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a75283-bf95-403d-ba2e-ec7c500f682b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12973cb8-e3e1-4267-93f5-9bc8821bd317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0ca718-636b-42c6-9ae6-5166806110a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b383e4f-36b7-459a-83b1-8698e75987b6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a270e98-4086-4373-9eda-2f5baaf9eaf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf6b93b-ba2c-4f7a-babd-a1e43d03025c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083c876e-5324-4471-820b-2b2ea7c87aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99091683-388e-425b-885c-ec79c87301d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ae8033-292c-4bca-b291-4dde39899f76",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71c5284-bb60-4e54-aec0-5269f010da67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1316bcee-ce65-41cb-b761-50398f09cb39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de2bfd3-e10c-4d77-a9e8-adb99c0c007a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a90ee72-f1ed-4284-9794-cbb8a65456d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94d6bcc-49e6-4c38-86da-528d67d7ea84",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef35b44b-9001-44ef-a3c1-3be18fc3d693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdd586b1-6ec7-4fba-9fb0-5bbaa267e3a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0015ff67-f4f3-4b9e-bf2b-b4de133c695a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b839a4-6fd9-4ec5-ab3b-c63b5b82f665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcffe5c4-1def-47df-9ad7-777f2ce247e1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8b4250-9074-4c7a-82c3-ab13426a7a4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b90ec293-030b-4bc8-9121-eb0cb2512d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c10016d-07f4-4026-a2ce-370d0353747f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a8d237-ead7-4a63-a407-e5c6c0fd4a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1ffb0e-7d57-41f8-9874-ab2db09cc990",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8819d945-f11b-442c-abfb-b3a99457a63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95955fd9-2d74-4e48-9c26-1bdf3eadc03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaead54-81dd-4568-8760-ff5fb0ced2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cec531-bf9b-41a0-8f0a-9bf3d343aabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf958918-d482-49c6-8a20-4845bced0a2a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b5604c-cc5f-4e63-ae5c-dfaea94ba263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "926b0577-b1ed-4d94-869e-e751597a7b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec45327d-4e3c-4b4f-bede-213c24eee048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d962232c-1d78-4609-b59b-5bde40b49e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646327fb-ead0-424a-b1d7-5d92d21662b2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8053a05-c8a8-4476-a8ac-35fff2440787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "155a908a-4991-42e4-a270-10ce3d45030a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02abff43-7846-41d6-a415-5c72a10d7bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ec2b5f-5852-4dc3-a45c-4f3b9cf4d472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e50af73-ce0e-4bf6-8622-0539ff32fb32",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb0e8d5-f441-4885-98a2-d2e1e7184a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3e80eb-cd32-47c7-ac2e-cbeee08245fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def76521-af9f-471e-9f89-a8272dc37fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cd53f2-ed2a-4afe-b23e-80a7e555a314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c5b50b-dc8e-408c-96ca-a28dd196394c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1ba9c2-3af3-4c55-8de6-6c6237415660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69d38417-ec23-4869-b4fb-b83341948b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74e3d02-9835-4314-8c9f-ad5b481f7841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef939c7-0144-4d77-b1a2-e571d792229e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fab7dc-323d-421e-b45d-20c840f8d029",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962fcc42-b162-4017-8726-0b311d31f02a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2cf1b5-e506-4d35-b6ba-4713d0b59495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "074e43ef-d38f-4e61-a707-e49c20aeab38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2990d031-e7a7-42f9-9c59-a0ac5667cc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01d69f1-b449-47c3-acc9-0111122754db",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdb4e12-edfb-4bd2-b419-e9319b201676",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca5604d2-1a10-42f8-8ffe-a2a23faf766b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6d7936-88dd-469b-b020-baff775be1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d4a2c2-2549-4a04-9696-6e272797a4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a20486-7f40-452b-bb56-744a26365633",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59f2586-19ec-4442-a939-218ccf35bf1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c6105c-99d9-47de-8957-49eec7635158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef309a5-98b1-4a16-a993-8b4acd547d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb27c547-7a49-46da-8d83-afacfac4b869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c116ab74-67ab-4c86-8e0d-fae679a8ce2d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ee4169-99bb-45ff-b567-22f4f40a969c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3878f70-9fb6-4ce3-8787-0969366a3c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b035dd-e5dd-4ac6-9fa8-f4c6cca74dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0c1ac9-bdd5-4184-a67f-247069908e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392958fa-5f21-49fa-bf53-8665d91112f4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c5d715-b8b5-45c5-89bf-5ec8859a6a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e70eb7-3e76-4435-8643-55b3681c8071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c23197b-1aaf-40c6-8fb3-865bb722db0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e988f2-acb9-4b47-b3cf-fd4b7e4c4ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c21e415-0c43-4593-a9b0-85e0626b920c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786e6c35-f4e2-41e7-91ee-bd00a7a470a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47bb7d4-5615-4101-99b0-a24aee3f8b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2e22f9-91de-43ca-8698-dc53b4f41f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576a9ed4-ef6f-4b11-a594-19afa666e969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9995e96-89d2-43af-8912-63097f6dc4ae",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00993d98-1fd9-4a6f-8119-947266cce087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fa0310-e2a9-4bce-ad5c-3e3c03f2c13a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943fff08-f9f2-48bd-9a8c-85ec7e4fb86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24987522-bb75-46f8-9211-f0a2f29cb4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5619fd24-8e93-4a8e-98ef-c3215a6f05c9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2e8677-ec7a-4c75-8e45-7a5cc86639a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30f2299-1e9e-4f51-815c-0d9e01701b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "febfd9b8-6a7e-4e66-b77e-ff8e27d4cf1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bec88e-9c78-4508-886f-11a4f7682c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6c5788-349b-40ba-b009-667ed7a315e7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85a2cc8-8c02-4304-80ea-58cd42cbcd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675bdd74-6eeb-4798-9776-5f25547a0bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1b09d1-97a2-446f-9881-8714fe4240db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76c2a01-38c5-4ea1-82e1-ab662b4c48c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bbc14f-b73b-4aca-9022-efd4e2aba538",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4eee05-a955-446c-a196-4cd83d995e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b158881c-16df-434a-b4e8-46f4dfe51fd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a71f27-a94d-4136-bd58-f11d24aa0c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5492c4de-9c60-4e90-b5cd-ad438ccdfa3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54585d1-8f0a-42e0-b5dd-59e5331480db",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a22478-41e3-4f80-8c20-2a13da414937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8657df95-accf-4a8e-a11b-26e532689f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f98b54-938c-41db-99ff-bc2f3b379824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12739f7a-a739-4029-8859-8bbf08f4e37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81498baf-7271-4ae8-8413-5f129951920a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132e8c43-7364-4aaf-a0d6-ce9987aae008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fdb10bc-2c31-4fe3-b829-eeee7df45f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bf39bd-9310-47ab-ab22-4d8b9d4cc196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab2b516-cbcd-437b-aa55-1c57532bddf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5429c9d5-59a1-4afd-9032-aec5bbc16d87",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9134ad-24ae-4106-a1d0-bcfe132cfdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d69046-0157-4e3d-9bb9-727318c211a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcea469-06cb-4029-b8c8-060c27e91d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b5d526-d6d8-4ab5-af72-4e80ca117f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79721d09-d303-4b6f-9a69-f6b2eafaefd1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9446cf43-ec61-4bef-ace9-372e978da455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6f4425-95a0-48ae-972f-63f774d17557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100cb793-d423-445f-a293-39f21cdb119b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023ccb69-0d53-4368-b1ec-34000987f40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a13124-6518-4250-8016-98ad3979b545",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7d5b65-95fa-4a13-92c3-ed58aebb6df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec793d5-6e56-4666-93d7-23e95210c0ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5ee120-5e0c-4a83-aeee-606d67008f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cce600b-004f-485d-845d-23ba580bc945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e8a893-9681-4fcd-81af-598651665916",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ee8ea8-a6cf-4d8d-8703-e247b79b148c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846637d5-2469-416f-a01b-d70bd638b460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1b8d01-fec5-4614-977e-baf6938306ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c984be1-9778-4701-b4ca-5baec2a3899a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f7bb90-0d5f-47b0-ae60-96f6e92e985c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b09cd54-41f6-4919-b06c-26b0dbdb668c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671a1929-eff6-4ce5-8b67-7096b53e8feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30490cb8-91f2-4d38-bd4a-43cb452858fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38acfe4f-5eff-4209-9917-3b0617158b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b60668f-da6d-465d-8f8f-80a1c33a6aab",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b184f01c-3ffa-41f4-9752-74cf28472529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4718cc1-ee3a-4c90-9e44-518d6d51c310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485f05e1-e43d-43d5-b607-12fa837638a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd160e3-20c9-467c-af74-454bf98609ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a2f5b5-9064-4128-8f1d-0373e7d7a333",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696c3a85-1e64-4b09-b427-30aa2444d973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48b5365-9070-4401-a835-ebc60d2a905f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e6e829-d5cf-40aa-9686-d0236acf6173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe474094-40f2-4f4c-860f-ff5e1183fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bdde0d-7d64-48c5-90ee-1807d2cdc5ba",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3cd4bf-1cbf-48ad-b6c5-4423a4a0abaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c6428c-4ff2-422f-a985-e17e05bfb9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559f72f5-3b40-409a-a425-4f1ea61d8143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c339d2-a13b-44fe-841c-85749800b3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c591c54-6f0d-4f8e-a2f1-b01eda09163a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9908a47-1083-4187-b379-6bc3b7f899d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a172f5c8-11d6-4f11-9b17-db52ae3f4c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d90a282-1387-4423-9786-2b2ddb5f97d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5a6e65-ce89-4b07-94e0-2675a4b881c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540c07be-2650-4c1f-a144-0c01a24b5443",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502adb51-f5dc-425f-8ebd-c508cd64cd49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c63c86e-4622-43c6-9150-886b435459e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef0550b-33e9-43a6-bfd4-bd084ab2f08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa31b0b0-92c1-44ca-86bc-35adc7a6e2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5db62f5-9c49-414b-842c-2f94a3d3aac4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829170da-9cc6-4f91-8571-6c33b589762d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bf0022-967d-4bd5-bd47-f0789c255307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "442ab552-4467-494d-b2f7-7791acc585a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8dd5ca-a326-4159-a2d0-66ccfe453ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02018cbe-6ee5-4425-992a-95400fc706d7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe09e213-4f74-4ac5-9d24-5f8739c47f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74950f06-1d23-4466-a6ba-553bc036f494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0ac785-adc1-40e1-bb65-148e49886192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be6bbd7-6393-4f06-b91a-42a72751ab7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd387aa3-cac0-4257-8f06-1e400b424b40",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79259820-fdca-4ee1-89f6-c9fc7d056e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efe351e-d748-4288-aa3b-bff22bd3e3c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bafbae-84f4-4a49-99df-0b65de75e0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271e72cf-4f87-469a-9a2b-0d7652c78c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755e72d2-9d54-41d2-9a66-5a0da7464db8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48355b8f-d484-4300-b3a5-5551a1a97585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d7381a-0e7d-49a6-a3e5-b2ce86da4e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1147b8d7-aead-409f-a51b-b380913624f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc14bb91-ca30-460e-af53-f132712c3578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9c7502-7289-49f5-80f7-5e2f3d848c9a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c79322-f7bf-4809-b1e9-57dcc7adc989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7641914-7b0d-443c-82b8-52dcf1e0b829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b224c590-9f7a-4892-bae6-6e6418900b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144a3028-b75e-4cef-b908-abcb81d4d2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927dd6f2-b94e-4345-bb8f-1d3b3d2c590c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762be844-d8ee-493a-9bcb-6777db66c800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d4d3e2-9446-4a52-a0c0-4a9c5fa4929e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff588e7-7b26-4307-9c0d-864e343ff41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04c928b-63dd-41b0-bd0c-cd39e319cd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd283e87-0064-4fbe-9c45-37bbf6dd95a3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6de6bd-ef29-411b-aa7e-4cd21817d38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6962da-a479-4bfe-9946-cc72de816a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddda201-dcba-4f62-8007-00eb64198533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e927efc-1161-4f79-b914-9e86a983c716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18cbd79-e55a-4295-bb25-e47be089cdfc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8445af5-f690-4f96-a422-41613ea3a076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c3a9d0-f2eb-47b8-a43a-d5ad4017993b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622b4e42-7906-4a79-9dcb-a0950c1e0d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25a0b61-e7d8-46ea-b5ce-f98bc4b996dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c599df23-c6fc-4524-9377-9a180a5b69cc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54621b97-ddba-4e3f-84c0-e279d4835d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68b5d1b-8996-4afe-ad33-e3eee5740f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33643a5e-a7a2-4032-92f5-0ca07583373c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb4a911-1a46-4846-82b3-0b841df1be10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65923170-15b6-41a9-ad5b-af487990a637",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747583b5-10df-4e86-8ee5-f04ab57ca22b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f90a402-6f41-4c5a-96f2-fdf69be19363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073336f0-3f5a-411a-bb54-99fbfd9289ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78806730-b10f-4a02-a476-a86d66cc97e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f877ed-c925-47b7-9932-2bdb9fe2e5b7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9043a7e-fe23-4927-b80e-512e2c0d27dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16bddd59-7de6-4189-8e37-75773f6f2e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979dc474-bf1b-4d21-8e9e-6c944ee501d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e637e0f-57e1-4713-bdef-854d498d9a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea28977-7504-48d7-b596-50a8a0527951",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178c4ea6-8e68-4396-a179-1271c3bc428b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b900107-fca0-478a-b214-0bbd83fb44df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a738c3-f255-4739-b2d2-9ec52e24c93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7991419f-38d8-45c1-8862-f3536c3a2b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e5b5ac-23d6-44ad-b922-a42b00dbfd0a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650e8ec7-8cf1-413e-a418-1cf38be23307",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84a61cad-9b83-48f1-a778-4c381065e4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0912aa-6bd7-4558-9581-bf9bd7309f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5809900b-9774-4970-bbb8-ab8ef26fa195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87b48df-a488-49cd-bf59-8dd1e42b8294",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585b912a-3e23-4c45-96ab-6035b72cae44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c17b15df-a0b2-4838-ae3b-928e48dec182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cda003-839c-46b8-9ea1-e47981efb7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea80a840-04b3-4306-84a2-26d26a459669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a000ee-f2ba-45a8-8909-e6aeeef424bd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250a5218-2470-4ee7-8a9e-246bfbc2f1a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70a577a0-6693-4203-af75-d17d1298ed56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9422036-44e3-459a-a4cb-9d342cc4b179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa609b8d-b459-4104-8872-b51fd36b7e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb997f9-2938-4a30-b7a7-31c7a6b7512b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3362594-3be3-4312-a16a-bb0c304feb91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afede930-58dd-499f-8cbe-2bee1125fe55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74210ec1-6b48-4b0c-ae68-084c2216d04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1721ec-58e3-41ed-86da-4985809abe3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a223cf2-c9fa-458e-83bd-ee8acd6c0b12",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54650ab-50c4-434f-9526-ce4b3eaef216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f70eb01b-7aa1-4ad2-9279-a73b07a0204f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aebb53-13cd-4cbd-8247-8910dd11471c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e93e2c-1b81-4a26-ae07-ca8bb92abe5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cde6d4d-1138-43d8-bc21-22ee7cdaaad9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc373af2-fc12-4b88-abbc-3362f54d89c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d3dcc6-c8e1-4da4-b52a-1b4916a738fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6026228d-29d5-4ffa-865e-9de5d0e4a12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9cb69e3-cdf4-49ed-afa4-de17f4e0892e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210d1320-53e4-4839-ab21-80472a045795",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8538ab-2e6a-487b-9370-d4aa8ca26ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "926a345a-d7b8-4d43-877c-83fa76267d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7f3e33-0af4-45a9-b746-6270b8cdc7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544c1c67-bf66-4319-a96b-a00e8d84ac03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b65ba3f-78cd-4154-a209-b93b2c30fb42",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfad4f6-331f-4c05-a546-d292ba339f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54cc22a0-81d2-4842-bc73-48f88cdd3ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b152288-4254-48bc-b090-a900caec154f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31007913-f717-4e71-a670-c2ac7e2b7b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12b91fd-118a-43d7-ad0e-75b05cc30696",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d7390d-3767-436c-9819-70674ed7a431",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef49d38-7980-4752-9e94-1f8fd9837f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56f0b40-183c-4c03-8b6b-cb4475ae4005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189f8468-cff3-4f8e-a49b-9d9791dcca17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d885d6b7-8404-4306-82e4-bb59c1df0c73",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ff60f7-cb78-487a-a638-9e2c4087817e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed297e8-341f-49a5-8ca6-484490191b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a0c9b6-9232-4348-b876-9722e3748fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25a950e-e1b4-4ae8-85a1-a90c01e9b047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f86552e-98e4-4132-8982-8f23f84a0311",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292068a0-a5f6-46a1-bbc9-5cc43d467065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e52e75-d8e5-43ac-8c28-3a9c62799ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5562ca95-3785-437f-927e-62b8734b3d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce80d740-9170-4d0f-a75a-6626af28e51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdb26ff-4ec4-492b-ac26-f8ef949dce7c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ba1ebd-5cc7-451c-b5b0-f6c1cbaf40f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4cfb99a-810f-4541-97c7-b1b3fa4200e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c31d555-a4bc-41ae-85b1-8c7eb6a7b673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba02c01-fc88-481e-980c-e61997e6a566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9bcd7b-494d-4ebd-8b63-14e8f2aa4f1a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5977e284-a896-450b-b502-f664961c8ada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68b886b7-8cd4-4a00-9c2f-68ad89dbf53f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da1ff05-f540-4ea0-9b9d-eb2e18bef9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1f91a4-6e3c-4b53-9056-5ee6b73ebaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823a17e6-3296-40cd-ae2b-112ee26f3308",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5245d9-8fd7-4975-8e08-c4fe26fa44c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8d31f2-bc5d-49eb-a996-fe545d200d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bd2a95-afc3-403d-b95e-e3f72b9c2b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70652f3c-5bb8-4742-be2d-ddeed3177cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55943751-2a10-4f11-b8fa-1a59f9169e63",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a4647d-4f5e-40ff-a952-91ef5b07a3c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e6bf82-506c-4fb4-ade0-d2cab53f4013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ceb8a1-95f6-4659-a2df-badd8bc74253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5a65c2-3707-48c1-922d-09c6c5dd3222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733465f2-777c-4d37-a2f4-18061d16b2a5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44229058-049d-4d8f-9702-a30e7fe89201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39c8aab7-537e-4deb-af44-5657539428b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfe6ef2-e5c1-411f-88ed-71f1bd8478b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f932d926-222e-42ac-9bf9-e7bc42843048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b53b41-82df-4f54-963c-8314468838aa",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f2f7b2-d9d4-4200-ae1c-70b298f177be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb62cf4-2b1b-4e3a-8f55-9c1e27330c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eb14ad-dc3b-4d71-8c2e-79869edb364c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fcba281-01f2-4b1b-9f4a-2143007011de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bedf831-7290-46c9-81e0-ef8e191055ea",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84074673-6400-42e0-b134-367d556a6308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1678289-102e-4d44-921d-d5840d3e123d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c2d9bb-9feb-4a73-b433-403728abcdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bcd519-ea18-48f9-bf4f-e2d6b67b664c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216248f1-4bd0-4388-aa72-9cf49e9614f8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de31f4cd-5804-47ea-ad6c-e4a234931569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a647f858-7fd0-4835-8051-99502f4759e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407cc3e1-c868-4e4c-844e-0cf519f4396f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006b0b75-89b9-44dd-bc41-103b2a3c84ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50975c61-3878-4483-989e-bcae26b06821",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fd6c4d-ffa2-4dd0-9b74-99e8ac053a25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c97aee96-76d2-4092-a611-c1d271b67f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2f11c4-76c8-40b9-a6a9-5043790f1e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472d5ca5-c8d9-48c7-ac87-13080f525727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b52b86b-fc34-43a0-b3ea-a341ea344409",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240310e6-f379-4a2a-af80-9b082b3d5f3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df42ea7-0b06-4310-98ac-628f8aaf6045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb1fcb3-c214-4faa-8bfb-4eca397268ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e33a935-aff1-49b5-9ab6-25077e30f2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97636d5c-b349-4401-ac81-9a0b1625dbb7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6299ef7-a978-4451-8492-ef76836b4b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804ff0e1-427d-4877-bf9c-b75a4c6e1e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8759493-1024-4c6e-847e-96d537c385eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c17ef38-719a-4954-8ead-1d8a32b8b51a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e403b05a-20f5-4c51-a67e-a4e91dd9adb2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38544d7-aa84-438f-b4ee-8a241cae1f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d0ae75a-a297-4bb6-83f6-6db355d14b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90523c4-6825-47a3-9cc8-a76d734f1104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81eb94a4-adf1-4537-97b5-c99831f0487b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5415ecf5-517b-44f5-8e99-be467a6bc54a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80fe592-401c-4774-9ee6-b81a8b6906d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bd951e3-e389-4e29-9830-ebe60b28e4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879ffd90-cdc5-49b4-bad7-dda834468a55",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f4db31-e303-4ca6-8664-c71d54e7d201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fbeda5-c052-4bc2-829d-22cfaf1f285c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efb04eb-7976-4dc9-9845-43b0a9af2ece",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b02dde-3ad9-4861-9b93-771ce749c8e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402b1c1c-fe77-4e96-8e19-7fc23b57a8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6481394-e77d-45ae-a013-47e24b5ed90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f086c4d6-4c96-4f32-a9a6-c2b6081bda19",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d73228a-8535-49ed-9f06-4ff65f4e98b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52c0a41-71b8-4ac6-a4be-147bb8916c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7513ff25-b8b8-49de-b832-ddf8e77cc9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8389fd03-37c0-4d58-ac07-accf0988125a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a67419-df5d-476f-94b7-213966c66f3b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e462291-8255-44c4-a93b-2ea7f7d50b8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4db32a09-3261-4d51-bc61-683b2eeb156e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24636938-21ce-45dc-8b44-b09bd54699be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15060d7-0183-409a-90a0-9b1596c6fb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b327a1bb-14c3-4c22-bfa8-7a3e949936bb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18a5a53-8e3c-4358-b437-7834a4aff562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec13afdb-54c8-40bd-93a4-62af274c0962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e147f4-1a8c-4ccd-ace8-bf48059e9237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9116558-b7fa-434c-914f-aebbdb2fd147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee988391-fc96-4082-9239-5dda5b6dccb1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3784420a-217b-4687-946c-7cad3ac6cf4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ef30272-285c-4f3c-ad48-01aca2020ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166c9db4-4183-41c9-8457-f30949e60897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb8fa07-bae7-4ce1-aa01-9cf64517da8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdb18e2-ad76-4bad-9adb-668d52dce99a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1527e69f-83a6-47fd-9d5e-a3b0ad48f9e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26398734-3e1d-45ba-a61a-3513d8305a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08872705-5694-438f-94af-df1e89761d8f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b47c20d-332b-4369-8095-65924cfc986a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf54f28-e3b6-44fe-8eba-dfa379990204",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310e64c2-db84-4760-b927-3a7186c11612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18093fc-9c1e-4920-9eb7-66db39432717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd314f76-99a9-4509-81d4-90813d35555f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1b00bb-ccc3-485c-b0e9-16030656422c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "056a5096-491f-41e2-8d22-3b6bcd410c51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e971d1d9-ef0f-4ed4-9480-ec704b5e0960"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb1580b5-662c-43ab-adf7-5517aeffad59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a53c2759-3fc2-4e22-b10b-a0fd0a248c17"
                    }
                  }
                ]
              },
              {
                "id": "fbeb2e5e-e317-4d37-82de-41d29dac2725",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87bcb7ee-5576-461b-bcab-06b6bc09daf3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e499d564-8d72-4415-9275-bb1820a62ca2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "40b0d2c7-83d8-44aa-8250-bbbfcd6ae8b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f88ac33-1c84-49b1-afd5-74ee6ce0f971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ded35e50-bf61-4d13-a1a4-d230486b0d23"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3d232b0-d77b-4d84-9952-969d0634a928",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11c7eaec-9a8a-4d54-8cfd-3b3ed00f9860"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f898520-fe19-41db-9cc4-bc8eb4de4ef6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc59546f-830c-4f12-b6cc-88e80a69b7ea"
                    }
                  }
                ]
              },
              {
                "id": "81717b80-17d4-48f7-a600-93ef551d1024",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "266398a6-42a0-4a6c-90fd-a80cdfd24306",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6ba8d4-83c2-4de3-a6e6-ff900319f053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a519c310-45e5-40cf-96f9-fb6b1f031240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45a6ae6-cac0-4269-a021-f07642ae864a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7256c30f-b6ba-43ee-b7a1-57a79f09006c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9def018e-c3e5-406b-a19b-e0bc14b2e979",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d01631f-d0bf-49c8-afca-17bebe4e6b69",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64fd28b4-ebdc-47ce-a5ce-d18e1784b613",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ab512274-308e-4f9e-a1dc-103dda8011f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9d9bafb-79e6-478e-9e45-e25e6b649b07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca3b7dd7-41a2-401c-ace4-48243d0b9dc8"
                    }
                  }
                ]
              },
              {
                "id": "7b3e9008-cff8-42c2-b21d-f61098dfc33c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36e9c7bc-8a22-4f43-9bf9-b1c432a55e3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9e02e063-7c97-4453-88c0-70b0f53268c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bc39ee5-3e50-426f-98b5-f0fc4083066e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c8b9fcd-ea2a-44c6-b627-462b7a4eedca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "008bd8bd-7f82-499b-b04d-051b35890bef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e4b63301-7faa-4e53-a848-187a89890554"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2e6babe-8204-4eb8-9004-e2cea9397590",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "224d7702-1fe0-42d3-951b-4c271e84c974"
            }
          }
        ]
      },
      {
        "id": "95c42982-2ee6-4988-a497-a2cacac593da",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9ffad4d3-b5fe-4604-a474-07ebe974dc0e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcddf1f5-a087-4212-9d72-74282a2d3768",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ceca8ae0-8468-48c1-bd30-e1dd7b321101",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0299669c-5024-4d62-86f6-13095c5e19c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ef66d7cb-2a0a-4cb4-ad35-0347d60199c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0664d8dc-475f-47ca-9dc7-fcfc28d0f313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8630ce1c-f07c-406d-bddb-615f6a8e581c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96e055e2-abbc-405a-952b-a237ba8ce201",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10a631e5-e705-47df-a9c0-2558293c497d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41a48bb1-f063-47f6-a87b-24632b7db4bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf0523be-998c-4fbe-a242-c63efbcd89d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70af01c9-700a-4f4b-b57f-da5d1004a337",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "57687d43-399a-47c6-96c9-aea384c9d332"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5355db4c-154b-4d25-833e-71be040ab7f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d9cb009-90f3-4501-bf90-812e5dbc3a53"
            }
          }
        ]
      },
      {
        "id": "aa78f2fe-5202-426e-8763-60b60778b3be",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f423d5d4-e12e-4fe3-bb39-d032097a1611",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9829f075-8587-4ab2-ab31-fc9188d3c5f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "793dfca9-4d8d-4373-a5d8-0d0aba5b756d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655f0d98-cc8a-4ec9-bd83-d3e479c820da",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bf05de1-0944-476c-8600-2b562bba2468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969e50a1-6b5c-40a7-b8df-69a16946d53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ce54dac-5f43-47ea-adfc-412cca7f25f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf146641-8cc2-4d0d-8160-134232e578e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a71184c-660c-4a6a-9554-9800c57490e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ebc8111-161b-4c79-9fb7-a102ea09f0fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5419bab0-a26b-429d-81a3-0480a7ba5999"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77e47bf3-3ee3-4662-b936-7919ee6f1a48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "491f8f2c-766c-47c8-876e-081ee2b97146"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43e5e0dc-3fea-46be-a25e-71d8e8f393c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4ccf3ff-af9a-4029-8fe4-a23a03e15394"
            }
          }
        ]
      },
      {
        "id": "4af2114c-9c81-4bad-8242-d76dabfd5207",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "84e6cd4e-e5c4-41ad-b516-f2215bb0385f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66edc372-0b9d-4f72-aca0-dd8b3e6dcf31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f2f630f-6fda-422e-beda-047074324b46",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff3a91d-c797-4f34-bef9-37bb373f3b0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f864f07-2689-4220-be57-7ec62edcf052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f7d122-d89a-4214-8995-e85b138b57e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5401b413-0530-45ba-8623-733de31363ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30c323a1-aebc-44ec-8628-7dfe3a04bf51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d97d369-5052-4a08-b0e5-e2e12464c632"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "068e94e8-035a-423a-8724-1deb044dd22c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a72d1ce-bdf1-4004-9a77-1b27a869c04f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf0d9a5d-4c11-43fe-9da6-3da1abddafd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2441a084-0162-4612-a114-f210d6671262"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb2711cd-3408-4c7b-a4a8-b8ddd50640c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d1cfd1a-9423-46d2-b77f-2a5c70f8547a"
            }
          }
        ]
      },
      {
        "id": "b367de9b-10a8-44fd-9a32-5256d63b2cbf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4707ab9-bb68-4f47-b4d7-e63484719b00",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77d1ca64-b5bc-453a-a585-28dd004568d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c01b57f4-f046-40ca-880f-c3a9534522d9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae9d33d6-629f-474d-be5f-340d25d2d83b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "497b5cdc-441e-4197-bb50-a080bd758592",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 356.9512195121953,
      "responseMin": 9,
      "responseMax": 13601,
      "responseSd": 1242.9579187825962,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687049204050,
      "completed": 1687049304538
    },
    "executions": [
      {
        "id": "0e4e1aa4-a867-4200-a550-1836a4f19afd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c4a7a8b7-b1cd-45d3-90b9-be64bc995635",
          "httpRequestId": "85faed0b-71a6-4000-b30c-a9c54d911c56"
        },
        "item": {
          "id": "0e4e1aa4-a867-4200-a550-1836a4f19afd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "186173fa-d34d-4fe4-abbc-581dfccdd02b",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "648adb9e-8564-4fe9-b3d6-ff539973584c",
        "cursor": {
          "ref": "951f2037-bfea-4e37-b119-a73d898a71b1",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1da5a258-eb41-40fc-bd63-f264018eb77c"
        },
        "item": {
          "id": "648adb9e-8564-4fe9-b3d6-ff539973584c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3e792cdc-429b-4d1b-97b9-f46fca3a3885",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "e739510f-5f71-4fd4-a4cc-5e9d03851750",
        "cursor": {
          "ref": "fa706ebe-cb3f-44cf-9171-fa7ef5827e7d",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "11ad611c-3c75-4726-b920-2496f7ee1f03"
        },
        "item": {
          "id": "e739510f-5f71-4fd4-a4cc-5e9d03851750",
          "name": "did_json"
        },
        "response": {
          "id": "35ba2aae-5485-4a7b-824a-ef351b4174a0",
          "status": "OK",
          "code": 200,
          "responseTime": 635,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43736e93-0406-4c94-862b-103c551ff949",
        "cursor": {
          "ref": "432cc66a-4fcd-4c66-9ca3-4bd7f61d559d",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f47100fa-f150-40ea-a8e8-6945257123a7"
        },
        "item": {
          "id": "43736e93-0406-4c94-862b-103c551ff949",
          "name": "did:invalid"
        },
        "response": {
          "id": "1521693e-d425-4256-9e52-8dfea8a45a70",
          "status": "Not Found",
          "code": 404,
          "responseTime": 834,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "43736e93-0406-4c94-862b-103c551ff949",
        "cursor": {
          "ref": "432cc66a-4fcd-4c66-9ca3-4bd7f61d559d",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f47100fa-f150-40ea-a8e8-6945257123a7"
        },
        "item": {
          "id": "43736e93-0406-4c94-862b-103c551ff949",
          "name": "did:invalid"
        },
        "response": {
          "id": "1521693e-d425-4256-9e52-8dfea8a45a70",
          "status": "Not Found",
          "code": 404,
          "responseTime": 834,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ed1ca490-d3c2-42a4-b42f-7aa2eda761d3",
        "cursor": {
          "ref": "04b20917-9494-4199-a6d1-13a97239541c",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2612e30b-b3a9-4408-a0b0-8dc0c30dea94"
        },
        "item": {
          "id": "ed1ca490-d3c2-42a4-b42f-7aa2eda761d3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d49e927e-0e90-4246-840c-90d27fc0968d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2b9b6d-b795-4cae-8917-daedeba75eed",
        "cursor": {
          "ref": "07ac0268-0f7b-4032-9aaa-4008950b9a19",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "442509cd-0289-47d9-8e2e-06d84727bca8"
        },
        "item": {
          "id": "9f2b9b6d-b795-4cae-8917-daedeba75eed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "66a89f85-ae6a-4bc5-adc5-016c15f681f0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cede8d0a-7451-484e-8c4f-989453bd152e",
        "cursor": {
          "ref": "82a92b47-0f70-4e1c-8674-7bfc6ea8561d",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "623c1d93-5375-494b-bb58-e64844731c6a"
        },
        "item": {
          "id": "cede8d0a-7451-484e-8c4f-989453bd152e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c3948aae-fd84-4c9c-ab3a-7c3ad7573f3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "96f1352f-935c-435a-b323-60457b39f804",
        "cursor": {
          "ref": "5b6c3bd4-823f-499b-8bcf-112b989ff6cd",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7413928f-531d-4d7e-822e-158a1387d58d"
        },
        "item": {
          "id": "96f1352f-935c-435a-b323-60457b39f804",
          "name": "identifiers"
        },
        "response": {
          "id": "d21766ef-c0d8-4953-aa91-4db01f1269d7",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d595ba-c0b3-4ffc-a364-1004a9cb3d19",
        "cursor": {
          "ref": "8234893f-08af-4eed-96c5-454fe3750752",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a07a56f6-d8e4-4ba3-a11f-8441a2ef4f06"
        },
        "item": {
          "id": "94d595ba-c0b3-4ffc-a364-1004a9cb3d19",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "53e9c098-f76b-4dcd-b029-4b2d41974e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058e826d-86ce-4fa5-b94f-33c48d275623",
        "cursor": {
          "ref": "8307ab6b-40ba-410f-adf1-948a069e76cd",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5a636c20-0ec8-4c2b-a426-c4d16ff1b395"
        },
        "item": {
          "id": "058e826d-86ce-4fa5-b94f-33c48d275623",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d231e424-dbaa-4b67-9b4f-6f57aa22e108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123277df-a5a4-42e7-abe2-852f78754352",
        "cursor": {
          "ref": "5150060d-c732-4fa7-a89d-96549dce56b4",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "57b364f2-f6f1-4b2b-afd2-999272e89e2c"
        },
        "item": {
          "id": "123277df-a5a4-42e7-abe2-852f78754352",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eec3786f-977d-4642-be76-38d1a54c6ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557f5eb1-8cb3-4c8d-87e2-71de8174e2c2",
        "cursor": {
          "ref": "50dc33b1-9824-4c11-b42c-787fd96b8fd0",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec995915-967f-446f-87c2-fdd811b0e983"
        },
        "item": {
          "id": "557f5eb1-8cb3-4c8d-87e2-71de8174e2c2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e3356f78-45ba-4ee0-8133-b3ae6eb7566a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c5e749-d61d-48c1-9edd-690ade0b9cc8",
        "cursor": {
          "ref": "27db3b1e-ddbd-4d97-b739-db85164f0ed1",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bd3a75eb-2e0e-47bd-9be8-cc1e84b7fd0e"
        },
        "item": {
          "id": "e1c5e749-d61d-48c1-9edd-690ade0b9cc8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "71eff7c9-b75e-401d-9a2c-be172664703e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06bcc11-2c8c-4d35-9680-c31c3b0a6e87",
        "cursor": {
          "ref": "7c3d1d86-7cae-49ea-996a-0ab7586a68d0",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "96e13e42-534c-41dd-aba9-6f596f25e3ba"
        },
        "item": {
          "id": "f06bcc11-2c8c-4d35-9680-c31c3b0a6e87",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2d10fe7c-e65f-4ed8-a2ef-55ba5c54a341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81627d4e-b1f7-4d62-b856-7f666dd5f5f7",
        "cursor": {
          "ref": "db718bab-9319-4d04-b3bb-e9e13f195c6a",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a8904ff6-eefe-4b17-9199-fec503bb632a"
        },
        "item": {
          "id": "81627d4e-b1f7-4d62-b856-7f666dd5f5f7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "97511eff-b774-45cb-b0ac-4337edcaffb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385d8f81-7393-4d02-831c-587d391fd1ab",
        "cursor": {
          "ref": "0ea96b72-4d17-4753-8ced-37c49d8a447a",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d2a95a02-a8ca-4344-b9a5-1177d97effe1"
        },
        "item": {
          "id": "385d8f81-7393-4d02-831c-587d391fd1ab",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4a29525a-9cd7-47ae-a761-12e34f2889e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed823ac0-123b-4df3-bffc-2397b864f6cb",
        "cursor": {
          "ref": "c3e4f97a-99cb-4b8e-99b6-1298e0b05876",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c912eb74-d10a-4d47-8736-01726bb5de1b"
        },
        "item": {
          "id": "ed823ac0-123b-4df3-bffc-2397b864f6cb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fec85e19-c3b6-4e4c-8704-e60e028e6393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090c7c2f-ce9d-45e8-a68a-eb2616017c32",
        "cursor": {
          "ref": "3336dc07-7cb6-4585-9bab-477fae3558eb",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2ccf3558-e7f4-4501-bc51-c30e2c14446d"
        },
        "item": {
          "id": "090c7c2f-ce9d-45e8-a68a-eb2616017c32",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2f7de030-a493-4f30-a3dc-3e5d735216d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85adaee7-ce10-4a9d-8d61-1f465ec1b54b",
        "cursor": {
          "ref": "944522df-5bd7-4421-a49b-9d3890bc1fd7",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8ed6c4fc-34a2-481e-8d2d-e4aba395414c"
        },
        "item": {
          "id": "85adaee7-ce10-4a9d-8d61-1f465ec1b54b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "626ffdee-e001-4409-8e34-f1d093c1bb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8578591-8f44-4e30-8f4a-63cce1db3e74",
        "cursor": {
          "ref": "bf1ae664-2d1f-46ae-a812-5ec751c7110b",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2d670f3c-e927-4f7f-b916-1cabd87c348e"
        },
        "item": {
          "id": "d8578591-8f44-4e30-8f4a-63cce1db3e74",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a89b33b5-d017-451a-80df-daa99504ea75",
          "status": "Created",
          "code": 201,
          "responseTime": 3993,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c5da65dc-ed57-46e7-9fcd-62990a5ca88b",
        "cursor": {
          "ref": "284edf6e-90a9-4638-a4a9-d01dec035613",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f296b0aa-7f42-461d-a034-557f800b693a"
        },
        "item": {
          "id": "c5da65dc-ed57-46e7-9fcd-62990a5ca88b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a684d2d3-6653-4c01-9de2-9e548520e914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06aadad-9db8-4da1-be91-b42cbb9e826f",
        "cursor": {
          "ref": "ca470a3a-a070-4c8d-bd6f-2eefbbff4762",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "83a5f756-7395-4b74-be47-5b2f2971294d"
        },
        "item": {
          "id": "d06aadad-9db8-4da1-be91-b42cbb9e826f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ebf0dc40-a728-4891-b668-e9d1b14c7f8f",
          "status": "Created",
          "code": 201,
          "responseTime": 13601,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "3254b226-58d9-437d-902c-50e3776b2f2d",
        "cursor": {
          "ref": "fba104f8-9287-4468-9609-371cab37c8a3",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "57403cd5-2352-41cb-81dd-c4419ce92edd"
        },
        "item": {
          "id": "3254b226-58d9-437d-902c-50e3776b2f2d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b65ab898-4270-4a91-b820-09186c03ff7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e99c5e5-158a-43bb-95b0-dd48dc74d2f5",
        "cursor": {
          "ref": "1dd6f69f-4f53-4e38-8b4b-b54efa151ea2",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a4895079-bad3-4186-9580-580b71d74bc6"
        },
        "item": {
          "id": "1e99c5e5-158a-43bb-95b0-dd48dc74d2f5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f013a676-0ff4-445e-99a8-42039a0a8c9b",
          "status": "Created",
          "code": 201,
          "responseTime": 6312,
          "responseSize": 968
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "eaca328b-b0f0-4735-ba3e-124499af7dee",
        "cursor": {
          "ref": "2c6bd03f-c7d0-4a70-9c65-814e4b54de4a",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ebd5c95c-cd85-4cb5-905c-7ce9f61654be"
        },
        "item": {
          "id": "eaca328b-b0f0-4735-ba3e-124499af7dee",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "16aaf886-2b96-41d8-a4da-b1a55e8092f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601a56e3-8ee5-49be-a937-d8d3a3d696b9",
        "cursor": {
          "ref": "9136ef09-0a40-4e6a-98a1-358e81280fac",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bf732ce8-ac7d-4178-9cb5-75c960cc817a"
        },
        "item": {
          "id": "601a56e3-8ee5-49be-a937-d8d3a3d696b9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7e9f4c31-d546-4547-8c83-e2904754cddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e584cc-6ded-460e-89d3-2aebf807ebe5",
        "cursor": {
          "ref": "88b32b01-b582-41d9-b2a0-91d996e19225",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4063ad06-2c9d-48a0-a66e-8b6ccf18e65e"
        },
        "item": {
          "id": "09e584cc-6ded-460e-89d3-2aebf807ebe5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d6d9085d-b505-4cae-af72-0b5830245959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b540f295-a5b1-4f17-ba2a-136afb181188",
        "cursor": {
          "ref": "8e87471c-21fc-41c5-a32b-cd7299058c41",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "22879828-4808-4c69-8821-a7cf580b4b21"
        },
        "item": {
          "id": "b540f295-a5b1-4f17-ba2a-136afb181188",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ff39de22-b6fd-4ae4-ae02-054dfe002fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0795413d-b1f0-4722-8c94-3148db9ab917",
        "cursor": {
          "ref": "67294871-aa21-4239-a8fa-2a4c649e75af",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fb791898-3a6d-449e-bc47-dd2c52dd75fa"
        },
        "item": {
          "id": "0795413d-b1f0-4722-8c94-3148db9ab917",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "30bd4d31-08b6-4811-b3df-4002ff6a3111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a955fe6-d32d-405c-9c0c-b1224fdc78a9",
        "cursor": {
          "ref": "d698d57f-6248-4caf-85d6-eb2282f1451e",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7a8f3c11-ff98-4e82-895c-a604b621c8f5"
        },
        "item": {
          "id": "9a955fe6-d32d-405c-9c0c-b1224fdc78a9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5d7545e4-d711-434f-a666-55de2579c3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b546841e-0e13-4234-81db-15458518855a",
        "cursor": {
          "ref": "3e9c7043-5e83-4851-9c39-b4a77517699b",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2351633c-c754-4bbf-89af-57eab735a312"
        },
        "item": {
          "id": "b546841e-0e13-4234-81db-15458518855a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aed9f685-94cf-427c-94b8-dd09645139bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c043d3d-5ded-4717-b084-9bb0ea44f7c3",
        "cursor": {
          "ref": "d2eacb65-0399-4f04-8bb0-c8bec09c7cf6",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1ba4e1ba-5ee2-4b99-adfb-f4d902595b63"
        },
        "item": {
          "id": "5c043d3d-5ded-4717-b084-9bb0ea44f7c3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4da39b01-93df-4bdc-abaf-948d0fc1aaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ada0e4d-3f82-4888-86ad-aef7ff140c1d",
        "cursor": {
          "ref": "422c2517-cc67-44a5-9bb1-8d6ef2a87b4a",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "08d7a21c-aa58-49e1-ab60-5471eee04bd0"
        },
        "item": {
          "id": "4ada0e4d-3f82-4888-86ad-aef7ff140c1d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bc5d8e90-376b-4aba-a923-a165a9885d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fad777-cde8-4514-962f-75387e2e42e1",
        "cursor": {
          "ref": "a730450f-5cf4-411c-b8b5-4376ba02e8c6",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "71ec73e1-0339-435b-b2fd-5d1b386c3401"
        },
        "item": {
          "id": "54fad777-cde8-4514-962f-75387e2e42e1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "37fe3a98-f31b-4d9d-96d5-d4c4284c2fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cce298-ca56-4fc6-937f-31b3dd5383c1",
        "cursor": {
          "ref": "2dd6d1f6-6e0e-4e06-8132-25d8f61a4b7d",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e920c2f9-f9f2-49d3-a8d0-55d37d1a83e2"
        },
        "item": {
          "id": "e3cce298-ca56-4fc6-937f-31b3dd5383c1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3fd0735d-fb56-44c5-8477-7c3cb0ccd67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d716e6-2776-4095-98b7-4cdbbc6ef198",
        "cursor": {
          "ref": "8fcd0ebd-5907-4016-afe4-5bd9de56beb6",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c71eaaba-471b-4b49-8f4c-cbc06be5fe60"
        },
        "item": {
          "id": "99d716e6-2776-4095-98b7-4cdbbc6ef198",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "396f200f-67d8-4e6e-9ff5-de8abe478e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8118fd-5bdc-4130-939d-1b756b0bc858",
        "cursor": {
          "ref": "2632967e-dd8f-4620-9725-f02b4fa40649",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f95f1e00-ba20-4683-a086-791f5f6ffb7c"
        },
        "item": {
          "id": "ec8118fd-5bdc-4130-939d-1b756b0bc858",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "78e87667-edf8-4a84-85ac-6be162c724e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525494a5-e782-4291-84fb-83ca7c391808",
        "cursor": {
          "ref": "6762cf4a-a140-4fe3-abbe-67eacde8d020",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "17905773-2c62-44c8-94f2-d3a6256fc857"
        },
        "item": {
          "id": "525494a5-e782-4291-84fb-83ca7c391808",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "992651ba-4b57-44af-960d-58851ea1d3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b7c4e7-d736-417f-8d0a-0d9201193b50",
        "cursor": {
          "ref": "559284c1-c020-406a-b4fa-924fbb6f688e",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6b7a5774-8009-459a-87fa-ad3f30163bb2"
        },
        "item": {
          "id": "43b7c4e7-d736-417f-8d0a-0d9201193b50",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "edab4e6a-7fa7-4005-a3c9-deeea3e23801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d971abcc-24c1-468b-92d6-c0922e799f0b",
        "cursor": {
          "ref": "e07b3795-7d7c-469f-8b5c-3abad53ae57e",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b33537c9-3cbe-48c6-813f-46c4fd4812f5"
        },
        "item": {
          "id": "d971abcc-24c1-468b-92d6-c0922e799f0b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7b964a20-8a8f-43e1-bf36-c17b24a8227d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8e0a12-2860-4e74-b67c-8136f0c749e6",
        "cursor": {
          "ref": "43cc562e-c6f5-4602-b4c7-f713ad2ef648",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "11537abf-a61a-4f41-99bc-0d915d726181"
        },
        "item": {
          "id": "4c8e0a12-2860-4e74-b67c-8136f0c749e6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3f873322-2b92-4229-ada2-b53db43fe8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f622ab0e-c7db-453d-960d-2c2857dcdd61",
        "cursor": {
          "ref": "6157b2ee-09ea-4bb6-99e9-a57272ab1d65",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c59358d6-2086-4e85-ba33-4d61e7019ac8"
        },
        "item": {
          "id": "f622ab0e-c7db-453d-960d-2c2857dcdd61",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0ed0a0f2-f84f-49b6-a4d1-75f8218a3ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969ba6c8-ab44-4ba6-8ce4-cd168d01c781",
        "cursor": {
          "ref": "0bc74c14-0cd9-49cb-825c-93d3db93351d",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "60a98d6d-5148-4f21-bd04-36fccaaa0f98"
        },
        "item": {
          "id": "969ba6c8-ab44-4ba6-8ce4-cd168d01c781",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2b8861b4-06ae-415d-9570-51dca90f72b5",
          "status": "Created",
          "code": 201,
          "responseTime": 8402,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6f335649-a62b-4443-a0b5-e4162938127d",
        "cursor": {
          "ref": "4f5395be-dc13-45a7-8379-65432a5e6b3f",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1eae93dd-bc67-4c8f-a7db-caced7e81c66"
        },
        "item": {
          "id": "6f335649-a62b-4443-a0b5-e4162938127d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "457969ed-5a8b-40fb-a57c-df427f8ef670",
          "status": "Created",
          "code": 201,
          "responseTime": 2743,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "812dacf9-eb40-413e-8686-1bdee2c0a300",
        "cursor": {
          "ref": "f1a5998f-b763-4f08-82d4-5d4b9b118c64",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c3bfcecb-0b0b-4b16-9289-4007382964de"
        },
        "item": {
          "id": "812dacf9-eb40-413e-8686-1bdee2c0a300",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "64cddedb-7f6d-42cb-859a-c8cef34bddf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0fc905-87c8-40d1-baeb-d13156eb4a48",
        "cursor": {
          "ref": "0fc5c2e4-09bd-4356-84e3-199be0bc70ae",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4397d811-cc2e-424d-b87b-3cde6806d99c"
        },
        "item": {
          "id": "ff0fc905-87c8-40d1-baeb-d13156eb4a48",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6042cfbb-b923-4a20-b279-f0ff855359aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942e749c-fa60-4e7b-b9e7-4cae174f52e3",
        "cursor": {
          "ref": "5b38f9fe-5cce-4b3f-bf77-c89463571660",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1e6efd05-8d69-4b78-9035-e7c236dcb931"
        },
        "item": {
          "id": "942e749c-fa60-4e7b-b9e7-4cae174f52e3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "53470d2b-2e3a-496b-a82c-7e7a37a2f338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50c51a0-5052-4b56-b493-51acdce7c485",
        "cursor": {
          "ref": "9e55d418-8338-4983-b41a-d16df0b495c9",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7909b090-385c-4aaf-b645-193b3a841820"
        },
        "item": {
          "id": "c50c51a0-5052-4b56-b493-51acdce7c485",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b56a5877-1014-4373-bf87-6fa8f0cdb4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5007d618-0a2d-42ef-8cf9-72ea3969f8df",
        "cursor": {
          "ref": "619ecab0-4f48-405a-a9e5-42c67fb7e501",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "00e0e950-bfab-4126-b9ea-5f16767f2216"
        },
        "item": {
          "id": "5007d618-0a2d-42ef-8cf9-72ea3969f8df",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "17b6845d-3d51-4feb-9d74-ad1612dd43ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3709fb-d4ca-4286-8874-ae8b76809018",
        "cursor": {
          "ref": "f1864183-ec93-4871-9dc1-db50a6e69705",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "461227c3-ce11-47bf-82df-4847d1849621"
        },
        "item": {
          "id": "6a3709fb-d4ca-4286-8874-ae8b76809018",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "63abadfe-ceb8-4a9a-81c4-72932754b046",
          "status": "Created",
          "code": 201,
          "responseTime": 2595,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "93c0afe3-7613-49ca-858c-fcd64a9f487b",
        "cursor": {
          "ref": "b1e619ee-8238-4dcc-a250-e3120b25c72d",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b661ef4d-a4f6-47a8-8b06-6c878661c477"
        },
        "item": {
          "id": "93c0afe3-7613-49ca-858c-fcd64a9f487b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "163cef3c-7f36-43cf-a5a2-23636898c83c",
          "status": "Created",
          "code": 201,
          "responseTime": 2664,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c7524bc9-b3ea-41ba-aaae-c6d0aace94b0",
        "cursor": {
          "ref": "d735ff7c-afcf-4a8c-b97c-ac8f7cf5cbe2",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7146327b-b9e6-4567-bf3d-10d07d74dcf7"
        },
        "item": {
          "id": "c7524bc9-b3ea-41ba-aaae-c6d0aace94b0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9ef63705-010b-4856-9e4a-2667e1f6d500",
          "status": "Created",
          "code": 201,
          "responseTime": 2729,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a65556c3-d608-40d0-b4c1-4e0b20d92ec2",
        "cursor": {
          "ref": "1b6bb00e-2d12-4de5-b663-5242daa60f23",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "04871452-f0e1-40ee-a292-33b276a14c79"
        },
        "item": {
          "id": "a65556c3-d608-40d0-b4c1-4e0b20d92ec2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a083594b-5dc9-4e9c-a72a-b26169c47454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58a7e8e-b126-4478-97ea-4164672f7aa7",
        "cursor": {
          "ref": "16a31a2e-d3db-4f54-9fe8-ad746f6d7ead",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5a9a09f6-4700-46bb-9bb5-ed0abc45c7e2"
        },
        "item": {
          "id": "a58a7e8e-b126-4478-97ea-4164672f7aa7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e72d2b86-57cf-443c-8856-36bb75e434df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3325b00d-dd65-4bab-856d-1c1c3bd5091e",
        "cursor": {
          "ref": "907f31fc-90de-47c2-a3d9-37c6a420776e",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "125cfe6a-7a56-4bab-9cc1-09fed0f0ede4"
        },
        "item": {
          "id": "3325b00d-dd65-4bab-856d-1c1c3bd5091e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cf7a4758-35b4-44ba-963b-0c842af51380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a322806-1977-4460-bdee-172fa73ea0d6",
        "cursor": {
          "ref": "64f6384a-fd36-4665-b87d-25384cd99f3c",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3719850f-9815-46a7-b15d-db6d978ba506"
        },
        "item": {
          "id": "8a322806-1977-4460-bdee-172fa73ea0d6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4395ce60-6877-418b-96fc-ffa2e039ce20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e70d9c-5349-41ad-bc37-6054ceb4a788",
        "cursor": {
          "ref": "e50a5e18-20cb-43fb-8da7-8f720433f101",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1397a56b-b074-46eb-8356-f07c808bbdc6"
        },
        "item": {
          "id": "f3e70d9c-5349-41ad-bc37-6054ceb4a788",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9299f601-d3c6-42db-a50d-8c4edda18b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14edc34f-0623-4d98-90c8-7c2765296891",
        "cursor": {
          "ref": "d3529ba7-3b6d-40d5-ab1f-634e9f28a2d7",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8689e036-2cc8-417d-b3e2-362e6f62b798"
        },
        "item": {
          "id": "14edc34f-0623-4d98-90c8-7c2765296891",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2460c8e6-fea3-41c7-a2e6-274345156d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b460f93e-89db-4983-94f8-d9fc3684e8a6",
        "cursor": {
          "ref": "b183a212-286d-47bb-b22e-28ccf233b566",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c052df18-4b9d-45ab-ac13-28757d06cf59"
        },
        "item": {
          "id": "b460f93e-89db-4983-94f8-d9fc3684e8a6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "feb5698f-6513-4449-9dbe-d1ff4e2c0a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb79f31b-bfc8-4bed-8d44-99c0cf7943f5",
        "cursor": {
          "ref": "6bf44a75-5976-49a4-a3cd-3dc279b9663a",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "84928f90-130d-47e4-995c-7dba33dd6476"
        },
        "item": {
          "id": "bb79f31b-bfc8-4bed-8d44-99c0cf7943f5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9ff0b0ef-53be-4057-9572-deb80f4083fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36bfefd1-efbf-4ea2-918c-ffe3bc72f550",
        "cursor": {
          "ref": "44ba4fae-9b95-4c41-b743-3e5495d5ce2f",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8422dc18-f74e-43ec-8c44-98efed4ae5b9"
        },
        "item": {
          "id": "36bfefd1-efbf-4ea2-918c-ffe3bc72f550",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5b923c14-e7b5-4aeb-a4ab-c96e48af4710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4899e7a2-c278-449b-a15a-54086cb824d5",
        "cursor": {
          "ref": "bedeee45-72ad-4e5a-bae8-fbd9096f36bc",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "371953eb-3322-4bc5-9bb0-05214090e0ec"
        },
        "item": {
          "id": "4899e7a2-c278-449b-a15a-54086cb824d5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a9239f60-9643-43df-b583-491e7097903e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c930981d-df82-4e35-8ced-bedbb7f3f206",
        "cursor": {
          "ref": "eaa622f6-0a43-4404-aa66-b502fbef7217",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "17047f60-f862-4179-879f-eb6c24569c69"
        },
        "item": {
          "id": "c930981d-df82-4e35-8ced-bedbb7f3f206",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4328d826-d10a-4ad1-a739-23959b16c979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab84569-404a-47cd-aa36-5b792b8a9c67",
        "cursor": {
          "ref": "02fc2675-dc81-4186-9a28-4c1d88dbec1b",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cd7bd779-8596-4859-8016-662a5949e562"
        },
        "item": {
          "id": "cab84569-404a-47cd-aa36-5b792b8a9c67",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ecbefc01-97d6-41a8-97dc-c0d7a7195bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650e9482-cf1e-4db6-a81b-7ef270cbe968",
        "cursor": {
          "ref": "dcc962ae-3c2f-410f-b347-2fc34feff282",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "badc53ab-9b7e-4f17-877f-e2ad77979563"
        },
        "item": {
          "id": "650e9482-cf1e-4db6-a81b-7ef270cbe968",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "39f0c33a-73e5-4f79-bba5-ea5571fca887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db03d51f-282b-48d3-85a1-ae9b46b08765",
        "cursor": {
          "ref": "5bf4009b-d45a-4324-b4dc-c952d948a2ed",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "14c518bf-c6d5-49a3-8fe6-f0e172d0c69b"
        },
        "item": {
          "id": "db03d51f-282b-48d3-85a1-ae9b46b08765",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0d077241-525f-4926-8b51-b58c27dcce35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3762a12-c6a2-4fe7-b510-bb332d471db1",
        "cursor": {
          "ref": "78b35d40-c902-492d-a0a0-512894906867",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "06747a27-be32-4041-8b8b-bebfe26dde8c"
        },
        "item": {
          "id": "c3762a12-c6a2-4fe7-b510-bb332d471db1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "05b64097-670c-4ad4-b858-f432db2e85b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc415922-d779-4789-8586-e251333f1724",
        "cursor": {
          "ref": "4d2d2ad4-821e-4e84-82e0-8fca985ab8f7",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b04d9daa-8a0d-4792-88ff-09ee31e1093f"
        },
        "item": {
          "id": "bc415922-d779-4789-8586-e251333f1724",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ce5027bd-5620-4932-947a-d3d35b29d430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c07068c-d7fc-4601-9d6b-f8d8932ddc7c",
        "cursor": {
          "ref": "e23ef2bb-ac6a-42e3-9f7a-09eee24d7ba6",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "132790d9-e885-44b1-a550-30e88b17b14b"
        },
        "item": {
          "id": "4c07068c-d7fc-4601-9d6b-f8d8932ddc7c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "195dcf33-82b8-45b4-bbfe-d9ae6c224971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d7708e-e356-4a79-9859-54ebb9c1be38",
        "cursor": {
          "ref": "1a1e1063-b267-4a78-bf3b-006f3f279b68",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0e9673d4-7b6d-47d8-a053-68383194c327"
        },
        "item": {
          "id": "e2d7708e-e356-4a79-9859-54ebb9c1be38",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e9931b8b-2cf2-4183-be5b-eb315bf37e93",
          "status": "Created",
          "code": 201,
          "responseTime": 2641,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "44ec793a-5351-475a-987a-5a0fcbdb4433",
        "cursor": {
          "ref": "80cf0216-7b47-40a3-a435-11860237a20c",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "850c3d69-6167-4c2a-ac3e-d7cac10f508c"
        },
        "item": {
          "id": "44ec793a-5351-475a-987a-5a0fcbdb4433",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0a5fc4fd-09d3-4eb2-9b64-1cc0b467c2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ec283d-38cb-4127-924a-b6cf1ac877b7",
        "cursor": {
          "ref": "dfffd6a8-ba7b-470c-ba72-9305eea60ff9",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d079a0da-a6de-4988-8fe0-a1f33475cb87"
        },
        "item": {
          "id": "38ec283d-38cb-4127-924a-b6cf1ac877b7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "47d12dc5-aa61-46d4-971c-556de572dc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41357dfe-c66b-471d-b949-e2ab694be818",
        "cursor": {
          "ref": "c6f8e689-aa37-466e-a90b-e6cb654df332",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "01a91af9-0baa-48c9-a87c-1dc2cbdf19b0"
        },
        "item": {
          "id": "41357dfe-c66b-471d-b949-e2ab694be818",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f65185cf-04d6-4902-99c8-5ad258ed5461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13315ea5-4465-4c3c-a3f2-fbeae6fdd72d",
        "cursor": {
          "ref": "e3df6034-50d1-4ab8-a771-a661f84243b0",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa242f8f-50f1-4618-bba3-46092db861a5"
        },
        "item": {
          "id": "13315ea5-4465-4c3c-a3f2-fbeae6fdd72d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2be4f591-6bbe-4252-9c22-903f45a4b944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cad35ed-17ef-4cbf-92fa-5c9c0045caae",
        "cursor": {
          "ref": "6b792c68-2698-44e6-b740-1712525cfa47",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8358dc6d-132d-4b66-a422-0353c63d5906"
        },
        "item": {
          "id": "7cad35ed-17ef-4cbf-92fa-5c9c0045caae",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ad69454f-ad5b-47e8-9cbb-ecc1f61ce10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60d7415-b249-4e95-ae78-11677eaf65e8",
        "cursor": {
          "ref": "c05baf24-4a8e-4cdf-82b7-319088f97d2a",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "08ea1602-a71b-4079-b120-6881be86ca0c"
        },
        "item": {
          "id": "a60d7415-b249-4e95-ae78-11677eaf65e8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "16b76895-9d19-436c-bce8-34e82a0d5dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40a9ddb-ae6b-4a92-bd41-0ee2eff66db1",
        "cursor": {
          "ref": "6779d291-17e0-4e97-bcc3-75b57388e6d1",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "42da9662-0681-42a7-bfcd-7478b8b7af43"
        },
        "item": {
          "id": "d40a9ddb-ae6b-4a92-bd41-0ee2eff66db1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "54b82ac9-8575-42db-8312-ce466d1d257a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2770e28b-10ae-4223-947f-7d293fab53bc",
        "cursor": {
          "ref": "1d21e7a5-43ce-421e-9539-8732526cd634",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b2e91803-1f0f-4359-9e6a-ba67d1566c1a"
        },
        "item": {
          "id": "2770e28b-10ae-4223-947f-7d293fab53bc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f6b0ff70-3675-46a8-ab3d-7ff387fbc5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee4fd04-6ab7-48da-8bbb-246b87c80275",
        "cursor": {
          "ref": "92f48f33-586a-4256-9782-e2da5ecc9930",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5e4883e5-90e4-432b-acb6-680eec47c021"
        },
        "item": {
          "id": "0ee4fd04-6ab7-48da-8bbb-246b87c80275",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "39fd4e2c-2685-4439-b9b6-d5ad92c9b6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623e0bc9-5973-49d7-a6ae-22ea64840666",
        "cursor": {
          "ref": "2e06b49b-62de-425b-af5a-5f65d6eb1fc8",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "13da13cb-93a4-4fae-9c34-211b059e7353"
        },
        "item": {
          "id": "623e0bc9-5973-49d7-a6ae-22ea64840666",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0c53ddee-892d-4e26-995b-5de84be5ef5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67641049-71e5-4e93-a79e-a7fa65c6a2c2",
        "cursor": {
          "ref": "c41078fa-793a-45e0-9e01-714f4ca847f3",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6847f7d1-341e-4581-9dbb-350482b0f769"
        },
        "item": {
          "id": "67641049-71e5-4e93-a79e-a7fa65c6a2c2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a31cc5a9-4feb-47d2-8733-b2fb473f00e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da51b270-59c2-4601-a3e4-b8121c7a6b63",
        "cursor": {
          "ref": "0055e47e-8be2-4fda-9a5c-cf1ed71df380",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "11e5933e-dd0a-4813-a4eb-faacbe915c25"
        },
        "item": {
          "id": "da51b270-59c2-4601-a3e4-b8121c7a6b63",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0a2784c6-908a-459f-8a1d-d4286f510df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3953394-7b4c-4d58-9614-b2fb9332859a",
        "cursor": {
          "ref": "7c1ffd44-740e-49dd-9254-9e8025ff0cd8",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b89a484d-156f-44ad-b700-a61d1162dc89"
        },
        "item": {
          "id": "d3953394-7b4c-4d58-9614-b2fb9332859a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d9aea563-e80a-481b-bf34-7c280c44e989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300cafc9-2156-4166-a4c4-84b70bcb7edd",
        "cursor": {
          "ref": "fe51faf4-ba9d-4587-b2d1-d22db5d9c165",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c15428e0-6741-470a-94ec-0c1cc934c9d2"
        },
        "item": {
          "id": "300cafc9-2156-4166-a4c4-84b70bcb7edd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e53aa573-2732-4d29-bb44-cac051999853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640f1e1b-d6e0-4cd1-90c8-085517d8f836",
        "cursor": {
          "ref": "38dabddc-93fe-44f6-9fdf-fed06e9cffe0",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a55f6c13-de0a-4c5a-be88-0c3e2ac1ecbe"
        },
        "item": {
          "id": "640f1e1b-d6e0-4cd1-90c8-085517d8f836",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "824ca698-dc6f-416b-8613-a1a5c0e997af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4672bc1c-e083-44dc-a283-1136ff201d20",
        "cursor": {
          "ref": "54448a19-c371-491e-8458-ebcea58c9088",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b7bfbd7e-ad3c-4aef-986f-660a23c24c6f"
        },
        "item": {
          "id": "4672bc1c-e083-44dc-a283-1136ff201d20",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ed0bb632-660d-4105-a22b-6f19c3adca2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cd02f8-8fe4-4aa4-9007-eefd6a57fb3e",
        "cursor": {
          "ref": "d5066a8e-274c-48fe-a44f-489fdce415b6",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4fff3139-870d-4857-b347-3c51ccdb80ee"
        },
        "item": {
          "id": "39cd02f8-8fe4-4aa4-9007-eefd6a57fb3e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ceaba4d6-0091-4c1c-8a76-2eb8191def3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2340a73b-f938-4fe3-afd7-e2ccb2c3e042",
        "cursor": {
          "ref": "12bda078-a74f-4659-b08b-2e2eb20399c0",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "afe58341-362d-4fcd-94d3-f0507784480f"
        },
        "item": {
          "id": "2340a73b-f938-4fe3-afd7-e2ccb2c3e042",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f6617be4-abb6-483d-8630-e5aee5283989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b5b530-9669-4635-9dea-2bb76b8e3d5a",
        "cursor": {
          "ref": "41a6dcb3-efbf-487a-95bf-9b75411e9ae0",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "242dbeca-f34a-4a51-8702-d5d9da36409f"
        },
        "item": {
          "id": "18b5b530-9669-4635-9dea-2bb76b8e3d5a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5e88b80d-f948-43e4-a2c0-d58b6e2e16e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac85f6d-fe9c-4ef6-8446-e673c792844c",
        "cursor": {
          "ref": "0bd73662-2ad2-4825-9f03-d3965accf66b",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bd0ed675-ae0d-4434-b01a-900931ead422"
        },
        "item": {
          "id": "eac85f6d-fe9c-4ef6-8446-e673c792844c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d893bfbe-d304-4a0d-adff-b573c6c68e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b36ec9f-ba7c-41a3-9299-4424d116efaa",
        "cursor": {
          "ref": "192a7d22-4649-4dc4-b27a-8591c75b36e8",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d819a8ef-3128-498e-ba31-05d10c16285f"
        },
        "item": {
          "id": "3b36ec9f-ba7c-41a3-9299-4424d116efaa",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b87da4f0-ca16-4239-b65d-fb22456b03df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc4a99a-8015-4f0d-8055-7621e3fd8622",
        "cursor": {
          "ref": "d962ade3-1fac-4825-bc72-04c09aa6d335",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "657090df-eec3-4502-af3e-ca305c66425a"
        },
        "item": {
          "id": "3cc4a99a-8015-4f0d-8055-7621e3fd8622",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "94ae9fdb-e57e-4cce-9ae1-edfcd1418e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f26ea2-9968-4864-bdfd-83a6607b6c81",
        "cursor": {
          "ref": "c58d3475-de2a-4663-a57d-b7d642a9fda3",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a2e131a1-14ea-4aec-84e3-70a26f08ff6b"
        },
        "item": {
          "id": "23f26ea2-9968-4864-bdfd-83a6607b6c81",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5635345f-fc21-4430-9bd9-d9a134c87793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01d4935-96e6-4f74-a006-1a05c24b2a68",
        "cursor": {
          "ref": "ed917cf5-5481-4b6d-9a39-22b367bfe49f",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3a2428b6-1ecc-431b-84dd-aef250460b9d"
        },
        "item": {
          "id": "e01d4935-96e6-4f74-a006-1a05c24b2a68",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8248e59e-4432-45e4-9354-a3f4f8efa2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84da2767-e813-4afc-b17b-649f60565536",
        "cursor": {
          "ref": "90f05655-ab28-4c41-a03e-42dfd36857ae",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "230e1b9a-15c2-45a1-8493-10200738de4e"
        },
        "item": {
          "id": "84da2767-e813-4afc-b17b-649f60565536",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "04b7ec3f-8e28-4f9d-aeb3-0c98e5a114ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87546b27-13fc-4f1d-83a8-d0bb5b6eafc8",
        "cursor": {
          "ref": "3b2255ca-fa30-4756-a30e-3e5765d79adb",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1369675c-f4fd-4571-a453-40495fac3f27"
        },
        "item": {
          "id": "87546b27-13fc-4f1d-83a8-d0bb5b6eafc8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "66f47121-c7bb-432c-821a-45e852906924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9974de85-dbcb-4920-83c5-2c269e79415e",
        "cursor": {
          "ref": "a3b7d1fd-41ae-48d0-9ccf-759b2b792c42",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d9924433-eba5-4058-ac72-bcaab6ac010c"
        },
        "item": {
          "id": "9974de85-dbcb-4920-83c5-2c269e79415e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "25cb9887-cfb8-4e7c-a3e0-6bf231fa7bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18974403-2045-4660-9347-c6527f046247",
        "cursor": {
          "ref": "2dee8ad3-6fc7-4ae7-97b0-1113ed13349a",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2c17d59f-05aa-4603-9d7e-a2c0802a6226"
        },
        "item": {
          "id": "18974403-2045-4660-9347-c6527f046247",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "11d725da-8d1a-402e-adbd-05295921c1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe794bc-f742-4773-9104-f75cce404abe",
        "cursor": {
          "ref": "2be5cd85-3ad1-44ce-9754-a3a7796b767a",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e7f81ed6-8655-41bd-8744-a5ca911e3a2c"
        },
        "item": {
          "id": "cbe794bc-f742-4773-9104-f75cce404abe",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "67cc66e6-dd74-462c-8427-bedeac1cf53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9351a8b8-9d88-49f1-bc92-8fde69eb614a",
        "cursor": {
          "ref": "23d8b634-9ad8-46af-ad3f-cd2aa3dc4ba1",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "deec0877-e323-4179-80d8-fe28061dba2c"
        },
        "item": {
          "id": "9351a8b8-9d88-49f1-bc92-8fde69eb614a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c1bd7087-1e79-40af-95c7-b2d8a0678d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7049b2c9-cfc4-4144-9dd2-ab211096800a",
        "cursor": {
          "ref": "8756e145-7103-4c21-8bfe-e3b69f158da7",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e87bb8f4-e6f4-43a9-bc59-e837906a1d55"
        },
        "item": {
          "id": "7049b2c9-cfc4-4144-9dd2-ab211096800a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d496c5d4-41f8-4f91-88e0-b798d56f8015",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "53d13198-9d84-4b7b-925b-1063e154f68b",
        "cursor": {
          "ref": "50a7d1b4-1af5-448e-a9ea-4a0a4a3c1d82",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "744f008f-1fd1-4552-a5f0-3ca86bf2efbb"
        },
        "item": {
          "id": "53d13198-9d84-4b7b-925b-1063e154f68b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7b60d2ab-8a91-428a-b576-322175808be3",
          "status": "Created",
          "code": 201,
          "responseTime": 2558,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "912e4876-0036-4d7a-bb48-ba9689edf54d",
        "cursor": {
          "ref": "7df5405c-1657-4c46-b0f9-5ebc4511ff7d",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1bd42e75-2574-484b-81c3-8270ee3c69cf"
        },
        "item": {
          "id": "912e4876-0036-4d7a-bb48-ba9689edf54d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "939f6e9e-e3ce-4fa2-a0dc-5b89f6c219bc",
          "status": "Created",
          "code": 201,
          "responseTime": 3171,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2de53e-0dc6-4564-bf05-1adced9eeae8",
        "cursor": {
          "ref": "f34a9bf1-faf5-4b4a-ac00-82da9b05d481",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "03ecd4d5-18ac-4e00-85a1-6dbbb1155a3a"
        },
        "item": {
          "id": "7b2de53e-0dc6-4564-bf05-1adced9eeae8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ea943062-3da4-42e6-95e7-7185ac77839a",
          "status": "Created",
          "code": 201,
          "responseTime": 2542,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8063b7-359b-434d-8859-f9102c5c8118",
        "cursor": {
          "ref": "2486dcac-7001-4637-a85c-5b4f7c883486",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7db85464-2aad-4728-9778-0114be647c86"
        },
        "item": {
          "id": "3f8063b7-359b-434d-8859-f9102c5c8118",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "659fa9f2-d551-4d8f-bcc2-7ed139cda504",
          "status": "Created",
          "code": 201,
          "responseTime": 2818,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ded71b-86e8-43a4-ae2a-4a099eb8dc0e",
        "cursor": {
          "ref": "03863570-fda8-4b5a-adf7-6906eb73a6a2",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9d110272-d4fb-4a1a-9921-4cd67b7d7bb8"
        },
        "item": {
          "id": "40ded71b-86e8-43a4-ae2a-4a099eb8dc0e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "71bf6092-30d2-46b2-8ba0-1419d00b32b7",
          "status": "Created",
          "code": 201,
          "responseTime": 2612,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-18T00:47:57Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-18T00:47:57Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "6b25d7f8-2a34-4c29-a3a0-10ca52c99e26",
        "cursor": {
          "ref": "ead0c04c-b60a-47e8-b8fe-a454117fc61d",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d8c6309b-eefd-4050-9781-98d4264bf8cc"
        },
        "item": {
          "id": "6b25d7f8-2a34-4c29-a3a0-10ca52c99e26",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a66c7205-c0c5-4681-b7a1-e3162e2fd45d",
          "status": "Created",
          "code": 201,
          "responseTime": 2713,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6382fae5-1510-4774-afe8-bc0056c4c7c3",
        "cursor": {
          "ref": "5aebd3d6-47d0-417a-935f-7232569876f9",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8f67eb38-ebcf-4bc3-971c-655c64f0c009"
        },
        "item": {
          "id": "6382fae5-1510-4774-afe8-bc0056c4c7c3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c856d5fc-f55a-45a5-a745-0014abc321cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2ea40f-b485-4806-a549-8bf69b6fcb5d",
        "cursor": {
          "ref": "c361bdf0-12c3-4e3b-9402-46f68f58b849",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7bfc7bcc-4373-4b52-b225-a4bc5c08cc26"
        },
        "item": {
          "id": "5b2ea40f-b485-4806-a549-8bf69b6fcb5d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "540e8306-225c-4265-aae9-0e0bd4f11d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8816eb5-d108-4680-ba2a-92ab389573c3",
        "cursor": {
          "ref": "c71f0f4c-8f83-4b75-95c9-8073791fd3d1",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "99c2b660-c791-4b56-ba2a-3e621b5eef45"
        },
        "item": {
          "id": "d8816eb5-d108-4680-ba2a-92ab389573c3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "03d78606-4509-438c-9a9e-c07526b68890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675ff5ef-efe6-496d-a027-d752ab2bf3ee",
        "cursor": {
          "ref": "68618a9a-190b-4c40-af39-dda3c87f3564",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "43f40741-19f3-438d-8d35-8eb5cabdea92"
        },
        "item": {
          "id": "675ff5ef-efe6-496d-a027-d752ab2bf3ee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cf96fc7a-1260-4c60-a3a9-dd615cd5def9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937a3e84-8893-48ee-86c3-196b582f3bab",
        "cursor": {
          "ref": "f30b201d-cb40-4651-afb9-7d6eb2faeed8",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1d8cb50a-8141-4af9-a49a-63e1fb33167e"
        },
        "item": {
          "id": "937a3e84-8893-48ee-86c3-196b582f3bab",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9230bc60-cce9-450f-8153-d596b659b0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9074d87e-b91d-42f1-8b86-1f091373b758",
        "cursor": {
          "ref": "42e42ebe-8807-4c85-8da7-83062200b3b0",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2870ca39-2b90-4a1e-8e76-ad0643825256"
        },
        "item": {
          "id": "9074d87e-b91d-42f1-8b86-1f091373b758",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "38a0e97f-943f-4d8d-bec7-37db28ac4311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 388,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8875073c-fcc3-46e9-9b86-8261f35856e6",
        "cursor": {
          "ref": "ffb2f60c-0722-45a9-aca7-d77a5f44e604",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b0fad646-0a7b-4bcb-9ea7-5961dc5756dc"
        },
        "item": {
          "id": "8875073c-fcc3-46e9-9b86-8261f35856e6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7c2adde4-c5d4-42cb-baf8-4541d229828b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed9770c-5964-40e6-a3b5-b9b6df05a2f1",
        "cursor": {
          "ref": "5ec2624e-db84-43b5-9632-abcf4b1426ca",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2f7ecda9-9215-4669-8e4b-73c1ab3b2bdd"
        },
        "item": {
          "id": "7ed9770c-5964-40e6-a3b5-b9b6df05a2f1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5a8b2715-9c35-4b86-9d56-5288e30dac89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc364815-0909-4f3d-9fe1-af1fa115adf5",
        "cursor": {
          "ref": "4ded8d8c-5b65-4369-a9c0-3668c42c4b97",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c12134e9-8390-44fa-82e4-a03dc5b904b5"
        },
        "item": {
          "id": "dc364815-0909-4f3d-9fe1-af1fa115adf5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "96b65164-1421-4e59-a2b3-e6c34616cdb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 635,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c8aaff-95e7-4d7e-8c01-4a9d095ec8fe",
        "cursor": {
          "ref": "15c7869c-13b8-43bb-b276-fabe46d06a7c",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a49509a7-4b16-4c60-b6ef-40e2187d41c7"
        },
        "item": {
          "id": "55c8aaff-95e7-4d7e-8c01-4a9d095ec8fe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "89ba929e-17fe-4b8d-a819-d14d0edecbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c2515a-2b6e-4704-b789-1b2595d69ceb",
        "cursor": {
          "ref": "47dcc4cd-6ea5-49be-ad48-56ef8d3be53e",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d30e18c9-c311-4727-8107-7fc8ab3523be"
        },
        "item": {
          "id": "d5c2515a-2b6e-4704-b789-1b2595d69ceb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9105c1e2-9e8f-404e-9b28-3493609471af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 380,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38677fc3-7e2a-4c7b-8ba5-8864b9e62817",
        "cursor": {
          "ref": "2b98cb25-838f-4e9c-bd27-3a513f301bc3",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "751efbdf-e932-4e85-bdac-91a036dc8a09"
        },
        "item": {
          "id": "38677fc3-7e2a-4c7b-8ba5-8864b9e62817",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "628242b1-51a6-49f2-aa27-c4e55a1aa667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2817540-4ce8-4dde-9c90-ddaadcd0b5fd",
        "cursor": {
          "ref": "0f3de569-0190-4626-9057-b157846d4b32",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "58189b05-1647-4bd8-a6c5-5b3939d34478"
        },
        "item": {
          "id": "d2817540-4ce8-4dde-9c90-ddaadcd0b5fd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "64539804-6a02-4c5e-9a02-3f3bffb0feab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320858b5-1bca-4725-8821-f667ad879450",
        "cursor": {
          "ref": "a2fd3c14-fac6-4d0f-9ccf-f90b21e9f002",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b10f6c97-72c1-4734-8280-9f599d3150b3"
        },
        "item": {
          "id": "320858b5-1bca-4725-8821-f667ad879450",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "73ce8ae1-9ce6-4126-b214-f2f5d178d9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00aa15b-48d9-438a-84f5-2ab5f1da26e1",
        "cursor": {
          "ref": "e5199ff8-b3c7-43f4-8b63-0772588d1c31",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e7d240b1-c715-4829-acc3-ee83aab1d25a"
        },
        "item": {
          "id": "e00aa15b-48d9-438a-84f5-2ab5f1da26e1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c3ffb3f4-6273-437f-8d4a-d0e6fe849f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe92c013-caa9-4b7c-878e-a998141f07c1",
        "cursor": {
          "ref": "5a086adb-b36b-4964-9a49-a2497aad6c52",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6523082e-0b8f-4b1c-a1cf-55ef7154a13a"
        },
        "item": {
          "id": "fe92c013-caa9-4b7c-878e-a998141f07c1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8339b185-23ad-442c-b6f2-b6a8861b6a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc31512a-aa03-4dc3-b80f-1e04af7b8a92",
        "cursor": {
          "ref": "7c146ac2-630c-4f33-abf0-26b60dea2265",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4fcda7ac-7119-45a6-a9c0-41a32b48463f"
        },
        "item": {
          "id": "bc31512a-aa03-4dc3-b80f-1e04af7b8a92",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f7f5a484-e1a9-4289-88ff-a5c0bdc4bd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f286d18-0aad-41d2-a9b9-c3b72f02e8c0",
        "cursor": {
          "ref": "377b7655-695b-4dda-a3b8-536dc4e78d45",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a47e65ae-e8d1-444d-9b87-0a216017a93c"
        },
        "item": {
          "id": "5f286d18-0aad-41d2-a9b9-c3b72f02e8c0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c9bc95f5-5d64-4fea-b7f0-a4d8fc680820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c2a2c6-deb5-4f1d-8bcb-12c6a44748bc",
        "cursor": {
          "ref": "14e26194-01fc-4ea7-9305-a01ece9bdd57",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cf4fbde4-b7b4-417b-b077-8044a9e8270e"
        },
        "item": {
          "id": "54c2a2c6-deb5-4f1d-8bcb-12c6a44748bc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "67d4708b-cd8f-404b-abff-45dfd7f03284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21304d5-15fd-426a-8ad6-f66ec086fd45",
        "cursor": {
          "ref": "d82f78f7-bed5-4a98-bdfd-db80ec51f7eb",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "689f7ef5-da0d-4277-a493-ca36fc45ed7a"
        },
        "item": {
          "id": "f21304d5-15fd-426a-8ad6-f66ec086fd45",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "392dd948-020a-47b3-a8f7-ba70a2984ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aea7e1a-389c-47a7-ac77-5ef587a6634e",
        "cursor": {
          "ref": "37c04427-77e0-4da3-88d5-6e4ba097d965",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "db819276-8b0d-4992-a9d1-40ff145fd574"
        },
        "item": {
          "id": "4aea7e1a-389c-47a7-ac77-5ef587a6634e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bab8aef2-4ede-4596-9dc6-90f089291451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bf0ded-4fc4-4f80-aea0-fc3059a2968b",
        "cursor": {
          "ref": "d879036a-3915-4d73-8dcc-87279409c7b6",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8c40c05a-e16a-4711-a86c-c9f8dd87863a"
        },
        "item": {
          "id": "86bf0ded-4fc4-4f80-aea0-fc3059a2968b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e128f816-f9d6-4ac3-bdb6-2d9deac80fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b47d1bd-a51c-4abe-bc50-da12e38ed3f4",
        "cursor": {
          "ref": "5e73d213-6a23-436f-8a00-0fde0b7a18d6",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4939febb-008e-4d0a-8fef-d3e7fd83b98e"
        },
        "item": {
          "id": "3b47d1bd-a51c-4abe-bc50-da12e38ed3f4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6f80e777-e364-4575-b8c1-bf986f88436e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88aa50b8-858c-4e3c-ada9-6089e19d6468",
        "cursor": {
          "ref": "4771f351-7d68-417f-bd74-64f9077fd686",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "922fbba1-4af6-443b-8c22-fe934aec2899"
        },
        "item": {
          "id": "88aa50b8-858c-4e3c-ada9-6089e19d6468",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8a86aff8-a2bb-43cf-97fb-e1e01499ff70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c0219b-1296-45ae-ab13-9987d6adeddc",
        "cursor": {
          "ref": "df992c3e-fbf5-415c-a175-fe28e5a0e44a",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bd3d3a65-a2c5-423c-971a-bf423cd85cdd"
        },
        "item": {
          "id": "c0c0219b-1296-45ae-ab13-9987d6adeddc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c3b465ae-0d05-4f88-bb57-45a5e76cdfbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33595bfa-d817-49b8-9a6c-c27781a46c1a",
        "cursor": {
          "ref": "57e55ff3-29e5-426c-93ba-c96695c1ab09",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fd916657-8292-4408-aecf-94a0c5116397"
        },
        "item": {
          "id": "33595bfa-d817-49b8-9a6c-c27781a46c1a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d12ca840-b8c0-4654-a298-909122b8c302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378e98a7-a85a-4d8b-bb0a-a47df524da52",
        "cursor": {
          "ref": "a16738a3-46e3-4769-aae4-a6d58dfbc028",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "264312f2-0782-4ca5-b91d-cfd5c921626e"
        },
        "item": {
          "id": "378e98a7-a85a-4d8b-bb0a-a47df524da52",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6adc33c9-7b71-4382-8393-41d8e6b16214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7902e0-d3a4-4fd5-84cc-7dd21a149d68",
        "cursor": {
          "ref": "dd558540-237a-4694-b6b9-20a0ae548ef0",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "55b1a642-40ab-48eb-9e3e-76c76451aef2"
        },
        "item": {
          "id": "ab7902e0-d3a4-4fd5-84cc-7dd21a149d68",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3086108f-0b21-4776-9c82-c1f8666ae815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4976de-b4ce-4ee2-a885-3fb6da10d655",
        "cursor": {
          "ref": "6622fd84-4115-4f26-a58b-02aaa94ea350",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2e1afad3-86a2-4af8-8d3b-4b0038f3e872"
        },
        "item": {
          "id": "2b4976de-b4ce-4ee2-a885-3fb6da10d655",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0d27ae68-7ce1-467f-8d77-a8fcc70951f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3041c082-0e79-4d4e-b718-6796a4486c6d",
        "cursor": {
          "ref": "f8f8638c-d414-42aa-b137-9eed035ccdb7",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c19b6f22-03cd-4a31-94cd-d40a99b3c32f"
        },
        "item": {
          "id": "3041c082-0e79-4d4e-b718-6796a4486c6d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a4aaf3b1-1640-4490-b88e-656bc6707ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2903f02-5e5c-486f-97ab-f81153567f9b",
        "cursor": {
          "ref": "8aec3b75-e324-4622-9e04-d7f9b46204b9",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f6da5e50-2cce-4429-98fb-10eec45ba1f9"
        },
        "item": {
          "id": "d2903f02-5e5c-486f-97ab-f81153567f9b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e060d929-fdc1-4f4f-bc5e-e484885a95ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0ba6ed-6036-45b5-b52a-3d42c7afb96e",
        "cursor": {
          "ref": "41178808-b50c-471d-83f9-c355e4f2aa6e",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "61653346-646b-465f-be56-8d9d00869cad"
        },
        "item": {
          "id": "4e0ba6ed-6036-45b5-b52a-3d42c7afb96e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2b683e51-80ec-4ff8-aa11-0b19356dd752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6d3e76-5f25-4bc3-8ce3-c6b86865c9e4",
        "cursor": {
          "ref": "52216ce6-61cf-452e-8cd1-baae7c36ad9d",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f6d5eed5-4b7e-4df7-9fe9-cc28deea200a"
        },
        "item": {
          "id": "ef6d3e76-5f25-4bc3-8ce3-c6b86865c9e4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "82fd60bb-590d-4184-8f5a-61b0974c25c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e09f9488-4365-48a7-bc14-2563e54db2cc",
        "cursor": {
          "ref": "909b8ccc-4a30-4fb3-b3a9-2e070f7c7a8a",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0c354d74-5f45-4fc6-8c3a-f2ed778f1cbb"
        },
        "item": {
          "id": "e09f9488-4365-48a7-bc14-2563e54db2cc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c45d6688-04e4-41a6-ae46-26fb18bacc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1659760a-94ff-4a90-adaf-17284260872d",
        "cursor": {
          "ref": "a7d321c5-12b5-401f-978a-bf5ed8361d1d",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "24822330-fc31-49ad-a66c-075bd8419bdb"
        },
        "item": {
          "id": "1659760a-94ff-4a90-adaf-17284260872d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2aa34fb4-0a31-45d8-8b18-8d2a9441eb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d9fa35-40ec-4e1f-b34b-78d64e560ef4",
        "cursor": {
          "ref": "1a97a845-bbbb-4ac7-8bfa-8e5a2a2c1e63",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d1ccca0f-39b5-4462-b1eb-88bd34852d40"
        },
        "item": {
          "id": "a3d9fa35-40ec-4e1f-b34b-78d64e560ef4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4507396d-6b48-4101-8391-ce1bc3f0bbfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fb6360-936f-47c0-a5ae-aaddc6487a44",
        "cursor": {
          "ref": "4935dc0d-b658-41dd-b685-2c72a94def74",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dc928062-304a-4716-b7a2-cad60db67e63"
        },
        "item": {
          "id": "e1fb6360-936f-47c0-a5ae-aaddc6487a44",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dd22b1e6-c418-45f1-94bb-ff63edb70186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a684cd3f-a4e4-4524-bcb3-556fc2c04f66",
        "cursor": {
          "ref": "fcd8d288-1056-47c5-b7e7-7b6f6233875c",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "69a97ad0-1e28-4d3f-af13-dee1499b6bef"
        },
        "item": {
          "id": "a684cd3f-a4e4-4524-bcb3-556fc2c04f66",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2d2e3035-0530-44da-a698-2de711872b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cd5fe0-aa11-47ab-86f4-5d17bd3cabe0",
        "cursor": {
          "ref": "02573ee4-7790-4d66-b5f9-8d64087e7cd5",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8d2889c6-90e5-4142-b52c-3478153e0102"
        },
        "item": {
          "id": "53cd5fe0-aa11-47ab-86f4-5d17bd3cabe0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a66177a7-e78d-4aad-a541-1099251ee9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4729919-d462-4060-9057-3f169531008a",
        "cursor": {
          "ref": "fab4f6ac-c004-40f9-be17-f83e84bd7f6a",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "52cddac5-5a64-447b-a93f-8066036d7b5c"
        },
        "item": {
          "id": "a4729919-d462-4060-9057-3f169531008a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dcf5f6a2-265c-41c1-928b-d38e7e24a890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5950bf59-983b-47b9-b729-c62174ca9385",
        "cursor": {
          "ref": "c10e0613-e3cd-4158-89f1-65d6119fa3e0",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2ab78ea1-49c2-40ae-850a-1cb69834b35b"
        },
        "item": {
          "id": "5950bf59-983b-47b9-b729-c62174ca9385",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "22daec9d-ffc5-45ae-8b74-aba57e8fa056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8e4210-db29-4b17-b4a3-f803421951a5",
        "cursor": {
          "ref": "c30ad3ac-a757-42f0-8bb9-c3edc8e87575",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1ad2a776-7800-45da-b8e7-239e067d7a5c"
        },
        "item": {
          "id": "0a8e4210-db29-4b17-b4a3-f803421951a5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "883201c3-0386-45d8-9e82-a23133884d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c349435-e7a8-4b25-b910-4673d95c196d",
        "cursor": {
          "ref": "3805df53-c722-444b-adad-f7179ae4f8c9",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "193bbc18-a5eb-43ec-b826-1ac615a26296"
        },
        "item": {
          "id": "3c349435-e7a8-4b25-b910-4673d95c196d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dec228a6-b0f3-4d10-bb37-48241c35582d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b398a0-152d-47d1-8be0-edd9285d1ce3",
        "cursor": {
          "ref": "70ce0e4b-0695-42f4-8496-6d8708d934eb",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "71bc9d97-666e-4e28-98e6-8d841abe1d47"
        },
        "item": {
          "id": "27b398a0-152d-47d1-8be0-edd9285d1ce3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a35ac58e-0004-47ff-8bbf-c31d4e4eb8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960e674c-9f43-43a2-9d5e-e63966baaa2b",
        "cursor": {
          "ref": "6c56ff8f-fd3e-4f42-bd36-f9a3f676f0e5",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d2862f06-b399-4839-b519-780ee6bdfdea"
        },
        "item": {
          "id": "960e674c-9f43-43a2-9d5e-e63966baaa2b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e626ba05-36f3-45bd-8adb-55035fd01fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238fb32e-b187-465c-8465-d0c95c9bc7f7",
        "cursor": {
          "ref": "90bf451d-726b-4fd3-8e01-582e06238865",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d6129fab-0fde-41ef-bf8d-64155244d0bc"
        },
        "item": {
          "id": "238fb32e-b187-465c-8465-d0c95c9bc7f7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6c4c1909-27c6-4d70-9c12-8d9aa7720d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4369e688-4700-4c2d-a28e-a677edfbd3eb",
        "cursor": {
          "ref": "e14e0435-61e6-463d-8426-1f2af96b5658",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b206d21e-85d2-4627-9757-2242ceb88132"
        },
        "item": {
          "id": "4369e688-4700-4c2d-a28e-a677edfbd3eb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2960e749-93ef-46df-82b8-6737e88947ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b90ef3-b0f0-4f39-bc10-1efddfe482c5",
        "cursor": {
          "ref": "2205b583-a8c7-4ed4-9c2f-d496a4bcf8b8",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "506babcf-7b8e-48c4-ac90-1f2a3117ba98"
        },
        "item": {
          "id": "63b90ef3-b0f0-4f39-bc10-1efddfe482c5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "738222c7-130d-4c21-b5cb-a51e342ff35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277260c0-7a14-4513-9226-8a5935a82980",
        "cursor": {
          "ref": "b1563b00-6f03-4c00-8940-c05f17a5a124",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f63692c3-9521-4164-b7a1-db2a4170a8e0"
        },
        "item": {
          "id": "277260c0-7a14-4513-9226-8a5935a82980",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f241de07-688b-402f-9268-c1a569789adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156bc176-8fd0-4d96-99cd-c11f734d7f8e",
        "cursor": {
          "ref": "01804998-1cf4-4def-936c-7f20cf676740",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3cbcd84c-ae89-47f5-b4e9-0f529b79b43e"
        },
        "item": {
          "id": "156bc176-8fd0-4d96-99cd-c11f734d7f8e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "11aea21b-a292-4158-b70c-f12ee2d90e53",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "61955773-17ad-4e37-b80c-4b039587e448",
        "cursor": {
          "ref": "67d88705-07c5-4a25-b537-0fb0f4bb001d",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d8c19f4d-785d-4f96-935b-bf289ce649ab"
        },
        "item": {
          "id": "61955773-17ad-4e37-b80c-4b039587e448",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d94b4b58-871a-41ec-bb8f-df9be51876e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb65511-b680-4645-9d75-3b69c5e6c662",
        "cursor": {
          "ref": "534737f7-5483-4d48-9b4d-2f65a49c9d88",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b3cd9946-800f-4716-b6ec-c66629975e43"
        },
        "item": {
          "id": "4fb65511-b680-4645-9d75-3b69c5e6c662",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "043b5827-65f9-46f4-a47c-a6c25e1f300c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a76b86b-bcdf-4865-aa92-585f36b476ca",
        "cursor": {
          "ref": "78ed16be-ed2f-41f6-bd28-5c29ef2713a1",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4c30f987-f487-4417-b3b0-9eb6165d43f4"
        },
        "item": {
          "id": "4a76b86b-bcdf-4865-aa92-585f36b476ca",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "22d40fcc-36a0-439f-a11c-537c1b08fd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f334a3-6ed1-4ca7-863c-40afedf4fd51",
        "cursor": {
          "ref": "b8fcb310-9c5c-46f2-a605-79b58380a0a5",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2f42d9ab-3f70-43b0-a4c7-c13d881ecb3f"
        },
        "item": {
          "id": "d4f334a3-6ed1-4ca7-863c-40afedf4fd51",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "10096931-97ee-46c0-9257-1f07f3906da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2cd3c8-6734-42e0-94fc-d84c8f1009cd",
        "cursor": {
          "ref": "3ae34728-f003-4d48-b31d-93bc08b5038d",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fe0bffba-5f82-4997-810e-67363e9f83a5"
        },
        "item": {
          "id": "1e2cd3c8-6734-42e0-94fc-d84c8f1009cd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e347505c-6396-425f-8bff-a9488efbd191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab2e3f5-c576-44e6-a66e-40cfed756d30",
        "cursor": {
          "ref": "b9e17f69-cbd8-4816-9aac-16743353b75b",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "22e0698e-9142-4cc5-a020-2a1c21e9b1ad"
        },
        "item": {
          "id": "fab2e3f5-c576-44e6-a66e-40cfed756d30",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ec05b9bd-4493-4f28-b575-dd21c51904b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b383e4f-36b7-459a-83b1-8698e75987b6",
        "cursor": {
          "ref": "8584cb40-ac71-440f-8527-4d39aa63b344",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f0c66045-ccb0-4d81-91a6-892ed3d01074"
        },
        "item": {
          "id": "6b383e4f-36b7-459a-83b1-8698e75987b6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "835645d8-5fce-433e-b546-b49d78c89518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ae8033-292c-4bca-b291-4dde39899f76",
        "cursor": {
          "ref": "ecc9c745-6710-4444-8450-368b98f60a49",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c7d91071-7794-4154-9854-d8bafde66254"
        },
        "item": {
          "id": "e5ae8033-292c-4bca-b291-4dde39899f76",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "71e85025-8490-47df-9da0-cc3f43ecc8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94d6bcc-49e6-4c38-86da-528d67d7ea84",
        "cursor": {
          "ref": "3e106c89-a272-4740-9ce2-9cfa87b73773",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5114f0d8-9db0-4635-b817-ba74e63b4b03"
        },
        "item": {
          "id": "f94d6bcc-49e6-4c38-86da-528d67d7ea84",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cefb7207-80bd-4942-9913-c1de69364506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcffe5c4-1def-47df-9ad7-777f2ce247e1",
        "cursor": {
          "ref": "bf51e11c-d465-414b-87dc-9fc169e122c0",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7067b667-32ea-4abe-b95c-3e561a3755e7"
        },
        "item": {
          "id": "dcffe5c4-1def-47df-9ad7-777f2ce247e1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c78c56fe-0a91-4e19-ba34-a975b5da0959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1ffb0e-7d57-41f8-9874-ab2db09cc990",
        "cursor": {
          "ref": "8f991d09-6e96-4e3e-b8b8-56cdd3218a8f",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ea5a9814-510c-42b7-a938-f022e91d06b3"
        },
        "item": {
          "id": "bf1ffb0e-7d57-41f8-9874-ab2db09cc990",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fe43ccee-5165-4691-b723-907ff49833fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf958918-d482-49c6-8a20-4845bced0a2a",
        "cursor": {
          "ref": "f565bc3b-41b7-4281-aafc-bdd077279ae5",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "aabfc1cd-bed7-4247-a169-3abf16a8bcb5"
        },
        "item": {
          "id": "bf958918-d482-49c6-8a20-4845bced0a2a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bbfc4502-1308-404b-9a27-649c9aa08009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646327fb-ead0-424a-b1d7-5d92d21662b2",
        "cursor": {
          "ref": "ee7abf5c-fa12-4281-af85-b01fee4f51c7",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7b20f9d5-81e7-483f-bb5c-b1eb71cc5092"
        },
        "item": {
          "id": "646327fb-ead0-424a-b1d7-5d92d21662b2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "41db426d-0d8c-4871-9340-88cd28e133ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e50af73-ce0e-4bf6-8622-0539ff32fb32",
        "cursor": {
          "ref": "c8d43e2b-45a6-4d4c-b663-f836afa790ef",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "480eca40-2bd7-429d-92c0-e9c000bd6a18"
        },
        "item": {
          "id": "3e50af73-ce0e-4bf6-8622-0539ff32fb32",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "defb9d69-5cbc-405f-b717-845c23767a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c5b50b-dc8e-408c-96ca-a28dd196394c",
        "cursor": {
          "ref": "78d86d63-ea46-4cfc-81e9-fdf8507dca78",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c379e53e-78b2-457f-8409-a6636c18436a"
        },
        "item": {
          "id": "73c5b50b-dc8e-408c-96ca-a28dd196394c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f81e03ca-c912-4e6d-a4d8-69c0eb131d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fab7dc-323d-421e-b45d-20c840f8d029",
        "cursor": {
          "ref": "31781256-0e2a-4102-baec-5568c79e69e7",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a35d30cb-edfb-4bcc-917b-9a5e3632a2d7"
        },
        "item": {
          "id": "f2fab7dc-323d-421e-b45d-20c840f8d029",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c8361731-f9c3-46be-89a2-28637a93f326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01d69f1-b449-47c3-acc9-0111122754db",
        "cursor": {
          "ref": "8e2b3bda-7df8-4c1a-b78e-0f721316a2a3",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "26b43a14-aeba-4655-bab6-15fb35b1cdfc"
        },
        "item": {
          "id": "b01d69f1-b449-47c3-acc9-0111122754db",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1f958a25-df2e-43b6-bcff-8572acff24d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a20486-7f40-452b-bb56-744a26365633",
        "cursor": {
          "ref": "71e0bddf-74fb-4eaf-bec1-b198b2bde841",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6dec6c32-d96e-4d28-98ef-e49db59dcce2"
        },
        "item": {
          "id": "29a20486-7f40-452b-bb56-744a26365633",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1a19ad5a-688c-4b4d-8da5-09e1ffc5919c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c116ab74-67ab-4c86-8e0d-fae679a8ce2d",
        "cursor": {
          "ref": "50ab249c-1a19-45e6-bdb8-55574c113f44",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3dfd3f85-8a43-47d5-b49c-be182d10ee35"
        },
        "item": {
          "id": "c116ab74-67ab-4c86-8e0d-fae679a8ce2d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b06696a3-7297-4b2e-935d-dec4e87632ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392958fa-5f21-49fa-bf53-8665d91112f4",
        "cursor": {
          "ref": "10825538-b223-473c-9f00-4d7bf511ae45",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4f774610-b7e2-4375-8cbb-4057d53e38ab"
        },
        "item": {
          "id": "392958fa-5f21-49fa-bf53-8665d91112f4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e75dccba-379f-4a96-a37d-3e27b2fcc771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c21e415-0c43-4593-a9b0-85e0626b920c",
        "cursor": {
          "ref": "e3b8861e-e855-4634-81e3-3998c7d377d2",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5962e0b9-29eb-4411-aa79-6ce5f75013c8"
        },
        "item": {
          "id": "5c21e415-0c43-4593-a9b0-85e0626b920c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "42873b0c-5e48-4aa0-adaa-ce5944781490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9995e96-89d2-43af-8912-63097f6dc4ae",
        "cursor": {
          "ref": "f5757557-7bec-4f64-b69b-43142651510b",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "13bc01fa-fe87-4b6b-878d-8a0405663d2b"
        },
        "item": {
          "id": "a9995e96-89d2-43af-8912-63097f6dc4ae",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "93734c00-0434-4639-95a0-ccf3d0d0b227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5619fd24-8e93-4a8e-98ef-c3215a6f05c9",
        "cursor": {
          "ref": "65146520-3694-4a11-8cae-8451b53ec399",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fd2f639d-be85-4e2e-938a-1bf0d421b2c6"
        },
        "item": {
          "id": "5619fd24-8e93-4a8e-98ef-c3215a6f05c9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "486bf871-4271-4687-a980-e959faf3c880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6c5788-349b-40ba-b009-667ed7a315e7",
        "cursor": {
          "ref": "6f131e78-a7fa-4c70-8c62-d57e3fcba9e6",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ae3b3805-4488-4240-9648-f2cade477806"
        },
        "item": {
          "id": "ed6c5788-349b-40ba-b009-667ed7a315e7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "339b13c6-1c25-4dad-85b0-a7037ee4ed81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bbc14f-b73b-4aca-9022-efd4e2aba538",
        "cursor": {
          "ref": "ccf831ad-765a-478a-935d-3ca55f09f505",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "37de5311-339d-4b05-a5bd-f58c0c36a742"
        },
        "item": {
          "id": "41bbc14f-b73b-4aca-9022-efd4e2aba538",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1c921e03-d20b-450d-ae1e-fa4098ee6038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54585d1-8f0a-42e0-b5dd-59e5331480db",
        "cursor": {
          "ref": "895a51af-1586-4f48-a327-8d1a18da0cd3",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f3b489a0-598b-406d-b815-c07d8f9c7b79"
        },
        "item": {
          "id": "c54585d1-8f0a-42e0-b5dd-59e5331480db",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9ff74ca4-84ee-4b64-9b70-571048ca765f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81498baf-7271-4ae8-8413-5f129951920a",
        "cursor": {
          "ref": "fc06e191-50a1-48e7-8206-2c219d74b30e",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4d64abae-2df1-419e-b987-9706b3fe7d00"
        },
        "item": {
          "id": "81498baf-7271-4ae8-8413-5f129951920a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5e80fa05-e7ca-4966-8bf2-01afb1e51a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5429c9d5-59a1-4afd-9032-aec5bbc16d87",
        "cursor": {
          "ref": "d755ac05-951c-4c00-b71b-3c3cd12e641a",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "808a805d-e4b4-4bb1-b16f-006ba1e1cb53"
        },
        "item": {
          "id": "5429c9d5-59a1-4afd-9032-aec5bbc16d87",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6348eb60-de86-4fd7-b9f7-c598fd1f5818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79721d09-d303-4b6f-9a69-f6b2eafaefd1",
        "cursor": {
          "ref": "fc1bb67b-741c-41a5-a037-e767a7f5955f",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b2f8b2db-64d1-44ca-8a46-a9b8018de506"
        },
        "item": {
          "id": "79721d09-d303-4b6f-9a69-f6b2eafaefd1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "14837391-cb3c-4fc0-9845-2632373edb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a13124-6518-4250-8016-98ad3979b545",
        "cursor": {
          "ref": "29b2c60e-bfad-4a9d-b996-84ac4499eef1",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "107722e9-f739-4a68-bc68-a66eb4aaf985"
        },
        "item": {
          "id": "59a13124-6518-4250-8016-98ad3979b545",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "afc2ef1e-5500-4413-a954-32d5d68b0c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e8a893-9681-4fcd-81af-598651665916",
        "cursor": {
          "ref": "10173c63-7f47-4083-914e-54787e789b71",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ea465234-540f-44ea-81f6-ef050fe23fb6"
        },
        "item": {
          "id": "29e8a893-9681-4fcd-81af-598651665916",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "656de4d0-9db7-41ae-a112-c8b907a10973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f7bb90-0d5f-47b0-ae60-96f6e92e985c",
        "cursor": {
          "ref": "b5b417e4-c27c-41c5-8bf3-0b9b34c72da8",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a7455839-6b54-484c-8fd8-973123e16c84"
        },
        "item": {
          "id": "65f7bb90-0d5f-47b0-ae60-96f6e92e985c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "43cd5b06-09f3-41d7-a3c6-a7c6f936ae10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b60668f-da6d-465d-8f8f-80a1c33a6aab",
        "cursor": {
          "ref": "fdfeb852-122a-4400-8400-40ebe119f49a",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0d9e32ef-1538-454f-9bd2-569b4981fb96"
        },
        "item": {
          "id": "1b60668f-da6d-465d-8f8f-80a1c33a6aab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "553d41c0-104e-4fe0-bda3-93029a3b0128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a2f5b5-9064-4128-8f1d-0373e7d7a333",
        "cursor": {
          "ref": "389ac292-977f-40d6-a847-12d18b1a4772",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "949817f1-0727-4de9-aa0b-5fd983455b22"
        },
        "item": {
          "id": "c5a2f5b5-9064-4128-8f1d-0373e7d7a333",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cbd79a8c-7b44-4519-bc4c-edcd135d30e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bdde0d-7d64-48c5-90ee-1807d2cdc5ba",
        "cursor": {
          "ref": "24b152c3-deb1-4572-8bd6-27da8608abd7",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ca7c5ac8-b2f0-4bba-a4be-6de19e98c09e"
        },
        "item": {
          "id": "58bdde0d-7d64-48c5-90ee-1807d2cdc5ba",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1e74c3bb-e35b-4c03-b223-8996d7fcfe9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c591c54-6f0d-4f8e-a2f1-b01eda09163a",
        "cursor": {
          "ref": "70c3a9db-8476-4b28-8c15-bf7ca143dbea",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e696772a-cce2-48c5-b4f4-ed4c641f3a03"
        },
        "item": {
          "id": "8c591c54-6f0d-4f8e-a2f1-b01eda09163a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ca3cb4ba-e793-45ee-84e0-eb857c158645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540c07be-2650-4c1f-a144-0c01a24b5443",
        "cursor": {
          "ref": "7a08e6c4-166d-4335-96b0-ebaa860ddb45",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5fd4c6f9-00c3-4431-8edf-b9b950cab3b6"
        },
        "item": {
          "id": "540c07be-2650-4c1f-a144-0c01a24b5443",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b90a49aa-a7a1-4ce3-b142-051f4e779f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5db62f5-9c49-414b-842c-2f94a3d3aac4",
        "cursor": {
          "ref": "ace84b03-5998-4b36-a993-30f86bcb1ca8",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f4f68715-c4c7-4e46-8e2b-0dccf9fb74b7"
        },
        "item": {
          "id": "d5db62f5-9c49-414b-842c-2f94a3d3aac4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ef538664-d498-45e0-8456-5c60af3b44dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02018cbe-6ee5-4425-992a-95400fc706d7",
        "cursor": {
          "ref": "94fcb893-a886-40de-902f-278f25545655",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "66450f14-f9af-4ba3-b21a-1f05f31dee67"
        },
        "item": {
          "id": "02018cbe-6ee5-4425-992a-95400fc706d7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c897c2af-54ad-4365-a225-b991e91a0abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd387aa3-cac0-4257-8f06-1e400b424b40",
        "cursor": {
          "ref": "dd834ce1-ab70-4a70-aa11-f04b37aa464c",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d0a9971f-93ca-4093-8dba-109c2ed52ae5"
        },
        "item": {
          "id": "dd387aa3-cac0-4257-8f06-1e400b424b40",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "60f3c5af-9293-4c0c-b047-8edcf37af243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755e72d2-9d54-41d2-9a66-5a0da7464db8",
        "cursor": {
          "ref": "0008822b-5d42-47c9-8f54-f88380c48e48",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "14f2e587-1033-481f-95fd-a145070d49c7"
        },
        "item": {
          "id": "755e72d2-9d54-41d2-9a66-5a0da7464db8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "79e0b429-087e-47e5-b6c7-f6f102f0b322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9c7502-7289-49f5-80f7-5e2f3d848c9a",
        "cursor": {
          "ref": "b5478d21-3225-4030-8326-e0d260bd5289",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "54624f59-21be-410b-adc2-ea374ddc1f58"
        },
        "item": {
          "id": "ed9c7502-7289-49f5-80f7-5e2f3d848c9a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "11976e30-08db-4ac1-80d6-68e1efc84c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927dd6f2-b94e-4345-bb8f-1d3b3d2c590c",
        "cursor": {
          "ref": "7e975772-26ac-4eaf-9c42-7346ab80c291",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2eaa9945-606a-4606-894c-73d15cf42e76"
        },
        "item": {
          "id": "927dd6f2-b94e-4345-bb8f-1d3b3d2c590c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9ed47ba0-4349-4836-8c61-32bbcadc4713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd283e87-0064-4fbe-9c45-37bbf6dd95a3",
        "cursor": {
          "ref": "6aef9039-0493-4396-b97a-9f1b7db5cb72",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f29a8c12-5d81-4aae-bf46-2f2abf49e349"
        },
        "item": {
          "id": "cd283e87-0064-4fbe-9c45-37bbf6dd95a3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f7adf0e9-babb-4e24-9869-a0265e4adf67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18cbd79-e55a-4295-bb25-e47be089cdfc",
        "cursor": {
          "ref": "5d3db5b4-2563-4f15-a04d-5535b7b6fa86",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cc46aaef-fdcc-4fd6-a8dd-69ac564d1ecd"
        },
        "item": {
          "id": "f18cbd79-e55a-4295-bb25-e47be089cdfc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "736c095b-e889-43b3-a144-e343e7f50604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c599df23-c6fc-4524-9377-9a180a5b69cc",
        "cursor": {
          "ref": "8f4a86e1-6fb0-4d4a-9183-04c9394ad217",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "336083be-c4b4-4ff8-8040-ff70fe17a491"
        },
        "item": {
          "id": "c599df23-c6fc-4524-9377-9a180a5b69cc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "364bc17a-fa21-462e-88e2-9e1c181e9327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65923170-15b6-41a9-ad5b-af487990a637",
        "cursor": {
          "ref": "c87b6c04-9da7-449a-b837-7161dac28927",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9790092b-719a-4eb4-b5f8-94477bfba8e8"
        },
        "item": {
          "id": "65923170-15b6-41a9-ad5b-af487990a637",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d772b61b-41a1-4ff7-981e-75e88d3c83e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f877ed-c925-47b7-9932-2bdb9fe2e5b7",
        "cursor": {
          "ref": "20b73390-464a-4a4b-8b97-3bfe3a1cae59",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b73d859e-adc3-4bd1-943e-c175ef567731"
        },
        "item": {
          "id": "d2f877ed-c925-47b7-9932-2bdb9fe2e5b7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4445ec21-3a11-415f-b5b8-42e776b64e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea28977-7504-48d7-b596-50a8a0527951",
        "cursor": {
          "ref": "339ab1d1-a7ce-4ca1-a700-74b56afc824e",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "520c91bc-9f1c-4809-b7e0-b9d84b3ee678"
        },
        "item": {
          "id": "cea28977-7504-48d7-b596-50a8a0527951",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "17913bcb-698e-456f-b490-c5e935219348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e5b5ac-23d6-44ad-b922-a42b00dbfd0a",
        "cursor": {
          "ref": "85abf7a4-1183-4f57-a1c6-a40a216ad68b",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c292a6a3-ee8d-465b-81d7-ec9b0ccdf8ff"
        },
        "item": {
          "id": "c2e5b5ac-23d6-44ad-b922-a42b00dbfd0a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9cc86f14-7aed-4810-8f80-a1c3cb8cbb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87b48df-a488-49cd-bf59-8dd1e42b8294",
        "cursor": {
          "ref": "30c473c9-203c-4b4f-9272-543debdb0bd4",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "afde9f79-3ae8-4fef-ab95-02f18f0eac34"
        },
        "item": {
          "id": "e87b48df-a488-49cd-bf59-8dd1e42b8294",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1d8ba15f-4f65-474c-a6e7-53f6464d232e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a000ee-f2ba-45a8-8909-e6aeeef424bd",
        "cursor": {
          "ref": "48dbb07f-504e-4564-aabf-744907dfb361",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7d61af35-7b0d-4a5a-ae86-ae34fe00966c"
        },
        "item": {
          "id": "11a000ee-f2ba-45a8-8909-e6aeeef424bd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "df1ea6bc-3baa-4048-a1e3-806e40cec3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb997f9-2938-4a30-b7a7-31c7a6b7512b",
        "cursor": {
          "ref": "127f360e-e226-4b87-861a-7800b5ae94cc",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "02eb9bca-7e85-428c-bd4f-1152024bc054"
        },
        "item": {
          "id": "ecb997f9-2938-4a30-b7a7-31c7a6b7512b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "119e7477-e739-4c87-b0b6-98c631605764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a223cf2-c9fa-458e-83bd-ee8acd6c0b12",
        "cursor": {
          "ref": "178b799c-d3ac-4b79-ac7f-acdd97563a1a",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b4d63c17-8c11-4e06-86cd-6e6dd94fe9fa"
        },
        "item": {
          "id": "4a223cf2-c9fa-458e-83bd-ee8acd6c0b12",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5a60bb6c-5f89-4c4e-a758-9bc316be91ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cde6d4d-1138-43d8-bc21-22ee7cdaaad9",
        "cursor": {
          "ref": "cfa3eea5-7066-4841-af65-49d802aa86f0",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "92196476-7e8d-46b1-aa15-628059023bb2"
        },
        "item": {
          "id": "5cde6d4d-1138-43d8-bc21-22ee7cdaaad9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "07c590a2-91ac-4fc8-80e1-af103bc206b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210d1320-53e4-4839-ab21-80472a045795",
        "cursor": {
          "ref": "332ca6df-6fb5-4e53-babb-781d6aec82db",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b38927b3-8167-40a8-a9db-6c6eac9c120b"
        },
        "item": {
          "id": "210d1320-53e4-4839-ab21-80472a045795",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0e643ae5-c951-47cc-b182-95ece1bbea86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b65ba3f-78cd-4154-a209-b93b2c30fb42",
        "cursor": {
          "ref": "3a1ea258-4324-449e-b1ce-a1c60df2c45c",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c59b53c7-7be1-4f89-b6f1-4b2971e78c94"
        },
        "item": {
          "id": "7b65ba3f-78cd-4154-a209-b93b2c30fb42",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e88d7bc4-bc95-43c1-be30-0be90a15d06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12b91fd-118a-43d7-ad0e-75b05cc30696",
        "cursor": {
          "ref": "eb907ff5-7b46-4b32-96d7-ff22b185379c",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "71a25ff9-22ac-4cca-87f9-5df00e2aec02"
        },
        "item": {
          "id": "e12b91fd-118a-43d7-ad0e-75b05cc30696",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1d3c5ab2-406c-4bb0-a85c-c8ddf34a4f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d885d6b7-8404-4306-82e4-bb59c1df0c73",
        "cursor": {
          "ref": "412c26be-6c41-4b8d-94b8-0a750638a1b2",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3c3e5b40-f29e-4fb6-8c74-8c19776a50bb"
        },
        "item": {
          "id": "d885d6b7-8404-4306-82e4-bb59c1df0c73",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8e13ab98-f726-47c5-aebc-591745adb7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f86552e-98e4-4132-8982-8f23f84a0311",
        "cursor": {
          "ref": "ba86e40e-e7df-4a97-aef4-61f132575e9e",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "159eb65e-25d1-4d43-9e54-463d69a48193"
        },
        "item": {
          "id": "4f86552e-98e4-4132-8982-8f23f84a0311",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "01925f2b-615f-4063-880b-6a85b4981a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdb26ff-4ec4-492b-ac26-f8ef949dce7c",
        "cursor": {
          "ref": "09390c90-5383-4e90-a2fc-0ce914f21a72",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ab30abf9-e7e2-4120-9599-f287a8bef4c8"
        },
        "item": {
          "id": "ecdb26ff-4ec4-492b-ac26-f8ef949dce7c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "67e6dc13-4947-4e9d-9aae-23b9e856035f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9bcd7b-494d-4ebd-8b63-14e8f2aa4f1a",
        "cursor": {
          "ref": "d2301ad0-54fd-4b8f-b9fa-009726403836",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "adcfe755-0471-4442-8946-346fd31f1b73"
        },
        "item": {
          "id": "1f9bcd7b-494d-4ebd-8b63-14e8f2aa4f1a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "77c14ef8-235b-419b-8757-730a7f3937f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823a17e6-3296-40cd-ae2b-112ee26f3308",
        "cursor": {
          "ref": "b9b47207-7c6f-4efb-88ae-da821979b66b",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bb9a8871-12b6-4d78-a716-2b4a82122876"
        },
        "item": {
          "id": "823a17e6-3296-40cd-ae2b-112ee26f3308",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fc3fdddc-0786-4938-8af9-c662ebb17102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55943751-2a10-4f11-b8fa-1a59f9169e63",
        "cursor": {
          "ref": "09a8f67f-66b7-4f42-98b0-b9cab9ebad71",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1d3693c5-58a7-4e39-b54c-8a9eff70af47"
        },
        "item": {
          "id": "55943751-2a10-4f11-b8fa-1a59f9169e63",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c72edd2d-c3b6-4402-8577-e1a045507d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733465f2-777c-4d37-a2f4-18061d16b2a5",
        "cursor": {
          "ref": "75e8c452-564d-4668-8c3c-e77b5b765a01",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "37e74407-c795-4aa1-b54c-6360814a54f7"
        },
        "item": {
          "id": "733465f2-777c-4d37-a2f4-18061d16b2a5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d8d55cd2-c287-4102-957a-b3395ea67209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b53b41-82df-4f54-963c-8314468838aa",
        "cursor": {
          "ref": "69da6592-3920-4f7b-a0bb-bdabb9967b4a",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "60236930-0936-413a-a027-acc97db60d70"
        },
        "item": {
          "id": "57b53b41-82df-4f54-963c-8314468838aa",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c7737681-dffd-4f92-a123-a6abef90c629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bedf831-7290-46c9-81e0-ef8e191055ea",
        "cursor": {
          "ref": "c72fea06-6392-4326-9550-10175c8094a9",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "154be4c3-dc69-4008-aca8-01b16abe4541"
        },
        "item": {
          "id": "8bedf831-7290-46c9-81e0-ef8e191055ea",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a2b4785a-1608-4632-9739-499acd9af9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216248f1-4bd0-4388-aa72-9cf49e9614f8",
        "cursor": {
          "ref": "8bb1a37c-35e1-4784-828d-0ad9efbb8bb5",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a5ffd7de-b5ff-4cf9-a46d-e33ac0fe00c2"
        },
        "item": {
          "id": "216248f1-4bd0-4388-aa72-9cf49e9614f8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c3cb19c0-731f-4bcf-962c-284c98c5f519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50975c61-3878-4483-989e-bcae26b06821",
        "cursor": {
          "ref": "c97eb173-5fef-4cc3-8277-f9e0202b2887",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5beda55b-4858-4bbb-b05c-90efcdd0f8a0"
        },
        "item": {
          "id": "50975c61-3878-4483-989e-bcae26b06821",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ca7bfc83-a64a-4238-90e3-a120c1a861aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b52b86b-fc34-43a0-b3ea-a341ea344409",
        "cursor": {
          "ref": "496f942e-54e0-4fde-b5e2-2f1fa26236e1",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e1e1b749-a8b4-4cad-92a2-4119f894032c"
        },
        "item": {
          "id": "5b52b86b-fc34-43a0-b3ea-a341ea344409",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9613c46d-b3fd-4eb7-a497-639fe56ea2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97636d5c-b349-4401-ac81-9a0b1625dbb7",
        "cursor": {
          "ref": "b991fb67-36ce-46d4-a637-8f93f5817cfe",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8060d98a-ee79-4466-95a5-3087a6471e80"
        },
        "item": {
          "id": "97636d5c-b349-4401-ac81-9a0b1625dbb7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b3732bc6-710b-4602-aadb-117256804066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e403b05a-20f5-4c51-a67e-a4e91dd9adb2",
        "cursor": {
          "ref": "c6e50e94-b704-43fe-bf8c-f1591c72f1cb",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "12920c94-b434-4aaa-af7c-f2e2672a0392"
        },
        "item": {
          "id": "e403b05a-20f5-4c51-a67e-a4e91dd9adb2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "840ff9fb-b678-427a-b410-da135e33287d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5415ecf5-517b-44f5-8e99-be467a6bc54a",
        "cursor": {
          "ref": "b517ab09-afef-4684-a575-7c081d2f90d6",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e9fc2ff7-ebd3-4984-af00-e87a63034ea1"
        },
        "item": {
          "id": "5415ecf5-517b-44f5-8e99-be467a6bc54a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2e19a242-e0ea-48e4-986b-b9603aa361bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fbeda5-c052-4bc2-829d-22cfaf1f285c",
        "cursor": {
          "ref": "828192b5-fcdd-40df-b7ce-47395aef32d5",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "32ff0a7f-9702-4d65-bd26-2eee0c5d9a97"
        },
        "item": {
          "id": "56fbeda5-c052-4bc2-829d-22cfaf1f285c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f113ae21-3cfa-41a0-9a83-13b550149da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f086c4d6-4c96-4f32-a9a6-c2b6081bda19",
        "cursor": {
          "ref": "76b714e4-f149-4826-ba9b-3063572a87d4",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "19524258-6ba7-47ef-a9aa-3d0caefb58d9"
        },
        "item": {
          "id": "f086c4d6-4c96-4f32-a9a6-c2b6081bda19",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d195050c-a65c-4b77-8324-ad46465fadfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a67419-df5d-476f-94b7-213966c66f3b",
        "cursor": {
          "ref": "84556927-74cc-46f7-9ddf-b59953665849",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b4f24b5a-617f-4f95-ac82-1457c66db5e0"
        },
        "item": {
          "id": "a2a67419-df5d-476f-94b7-213966c66f3b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "021af671-99d1-428e-9e89-e0920432d866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b327a1bb-14c3-4c22-bfa8-7a3e949936bb",
        "cursor": {
          "ref": "9ba763c6-42d3-4421-9768-c98d58300f21",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f5a93123-54a0-41b0-a388-a4369f6202e2"
        },
        "item": {
          "id": "b327a1bb-14c3-4c22-bfa8-7a3e949936bb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "51f3f774-9919-47fa-9ed4-02dbc0b8e908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee988391-fc96-4082-9239-5dda5b6dccb1",
        "cursor": {
          "ref": "27a5af9c-cdef-4b7a-8d32-1895aa335925",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a8e00998-c767-4c9e-aabd-fa8e47341ad3"
        },
        "item": {
          "id": "ee988391-fc96-4082-9239-5dda5b6dccb1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "05ea1d72-0680-4686-a25a-ca1b3e5f4f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdb18e2-ad76-4bad-9adb-668d52dce99a",
        "cursor": {
          "ref": "0ed4e27b-8936-4f9d-b03d-e66fb47e85d7",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d2cdec95-44d0-4121-9c40-261a1ca72839"
        },
        "item": {
          "id": "2bdb18e2-ad76-4bad-9adb-668d52dce99a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ede09f61-c489-4bdf-9ffb-177ecac9b3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf54f28-e3b6-44fe-8eba-dfa379990204",
        "cursor": {
          "ref": "fcd2280f-f57c-4dfc-959f-30fa1b8c81ae",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1f29c25a-bf3d-4f7f-b40a-2ca45a845398"
        },
        "item": {
          "id": "cbf54f28-e3b6-44fe-8eba-dfa379990204",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "68328a46-3262-48d9-bbf2-cb64febd9a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bcb7ee-5576-461b-bcab-06b6bc09daf3",
        "cursor": {
          "ref": "8a9ea1ed-1a89-416a-aa75-886699a58b3a",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "92bc6478-ea39-4815-a1e5-a073f8f595c5"
        },
        "item": {
          "id": "87bcb7ee-5576-461b-bcab-06b6bc09daf3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d948eaab-336a-4d17-a43b-ada7872edc83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "266398a6-42a0-4a6c-90fd-a80cdfd24306",
        "cursor": {
          "ref": "d75aebc6-ffea-47cc-bb53-2acba9807664",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1bd7c608-ec99-4f17-8a91-475cc973d0a5"
        },
        "item": {
          "id": "266398a6-42a0-4a6c-90fd-a80cdfd24306",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9e295822-52f0-411d-bede-a6fed024ea5f",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d01631f-d0bf-49c8-afca-17bebe4e6b69",
        "cursor": {
          "ref": "d558a4ab-3cd6-4ab5-9ca5-45bd8e394871",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5538a4a5-1f88-45d3-8f11-5cc1a98b243d"
        },
        "item": {
          "id": "8d01631f-d0bf-49c8-afca-17bebe4e6b69",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b4a44af2-0a8e-409b-b024-4a2fa7be59c3",
          "status": "OK",
          "code": 200,
          "responseTime": 2426,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3e9008-cff8-42c2-b21d-f61098dfc33c",
        "cursor": {
          "ref": "76f6acbc-c2b7-44f2-b281-76226a03b213",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "71d36cae-9c3d-4aab-8e17-a813bf25dbcf"
        },
        "item": {
          "id": "7b3e9008-cff8-42c2-b21d-f61098dfc33c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "12e7983b-e4df-4443-826c-8783453284f7",
          "status": "OK",
          "code": 200,
          "responseTime": 2434,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceca8ae0-8468-48c1-bd30-e1dd7b321101",
        "cursor": {
          "ref": "059c0f36-d4a2-441b-8701-ce9407db4980",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "45300c0e-c0eb-44b2-b8e0-af6727e37054"
        },
        "item": {
          "id": "ceca8ae0-8468-48c1-bd30-e1dd7b321101",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7810d60e-b95a-4323-aa33-2abfb94ac234",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ceca8ae0-8468-48c1-bd30-e1dd7b321101",
        "cursor": {
          "ref": "059c0f36-d4a2-441b-8701-ce9407db4980",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "45300c0e-c0eb-44b2-b8e0-af6727e37054"
        },
        "item": {
          "id": "ceca8ae0-8468-48c1-bd30-e1dd7b321101",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7810d60e-b95a-4323-aa33-2abfb94ac234",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "793dfca9-4d8d-4373-a5d8-0d0aba5b756d",
        "cursor": {
          "ref": "219f25b4-7416-438e-9196-fbd65e2e6e83",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7d7adeba-478a-4a05-bcad-9646d14b166f"
        },
        "item": {
          "id": "793dfca9-4d8d-4373-a5d8-0d0aba5b756d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "73409ca2-2023-4061-a86c-c8af79b4ff06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "9f2f630f-6fda-422e-beda-047074324b46",
        "cursor": {
          "ref": "b5d83ddc-498a-489e-8895-081985140743",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4d5e4b7f-2b55-4c14-83e4-46b208b1ebb9"
        },
        "item": {
          "id": "9f2f630f-6fda-422e-beda-047074324b46",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3be8f8aa-87aa-4967-883e-dc2b2cb8a6fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}