{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ec1123ce-3998-42fa-ae76-709a670125c1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1fa841a8-9ce2-440a-bfd6-70c56b1217fc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79bd1b1d-2447-4416-b268-e91da2154ad4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "054eb5a7-0466-4c2f-ae0d-8b37f6ce5da0"
                }
              }
            ]
          },
          {
            "id": "c894ee10-259d-4168-ad15-112ad55e595b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1f6db4a-acde-4ba1-8c6a-325b2c208344",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f71f2f3c-c47c-4fc2-be73-d2f65986f1ed"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ad7443a4-bca3-44f3-b345-a43b7f5a5c13",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e8383909-c42c-4227-96ca-bb2c46481456",
            "name": "Positive Testing",
            "item": [
              {
                "id": "25713c4f-e056-4b97-9caa-0ac480b85042",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4ea8823-8f2b-47f5-b144-389c47be525b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0d2f3f2-e548-41ff-bf0b-ae435742d2cc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "795dea6a-311d-42b3-b48c-235ecb37f532",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cc758b0-eebc-4d33-9708-3d0d624bee43"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e4d95e32-e425-421a-9de2-d78a2877ff93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c08915d1-a19a-44aa-a169-d7f1614a83be"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e36fb870-d31c-4445-9480-dd18c82fc317",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "91f48a73-d62a-42f2-aaa5-5f3eb33bfa4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a976e81-be41-4a04-9d54-a6d62690c83a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63366d3b-6871-445e-8e04-ed0df8de8d46"
            }
          }
        ]
      },
      {
        "id": "4bb64d80-bb55-446c-abfa-cbaa1af9c880",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5ac1c5ef-bb78-4c3e-8884-224cf19d370e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e943b081-5d47-4ea5-9bb8-b3548f4876da",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dbf80cc6-4307-4625-980c-75ae242cbb30",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33111471-7ae5-4b6d-9662-42c1f814be3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e73c0fe3-ec3b-46d0-988b-92fce19ca5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cf96aa-9972-459c-8de7-3f4042fa0073",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e608349-5504-45c6-a3a3-43273c729ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b40574ca-3445-4315-9613-f466b4c8b491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0956681a-d5f6-4528-9117-fd0a9e761f51",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae31a01e-d154-474d-8fee-a0bce6d27cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee7eef5a-e786-4483-b2c0-fa1ea970d2a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9e83215d-346a-4d44-bef5-dbfe2302c584",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73f9e389-0595-46d3-b698-0d999a16ca82",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8aa6a8-0292-4ba7-a13f-1789caf28eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc9cb0e3-d346-4ad6-b4d9-f8de980f66e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520f5581-5fa6-41e4-b19a-a498634b0556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607da1f4-dff2-41be-af0f-fbafb3b2c479"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a0092962-b50f-4ca6-8cbd-c802405939c4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b3e9b9a-8002-4442-a969-254b9476305e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "327db504-4987-4ff6-9296-7c20e34c5f51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e1cc84fc-1fa9-4d05-849a-bb92bf46a62c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54bc82ed-18c1-4cca-b386-06442afa52ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "270570e2-3d7a-4762-a265-999960d18890"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "718b5955-996d-4460-a3e0-f171a5bc3f06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a702ba80-e013-4b93-a376-1fa73910db45"
            }
          }
        ]
      },
      {
        "id": "1e6a1e7b-fced-450c-aeb8-5d008eb00579",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2b8df965-718a-4ab2-8403-c8eb386e9d83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a77e6cd-26e9-41bb-bfd0-a365b90393f6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bd92315d-5384-4c0a-b8b6-e19447ce7dca",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67236e3-481c-4e2f-9b85-638f1df1c3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f85a492-cb69-49d2-81af-5629378a2a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d2a244-7bcf-485f-9407-8e466964c2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e450c9bf-2579-4c65-95f3-0d1deafe5b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff57c9dd-8986-4c1c-ba6e-67dd2a633509",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53373beb-f039-45d1-bb9c-c1342b031224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0854c0f-7c17-4a15-a49f-1df8d8f22ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bceaa16-95ce-4c87-9df2-7b75d1a6a18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d13f9ea-333d-43a3-8d14-f141b546d407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5580c7f7-cb66-490d-abab-af53211e7571",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a45126-4cf4-448d-9188-e20762545575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deee8496-9356-4d7c-a6f4-15ea2eb3328b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0586eb-5b79-42a8-acad-25bcf1797eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8dcff08-dfe3-44f0-987e-6086cded9aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2155a890-14df-4862-ba01-769ab9b82c59",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38b8d56-42fd-4b2a-a066-760cf67ca3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe70d0c-c3b6-46ec-94eb-b0fa27d60f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa2c6f8-c8d5-47d1-9f46-3a05c48e4747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "791a41e0-9626-47e6-8597-62e750fb4da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ecefec-f1aa-4d7e-abc7-ea0307469281",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad87c895-fc04-47e7-a487-9fd1b6b36313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ae9914-c430-4e81-9f7a-88716ba5731e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502488c4-86a2-4aac-b9ee-299d7443fa63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "548a3b15-c9d8-41e9-a23e-2650ab5ff212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af8df8a-22ab-493d-8e9e-47e15df9c389",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b27a311-4f3c-496c-aad7-22dfaffc6de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ded924-2858-4002-88c5-c78e4aa2b44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a967c5bc-d148-4fdc-9bd4-1e069c522b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba1ceee7-7970-4bb7-8fb9-fdf5785da9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb0bf73-10bf-48f3-9ed2-374a136d808e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b49d663-351b-4174-8222-d7ea5e872aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d0821d-8d0a-4ee9-a585-f8071165b8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ddcf21-2bcf-42d8-9884-2fcd6d44e680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83ae500c-a399-42b8-b461-d0da43ef87f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c92a5ef-15fa-4aab-86b0-e465a8ccdc9e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c289118f-fb5e-46ff-8665-ef2293f458c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39833129-a1ea-4f08-8bb1-d0ec7a61ffda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86fa316-1a13-44d3-b41e-3c98174294a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8defeba7-a474-4c39-9d7a-366968f20c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad102576-5ada-4f59-a7b5-4f530de1da56",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f5d8c7-9761-4026-9af1-bc4daaf5db1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c073b0d-d9ef-48c8-8276-84abd57eb167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4517902-0b08-41c1-820f-5ad7e24c9a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a6021cb-1189-49c7-ac45-9ae3ee302921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d26abf-9d59-44de-8580-2f677fc10584",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d257d3-b975-4d0f-bb31-8f8d5d3620fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec06526-63aa-41a8-b9c6-bc41c6e92122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b408e36-e55b-4792-ad3d-5c9eb693b44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c41d3010-1b8f-421e-9a4c-70a30ddf3539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c317414-b93f-4765-82d7-ca2e11793c1b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2313b5be-0b3c-42ad-bba6-2ad2173476da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d56ddf3-05fb-4b39-a781-f0dfca6320ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fb2a59-197a-4ac7-aa42-fd22c09632e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b128ad9-6aa7-4722-8880-e3b44c240706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc39ddb-4e2e-48d2-9eba-4d01d969ee61",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e77ad3-0303-4eb8-aa72-d5b493723ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3f4396-3b8a-436f-8ddb-deebb3ccabaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ee3886-61cd-402e-8329-0dd0890556d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ea711af-9913-43c3-89a5-b8f0af6a3428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72259ff-c4d3-419c-bfd2-0671c77c90d0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef6424f-317f-40de-aec6-6f05115bfce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a02c2a4-39e4-433a-8e53-2cfada85b303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4c3460-35ca-4cba-94e3-b13a556bc2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb7548a6-b861-4f19-89fb-73b2dc3550eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6ff702-e9c8-4d61-b0f5-687328958250",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0845e139-2362-439d-8f61-e39c50d0022d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762b551c-7419-424c-84d2-04a156bc7a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28382119-6676-49b4-be6a-04b272391de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b17b5014-ef9c-4336-9156-0bf7183ce691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92199e8-183c-45e9-848f-2824c0c91e32",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53badf35-a042-4b99-95cb-b2294f1d2387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398342e0-5cc5-4881-b7c4-915e189518f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2bb79f-8333-42ff-9004-2103b9202135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6169baf2-0ce3-459d-bc5b-c3f7d01346bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5963666c-733b-45e1-88af-f59dcf142a09",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b914b867-4b83-44b3-b493-88acf3a1609d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6fe2df0-9f31-4f2d-8baa-8ae3c5176336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33643216-1944-4600-8bcf-9f779f702271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe0cbf51-e8b8-41b4-a509-45a78d56bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90444ca-f012-4c60-a20b-6adb248cc46a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abeb86b9-446e-4498-a636-a5134bc1c298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91acdcc-5f99-4796-a224-48223aa288bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917090ad-3725-4d5e-a5f4-f6163c9be1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7eca25a-777c-4018-a848-f975ac3ea298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d00c0b0-ca5e-420a-ab10-3a22406e6483",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b59c72-9446-4f31-a68b-30ea6b8c3e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f555c313-025d-4e73-a912-c8c55cb9e904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152edb26-3d65-4fe1-a997-731c082e52a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a46f9970-8538-4989-8316-86fed0ecfa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab298bd-149d-43cf-b4d7-ed6253857fc9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308b4579-78e7-4818-afcb-fecbb89d8d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec62335-c221-4304-a264-d618112ecf2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2c1f65-6e17-4454-bf01-3394da00b1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5722b5b1-fdc1-4987-8277-182382f36986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beff0be0-caab-4281-9c41-f35560775143",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc016ed-e1ae-4654-8dc4-bef7caa88d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6170e8eb-8340-4838-b3a1-0621d8f346c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b2e9b9-b934-4e4a-a04a-fe43e9f9152a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "983371f4-2518-46b4-9537-c2a4dd4af16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953e9ea6-5ffb-4fef-b7a2-f05565df7df4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb0aa2e-162d-46e9-9a87-b0f383b1adec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7c8b27-178a-408a-82f8-2fa6b5dd8908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be366528-bb8f-4f3c-aa50-22971f6b568a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f8a1f8-2905-48bb-9834-30add327193d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51b097d-e7ad-41dd-bdce-e7b0b674df0f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9619a0e6-1e3e-4b3f-941c-0ea2622c0d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2531216e-8ee9-4f02-b2cb-621447354809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159c1ff6-d05f-4ec6-86d8-5a17eecc4989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52572c76-159c-46eb-a9f5-aff42f820426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d5aaca-b7ed-43c3-8108-efd1e55443af",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b338e58-aab8-4b12-9a34-40bf65eec07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec34249a-7c9f-4935-a2a4-b6790c170599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34251ebe-b349-4167-a5c0-c5db0c6d01fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c81ff292-51f1-4dc0-88d8-3ba9f6996993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998de452-2e5f-4514-aee9-6d7e80fa162b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d84093-b70d-44d3-905c-b9edd6fb7ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4026859b-5c7b-4bac-9b55-d83c39e558ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8087e6b-bf7b-4e5a-8354-825953433198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c963f8e-ca8b-4172-8424-52493ee843d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683a4bdc-09ff-498e-859a-68e2a3471f1f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7753c5f6-41a2-4944-b791-aec1804d61ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78eca23c-544f-4818-a61e-1e85f1da16b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e2c4e5-771f-446d-889e-d540206bb5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c7f198-1aff-4093-badb-277d309a28fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc6efb6-c69f-4266-9714-a45badce8b05",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3c4aa9-4150-4485-89fc-091873da96f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb94e2a-755f-4afc-ad27-001d60ac3682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccdcde7-d0f4-4cb7-b83f-1af090055b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd8b81b-5add-4f19-87ec-d038b80afd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef10fc9-f3b7-46e8-b5a5-aa8ce92a77ea",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eccca27-7c97-4732-bb54-5e86723b9437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccc4024-610c-47e0-8366-b68d69dec83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812f2ed2-d220-4c8d-92db-b90a9746a985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5061b59d-7690-4940-a32b-7dab2c158e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5917bfd-faaa-4614-b0e5-b7a76952c243",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d465d2f7-6e95-4e69-98aa-24777ac65ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf759a9-fc32-41e7-9a57-ebcd8d7b268b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aef019c-4687-4fff-9b99-1ae46c647112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "482a7e43-8a17-48bc-827c-e99b82026b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5987646-c209-4d4a-ac19-6b1288e3fa74",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b303060e-678f-42bf-b842-88f0a93dba99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d79a6e6-944f-4d27-a81c-eca9a7dbe640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1792e901-5bad-40c8-a8b3-2b378e050448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "503052a4-180e-435a-955f-81cf651a6a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa1f080-6d00-4cad-8b85-ad4d3df6bc30",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e89b155-064f-438c-b7f2-d4435d493d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52fae11e-e6ef-488f-ba1a-1f93d522be5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa57827-bdc1-45d6-a8c2-55b64da65b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a49a9de2-0632-4dcf-a970-b5700eac965c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47517c9-b8e1-481e-ae84-8b9eddfd273a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c904175-d848-45a9-a2a3-73a1dfcfbfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8849156c-6a3e-4c88-81e8-e66ee281e57e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf41f31-bc08-4730-a98c-9f4e1f18a095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "164b41f9-910e-420d-a7c1-3f1d5f756d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaba4690-ab98-411c-ac94-e84b51be89ae",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c95e23-1049-491b-bc75-5eb45cde67b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99c45b8-248f-453d-bf3a-b6a4aeb65ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348adb41-d6a7-429d-aaa9-ef671e1f5720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae77527-2162-4186-9823-160861a46650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193c7d4a-247d-4a3f-9256-51ff52653ad6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1898e6fc-4315-4cac-934b-ec7958cab717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7030507-87cf-4f4e-afef-30b8782f627d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088eda8e-69de-46ee-b61f-d85041cb80a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcbd9db-73dc-48f9-97c6-1a5395d60f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7867126-f66a-4734-9d57-a7a838365f53",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17261c47-e9f5-493e-9595-5f8111f33d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33a6f81-8298-4a66-a834-70621135ad25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d274b1f-b075-4323-b943-89a5a9402baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ef03fd-4847-4f25-b476-e8a1d3542adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d7b603-b05e-4057-a7b6-acd4c18b9164",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173dd6b1-5583-412c-beb1-b4c2432ac39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70bdf99-8ca2-46a0-b998-b76490a6df16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2db3344-d932-4794-8aaa-4615f7c6baa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7975e4ea-7de0-4289-938e-7acab6c6018c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fd0bcd-d9ee-4c7e-898a-064f9a0c5a3f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af372fa-cb8f-400b-919b-1b8473dfc126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc3b00c1-14aa-478f-9ae2-9fef1b9995b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e454e1-1495-4e0b-b33a-40a48472ab50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bba70499-9ef0-4961-adca-8574611a1859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898efda8-6f60-4001-a1a2-a006d2a2ac3d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6ffaaa-e329-4dea-a816-c21fd5342470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbb25e6-43ad-4c31-85b9-3ad110bf129b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0e282c-84b5-4ccc-bfac-294f12437163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82fac1a3-f5a1-4dc5-bca3-e06bde204a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02744ca6-7923-4cef-9a38-4e69309c951e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3845894-b2e9-4961-9989-96c1562ccca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4c57c8-628e-45bf-9e26-c6e91eb5dbf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ccd03a-571b-4c82-bb14-d60cc59ddc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "533cabc9-dcb5-46fd-ae67-72416ad13f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d036700c-ae8b-420f-beaf-d46819748f78",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0934efcd-d6bc-4dd0-b0ca-18f7a8f253fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb8ce91-97cc-44fa-82d5-f472c806af4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd8ab51-2dc0-48db-a5d3-43560d5d7af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c14616a-67dc-419f-b2ab-66d2ec68ec87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03be0743-b807-4186-833e-12e7e37faf0f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac61367-e035-4f79-aac6-86b4fd66f827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28388a76-a562-4bdf-92fc-c4fdc24ddf12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c68baa-2e52-4f74-a6c3-1f5cfc178975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e56bb39c-8d1f-437b-a229-5e9b84191fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a211d28c-8467-4557-902f-3ea06710444e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5092c78-a029-4535-9d66-5600f82b482a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54486724-95da-4109-8a17-58ce5e679976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48d8ddd-7446-4c39-a4a3-51533157cc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f67e6ced-a60b-4513-b09f-1764e5fca96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3e3d77-4b7b-44c4-b89a-ef2e24e31297",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6279a431-32be-4400-8d67-84be947a18af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3703f2f-b6e5-4085-ac20-d4e5fb5f478c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d698a2-8223-48b0-8fc2-f37fcfbc49b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2dab50b3-3f91-40b6-a4c5-df33785bdc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f18b88-7fb4-470c-a895-32532dc73547",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b13afbf-e301-418f-8181-38ec45f898f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ceb3736-8670-4000-9f1a-70d8c73711ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04af318-053e-4662-846c-b61f44882a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "277000ee-319b-4873-9107-dae76147de0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b85e03-a7e0-4b80-816f-ca8b896421fd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaad70f-ac59-4df5-8bd5-6b87f25a2119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0d3c61-c4e3-4c66-8bfa-20d5d8fcb756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfee0b85-cb4c-4a27-83a7-00c97062eaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a38ae3d3-6fee-488f-8539-891f993cdb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3526013-d3cd-4dea-b350-86051b79a954",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07559d38-56b2-431d-9b2e-4031843005b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6572adee-3528-40cf-b480-a87bf29ba55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3d4a36-96b6-40f5-a38f-2c64c12dbb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d2ce7a-247a-46c0-9565-278391dfd862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0433276-a9ee-440d-9384-6ac7ee701123",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450f4da1-6c0d-4ec1-816e-537bc8215053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b81910-6771-423f-81ce-c3783a2978d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b2925a-fab6-46f1-8e7b-132b7ffe63ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b35410-feeb-4691-ac53-2d839813fedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fc626b-64a2-40a6-bd2c-89fce3c739a3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db2d44c-9329-4383-9d97-d4b943f0fd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a015476-bd4f-47aa-bfc4-21a1bde02b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a84646-3e2f-42c3-885b-b39f86ef775a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc1477d-a094-4768-be6c-c4fc1248cfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5c6759-537f-4c44-8f59-69abbef075d6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf07c2c-65c1-4d39-8b2c-e11f3d3f5d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544dcf80-7577-47a8-ac5f-23cefecec154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50c6360-1573-4d88-9617-7240961e04a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f40b3c6d-c86e-4768-ab90-018677ca23d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01a6b04-e328-46d9-a4a1-9d9024a4f272",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9331412-792a-4385-95f6-7c39d850cda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cff6aa7-476e-4e0a-8500-2256fc0bfc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8960a0f3-7921-41e0-8e2a-921e3b2c703d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a304496-79be-4216-b619-f6fad0986dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcae3681-dc1a-4e34-abf6-315a6fb01b86",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67a89c2-786d-44f2-924c-7d035976f937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7322871d-4a12-437d-9f68-3a5626bb8359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457fdce0-ee0c-4749-8d31-ceddcc4067e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41e029cc-5202-4706-b49c-f31fad42cce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b606bf0d-da05-422c-a6cb-c3fbc2d8fb93",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de895ee6-e2c1-48af-92d1-27fdc66144e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eaf8011-665f-4d5f-99f6-4a335a2fa2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af3ac13-a3af-4731-b40a-6f202ead3d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d73045dd-71f7-4854-9d8e-28a6d34ed366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6335b2-27b6-4bf1-ad2e-156cc7bcc0ac",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdca08a7-c43d-423a-82dc-648f5f31dfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67dd3fb-526f-4768-be8f-77466175278f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39e8847-a7d1-44ce-b193-6f210a173982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5c2707-f68e-4ebf-a311-452442779e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625139b6-91d3-45f2-b89c-2eb668a9bff9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca9c2d6-f51a-40db-a3d4-727f551a3bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492e2b3e-5fcb-4709-9dd9-6fd57fc66aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787a5ec6-e882-48d6-ad5b-2f91b2b6e179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8b322d-dd78-41b1-b867-bcf32a3c21f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7821fff-3944-48a3-8a6d-f86f04b6b2b3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11244a25-8f4b-4dc8-bcc6-dacf2c666fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f265625-5728-4fea-8d17-a9071e4546f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eba822a-8898-4572-a15f-cad055556ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ee9131-0be6-4b2e-9224-430acb1b55a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071354da-219d-417e-ab18-d91efef70e8b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b946f4e-ad78-4052-9f89-dc54376bbb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f75eea9-8033-4ee8-8ab0-17585a1961d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d88505-d2d7-436e-941a-72dd350224db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc2a98b-f47c-46ee-94d2-431760521709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b448476-a75a-4ac7-b1d3-94e5ac27cee1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbec3dfd-0622-41bb-918d-3e2e18648b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4819e28-8758-491e-b503-6f18fef082e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1fe7f1-0dfd-4d86-bf8b-1f85b58c3509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "74c83939-6077-4355-a2f2-a5b0e00fc69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0561f24-20e6-49ce-a2e0-55873104c8c2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236c22a3-3010-4aeb-9fde-c41beba9f7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bbd03f-5c12-4285-ad27-510c0239cb40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43a77af-886b-4cfe-8ab3-07bcae6783b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5edbe4a-b680-4eee-af9a-558757329e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53866d23-266d-4750-be10-c58f673d724f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bc52df-2199-4881-88c2-ad1ca4e2783e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85236a34-bbb5-41cc-bad3-a856864bb78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f4203f-fd55-4050-ad82-4c5e5a4040c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "220f59df-3f6e-4bcf-9c79-3cac1f602bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bd206d-a7e8-4bd4-925c-16f5b2ab4441",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81f93bb-1fdf-4681-90ff-8e879c9a3793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86b1bf4-0db2-43f8-a518-059b29e9d76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b86d4a-a9ea-47f1-a305-14e5d40114a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb42daa-555c-4c30-90d1-e5f549a091d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79605c33-8744-4525-bb50-adfbde7feef9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244ed4c3-eb74-4aa4-bed9-d371426299d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd3d92c-9f8a-4957-a6a1-11eab93633c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6d66f1-250a-4d68-a814-e1098f403a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "89dcdbd3-9424-420a-a567-b2f4287d340c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59e11d2-8ec8-4877-a0d0-7e3a21c1dcdd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0bd8a9-801a-4ca8-a511-b99a25551638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57034f1-04d1-4843-9ba4-090b9156596a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43b542c-6cb3-4cf5-8fdd-0910e80b1a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "864b6046-fa39-4d82-b595-b5384af92f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d301175-3ae2-4b90-af3f-801f85de39ea",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5e81ae-4791-4cf2-9c46-3da57af85a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3fb160-05c2-44c4-ae2c-395eaf6e763d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5961b63-c199-4b65-93d1-6d3f5bb57c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1624c8-a8bf-4018-b040-ea34b642723c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20495e35-759a-4e79-b3e2-87bc2451d28b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa85467-02b1-4f39-aeef-1a6c8f3f2b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c77f5f-e0e2-47d5-902b-4594fc91b388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e6767d-4775-45ac-9b22-032ea8ac5167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e349c95c-81b0-4b73-a930-20fea7a92027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67e5889-41fb-48c0-bcef-9415db4dac43",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3697b2b-f3d2-4eea-aecd-644387d7e479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc33217-8761-498d-85e1-cdcedecd488e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a3423c-4309-4828-ac77-92ef1a47f0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64c2e017-ac59-4eee-9a4b-75e69a3232e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0853c6c4-565d-4873-9143-85dfc3fd2178",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d67f45-29a6-4a30-86d9-c24678c9a862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0288db-842a-4da8-903c-76902950da79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b4d51a-32ff-4ec1-a94e-4dd3c3192bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed62579c-16ee-487e-af94-f57ad631fdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eaf453-54ce-4438-b2c8-f2945c24e784",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0748bc-767e-4627-9d5f-048330b3f63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a37348-8efb-41dd-a461-d0aecba436be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88192b50-764a-48f0-8151-0353c116f9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5de8548-5338-4e10-8682-a1ea4b7366aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fe5591-9dd7-478f-9bef-1bfcaba76d9c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313a73f7-7bef-41e7-8604-ddf96308cd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefa8a7e-d7a5-410b-a1be-8e109e330ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db084a2-65cd-48eb-9493-325c48753db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "942f891d-27b4-4e86-8a40-9d7d7c73bd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170fd7f4-0eba-4e7e-8e4c-d62aab9990fc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a2b90e-9b1f-4c7a-ad85-d9297bd5251e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f490c1-bc68-4c8d-b351-6298eb7eb528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be500b2-1d31-4a99-8011-505073c1089d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf30dd82-59d7-40c9-bc40-69516a7c5473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2afc35-b7ea-4f44-b0ae-0195c39fc32f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929e4209-9348-412c-929b-6381fb04b82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a73c84e-ff66-47b6-883d-d372e62b4b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ec0ae0-02b9-4363-9162-992344aa324c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7419c0a-9c2b-4448-b1f0-5fb5fe5652f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0ac52b-b631-4a4e-b0d7-77d7307d8258",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d937988-97f0-4d7c-835b-9c653ca84cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a216ca-c173-4446-9045-e9a70c114eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a1f5e7-27a7-41bb-ba3a-5ff442a5b053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43117cd2-ebbc-4f34-a1e9-5fe599f4f1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c523f0-bff4-4e39-a766-669d9f72b06d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e810cb-5bff-416c-b5d2-3dd56e98db79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb59913-d5e0-4431-b8cc-68ef61283a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf042ba-5365-425c-83a5-c4f39c7bd04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c58796-eb2a-4fcd-bd89-8c840a3db5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310a913b-f2d0-4c29-bcc1-9b7c37e18449",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762c7b85-998c-4deb-8b90-dddfbd8781e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403ffe6f-2c6c-4386-ada8-091303253542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb937512-2bff-48e9-86a2-e969b4b3454c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2958b9af-d9f7-4343-a550-d0b4782dcbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e594a37f-96cc-4a73-9321-d702b8b6bf81",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5214ac60-3891-41dc-9463-9adbe2ec4432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3c4fbc-d90f-435f-a97a-ddd4ac2cb495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a19af5-0844-4da3-849b-b5319b9c63d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "852c85bb-f3ee-4b31-a0eb-66943279c7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0545139e-c9fe-40eb-a6eb-01299fee8fee",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24dc21e-7e57-42e7-959c-a0e7f69e8621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9fbd4a-928e-4488-aebc-5f3e71524863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256b54a1-c309-4b24-9ae7-04de25ed1ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e28258b-aa23-4eff-a475-16d78e13d068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44141964-7dd9-47b1-a00d-269a051979e8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa8fd7d-dcc6-47de-94eb-7d9373481161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f23e867-0f20-4492-840d-8b0ccf7de2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624c1241-622e-4ab6-ae6b-83be08be8e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1d2027-c84c-4833-af76-c0c1f5a64279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777815f8-0a98-451c-8f00-325824e67f12",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16be3726-bb4c-4f0c-8ac0-5299ab53de46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0384a37-d4b9-4489-9e92-fdf032a35944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14262dce-b735-4827-8de1-c990abe948ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0e63d2-ed53-473d-92c0-f971dc924527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54553734-9a39-4bb5-b59e-0e164da2089a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43f89f3-a156-4665-b631-e37f2b375f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eeba098-7a54-409a-8425-78fd794bd322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbc01b2-e191-4b58-851e-a750d1af5b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e48027-ca69-40b2-8c58-8eb5e69be051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfc1315-091b-471e-9a4e-e61f3315b5bd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4316dbb8-0017-44f8-914e-230811e58c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c550f7c8-8aba-4a3c-b6ba-ff124e0ab679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7459d9b8-cc16-44ba-bfd2-b3102f9868fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e3629f-e254-432a-a80e-ef91fdb7ddf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5206d8-ff2a-416b-aa18-29260dff78bc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324efc90-c01c-4f30-bac8-1fcea8adb444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ee8dad-b161-46d2-9c0d-745196df803f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e817ff-1053-4cbc-8977-42dbc7951ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc35c3f-718d-46ce-8dec-1297f36d4819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74613600-bf75-4990-a08e-2566dce15b87",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4809a976-ff06-46b0-9e51-c1490e328bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c02f5c8-d33c-427e-afbf-5ba247ed823d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf167d3-1ad5-4427-90dd-74a0e0ae8049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae214fe6-8743-486b-9399-c97ba3b12c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a60fed3-1c51-433f-b612-ec80fa4bc267",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a33ea0-9fe3-46bf-89b3-14a3490d04d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4425011-c261-4729-94c2-15b681cbcddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aac0169-956a-43e4-a471-3dc4d972b7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "240af35b-effd-4826-b4b8-05bba9fb52eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed20da8-3dac-40a7-91b9-35eff285322d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5c3a35-a76d-4ec8-95ab-c77847b96995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57300323-fba7-45cf-bbe7-adf59181130b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67cae03-8ceb-4321-8fb8-5a9bd9f85337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abf4b070-9833-44ad-a629-c0f7686f3ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc698b64-3ca3-4984-84de-f40eba2f7bf2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33550922-f037-4b51-9d1a-10020299afca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8373cd38-608a-4844-bb4d-b156cd21befc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda7f527-4172-4781-a18f-5fd96118d61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e1cf2e-f73d-45d6-a976-e9064a4e61fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6ea72c-5e68-4ffd-a19f-068a046d4cdc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1c23ca-911e-465f-8380-b92eca851adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2812e47-2335-4f56-9cda-48e8dc11178d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503bdb41-f97c-4109-bdf5-cc4d36a084eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da0ff4d1-3200-4352-a7e6-d608d9ec06aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e0226d-396d-475a-92ab-5133af8b2179",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f13102-31ec-4868-9143-d525b1173997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b57761-dd00-4ccd-833a-e930272c0eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc1d477-fb15-4001-96c2-c0976b71767e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f807a1e-73fd-49b7-a211-abe76dd25744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839dce35-7bb0-4e32-ae71-013894c8ae6d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fec9fb2-be32-4434-ab0c-d369305181be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97dce08-5c68-4c77-8393-6b9ec511e0a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de41780-f3ec-4ab4-b466-8dd1289c86ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3da348-f01b-44b6-a594-d254da8a9f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b180f07f-3936-4019-baae-951e817d2d6c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0259a143-76b4-4016-b370-a20e7ddb2399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009c645d-efca-453d-b5fa-5a82c7ed50a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4e6bec-898a-4f2b-a5e5-b9b48b177254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cd6b34-f39f-45c3-af39-36effd10646e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d656fae5-dd6b-44ee-bef5-436f29431f1f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd96844-9a1c-44b8-86d6-bdb7f8164575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e710b8-9d83-4580-b947-931ff70f1d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91840221-182d-4b29-b448-18f523aed89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "904bf14d-f7c6-4ee6-8c9a-1d375f2f386b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffe1e2a-d903-480e-8467-b4aae009889b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e35635-69f6-4665-8e38-cc2f9439d76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce34859-d481-4430-adec-d47df5a5d912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7ad5e6-109e-4d0c-9a20-4db89d871ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0f7c93-1828-4bff-b576-e984abd5687a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e797584-2bff-4cd7-b517-6d74a44e0b56",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59e8080-ffca-4f9f-8b2f-24b6fa8df2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028e3bb4-f242-4a86-a694-325f7570048e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd86a27d-87da-4e9b-aeae-fcffa1019d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7eaa16f-8131-43a6-88c1-df3ca118bdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db9a374-b6e5-48b3-8139-ccf7bccbeb95",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5903bf3a-1f3e-43b0-ae6c-142fe9ff4270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c1b418-7951-47c5-b36f-1be637d63018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e66c594-9f9e-4377-9b87-ec522c0e106d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0aec24-a723-401a-84ee-a2f9eea4c190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74984d75-3a14-4a32-8024-68ac194ea5b2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9d9c63-416a-494b-982e-57658add9bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "080442a6-22e0-4e4f-a72a-072bdafc6999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad35d063-b57e-4fd4-b2f9-68abec63885a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "94e0a584-c939-48a3-8e36-bc00c89e4d32"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7dced77a-1f93-48f0-8bd8-48a1ba242179",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3052560-7929-4c8c-ac6a-08ff9152da12",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1aac99-6357-4f55-9796-95bb0a54b419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa8838a7-6e4c-4b31-a872-096f4e3ebc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e02f44-ae19-4223-a314-ca08a0cdea1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3c84c45-e70c-4c4a-bfbf-781dc0593f22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42138f02-da5b-4bbd-b5fc-9f4d2bc59f7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5484d1e-bcfa-4d12-b096-a53a1c5514f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c8b59ea-7941-4b96-9ef2-1f9a45b90b60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0b9ac37-fd4d-4bd7-b1a5-2e34980ff8fa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e4c0d1f-965b-45d0-939d-2e037ea6c489",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8150b06-c9ef-431f-a15b-7c2ce526a43e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ebb20b6-97a4-4dac-8eb0-c1543736a4a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a94d7f68-1087-4d59-80ea-744cc1132f60"
                }
              }
            ]
          },
          {
            "id": "5462fd5f-c374-420b-8616-9ccc5bfa89a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "919fdbfa-83cc-43a6-98bb-0fd9bf6f7196",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b95542fb-dcdb-4052-8fce-6179b4cb9888",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbfc459-4861-4f1b-9ae5-0eaf97e01cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0f71502e-b410-4552-9646-f814bd57f60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c663c5bd-103c-4233-9d60-180dad6d2de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55d7c58-cefd-43db-a89a-698112ef50d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5734dea-50cb-4254-84d0-d17f45471014",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be402914-cdfa-4316-91fe-c2a800c5e58c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6362f3cb-2bb1-433b-918e-616e70149a0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6f4f1a0-9a92-45b4-985e-9b5b7c8cff91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d32fbe00-ed49-4925-8054-653036f1469f"
                    }
                  }
                ]
              },
              {
                "id": "7672f7bd-3508-4e95-8fe0-e0f32e001a77",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "650cc507-0767-43ff-9ffb-3dbdce7969b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7fb8863-ef80-4c7d-b951-1cf4aeea6837"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "755ec576-7d17-4327-bde6-3b559728ed0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "293f02e2-94c2-4d44-8b25-c69ee994c74b"
                    }
                  }
                ]
              },
              {
                "id": "19b23fbe-4ee5-416d-a4dd-c51590ebdc28",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2064d44-7a14-49ac-91eb-c358628d1891",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a94ddeee-ae60-4ad4-a887-948210f84c8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4c8f21b-49bf-43dc-a343-8c6f68b42e68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eec672c2-ca24-4ec6-90a5-f2ce5164b8c9"
                    }
                  }
                ]
              },
              {
                "id": "58f02474-7dd5-48ee-b2ec-b48893b72bd5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a5dc2d6-97fd-46e8-a43b-8b21b0316006",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbb629d9-bad5-4dc4-a09a-2bd5658cd28e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3617a997-7711-42dc-b501-e718a7c1a088",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "21030162-8e9c-4b23-af53-b92d6c7a09d6"
                    }
                  }
                ]
              },
              {
                "id": "464f73e2-9365-498d-a3b7-070f216681bb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2da21490-e6f1-4da0-8abd-05e25febd979",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b38ee1ee-ce05-4692-84fb-c25fe85e38d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c57b21f2-5673-4895-b68e-5ae18a105ea4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cecde29b-c88c-43db-8cc2-f986a4f2054d"
                    }
                  }
                ]
              },
              {
                "id": "13b93a9a-3240-4b82-80c0-907247240adb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7697973-4f55-44c1-ad97-a5be2553c050",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6cf4d697-bedc-45ff-a1ab-a66a7d5739cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0291bde-a1f1-4e71-8a59-0d1d5d0c4550",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4ad3f14-16f9-4fb0-9a56-0c207e1ddd2f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67522485-b053-4b7d-98bc-f4140d52ef9e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "895b238b-8b7b-43ab-87fb-a9927790eb4d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7cecb644-d643-4129-945a-6259d27cdfc9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4fb53bf5-8ce0-4068-bb40-1b6666ee16ea"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2948a94-76b2-49e1-9faa-0e62a99865c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e4e5c5fe-a52e-47f2-a4da-511dc27f4cd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02c7bdcf-2441-48c0-ac1c-895bbe842a93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e1ca2dc-b7f5-4478-a890-b700815241b3"
            }
          }
        ]
      },
      {
        "id": "9d6a8314-570b-444c-9bfd-ef87d4d1a21b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ccbfe66c-5382-49b7-9a81-cf3d5da847d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aef01472-ff19-4848-81ba-927a1f4e1455",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a830b8ee-b359-44d1-bc2a-5049e8a7a272",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e202e1b1-bf88-46dd-8bfd-26d0c4366e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83317363-2d6b-4665-a4f0-9b8f899f5969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7b7515-6ba8-4c17-875a-70c4283955b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cce6789e-5550-456f-aa00-a2eae367e5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869395f1-ae81-4dc0-b39e-8d3e1db01d6a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e63c83-33da-4874-ae45-e1be3fb16a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e33207-3c39-42b0-a93a-090e341f6d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8789c7c-8a1a-4292-ac29-fe3eda4a4dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c3729e-580d-4a73-ad92-49a9b99f5b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21ac559-11cb-45d5-a018-c6534a56372d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f249d413-7763-4a1d-8098-2a055256d14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfea79b-109e-46fa-a05e-138cf5ea0f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4017299-b5f2-4480-a291-efe5707d0e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a96a7e63-f698-494a-bbf0-dd085f3efdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ee6efb-789e-4157-b284-9bf459f817e9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b7f999-39a7-4e89-b49b-7fab297f863f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733ce7f0-6d0d-4d5c-a0fa-85e9db5cc027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f1b262-658d-44b1-a9b7-c1011cc5ec91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62f45860-963c-4c0e-a966-783fa03953f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754367a6-0915-4f6c-963f-4cbc98c7d608",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084a10de-b22c-41d2-88a0-736850943831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1066dae2-fe3d-4550-9a9d-cea784d079ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4cab33-6b1f-4ba6-aa38-f865e9233368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bff840d-3c0d-40fb-b93f-ddf2a7762383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0183b6d1-9480-4157-ba7e-477d81a6ad79",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69fad7e-3409-4b98-a026-59d570bdcfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d82f27-ca96-4c31-8592-aefed09ac946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73a23c1-1e34-440d-9922-38ed151aff92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "789d78ba-4776-4d58-ae79-f15d1a512306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fab12d-cee3-4f88-ac13-6ec52f85786a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc74eccb-de8d-46ab-b616-ddd401f704c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e227f9e3-2099-4e31-9391-37eb36ee5446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e9aae0-8499-48af-94f8-bb121e07957f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "184b6d40-ebda-4b13-bfff-8f1896f50515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c901b39e-d1eb-4bc1-8cb2-6adf9bfe40c2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7482ad-be5f-43c4-a3d1-751371312412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8463bc-72e1-4fa8-8cb8-0515ed7eb98e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c87903-f5a5-45eb-8090-5850e6405bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "393b5411-cd5a-4c32-a5d8-43911b12c753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc97473-839e-47d5-b0a6-0b7d8c1512da",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b4ed28-8bd7-4efc-9a82-3a8de9aed4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67bc64df-9458-40b9-a721-7bf2e501e46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e22c10-1676-4675-a7fc-4c73d9c0779c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68b0afde-f03d-4368-92a2-2c48ad2fd52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d866d96f-2428-481c-bf0f-3f2151aa259a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d105fda2-47f8-4364-a7c1-14e1c5e1b725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78471d27-09c7-4fbf-ab76-df88e5a89572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5da8bfa-9425-4394-b5be-e5c37480d2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "762363c7-3843-4051-8d60-966e2cf94429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbbf825-e738-4a25-aef8-3105757596ad",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed26a9ef-45d2-4608-a9d7-d401436b3081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ad1dfe-d66d-4d68-8af2-2ef86d86bf54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd1726c-285a-4969-8332-277e342daef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6e38554d-e637-4355-9329-2e218e6eaa19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df7b495-54ab-46eb-8b07-484816b6e979",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56310719-9560-4ba1-87ec-df1d1e1c0c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27a0c01-a1c2-4763-b575-cf655e8a0330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649e9877-0e63-43ec-a5c7-404159e4171c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67ea0839-ca9b-4259-b1cc-5443c817a815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64c3c46-ef49-4cb5-abfb-8b24e97e0ac9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d56766-5c98-489a-87bc-2ef92645ba04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c500675-401a-4a96-9913-d97245e0e0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097601b5-1ce1-4a59-b9b3-280f4f8a52d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "849704da-cf67-41fe-a7cc-581e8fe2656c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8be20d-143c-494c-9444-7b87a3cf4e31",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7712ac6-6737-4981-a6a0-8f7c07512645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957127f3-b3f0-40a1-88c9-e111d5cf10fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2d0228-a0d9-465e-99df-70a65dac46c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9907abce-2d62-4f68-a6e8-9f0790f109e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a171aa85-b645-4104-b516-2f54c333d866",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df023f94-ff3b-4e2e-96cb-1bd6c97a9ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0805c8f6-05c6-408c-86fc-f9afa6b36d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b43d550-87d4-4651-b11a-6f6d4286d661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b2bd55-55a1-457b-91d9-ae01068a2f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619cc384-72d2-4f9a-8d82-501594c19afb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f52872-790b-4151-957e-ae31063a5121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21167702-a6c2-4dba-a738-37de8895c5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20515e23-896a-49c2-b1f5-216c7d80c391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc569660-03be-4750-b4b8-1b48b914afd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bae704c-4fbe-4c20-80a1-c68b4992e2b1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceab3c5f-3f98-4645-9af4-a1020a6976a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f57e280-df56-4008-8db9-84c18384dbbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f0dc0a-318c-4135-bba0-ed952dfad44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9044cb2-57ca-46b6-b20b-52393c0daa23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a0d213-c8a6-4ca8-b6eb-34213ac013e7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5395dd2-e307-4359-af2e-5e08a8a23dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f935888a-ddcb-4c07-936c-4b0303512dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8b5b20-7ebd-4bf2-8776-b473697923f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d08adcd-c6f7-43ec-b527-d040abe63734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345f0b55-e36e-42be-9fd3-4f92134bbd90",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc2720c-8d1f-44bf-b813-cea42e15b412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98645ae7-d0c1-45d3-885f-2a237e2cd3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d61269e-51cb-4cd2-bf78-cee6cddb1440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc73326-ff7f-42eb-bd3d-ac5ce3fbb46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5966fc6e-a161-4599-bfac-4033d7a89c71",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a06eb2-a87a-41b8-a679-baafb1a48229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec1269d-518b-42d1-844e-0336e89579a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74174541-5930-46bb-9edc-eb3152a28682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f309c22-85a4-4d99-b827-52d8e010eaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1f5a17-0ca0-4d24-b0da-2c31ff8e1fba",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401be673-79e2-43c7-9981-ae7038be7df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53d85b3-3a93-48e8-9576-368bb959be29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68e6369-cdd7-438b-95f8-f3e3cacfcec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf42c96-93b5-4f4e-9406-21a8d674feed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc710e1-1e97-43ca-a01f-3ed4d925c19c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48424342-38d3-4afd-973b-52ad4e038c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7ffeb2-65b2-42fc-86dc-e78bbbdc28f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8701d9-11cc-4cde-8408-39c63bf3d17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5fa7d2-b18d-4be9-9e7e-26987fcfdd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450dac13-9f63-46a4-89b3-a6b76bf5b21e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfc3820-9729-46e9-9d8a-633fd75ea3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b57f8b3-8686-4b06-8f6a-ef458ef962b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dd91bc-7447-4d17-b704-3e65ad0083cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daed2108-51d6-41b7-a338-0b5b87cece73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946b6dee-8b39-4dd7-99f5-9f54bd747eeb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e5b7e4-f274-44e8-ae7d-c8aa831097d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450aef31-9747-41dc-a8d1-67b679247b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04118661-109f-43fc-87df-2e4f3fa6ab3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16a8aa1-a237-4870-8f41-dea1407a1773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cd5791-56e1-4915-bd34-af86b0f38599",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c31eea-d3cb-4c0b-b682-430bcacc3103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8a64eb-27dd-4afc-91a8-7d92924b39b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360d750e-589a-47b2-ad9e-88cd8efc842f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64587b52-977c-44dc-a054-ef64dbc161bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57b3b55-5e5b-4795-9a7f-168b7c51e516",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c33bb6c-b8da-4f27-aace-273c479b4b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f2f0e9-2120-4d26-ba88-2c1b04b9b89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c80762-cbce-43c5-87f1-d52426cbd764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09d16369-2860-44f7-916c-faf7f6447a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a23419-cb51-4536-bd23-1cb23197b229",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1a8798-737a-4940-8135-d831091a19ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fedf9e4-b242-4659-adae-08ddbf87fdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c39fd6a-109e-49d5-92ff-701a4b133cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07296364-b972-444e-86c8-4bbdcb926f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a6b8cd-b400-4a16-abb8-782d165dcd5a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfb4059-7559-4e75-8fa9-d3ce63b149a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe5ad76-c425-46df-90b7-751d3222315a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5707714f-041c-433e-ac78-b4cca49ee681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1876345-06a9-4e5e-8b75-1e3e7c1c359e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fe09c9-f3d6-4343-aa56-7764bd9a148c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6530130a-55f7-4709-a51e-ac7410a29bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758c6e30-ebe1-499b-a49e-973c6d22a5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97be43ce-629c-41a2-8d6d-255206247c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d53c4d9f-4ed4-40f2-900d-c2f712a5cf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b303079-2839-4062-9830-277cefbbfe21",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fc7852-62c8-418f-86fe-07632eba5fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef86de58-63f3-4e42-96d7-6808ebc4286d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194197ae-1a3e-4c5c-ba8d-b0ee3eaced08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "537c47e5-8b32-47fa-b6a3-698cac43f36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f2ff5e-d189-4860-8a64-9a27464f88c0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d4a190-f09f-4368-9038-0c2963a4c703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77f9180-3e9e-4d7d-9768-35599d4e1294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8a7bce-c6de-4b0b-b27a-b2f0d7f905b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94ff4d5e-9673-407b-8cce-2751ba9053fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74361d97-f517-408c-95dc-f72ed1f3a472",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46bd4d8-8eda-4fec-89c2-21702e6b2244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b69810-d861-4e60-b646-fea8e577ac0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83e5fef-5897-4edd-a06e-27d0841b88bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdfea56-238b-4da4-a976-221518e0d61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6efdb0-fe6a-474e-a7af-76589639a7ed",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7481244-7761-4607-a49a-ec73473df2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9672942-c9a4-4df3-b345-c5b516fa482b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c2666a-76ec-4745-9d8c-21c05d2cafdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a46335ff-890f-421f-abac-2047c26d2411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82d3ff8-cf40-4464-93bb-ff4557c91add",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba1682a-cff7-47ee-8ee4-a70e512b3910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45856387-4b91-47b6-a7d0-c437249fca8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc96bc1-840f-47b9-8f4e-7317ecaf026a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "269524af-d8b9-46d0-8ec1-2507e356d695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da20d6d-81f3-4217-b7bc-4b52a3b53da6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca6539b-e202-4132-a7c3-f738531da90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978367c1-fa76-45e3-927d-a855060915e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6db2a5-bac6-4de4-a881-3271285f1eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3f4c43-61fb-47ba-afa4-6551a689283c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4730407-9bf3-4887-bb66-c7a640b9ec4c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1784e9-32b4-42d8-afe8-ffb37357a9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b318d11-460b-412b-98d8-9ffdaca4646e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6380e6f1-5506-45aa-a660-993bfd7a7af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e530d15-ca54-4786-b67f-14f9bcc7a3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb2273c-b456-46c7-8c61-40d1f668eb3d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aeca6e-e321-4821-b8c1-29058dc563d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18cc2ec9-23f9-474c-962f-20a92dfd09ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c96ed2-94e5-4338-8c26-fa003ee0eb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72c295cf-0e3e-423c-a805-3a4c6b09459e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c98782ce-2050-477e-acef-de404c242372",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ddd5ffdc-ad6e-445c-a7d6-edaa3d432009",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86970d16-5d54-44ff-9527-a7845c478b16",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d66755-657e-4a86-ad52-17b79b5d62da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c222c50e-817f-4e17-8e98-719733ffa500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93eb3fd4-cbc8-4151-b634-fdbc5995aa22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ebdabb7-ce54-4c0a-8ab2-e3a8de592958",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edd4ec11-f845-43fb-bf6a-80e9fdea0f0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fe49854-005c-4a91-994d-adb4e0d403cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e68f0cb1-a537-45a4-a271-057952ffb19b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3645a7e3-565d-411d-bcd3-d65cb722b8af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2a3332ec-e779-4000-8d8e-b9aef0c518d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e5381d6-7c2c-435d-8ae7-a6b6d8758cb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d31f29e-ea60-4fe1-b5b9-002b26ba2fe9"
            }
          }
        ]
      },
      {
        "id": "b8466707-f455-4d4c-a056-03f68c708d1e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "59c04bfa-12d5-4cce-a177-04eef65d6620",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b88c17d0-878f-4e3f-b37c-e9b1809a2257",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f7fc3cd3-3752-4cf7-a404-bd677b465b2c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21675410-3308-400c-a8a1-a84dd8f1950b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4acedf-acf3-45ba-ac61-2c8ab2af5026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b120ffcf-bd46-48f2-b73b-3986e8e0979c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bbc1f7-2ca0-4350-b143-4bf13c65a137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453845d0-1f82-4a3b-abef-4971746c9f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66e77d6-2b2d-4a84-87e1-e895ca42a539",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8818eb-adb6-47a2-83a5-d188320f730b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8903f7-4e08-4b2e-b742-eb343241a210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869d21a7-a08c-47e6-ba28-1904232e4991",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f86f2e6-4be8-46e0-a02a-ea3010f0d0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ab7099-c755-455f-a673-4fc2b4489cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3af4a9a-08d9-46b1-8f15-cfdde7c5669e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92254d31-4cc1-4ec7-b469-350f9b3bcb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f79e64-456e-4600-9469-55b4b846d2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529aa050-6155-4fe2-bb67-6d4f219e73ad",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd7ebcf-6649-4203-b3ca-35d685aec3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2839ad-2b98-402d-b04b-a4f00a0b57ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b2bd6b-71f8-4169-a1ff-05929af53602",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147c6041-8e48-49b8-930d-ddb75eb59cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8416538d-9c90-45ca-a48c-a948d62432fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7d3a5d-16a8-4f21-a641-bc8a62d9ee59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4cd2d2-71da-4870-9d53-f118fc603641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833492e2-9fbd-4dc1-bc6d-f60cda05af61",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdb227b-8539-47a7-85f1-f55d6c34bb22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f77c9d9-230d-4979-9264-ae8ec84f612f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69412ac7-2c2a-4c18-94c7-6c60d568b3d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ca0b0a-bd07-4fc9-8871-9311581df59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40261b6-3d1b-4776-8f07-a9d53f1ee754",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c6b8a7-f033-41c3-86d5-a134dffac5ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb840db0-c447-44bd-9017-89a5c77b154c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96387264-3155-4952-902f-a3acbe257fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b87f29-1c69-4452-9ddf-efc730d29b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe34239-dca0-42ef-9531-9e9dc4309595",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a328aa-7505-441d-a3d5-34fad3690fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0516b5-9416-488f-8a8d-3624886acd94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3801f533-5dc9-4408-9860-f7c2e4792b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d268d6-96a8-4dc7-aa91-2e66dce2d7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e26375f-6f54-42ae-b10a-d9d1a2a6ddfa",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d508c119-8129-47fa-8f9d-d743c6f11ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc58634-3f38-49c7-8172-e1a47da8c886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d484c49d-ab27-440f-9704-55516ae68b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52987d90-c66f-4aa9-97a8-bfcf521aca3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb80ee5-d566-45e2-bda8-6ea38f9c4e47",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecad339-b77d-457c-b96d-add09903ae54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22935ffe-7ce0-4e86-8783-4a2a2418bc02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68ab3c5-2ea8-4555-b373-13c581a2eebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2164bacc-2bae-419d-a9b7-693df78737ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b364b8-f626-44a7-a984-ef6a2b642e85",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8c7639-7eae-4159-8061-06a7376bf502",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f596f4-5c92-4382-b83e-d3bf7c8b7593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b6c493-4f69-4b95-adc2-9b63b12274b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bc3a60-4529-469d-a874-35aa2da35f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee16555-4fe1-4ac4-b156-512773b5b6dc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a0747d-8865-4712-a3d2-a653ef6a2501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "775fcf2c-0fe2-46b9-820f-e7a3b528ad2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb11816-4997-4939-bbe4-00a61d8a98bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec34965-9dc5-45d4-9bef-d0750e4981b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b930f83f-803e-4d0f-9f1b-be21f7bec1e7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71568a9e-9811-4caf-a649-91490fac91c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df3cddf9-bcba-4e1c-a7b5-32d9399444a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e9c42d-b96d-46ac-b285-f6b18dd2940a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49507268-72ec-4647-9f5b-eeefd23a3358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e9374d-2786-4b5c-9ae1-aafe966d416d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dd4ca8-999a-45d6-8438-0cb6d1ed563b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26ae3e54-e39d-4b15-a8d0-5eeb0969477b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d16ae3-2255-4732-ac87-626f8f6103ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1193c213-5d4b-4629-b5cb-7cbe10c903ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50caad48-866f-4552-960f-50b5b595a73f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe239db4-4d2b-4c01-b1b3-50e2b656bb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acd2783-6f3d-4542-b4eb-866d52f409a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce638d3-f3cd-47ce-b6e3-7edf2cc0b7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fb4633-4389-4472-b889-8bee21d24fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dcb9fd-e491-4a05-8c52-6ebf543e30d7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d91f620-22b9-47b4-a726-c19a46bc43d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73804708-0c3b-4805-861d-b7298e00eaae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02452449-280e-48f3-88c5-36a3d534f599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ded07f-9d84-40be-8b0a-4cf0cb651f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07741308-9d67-46ed-bd88-da7f9ba66b04",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c30632-604b-40e0-bc01-6c4b75f13099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2662870b-8508-4016-b11d-2df1a8059cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ae7dfb-c9ee-4972-bbc7-eb10c465650b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5501d8a-9016-4d9c-99e8-fed598b2a4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38662b58-e6ce-4703-9312-10094b8e736c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4e12cb-39c9-4357-b374-8ddeb90e9207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86eb6d79-1937-4c75-96d0-5a21f4eff4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec46a516-6545-4463-98d0-54fd1e6591c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db25da9-2016-445d-b17c-5035bf0ec0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67edcc54-7cbf-476e-bae9-f8372e4bd2d2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a196ae-e6a6-4c24-938a-6aff73d53d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f1c7ab-a9cf-4a06-800e-a0ee9dd6b7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f690896b-63c2-4439-ba33-6c33206003e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eff5c19-a52b-4938-91e8-4519aff24712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdfea15-7581-4f2d-bc85-2fc8399c3bd1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52123af-f0cb-4bd7-84a8-875b1ca997d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ecc0bbd-ef82-4ce1-b445-f317800436ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7b4f4c-8e6e-4ffc-ae4a-68734e6070c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23865512-159d-473c-a96d-65080e16f6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841944d1-cc37-44f1-84bc-07edd238db20",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec82d77-c0cc-414e-98c1-5385cfd2b740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fbe157-54f0-4cdd-80ba-eeaa01ccbdc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bef2a3-16f1-46f8-9699-5d2c2eb9ce91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143aed25-851d-4bbb-9b69-8a629632e981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2e205b-7f5b-455e-adf7-7fe8441469f2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e310d9-8fdb-4e23-849b-79b8dc6213e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85504d1d-1fdc-40fb-a916-861e05be0205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76569007-d789-4027-8433-a8542d67681e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ade8aa8-17a6-4ee5-aa0f-fd1d155f0e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0aba929-26b3-4fd0-a68e-b063c671c8b6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eaa234b-63b2-4320-b983-30bf9695effd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ce5102-a9b2-4efa-8b8e-29f9a62bb262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a45288c-9a2a-4937-833a-963ce4e219ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ebebae-aad6-4d12-9ac2-2f6518767770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6d793c-495f-49fb-85db-e188976b658f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315fb2dd-3377-4fae-bd4c-1a8c3a0faa2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc9a43e8-4269-40f4-84ab-a646d25c29ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2616774-d310-49dc-9dee-cf5416573707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de86a48-fe76-4fca-bd2a-f0b46c26cbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb5288e-6602-485a-8cb7-489c7db01bde",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2627007-ec4d-432b-9d50-51663c196388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85f77235-ce2c-4e17-b0b0-06c9de8a7a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecb41cc-5956-4871-9428-ba1ff70839b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465cad11-176f-47fe-959f-d29ef44cf3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58cae25-680c-45a4-894c-27359b68479b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109b7ff1-bda8-40f0-8c63-8e124b435323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20a8bed-869d-4008-b0e5-2baeb7346a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d8c79b-8f62-4d0f-8a68-38794ed41ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac58f545-91d4-4cd4-be46-ef3c8d4de2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd87d44-f6cc-4038-948f-dbb5995e0ad0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b5281f-34bf-4686-8539-887b08055c5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae53eaa-0cb2-41e5-b505-0c3557ead1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a52488-ef68-4a78-89a5-b313c4721277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99a7ed7-757b-4d6b-88ed-284f58a972e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc79b59f-dcc0-47a1-b8a9-2cadf2b74c79",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4ba3c8-f7e4-4e3e-b084-1e7656bdb7e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "773b4def-818e-46a9-a64d-c278bf986562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "579b975a-0172-46f0-b6a0-ab4c59dfd817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08f0311-988c-4ad7-884a-8d5519806bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e1ec29-ced6-4fc7-ac25-4f3fdbd45c52",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb382113-786d-4220-9ce7-6d6c99564a96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e6178fd-ebff-43ec-99a1-a6129d1e2432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285fe739-30e0-4b34-a150-996b3a7047d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cac481-0211-4866-9d45-337de666631f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ecaca7-4ac2-45ef-a195-a486a17d73d0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5d8fea-46e9-48ef-bdb3-2ca25564aee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "241f9b3c-0f3a-49c6-86a5-03375bdb0351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075d0050-b145-4809-ae3f-e6e858502bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24cbfe61-64ee-4b5b-b828-59bd4c3a18b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c98359-0080-4a34-9a36-05fdb02a1a90",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee82df98-2bd1-410c-bdc5-1f5eef5fb2a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2783a5b2-b943-4071-b644-93cca15acae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa34158f-861f-4d9d-a3a9-9a6c6a61d9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a6247c-9b5b-428a-b966-73e49016faa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fd34fe-e55e-4e6a-8794-380c9966b712",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9219c963-3203-4f14-bfc3-c1be15d84a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb7abf1f-6da5-4b88-9b39-13bdbece5ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93be160b-c9f3-492a-b50b-e43809963cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b5f072-39bd-4569-998b-bcebcce99f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141c58bd-9c5b-444d-96a6-af704f95b2a1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d1f978-e48e-4f60-9d15-fc204def904e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3a50d9-76c4-42c3-8102-dd42f7c016d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4861404d-f637-4063-9f00-f9a6c0266f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70742273-8f55-4718-b6b1-28d3f6212e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d63b855-f534-4b16-b9c6-47d801932171",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fe3f8d-fbf1-45d9-8b95-d5cabd49cc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee199b7-9393-45e0-85fe-a8b343e95fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421845b8-ed85-41f1-bc4d-7cee6e0a64b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a8c4ae-749e-4fc3-91e8-f69d02c9ca5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998a649a-9c5b-4f5b-a4aa-d3263279891b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8245ec-57d2-4cd3-b9f4-63897c3fd748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46855d48-44ed-41c6-a579-f5f90cb8135b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cca999-df84-4319-9fa1-96b2d3e8d234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94776ecb-8690-4c5d-8907-9d02f984f935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e451f80-de1c-42da-8823-783f40f58057",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b9f399-f31d-4554-879a-2b203a1c0898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8a24b4-e308-43d0-87ff-77a99fe827ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cac0f3-409b-49db-8293-a0467c77bb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8251cd23-e443-4b34-8220-79313f2ff786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fab82a6-4d03-4824-a987-791af29b4113",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a123744-764b-42b2-bfee-00bb029000d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416cea89-4a03-4911-9373-c07c1280920d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec6fee8-0709-4a1c-8943-b7d4757a97aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062b4c9c-2286-4fef-a4e9-fb841e220da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac337c7-e50a-4411-b550-e02ff55034a6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5975d3ae-b88d-490a-a19b-324c7d97f1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d137e67b-9864-461f-bb20-c9b1757fb8b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c13f0ca-99cb-4405-9d15-761af33244ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe184e7-4aff-4fc0-8cde-88666b1dccd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feae44b4-81e3-4b6e-a683-7ef6a3e7631b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7d2610-ad2d-4abd-9b39-5f5fc56129f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4dfc24-5e08-4c6e-b04b-913a71c29826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d53b35-fd22-4ed7-9319-db4d952c8899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3daff15-4fa5-4021-9df0-ccde7811e573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a60b87-0f61-422c-aae0-ca30456deb88",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1fe79e-83b2-4b7f-92dd-03179066ce42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79b7cd8-3442-4ff2-a463-4050c5305f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326233ea-07c1-460b-9b42-73a9114f25f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6805f919-e395-4ef9-8572-a1063477e5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d2fa7a-4bc0-4f87-aeff-76ea6b7bed00",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba1c4ec-d497-405a-8d74-7edb63019928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbda066-0bf5-4b98-88fd-1fb3995a79a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36812053-32ae-4f33-ab5d-d14a4b2db4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd34bf66-9d21-42c4-bb7c-d236a2647ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676139e6-7f38-4010-894a-36d7812ba897",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa78e301-7344-42d5-9d83-17a912b2ec0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c5685d-d3da-4bab-8ffe-01ae015c1e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf37246a-6a18-4ad5-95d6-7ae052bfb7b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2e31bb-71f0-4954-a933-e3e9a4efcfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f18871-51c8-43b7-983a-d8b2d4d738b8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88348e93-b469-492f-96da-ae3121b8652e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c25e0ba-e32c-4584-9f82-507e0d4e395c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ead601-7c8d-42d4-b263-77d6847a0a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444109ea-2a16-4d79-b001-3a85c9cee190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c885604e-67aa-42de-b38a-71d47106548c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d4ecae-dfa5-4f3c-bf36-04a121812eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b9bad5-f49f-44fb-b259-21b363296760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08a8778-4b6d-49af-b529-14420aa011a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a87337d-2692-4a67-890e-767afad5c6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c2b364-8bf2-473e-ac48-a35342688a93",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428f8191-21ec-4ac8-bad1-d8008ea91032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fd5f1e-896b-4137-96d0-caab261da4cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683e9a1f-3235-461c-b2cd-70ec81dc589c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae2e45b-8e31-4317-98bc-95c1d0629194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7272b07e-9bb9-4ada-bbf0-552f4acc94c2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d8d188-8c01-4f38-919a-59593b70374f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e65926a-7c25-4f20-9dd9-53540e691b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63906b38-f1fb-4b5d-b5a0-962105d40615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca04878-9661-4840-818d-28a0d0175d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b82305-f514-4192-8d3e-a96b79747276",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3af900c-8fb0-47ad-92a6-b181ce9547b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c197ff9-d425-403b-bf5c-00b172caf90a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef405e5-4a7f-4593-8f3e-fd05e8fad316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ee0996-2c37-44ab-bca3-4c5eb9534d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7c8aa1-e611-4049-ac07-27b23977a10e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a789f376-a657-40e2-aa32-384eb486737f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d101c0-93cb-4f38-8fb5-63eff9125310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8819b2c7-4e72-4506-a8af-d37cafdc9ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3a7ff1-a8cb-4cc4-9252-d8a4f129d7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f96e13e-141f-4e48-8290-00e2a3193255",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd19af5d-0850-4129-976d-f2287288e700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315e4408-8e4d-4cc4-ab59-a1e955fe8fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfff061-e1fe-413b-8861-99419b76fba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a725f6a-059b-4195-9717-895b9fb92650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9a0c3d-5401-4751-b9da-0319c61b4b99",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39e0725-1e57-43dd-b33b-93205be47a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ce3583-dcb6-44bc-9206-f8ff973e74bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fa0124-4f1b-40b1-999b-59415035bd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad1dc16-4cb8-4640-a492-aa89bdb94ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30c308f-ad3a-4be5-aeef-b1c21d2a55a1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258eebf0-fe4b-4238-acfb-527717226602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042a03e0-ec9f-4784-9af9-cded934085df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a74bf50-aecb-4ee4-8b6d-060ca7570307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7811aa51-e269-47eb-b27e-d8a252b4e0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafc6362-da44-40f3-abcf-c327c82f88c5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93b845e-f471-477c-a6d7-6c8bd30ec871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ecbecb-7f35-4331-88d4-349addf22366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808717e3-9583-4151-80e3-b604f36a3584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43df5bbb-244d-41a0-91b5-abdc879c7427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e89bf1-3758-4f8f-b00f-808e2457453f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20231a2d-b7e4-4a27-9893-23361e64e070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e0b15f-6a46-480a-a9cf-63df56d6d2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5949652b-3043-4bc3-a502-d8e0ed3faef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d920a235-22a5-4c96-adb6-f4a381f448f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681e5821-32b9-4ea4-ae2c-c8cfa42efed7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38aee745-a671-4d9d-9a40-364756927b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059872e7-78dd-4bd5-b1a7-99b1abf08f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e3e893-934a-4b7a-a26a-019086716bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba2cb2a-188e-4b8f-b2d6-d6bd2c2c4930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f98f4b-502c-4327-99ad-487e9f0930dd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ec9ac8-9c73-4406-90cf-6417184d2fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6817cd9a-64fa-4a77-8adc-e2f5edb71f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1cb207-3cb2-4aa4-bf1b-37b176fab346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9ab6d2-dfe5-4b52-b14d-8047b9df5d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f7e4fd-ee83-45de-bf13-594742feff71",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2577885c-aeae-426b-85f7-5f69539726f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db645fad-fa63-4f47-ba77-5959e29a8647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71ab35f-1fe1-4aee-97d7-6d7d03945deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de477310-d050-435b-b0f1-e68f3011d2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1540a8ff-1636-4712-9e9a-b828a9b087b5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689f9e62-0816-4962-b8f0-10d1e570ab7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3217b939-f3ef-4037-867f-5bc7f6f96093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1d2895-0b70-4b69-a3fa-b49f08495341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae49614-15e5-42d0-a0b5-545a16d32578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3333f7-af75-468c-ad18-42b13b598d3f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9e7512-c35b-4c16-bb64-c100b82ac4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c0c093-d502-48e4-96b2-fe0c84c6ec31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94294b8c-d73a-403b-a506-c43852bdff2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f569e2b-8d65-46d7-8c57-9281abdebe8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca5b0df-3bcf-4559-80b0-5dd03df8b08e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d83efd8-39c1-4c1f-b241-9c7d56d6afba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa876ec9-8bd2-4fd5-b99e-25e96611673f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23d1493-53c2-4949-8ee2-6c6831544a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41634cdb-e2e2-4393-8c83-bb0cd174ff3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce41a4a-f172-4f1d-9340-e8905eee41fb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbe5f44-9bab-4d3a-b4c1-2a3fd24cc741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094d6610-b759-477c-a3fd-04cab0c65468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee99a1f1-d076-44da-a845-970cfbab49b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11193c70-442e-43e9-9c07-66bc66e932bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f108e253-3d4c-4b44-b265-770c83d48750",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74de28e4-be09-404c-8e5c-3553ed103e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d7be07-5c00-4d68-8680-a9c2766ee3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26649ff7-c6db-4873-a7af-b6e12f852735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15eb5380-7936-4b38-8a9f-8b5f3f1d192c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1eec4c-420a-408a-a9d1-e8ff3c69385d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b606833a-b30d-433c-81ab-7335b34e48a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f434973-3b7b-49cd-9139-c5f60e4b360e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2f209e-7520-41e7-bdd9-0061e9a9bc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1254be62-dfbf-4cbc-802e-5d4456d80c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c22104-7547-4000-973d-5d54bd8d5f2c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78505ac7-895e-46f7-a173-b5270bf909d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37dece05-5591-4135-989a-63565ff658a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8648ce-7597-4199-8cb8-0865d0af5f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca85bfb1-bbdf-4c5f-82b2-92f58bd91b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8770de0-d2a8-4f09-b2ab-a10cb7375359",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196c5c7c-e6a3-4c95-8536-981bbe4c5906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a314d1d1-5d10-42f5-b32c-bb6e7b76c0a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31be1be-39ca-481d-a500-29961d0cde3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189c9040-f55a-45e7-9dc6-a493100ab16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d3dc00-027f-409a-b668-b4fe23453626",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3e3286-6cc8-4b8e-9ad4-25462fe68640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c554eabd-1f19-4335-b95a-8532d0d79d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f818a76f-734b-4ca3-a990-c788fbd9b8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78ff32c-3be0-47e9-b97e-c0bc3d2a0701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dca678c-a572-4140-9f2a-4f1f145e7789",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f21915-2b7a-46ec-a368-ae89d77e71bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3fb5570-cbad-4859-9ee2-734539757ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e321615-7693-4892-8855-d6a3a8b4715d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60259a4f-7a28-43e7-84ad-9bc1c680ad7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9308e61-2789-4be1-a035-fabe8ad633ff",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77cd02d-996e-4bdc-b36b-386ed7f89c48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03282ba3-72a6-49cf-a1d3-4aad9f475b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b2fdde-a082-4b6a-b987-d8f93d828b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8992aa4-2d89-46fc-8331-06d74dd9e21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481cdce1-b9dc-439c-96b1-479d14a419fa",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3a345e-4053-47e8-8e54-901250b306ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f92f3f72-ea2e-403d-81c3-bebd8ebc64e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dee8ff-5efe-4889-bcb4-e771c1dcf270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafa615c-b911-4b48-80cc-e290bb5e9904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cf4718-a2a4-4569-a838-f83c3782780c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68384e8f-c307-4f12-9c2f-2862140650f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f926c4-2510-449e-9494-aabd93658770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a2f802-d4b4-4577-a54a-9866b51ff920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8673be-7cf7-46b5-bed3-70534767769c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d1ef4f-8f12-4d94-9ed1-50774127e60a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356e85e5-44c6-4367-b53e-f64d1f475dcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea2a14f8-87f7-49c5-b931-3a791199caf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea5690c-6ae7-4496-9f1a-f002dec14ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fcb09d-43fd-4de2-b11f-000bd636c05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f705a38f-593b-4b40-a0a9-915eaea7480b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24865d99-02ae-4862-9f34-8850c023a0d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7c6870-7de5-4af8-bbd9-3c2cac0c49a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f309f2fd-924b-4fa5-a4a9-dc41cb5947b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe3783a-b7c4-45de-922f-a8b473838032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3529a263-c91f-4336-ad89-c23664c7d003",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2b2123-1253-41cd-963d-1f20a285ccf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5a6b2c-27e2-4e99-85cf-2c1ee4227179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b6e343-2553-4269-8434-1b7130f63535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30600842-8e86-4e74-822d-00132705d3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6766a30-b157-42bd-bb68-b318ac862f88",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56aa9447-f4ea-47f1-bac6-05d988ebfbe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "941dc547-273b-4201-b127-ef3b81ef6316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c699f80c-cd58-47a9-985c-e5950fc1d6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb6758f-e272-43a0-bd5d-c6cff0e316a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b995cc-c9d7-4d2e-b239-7369c34d2eba",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c7809e-6a3f-4d75-9a13-693d3d91182e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344f9cd5-1ade-40c2-bb89-baf62159b5fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4a24a9-a1ed-4b09-b59e-458cbdd96c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e43563-f995-4fed-b9ad-1abbe605476d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d72f07d-c114-46a4-8cd7-28d2744ec27d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ff20db-4d36-46e6-ab41-680a87ddfdc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "457a6eab-ade1-4aea-9ff3-7572488fc852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ae42d4-64b2-41b2-bdc7-811f3ea505a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd9e272-18f9-483c-8c8b-ad4af7022529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3145c8c6-bcd7-464f-9ea8-3008f18b4663",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8ea074-6e68-4fa8-80e3-43250536f5bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f5b34c8-5cfa-4400-be08-8a982d761b5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a3e4fd-906f-438a-964e-10e9d045f886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517233a6-0f24-4c00-8e87-31bddcfe6b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c508cf-5739-4be9-8741-df0ef53fac0f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382324c7-1501-4f74-ad81-a4374186d622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eb05a73-0fab-4324-ad80-a4a7c697a3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213121ef-4c29-4ec1-9736-b9f3937fc0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab18ab0-2afa-4197-a89f-59279826b62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8f7b16-34c1-44f5-9edd-7c5ab5e48224",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8a641c-8a37-4a3b-8089-8aa636d24602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ef2d8b0-4533-48c7-a3c2-83b874d12dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7ee851-4e4d-4104-9bcd-e481c2a9bb37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2442dab-3f67-4383-9b43-de7963e06ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fa2dc2-c998-47e6-a77a-beb096ad9f79",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41078ecb-de21-4518-aa96-41d59c88e7e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d6b1280-94ed-4da9-9275-4b23e07a5690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0f8cf2-236f-4527-9d45-589691693bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe137f9-8eef-4ddb-8c96-3c752e4efe98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5646b0fd-7b8d-4171-a9ef-ccd8d26dd119",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2156c4ac-b2f5-44bb-925f-863e4c2b38a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed7b39d2-8c85-42ac-83a7-2508b32c7035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742250d8-a854-49a7-8434-7389a692ba67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbefc7f3-c63f-4d3a-833c-540bb33f8b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecec479b-c536-4b95-bb99-e85850cfa244",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d2d172-27d1-41ca-9484-09f630658310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74340583-6499-4b54-85a4-af62f3ae8180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bd50e9-5678-4047-b13a-a5378b915c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986a3e97-a41c-4862-ba3a-390daee513f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62b1abb-ca04-4408-b270-3201fd049925",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8435a8df-b34d-415a-8044-5310005e20d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ab3b4b4-e277-48b7-ac8b-7950a6e46288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51aad65e-62f9-4cd9-b963-5896a15bf58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffc867d-77a0-40e5-9194-66c09af75926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0baba622-dbb7-4863-a4c3-80ff89161ae5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8401ec-eee0-4b8c-9c59-9a93ef65d358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a48f5bf-f9a0-4ff7-9ce9-4d6b054c1418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfddd07f-4b3d-49af-919e-11dd09b04e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56d8783-1778-4a94-9029-fa2e85eb993b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef128050-efaf-41c5-b024-95624a19cf7c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de625305-b7e1-4878-a1ae-7d45ba548939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf1aec7-8e22-4c44-a78a-b54c90423335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4715fd2a-7314-4582-b7d2-4e74ca0e4e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4104381-8b46-4ce6-93c2-ee56878c1528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d5ee71-b884-4bbe-8c54-b415913eeee6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df6673b-de45-4c24-8569-0f2d92a69f5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d07d33f6-49ac-4c19-85b3-080a665ac7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fbc727-a097-4f84-9965-5c1a84f15db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef8f925-8589-42bd-bce1-e281157350ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b42be2-953d-4777-aef4-163ea862fa0d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf0454d-9c1b-406e-b372-e2a345104214",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d32179d-ebac-4e20-ab35-c4434388328a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decd0e4a-ea04-4bd8-9133-031d6147996e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135bf2b5-3817-4a30-8b75-d00f9d18bea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee94fc2-40ad-4a76-b9c4-2b1d156f7dc8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66277657-5a60-48ee-be10-e488df78507c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c26092f-9129-4619-8068-d55d25b3b919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc40756-f2fa-4267-92b7-3fdcfc66d806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2463a713-938c-45ce-931f-a0312fa30dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17194ec5-c107-40e8-a0ca-f352aef129d1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf163e9-980c-4169-bfef-78b207491a7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78cb3959-dbf8-4a84-a1fe-0fb0c261ac40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8102cf-d1a6-4224-a86b-f83d950e6720",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93958977-c3dd-4c22-beab-b4b9daef7b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294ae76f-18e8-47f8-a05c-2321fe0ad104",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2c6e15-413f-47a0-b6ea-5e6ca4a38fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f2c1fd9-3e0f-449d-af4f-8ff910f80d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b18574-57a1-4ba2-8468-512387901f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8e6a55-343d-487c-88fe-49af003b865d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528e9821-5f4a-46d9-8369-7a6830159222",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ae1f11-b054-49e1-bed4-6a876b223218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1de3a87c-fc65-41f5-9384-37e61804ded5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12608945-fc8d-4660-a5d7-7b212ca5f031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f517c5-ae2c-4b61-9193-323e5ae0e50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8490e59-b069-432d-baa7-d602704eefdf",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdb803c-9d1c-4a0f-a549-2b955b113d8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a9f7fca-9bdf-4531-ae79-ba310f505e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9345c3cf-030c-43b5-8576-fdd483776aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf68f7a9-ccc9-46df-9554-8317683e8d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af977ea4-f128-496c-a79a-9fe01d26930a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc61c98-af26-4564-9e1e-f7e3dea32e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a4bcee-e7f3-4db1-b8e5-95a65cb1d255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d92519a-cf1b-4441-b5be-085a99f4e73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7067f79f-2f4a-4da3-96f5-68d8845ed968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e96fbed-3824-419c-b15e-f12fefc79104",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9ba8b1-d64b-46aa-be03-7602fe11c459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa261e6-be7b-4ff5-95bb-093aaee2a2b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30b5c21-8edd-4906-96cf-e881af22bcea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0dc933f-5d93-4e54-8569-9f3f5d840cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a617f25-91e0-47a6-97a6-7fc4e2683756",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f083dc-1dcc-490e-a95e-7775b6bfa92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "295b539b-f716-4a59-9157-e42844ed9df9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcc4b22-bf0a-4542-ae6b-4ec686dbdb1d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd24831-8994-4c5c-9442-db02defc0748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dec58b8-258e-402c-bb7f-77d5eabce2a5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd2f33a-e220-4889-a79d-a06d6f4a7c4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa14c47f-4d74-4ca8-bcaa-4d90f10aeabe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adc6f0f-6287-4414-aee9-983472ae6142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c4c902-aa12-4a29-944b-24ef98dfff05"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "895b5243-f524-4075-8270-608f7818e911",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b55bcb1-583f-4b27-8ed4-0c15dbf7a2cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "630cf5c6-44c9-4be6-91e5-1048592aa3cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed490e92-b78d-482d-9251-760cde8dd27f"
                    }
                  }
                ]
              },
              {
                "id": "91bf2f66-041e-462d-b667-a30525dac172",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1a53126-ff67-41f7-83e2-675b4646d016",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55726a4-02ac-4386-96e7-95763bbf53f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "178a6f63-47b8-407a-879f-9aa79bde7cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d5b530-3595-4786-b138-c859daae9ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "894f1f3c-8b8e-4ca9-b097-89f9be679f20"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c8a551f-f4ba-467e-99eb-4babb64a96fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b60e727-b064-448d-acb0-d8ab28c57090"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "beb7b475-e58b-479e-bf25-6c9cf69ad285",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36e09e71-2926-4535-ae01-f5a79659abea"
                    }
                  }
                ]
              },
              {
                "id": "c9572855-6af8-4484-a27a-fa113d66ac21",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5b39a184-b746-4bcf-ba1c-58f508791d3d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d0bec0-53a8-4519-b203-dcdf12870e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d4b18647-3a1b-4ad0-88e0-3b38d66f4f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e0649d-d730-4f0d-b904-d2028e1ec366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70209d6a-34a1-4761-8814-8c586fd608a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "183140e5-8d9c-4169-b6db-5a6388c0dd1e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38b36874-1d14-49ed-9822-18d872d479eb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4c4638a-ae5a-4c9f-bd5d-114c33dd1e34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1c7a805c-ce4b-4db4-b16e-b8d313e469ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0393b102-177d-4651-90db-7fd4cc5fd2ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26e330db-ae24-4c0d-a543-e268a97098e8"
                    }
                  }
                ]
              },
              {
                "id": "2a2896e2-7bd4-425f-897c-e1dae305c3cc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f01019d-a842-43dc-8610-7ac9f13b7eac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a2b236c8-23c8-4da8-b349-73d8ff52e8cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9de80f5-f6cc-4cc6-9b00-b58f04b03d77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b64d3c22-0a32-46d2-a7cc-44488d8b8e9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e33de4a4-7a6a-4fbf-b9d8-2c1799a8837c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c2dcdd64-57ca-4766-8ae0-c2c130596184"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "071d1838-e1b7-4c91-93e3-3f438c103ccb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a61aa54-cb10-4257-a95f-8a6f1e29bf7c"
            }
          }
        ]
      },
      {
        "id": "fc3be86d-88e5-4f76-b45a-729cac2f972b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "724390ef-bc69-4b17-bc08-719ad4212980",
            "name": "Negative Testing",
            "item": [
              {
                "id": "805965c6-3487-49a0-b50c-749fe488b371",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b480c6a-fc5f-4f76-92b0-f8a8ad975108",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb8e646-2068-40c2-aa5f-ef327179da15",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2e1b09e9-3683-445f-9048-03897f6d92bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f8d6bf-8fb0-4e80-a681-8279304afb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3949660-d084-4a89-8e4f-745c0834755f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d7139fd-a18a-4feb-9326-5a32381db437",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9af7d9e6-c124-4195-b762-503d258a4865"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43b22d5a-2f41-4cad-b2a5-d62150c82ee6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9231e0e9-926b-47f8-8b1c-f79e836d03a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "650ef5b8-9403-454b-8dc6-af2b078a7aa1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0b1605ee-0dc8-494a-a466-ed4877528d8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aafc56f7-e5ce-4aa3-b1f8-3f97add4ac67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8d34726-188d-4324-a817-9bc6ed3eb262"
            }
          }
        ]
      },
      {
        "id": "585666f3-32a2-4034-9dae-c66012df764f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d6329621-88d7-4e04-8a54-28da627e88f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "123eecb9-a26e-4576-83d4-3533c7212643",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f6e69ed-89d7-450e-9a30-dc7cf52c09ff",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f520cc0b-39df-4e7d-a18f-a20b82165dca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b843823-ac4b-4e5d-833f-8a64e1c1d887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c792cfe-2081-40aa-be94-65a96096582c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac00d93a-6962-461b-999c-d569cab2c582"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b912f870-9a74-4a48-ae97-6611be654182",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a953b97c-304b-41a7-8fd6-e4125833e8b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69757240-a29b-4bec-ac34-fd9f5f1242f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d70da89-83c9-42ad-bb72-3afa6743fe4a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1d8ed21-326c-4afb-8c7e-977a6cc1cf5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b0dadeb5-85c4-467f-b92a-6f1293d6e8b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98133f37-7499-4486-9dae-d6816fd752c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec189a1f-8b13-4a58-8a05-40df16ec8502"
            }
          }
        ]
      },
      {
        "id": "559695b0-d33f-4964-a925-29ff4d8dfbe1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "39e947ec-0fb3-442e-a0df-211231cb0334",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2113ade-1a7f-4199-8ca0-b51e46f1aa65",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ab12f36-b04c-459c-82ec-01cc5cb63c3e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc05adf-3409-4a64-83cc-3e9ecfa953e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5fe2f3a-d204-4f0d-aacd-cd3a6a505127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd88f635-9e4e-4f45-a9b4-2a702804e9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7ac07fb-0c8a-4768-ad2c-2f1d426b44d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33f7c6cf-0259-494f-99cd-ab3580dd939d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f0c0a22-2d70-4bb1-ac77-a2f8f79c8b87"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afad2841-94f2-4885-8d8e-c31c40d63f4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e00cc4f-82b8-4fb6-bf75-7b0216eed47f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28e50a2d-ad5d-4608-9ecd-e2075121bec3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cd697ced-82c6-49db-8a75-92bf0b6bc232"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "730ae05c-b78f-46ca-b9d8-28863ce40f04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea43ad00-f768-49a7-89ba-cac115bff01b"
            }
          }
        ]
      },
      {
        "id": "855e65f6-583d-4c5c-a73c-de100a0b760e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4df8498a-50e6-4fcc-a285-3423a535a3fa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b10e5f99-17be-40f5-96c7-a2f84bc577e0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2d817187-29e6-445a-ad60-e365166ba549",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7dffe195-2e0f-403e-b525-ac22993f35fa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fb8411c-fb31-4f42-8b48-6d22306ecd05",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.55555555555555,
      "responseMin": 9,
      "responseMax": 549,
      "responseSd": 74.93187970496885,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715128187732,
      "completed": 1715128210277
    },
    "executions": [
      {
        "id": "1fa841a8-9ce2-440a-bfd6-70c56b1217fc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1630aea7-d252-48ed-88f3-39127c8f6a84",
          "httpRequestId": "4c033482-5a51-42e5-bfd6-1ad36e606c5c"
        },
        "item": {
          "id": "1fa841a8-9ce2-440a-bfd6-70c56b1217fc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5fbbc903-fce6-468a-8273-0b88965bf402",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "c894ee10-259d-4168-ad15-112ad55e595b",
        "cursor": {
          "ref": "4e613f79-b7d4-465a-beb5-d0bacea6579e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a0ce52d8-b2c2-495d-bbc6-6b37952c14ec"
        },
        "item": {
          "id": "c894ee10-259d-4168-ad15-112ad55e595b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9d96087b-3e35-4437-aae2-f9333cd70241",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "25713c4f-e056-4b97-9caa-0ac480b85042",
        "cursor": {
          "ref": "c59bd14b-ad2d-480f-b21a-98c935aa4dcf",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "87ab5857-dd85-4625-9bb3-1b50914b6b20"
        },
        "item": {
          "id": "25713c4f-e056-4b97-9caa-0ac480b85042",
          "name": "did_json"
        },
        "response": {
          "id": "1ceb4ec9-370f-4c32-affd-72a020fd25ce",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf80cc6-4307-4625-980c-75ae242cbb30",
        "cursor": {
          "ref": "502d7c49-55ea-4efe-9a03-bda33484df38",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d1c4ee7-7f74-4aca-947d-135d9454da9e"
        },
        "item": {
          "id": "dbf80cc6-4307-4625-980c-75ae242cbb30",
          "name": "did:invalid"
        },
        "response": {
          "id": "8b285d21-1d86-481e-a464-78ccf59ba0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf80cc6-4307-4625-980c-75ae242cbb30",
        "cursor": {
          "ref": "502d7c49-55ea-4efe-9a03-bda33484df38",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0d1c4ee7-7f74-4aca-947d-135d9454da9e"
        },
        "item": {
          "id": "dbf80cc6-4307-4625-980c-75ae242cbb30",
          "name": "did:invalid"
        },
        "response": {
          "id": "8b285d21-1d86-481e-a464-78ccf59ba0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cf96aa-9972-459c-8de7-3f4042fa0073",
        "cursor": {
          "ref": "e0f7ed5c-2b0e-43b9-a73f-5a3417400ee5",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8f70277f-8924-469a-86c6-8f2c03529e97"
        },
        "item": {
          "id": "05cf96aa-9972-459c-8de7-3f4042fa0073",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f3f49fd7-c5dc-4df2-9c11-72e49c1197a3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 298,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0956681a-d5f6-4528-9117-fd0a9e761f51",
        "cursor": {
          "ref": "bfb065e5-2566-4a5f-aaab-6d6af318baf5",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d1ba02ff-ee41-496a-afe6-51625fe83be6"
        },
        "item": {
          "id": "0956681a-d5f6-4528-9117-fd0a9e761f51",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "340ce720-d4d8-432f-bc5b-765feca226a2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 29,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f9e389-0595-46d3-b698-0d999a16ca82",
        "cursor": {
          "ref": "9f2629a1-eb43-4d44-add3-705b0796f205",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "20fa7e57-a9e2-4a13-b30a-68539afdbc74"
        },
        "item": {
          "id": "73f9e389-0595-46d3-b698-0d999a16ca82",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "11c66dba-4841-4e5f-a084-5cfb557deb71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3e9b9a-8002-4442-a969-254b9476305e",
        "cursor": {
          "ref": "4afb4d3d-fcea-402c-8e10-a36c548c1ad4",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e4b949c7-9c03-4bfc-a602-f96de51bdd0a"
        },
        "item": {
          "id": "0b3e9b9a-8002-4442-a969-254b9476305e",
          "name": "identifiers"
        },
        "response": {
          "id": "de7a1b30-8c66-44f3-82f1-665f74d67fe6",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd92315d-5384-4c0a-b8b6-e19447ce7dca",
        "cursor": {
          "ref": "e2f22b75-b248-49d0-bbeb-c42f4cd2058b",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "314c49ea-38cd-40a9-8d32-327f97b9ecf7"
        },
        "item": {
          "id": "bd92315d-5384-4c0a-b8b6-e19447ce7dca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f57e63c6-5ef3-40c8-973f-f44d37cbaa04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff57c9dd-8986-4c1c-ba6e-67dd2a633509",
        "cursor": {
          "ref": "fb620855-cd7d-4e11-8ef0-476f06025722",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9d60a528-aff4-468b-bbde-626348d9ce01"
        },
        "item": {
          "id": "ff57c9dd-8986-4c1c-ba6e-67dd2a633509",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6d746783-b462-4827-9f5d-8b9b6814ff8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5580c7f7-cb66-490d-abab-af53211e7571",
        "cursor": {
          "ref": "2800c2d3-b5ed-41cf-834b-e0ecacd04f89",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "92d92245-bd8d-41d7-90ac-ccb8ba29282f"
        },
        "item": {
          "id": "5580c7f7-cb66-490d-abab-af53211e7571",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f30096e1-97f0-47e1-bc9c-f9e05795ccca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2155a890-14df-4862-ba01-769ab9b82c59",
        "cursor": {
          "ref": "ea950918-968e-4e2a-9589-c3c9493c3d20",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5e4b312f-8814-4a09-a30b-2f3707b79439"
        },
        "item": {
          "id": "2155a890-14df-4862-ba01-769ab9b82c59",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4f684be8-7c06-492c-821e-ae328837474b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ecefec-f1aa-4d7e-abc7-ea0307469281",
        "cursor": {
          "ref": "7415dd2a-d226-47a0-875a-0210c1a9cd6a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "50d82434-fff4-4bc4-96b6-ad3469bf11e3"
        },
        "item": {
          "id": "c2ecefec-f1aa-4d7e-abc7-ea0307469281",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7fa3c28d-8c06-4286-946c-a231414d1fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af8df8a-22ab-493d-8e9e-47e15df9c389",
        "cursor": {
          "ref": "4e53fef6-0bb8-4cdd-bc64-5f9a2b981259",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6c1139f1-965c-46a2-9d60-8c2e51764389"
        },
        "item": {
          "id": "6af8df8a-22ab-493d-8e9e-47e15df9c389",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "03d2e112-dbc7-43e4-a289-a505758585d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb0bf73-10bf-48f3-9ed2-374a136d808e",
        "cursor": {
          "ref": "ad84e89b-cedf-4c24-b5c9-6090b4cdc1a2",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f3c9e3a2-c966-4974-a88f-e35650666af8"
        },
        "item": {
          "id": "dbb0bf73-10bf-48f3-9ed2-374a136d808e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b75aa31f-6ad2-4174-ad55-8ea0f8d9cf89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c92a5ef-15fa-4aab-86b0-e465a8ccdc9e",
        "cursor": {
          "ref": "f805745c-16f3-4aff-9639-181ac6d1fbf7",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "69d0e59e-2cd5-4194-80dd-1b4545a7d8e0"
        },
        "item": {
          "id": "3c92a5ef-15fa-4aab-86b0-e465a8ccdc9e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "029a8f81-a92f-481e-9d74-c881d4485a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad102576-5ada-4f59-a7b5-4f530de1da56",
        "cursor": {
          "ref": "be142866-c00b-4abf-a238-c34f36b46ded",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a08a4788-07a5-4ccf-bcfc-9eaf23b6e159"
        },
        "item": {
          "id": "ad102576-5ada-4f59-a7b5-4f530de1da56",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5902c0cf-7899-44a0-a73f-77901e378ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d26abf-9d59-44de-8580-2f677fc10584",
        "cursor": {
          "ref": "274df58d-098b-4e16-a41c-bdb74bc208ee",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4b7a99ba-9dea-4e0f-b594-5ff29bd7b6f1"
        },
        "item": {
          "id": "26d26abf-9d59-44de-8580-2f677fc10584",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0678b1cb-3183-4a8b-8d74-f28b904b65bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c317414-b93f-4765-82d7-ca2e11793c1b",
        "cursor": {
          "ref": "aad326fb-f6a7-4aba-8feb-c75854b2307f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e1b7a9d9-1297-4225-9403-d6a67fdc9c9c"
        },
        "item": {
          "id": "2c317414-b93f-4765-82d7-ca2e11793c1b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fa2e91d9-2668-4bd9-8273-927cb725630d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc39ddb-4e2e-48d2-9eba-4d01d969ee61",
        "cursor": {
          "ref": "c1a5eee7-0174-4721-a1b8-21a21f103d7a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9e41a791-c7d6-4391-b7c4-84b037708354"
        },
        "item": {
          "id": "1cc39ddb-4e2e-48d2-9eba-4d01d969ee61",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7b5f3d8d-5916-4bdd-a87c-1141375ae855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72259ff-c4d3-419c-bfd2-0671c77c90d0",
        "cursor": {
          "ref": "b7610b0c-f60a-4e98-a554-35f4c5407492",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d70bca9f-9bda-40fb-8a2f-d2d21596d29f"
        },
        "item": {
          "id": "a72259ff-c4d3-419c-bfd2-0671c77c90d0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b70103d0-9b1f-4702-bccf-025c7e254b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6ff702-e9c8-4d61-b0f5-687328958250",
        "cursor": {
          "ref": "1abb8e8a-bd6b-4ef0-b49a-7d5c6febd031",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "02939479-3afd-48f9-98bc-95c93d945ba9"
        },
        "item": {
          "id": "bc6ff702-e9c8-4d61-b0f5-687328958250",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ed85d406-c038-48d2-a720-58eaf43029b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92199e8-183c-45e9-848f-2824c0c91e32",
        "cursor": {
          "ref": "5f604106-fd3d-472d-a1ea-edd40f04c2c1",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b3313a94-1cdf-4766-a63e-804ce50cfb1d"
        },
        "item": {
          "id": "c92199e8-183c-45e9-848f-2824c0c91e32",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "391990f8-306c-4b04-ad96-ca4134974138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5963666c-733b-45e1-88af-f59dcf142a09",
        "cursor": {
          "ref": "6b127259-efa7-4e02-9d65-123c54f4586a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9991bbeb-eb3b-441a-9366-1f61d983646c"
        },
        "item": {
          "id": "5963666c-733b-45e1-88af-f59dcf142a09",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "91384572-3636-488d-b4e4-c678ed2a0176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90444ca-f012-4c60-a20b-6adb248cc46a",
        "cursor": {
          "ref": "5accdeed-8a67-452f-a727-1c49f737b2b8",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a543757b-7bcf-460c-86f5-a7c19d8723a0"
        },
        "item": {
          "id": "f90444ca-f012-4c60-a20b-6adb248cc46a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "62710fca-23aa-4b6f-8c7c-7790e315d436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d00c0b0-ca5e-420a-ab10-3a22406e6483",
        "cursor": {
          "ref": "d50e5c71-0edc-48d0-a3fc-96150bf83dd5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "80500ab0-67b7-435f-aa3c-0b512e3d8f95"
        },
        "item": {
          "id": "2d00c0b0-ca5e-420a-ab10-3a22406e6483",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2dd89547-125e-4913-a307-5a7cd34e50f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab298bd-149d-43cf-b4d7-ed6253857fc9",
        "cursor": {
          "ref": "9fd5a61b-7687-470f-b08f-10bf5dcca62f",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7e730e13-06b2-40b7-84e4-1b4913f61b5b"
        },
        "item": {
          "id": "2ab298bd-149d-43cf-b4d7-ed6253857fc9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "87097a10-7564-43d5-9a09-9bd4793614e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beff0be0-caab-4281-9c41-f35560775143",
        "cursor": {
          "ref": "f510cfac-ffe9-43b6-951f-8634720844d4",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "73214322-1c87-4c7f-ae39-9819a5aef029"
        },
        "item": {
          "id": "beff0be0-caab-4281-9c41-f35560775143",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0206197c-5ef1-46ca-9a47-1c038bcbe52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953e9ea6-5ffb-4fef-b7a2-f05565df7df4",
        "cursor": {
          "ref": "b29c673c-94b8-4ff5-9654-d2fba42555cd",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "dfd2e7be-9bd2-485d-bb7b-a9a60aa7ef9e"
        },
        "item": {
          "id": "953e9ea6-5ffb-4fef-b7a2-f05565df7df4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fd1d0771-fa33-43e5-955a-818cb4d85459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51b097d-e7ad-41dd-bdce-e7b0b674df0f",
        "cursor": {
          "ref": "fbf12b17-5ae4-444e-b01f-b8e3630650fb",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a4891e45-4e43-4620-a541-d5e7e2dd0cd1"
        },
        "item": {
          "id": "c51b097d-e7ad-41dd-bdce-e7b0b674df0f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "39614a3e-f99e-4a55-b9ed-d884e1271031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d5aaca-b7ed-43c3-8108-efd1e55443af",
        "cursor": {
          "ref": "c8fbbd13-2077-42db-bcd5-1ac367c9621c",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "78722dbb-af3d-42c7-8e04-c53fd1bb2f70"
        },
        "item": {
          "id": "58d5aaca-b7ed-43c3-8108-efd1e55443af",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7783472d-7550-4796-816e-8142962a4ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998de452-2e5f-4514-aee9-6d7e80fa162b",
        "cursor": {
          "ref": "fea3c81a-4124-40e6-9b9f-59c696387085",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "206b28f5-0ca6-4b07-be89-9df52e18ef8c"
        },
        "item": {
          "id": "998de452-2e5f-4514-aee9-6d7e80fa162b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2f72b499-3047-4c97-9e4e-29576aed2115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683a4bdc-09ff-498e-859a-68e2a3471f1f",
        "cursor": {
          "ref": "252c5d02-530b-46b6-8e27-a921e2b37f01",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cbca6618-ae35-447b-b43c-d7d78de8d998"
        },
        "item": {
          "id": "683a4bdc-09ff-498e-859a-68e2a3471f1f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c36514ff-0a1b-4b18-a0be-7add54d42a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc6efb6-c69f-4266-9714-a45badce8b05",
        "cursor": {
          "ref": "7a2d671a-da54-4341-8c8e-5d4ef09bf960",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "54660512-47b1-471d-b44d-58807bd1e18e"
        },
        "item": {
          "id": "cbc6efb6-c69f-4266-9714-a45badce8b05",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e6246bd2-d59e-49b1-9a2f-8d54d1e32ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef10fc9-f3b7-46e8-b5a5-aa8ce92a77ea",
        "cursor": {
          "ref": "1f4a8e1c-8356-426f-8106-0ac315b8f963",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "12b56a4d-b0b6-46d6-855e-5c76dbaa227a"
        },
        "item": {
          "id": "5ef10fc9-f3b7-46e8-b5a5-aa8ce92a77ea",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "481b8cea-c68d-49b8-92aa-6eece80cea4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5917bfd-faaa-4614-b0e5-b7a76952c243",
        "cursor": {
          "ref": "8da0bd63-e8a4-4015-b81d-0b226eb014a6",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2e65fa9a-8b3c-4c90-846e-aa2e555148d0"
        },
        "item": {
          "id": "f5917bfd-faaa-4614-b0e5-b7a76952c243",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7b2efe56-10e2-46d7-8b75-6193420f2c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5987646-c209-4d4a-ac19-6b1288e3fa74",
        "cursor": {
          "ref": "4bca5e01-ded9-4f0e-9005-ce9444d7fe8f",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0fcde6e4-6441-42de-8128-01f2b9e861b3"
        },
        "item": {
          "id": "f5987646-c209-4d4a-ac19-6b1288e3fa74",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a9e89188-2ec9-4929-a62b-20d745b4a5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa1f080-6d00-4cad-8b85-ad4d3df6bc30",
        "cursor": {
          "ref": "8ed7007f-0140-4bef-8152-0ddda835faeb",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6e1036e6-3adb-4f18-94d0-80df2c53eeb8"
        },
        "item": {
          "id": "efa1f080-6d00-4cad-8b85-ad4d3df6bc30",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "edff393d-b653-4b1e-910f-955af0cf2417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47517c9-b8e1-481e-ae84-8b9eddfd273a",
        "cursor": {
          "ref": "528ccb82-f4e0-4e1b-9275-136d886729dc",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "11112731-b7cb-4789-a22f-9f0bf3842a40"
        },
        "item": {
          "id": "c47517c9-b8e1-481e-ae84-8b9eddfd273a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "32d32ce8-92b1-45dc-b211-b327b4b30504",
          "status": "Created",
          "code": 201,
          "responseTime": 549,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "aaba4690-ab98-411c-ac94-e84b51be89ae",
        "cursor": {
          "ref": "2c21ef4e-1856-4c4f-b2ba-1a16092b6457",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ba0f18cd-e1d1-419e-b6ba-3861e287e697"
        },
        "item": {
          "id": "aaba4690-ab98-411c-ac94-e84b51be89ae",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7835103a-c30c-414f-b611-e92d1b21366d",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "193c7d4a-247d-4a3f-9256-51ff52653ad6",
        "cursor": {
          "ref": "7350103f-a6d3-4df2-a659-831682a269dd",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "030a0c17-7aed-4b91-bf9b-bab740277846"
        },
        "item": {
          "id": "193c7d4a-247d-4a3f-9256-51ff52653ad6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c194a7e0-7fe6-4439-8795-0aee0e32ee13",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f7867126-f66a-4734-9d57-a7a838365f53",
        "cursor": {
          "ref": "251ec2a4-0809-4acf-9b95-4d696dd945ab",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "45c173b1-051d-40bd-bcfb-24da1e3f712b"
        },
        "item": {
          "id": "f7867126-f66a-4734-9d57-a7a838365f53",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dd243179-2ea8-41fd-9f45-94958655a79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7b603-b05e-4057-a7b6-acd4c18b9164",
        "cursor": {
          "ref": "0df7b21c-6611-41de-b84f-aa8cb384b0e8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "405b53e4-096d-4c5e-a775-837784aa1401"
        },
        "item": {
          "id": "20d7b603-b05e-4057-a7b6-acd4c18b9164",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a86b1a5b-1f94-4dcd-8d49-a3021418c275",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b5fd0bcd-d9ee-4c7e-898a-064f9a0c5a3f",
        "cursor": {
          "ref": "6a8b1945-d828-495d-9182-d36dbda66a70",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c924773a-a85d-4c6a-be1e-588c1bc07669"
        },
        "item": {
          "id": "b5fd0bcd-d9ee-4c7e-898a-064f9a0c5a3f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d9a2e85e-ed2a-472b-bfe7-9f7c26bfee57",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "898efda8-6f60-4001-a1a2-a006d2a2ac3d",
        "cursor": {
          "ref": "0aff1d76-7584-47ed-b0ae-4308288969ee",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f9defe01-dfcd-4ef9-9c43-52a2752d5256"
        },
        "item": {
          "id": "898efda8-6f60-4001-a1a2-a006d2a2ac3d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a9d8f225-3763-49ae-a0ee-50468a631b11",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "02744ca6-7923-4cef-9a38-4e69309c951e",
        "cursor": {
          "ref": "7f2b02bd-16e9-436a-89a4-0ec453bf7ceb",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "53d52611-f6a1-460a-abf3-4968b740727f"
        },
        "item": {
          "id": "02744ca6-7923-4cef-9a38-4e69309c951e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f7c33487-ecf1-4a98-9317-8cacfcbe0fd6",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d036700c-ae8b-420f-beaf-d46819748f78",
        "cursor": {
          "ref": "2fe37cd9-bea8-4c65-959f-eb4361cc6bf2",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d0322d72-6d13-49d9-b540-51798fd5ec2f"
        },
        "item": {
          "id": "d036700c-ae8b-420f-beaf-d46819748f78",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1c2015e1-c249-48a2-9511-42e843ebf2eb",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "03be0743-b807-4186-833e-12e7e37faf0f",
        "cursor": {
          "ref": "14c7ecda-476c-4145-9328-f167a56a53a6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "26783219-2a04-41b9-a49e-e7d6d681d45c"
        },
        "item": {
          "id": "03be0743-b807-4186-833e-12e7e37faf0f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "951a2a38-4dae-414e-9198-be4e46e01959",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a211d28c-8467-4557-902f-3ea06710444e",
        "cursor": {
          "ref": "0d8229ac-d308-43f8-a835-fb5dc07d7fe1",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b57c2ac6-7fb1-4acd-8917-b758abdb0a4f"
        },
        "item": {
          "id": "a211d28c-8467-4557-902f-3ea06710444e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b8dd3b93-7036-48fa-88a8-2970ff288d32",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cc3e3d77-4b7b-44c4-b89a-ef2e24e31297",
        "cursor": {
          "ref": "13ab9426-c7bd-445c-b188-959d7f6d9b57",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "51282d84-1bb1-47f6-8bb1-8c31bb0a401e"
        },
        "item": {
          "id": "cc3e3d77-4b7b-44c4-b89a-ef2e24e31297",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a8717077-7c77-445d-bc68-5f9fc97546e4",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "50f18b88-7fb4-470c-a895-32532dc73547",
        "cursor": {
          "ref": "c59e1877-d296-4d25-9fdf-2105a32ced06",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2f7dae31-66ca-4975-9a10-1c2603aeaaf6"
        },
        "item": {
          "id": "50f18b88-7fb4-470c-a895-32532dc73547",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1a5c92a6-784a-4999-9bec-33e5561dd708",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "81b85e03-a7e0-4b80-816f-ca8b896421fd",
        "cursor": {
          "ref": "88bb6665-a4dd-4b11-8804-0e996d275dc6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d7e7f7f1-e4de-46e6-9b95-fba8b40d4d45"
        },
        "item": {
          "id": "81b85e03-a7e0-4b80-816f-ca8b896421fd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "038af6d5-6117-48fb-9884-772b659e91b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3526013-d3cd-4dea-b350-86051b79a954",
        "cursor": {
          "ref": "e0cca056-8f73-49ae-b0aa-dd74c83faf29",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a789ddb2-02e4-4bb1-99f3-5bac20601436"
        },
        "item": {
          "id": "b3526013-d3cd-4dea-b350-86051b79a954",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7cce1ad4-77bd-49cd-afd1-68be157afc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0433276-a9ee-440d-9384-6ac7ee701123",
        "cursor": {
          "ref": "ef132ee1-78ec-41da-abb1-9dbfc336720f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "da92b7ec-73d7-4338-bd81-aea607140e2f"
        },
        "item": {
          "id": "a0433276-a9ee-440d-9384-6ac7ee701123",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2089ee7a-402d-4ae5-9e57-73a5132420eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fc626b-64a2-40a6-bd2c-89fce3c739a3",
        "cursor": {
          "ref": "2cb45530-b44a-4223-b25b-67b86036af76",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5bc24e37-4894-4cd2-add4-442a840f82ee"
        },
        "item": {
          "id": "63fc626b-64a2-40a6-bd2c-89fce3c739a3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "993ca130-761b-4106-89e1-aac773f29ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5c6759-537f-4c44-8f59-69abbef075d6",
        "cursor": {
          "ref": "256cd835-1b52-40fe-a034-a45b66534f39",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "deb08f2d-9fe2-4f35-8de1-1263a07c8c28"
        },
        "item": {
          "id": "bd5c6759-537f-4c44-8f59-69abbef075d6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3107fa1c-12ee-4f31-af5f-7a7fb42273a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01a6b04-e328-46d9-a4a1-9d9024a4f272",
        "cursor": {
          "ref": "2dc8c048-d858-47c3-9f8e-fc57bcae0a6d",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c4205317-2e3b-4ece-9c2b-cd2961b94247"
        },
        "item": {
          "id": "c01a6b04-e328-46d9-a4a1-9d9024a4f272",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5258cb17-2b2a-4d0e-a72e-d0b79cc8da8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcae3681-dc1a-4e34-abf6-315a6fb01b86",
        "cursor": {
          "ref": "a59c5dc5-27ce-4238-b676-88ce721b19f6",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "902478de-c883-4024-a5cc-c3678d6b9808"
        },
        "item": {
          "id": "fcae3681-dc1a-4e34-abf6-315a6fb01b86",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "51b5fdb5-3920-4a4b-8a0d-c5d96aed1192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b606bf0d-da05-422c-a6cb-c3fbc2d8fb93",
        "cursor": {
          "ref": "88f24e0d-7672-4015-9035-ffac070f8ea0",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ddb5ffc3-afb0-4e8f-83c5-116dfab00234"
        },
        "item": {
          "id": "b606bf0d-da05-422c-a6cb-c3fbc2d8fb93",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5575fa0f-1a89-4f4a-9427-00517bafe53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6335b2-27b6-4bf1-ad2e-156cc7bcc0ac",
        "cursor": {
          "ref": "9cec6e7f-272c-45c1-80d8-09ce28329ce7",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d840021b-f456-4616-8c60-ea92a662ea39"
        },
        "item": {
          "id": "8c6335b2-27b6-4bf1-ad2e-156cc7bcc0ac",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a2bd085a-f31b-42f2-831c-49a2b402d072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625139b6-91d3-45f2-b89c-2eb668a9bff9",
        "cursor": {
          "ref": "73bf32ff-5ea4-49e2-ac83-93b22b19323f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "94337513-0610-489e-8270-7a3757a21dcf"
        },
        "item": {
          "id": "625139b6-91d3-45f2-b89c-2eb668a9bff9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "42c552b4-82a7-4abf-866e-af7f9210ce88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7821fff-3944-48a3-8a6d-f86f04b6b2b3",
        "cursor": {
          "ref": "7174d5d3-d8f0-4852-be23-1b1996ac3480",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d9ab8cbf-f14e-4813-96f1-3a01718e46b5"
        },
        "item": {
          "id": "a7821fff-3944-48a3-8a6d-f86f04b6b2b3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e25a2759-bf7e-4b3a-aab5-e2bd40e90871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071354da-219d-417e-ab18-d91efef70e8b",
        "cursor": {
          "ref": "a8ad9983-a791-446d-8043-98964875c05f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4a42d00c-206b-48c3-ad48-ccf48d239fdf"
        },
        "item": {
          "id": "071354da-219d-417e-ab18-d91efef70e8b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9abc7589-2555-4856-9677-0a0a66545a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b448476-a75a-4ac7-b1d3-94e5ac27cee1",
        "cursor": {
          "ref": "07083d5c-9508-4630-a3f6-a63588326d0e",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "99f647c1-6550-4ff9-9f64-121c91a716bf"
        },
        "item": {
          "id": "2b448476-a75a-4ac7-b1d3-94e5ac27cee1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9befb965-806f-4b55-8ef1-8db56011e303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0561f24-20e6-49ce-a2e0-55873104c8c2",
        "cursor": {
          "ref": "63bb460a-ef22-473b-a155-4bc71e3e4aaf",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "109359a1-a264-4d53-be14-c3c7152937a4"
        },
        "item": {
          "id": "c0561f24-20e6-49ce-a2e0-55873104c8c2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6a89f336-6a32-4d7d-8798-1244da99de6f",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "53866d23-266d-4750-be10-c58f673d724f",
        "cursor": {
          "ref": "ca175e90-fbfc-44f3-8a0c-4ca58bdb4839",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "eee41bbc-d48a-4bcd-bc19-c940f610f713"
        },
        "item": {
          "id": "53866d23-266d-4750-be10-c58f673d724f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "89c0c7ae-d554-4734-b6c3-dbb63af1f3fb",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b0bd206d-a7e8-4bd4-925c-16f5b2ab4441",
        "cursor": {
          "ref": "f971a7b7-3ace-41e0-9c83-b48869f20805",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4b5e0745-6786-475d-a212-c4315c3b9db8"
        },
        "item": {
          "id": "b0bd206d-a7e8-4bd4-925c-16f5b2ab4441",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "225593cc-b94d-46be-85df-d97890833d0c",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "79605c33-8744-4525-bb50-adfbde7feef9",
        "cursor": {
          "ref": "9e3d05e2-1436-4ba5-8e37-84c21e87cea9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "799b8f14-3718-4d44-b573-2ece4e89dcb6"
        },
        "item": {
          "id": "79605c33-8744-4525-bb50-adfbde7feef9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0eef84b7-e299-4928-a961-25575bdcc7b2",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d59e11d2-8ec8-4877-a0d0-7e3a21c1dcdd",
        "cursor": {
          "ref": "5e6a28c1-5ef0-45a9-a039-10591d3dd367",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6f343df0-74d8-4f2a-885b-7022588faf33"
        },
        "item": {
          "id": "d59e11d2-8ec8-4877-a0d0-7e3a21c1dcdd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c0ae12e3-02e4-48de-80d8-f4cf2e0d2391",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9d301175-3ae2-4b90-af3f-801f85de39ea",
        "cursor": {
          "ref": "3aace5dd-2873-4905-89f8-bcbda6bf607a",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6f4c4c9d-9b3d-427c-a376-760f4a191a1a"
        },
        "item": {
          "id": "9d301175-3ae2-4b90-af3f-801f85de39ea",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a0fd6103-3075-4c72-9df9-41d61110fbd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20495e35-759a-4e79-b3e2-87bc2451d28b",
        "cursor": {
          "ref": "03dccf8e-c547-4da8-a184-83678963d8d9",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3520056e-d2f9-4eee-8bd8-094eab1ef1a5"
        },
        "item": {
          "id": "20495e35-759a-4e79-b3e2-87bc2451d28b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "48b4491f-0b3e-479c-b472-4bdf3731d0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67e5889-41fb-48c0-bcef-9415db4dac43",
        "cursor": {
          "ref": "69f4faac-5c60-40ff-b4c6-fed1c79ffcf1",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f71ebfd0-1f2c-445c-b1cc-bc7fb10e390a"
        },
        "item": {
          "id": "a67e5889-41fb-48c0-bcef-9415db4dac43",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "99cf9805-bdec-4b10-b5e9-9b6d47abdaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0853c6c4-565d-4873-9143-85dfc3fd2178",
        "cursor": {
          "ref": "01285ded-d4e1-41f2-af8a-de56136b80da",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "700fc977-90a9-4da7-b130-c90e5dfc5cab"
        },
        "item": {
          "id": "0853c6c4-565d-4873-9143-85dfc3fd2178",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a6ecc237-da1c-42e8-83f5-980b8c6e60a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93eaf453-54ce-4438-b2c8-f2945c24e784",
        "cursor": {
          "ref": "27bd9f0f-fae0-4ce7-abf8-540aeb8fff2b",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c800a959-108a-41c9-84b7-3eb88633c621"
        },
        "item": {
          "id": "93eaf453-54ce-4438-b2c8-f2945c24e784",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e18b6952-255a-4013-aa33-d871c3873d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fe5591-9dd7-478f-9bef-1bfcaba76d9c",
        "cursor": {
          "ref": "0b42756b-320a-495d-8933-a946b1f65325",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0721ea84-d8e3-480c-9e10-e0546a648a58"
        },
        "item": {
          "id": "f6fe5591-9dd7-478f-9bef-1bfcaba76d9c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4323454e-9452-4f3b-a9d1-43312e7d2596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170fd7f4-0eba-4e7e-8e4c-d62aab9990fc",
        "cursor": {
          "ref": "ba2b2962-e18e-4bd6-9f06-eceb702e3e08",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9ccb5728-40ec-4cb5-b320-37ce762a8d96"
        },
        "item": {
          "id": "170fd7f4-0eba-4e7e-8e4c-d62aab9990fc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c6ac2817-b579-4b04-b015-18472f068d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2afc35-b7ea-4f44-b0ae-0195c39fc32f",
        "cursor": {
          "ref": "bb481637-6728-4012-9b70-a3bcf9e06578",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "22fe739c-49c1-4026-94d1-04fba2103f94"
        },
        "item": {
          "id": "3e2afc35-b7ea-4f44-b0ae-0195c39fc32f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a12b6c0c-8e0a-4cb7-8709-88e47f5320a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0ac52b-b631-4a4e-b0d7-77d7307d8258",
        "cursor": {
          "ref": "0a895203-5dde-49c5-95b5-57c4667d046a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "73c1aac9-9651-4973-8bd9-c8bb143debc3"
        },
        "item": {
          "id": "cd0ac52b-b631-4a4e-b0d7-77d7307d8258",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "90e09748-340f-4df4-b961-6be444482390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c523f0-bff4-4e39-a766-669d9f72b06d",
        "cursor": {
          "ref": "ecc7d8e6-c112-4aa1-ab62-ed0170f0ca4d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cd5ec60b-79a6-4171-9796-804027aa96d0"
        },
        "item": {
          "id": "d1c523f0-bff4-4e39-a766-669d9f72b06d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "24b112cc-b9e6-4efe-a09b-7215d036ffb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310a913b-f2d0-4c29-bcc1-9b7c37e18449",
        "cursor": {
          "ref": "a427465f-abf1-4356-960d-fc8e861b253c",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3e7a6c86-bb9c-45ba-966e-5fd910255b84"
        },
        "item": {
          "id": "310a913b-f2d0-4c29-bcc1-9b7c37e18449",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "98ff044e-ae84-4be4-b679-06f5dd1bccf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e594a37f-96cc-4a73-9321-d702b8b6bf81",
        "cursor": {
          "ref": "098fa19b-26c6-4d94-8722-2d578d92f735",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e2edda3a-4283-4d0f-af0a-cc67f08d9230"
        },
        "item": {
          "id": "e594a37f-96cc-4a73-9321-d702b8b6bf81",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1942440b-f40d-4f6a-846b-9bf5b1885068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0545139e-c9fe-40eb-a6eb-01299fee8fee",
        "cursor": {
          "ref": "824cfb93-0cb4-46d7-871e-7c4d1c983247",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "30166d37-12c8-4018-8160-bbf2adbd1ff8"
        },
        "item": {
          "id": "0545139e-c9fe-40eb-a6eb-01299fee8fee",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0b3dff97-87d9-478c-9860-a01df78549c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44141964-7dd9-47b1-a00d-269a051979e8",
        "cursor": {
          "ref": "5ab6bb22-ee17-432a-a6d7-cc47a158798c",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "45221cf4-7d22-4002-a0d8-426b06b4eae5"
        },
        "item": {
          "id": "44141964-7dd9-47b1-a00d-269a051979e8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "165d7926-679a-4fbb-badc-f08dc9a3ca67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777815f8-0a98-451c-8f00-325824e67f12",
        "cursor": {
          "ref": "aa0dadc9-89b0-44a3-826f-67c7ad1fadb8",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9325c636-ea30-4507-808c-9eaadd910704"
        },
        "item": {
          "id": "777815f8-0a98-451c-8f00-325824e67f12",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ef635b3c-4c9e-498a-b1ba-c1c10ee44cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54553734-9a39-4bb5-b59e-0e164da2089a",
        "cursor": {
          "ref": "e8088cb2-3931-4c69-87b1-683348df7a44",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b3b14f5b-eb76-4162-b584-75f5ab90c34c"
        },
        "item": {
          "id": "54553734-9a39-4bb5-b59e-0e164da2089a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c3fb543a-124d-48f9-b1ba-f69062bf73b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfc1315-091b-471e-9a4e-e61f3315b5bd",
        "cursor": {
          "ref": "9a680a72-7508-4d7f-948c-11b2d4406782",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0b0d4eae-0715-4ac3-95bd-159c7f1919aa"
        },
        "item": {
          "id": "3dfc1315-091b-471e-9a4e-e61f3315b5bd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "763fae48-41cf-487b-bfd2-23a6a0bb2548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5206d8-ff2a-416b-aa18-29260dff78bc",
        "cursor": {
          "ref": "52879427-2e88-49e2-b52c-78887998bd0c",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "56d47a2d-71a0-4903-8900-f1cdf9c2e972"
        },
        "item": {
          "id": "2c5206d8-ff2a-416b-aa18-29260dff78bc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "63c924a6-fab1-4964-a060-5635f8af233d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74613600-bf75-4990-a08e-2566dce15b87",
        "cursor": {
          "ref": "fec1faa1-a171-4533-a3d9-3b31733d242e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a8ba2f72-6648-43aa-8d06-02c36a49d01d"
        },
        "item": {
          "id": "74613600-bf75-4990-a08e-2566dce15b87",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c4193204-ab19-470d-9539-ad101c0c2797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a60fed3-1c51-433f-b612-ec80fa4bc267",
        "cursor": {
          "ref": "a3657ead-7cf4-49fb-bf2f-9a6dd3d6c399",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d28516d8-f926-4f1d-82d6-992f67ecab59"
        },
        "item": {
          "id": "1a60fed3-1c51-433f-b612-ec80fa4bc267",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0a756481-597b-4e20-aec1-0b33f01ccd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed20da8-3dac-40a7-91b9-35eff285322d",
        "cursor": {
          "ref": "c826d1fc-267a-462e-91d9-47e4fbcace59",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "67e25a16-f70d-4235-ad62-d1ae1c1bde7e"
        },
        "item": {
          "id": "9ed20da8-3dac-40a7-91b9-35eff285322d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c0d4b59c-549e-4ea1-916e-593964a0dce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc698b64-3ca3-4984-84de-f40eba2f7bf2",
        "cursor": {
          "ref": "91ce7e67-f1da-4869-bfac-d52576e9c579",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "59b071d2-2cc6-4df5-8973-d49120d2ae80"
        },
        "item": {
          "id": "cc698b64-3ca3-4984-84de-f40eba2f7bf2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f479a018-93bf-4ed2-b777-d0e9cd4cf5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6ea72c-5e68-4ffd-a19f-068a046d4cdc",
        "cursor": {
          "ref": "49d0b53b-9277-4087-9825-50b7b3fd1615",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7d26e5e1-1d60-4fc2-87d0-d89975050cec"
        },
        "item": {
          "id": "3a6ea72c-5e68-4ffd-a19f-068a046d4cdc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b9102037-3440-426c-aa30-614cceb303c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e0226d-396d-475a-92ab-5133af8b2179",
        "cursor": {
          "ref": "8f625906-eec0-458f-9fc6-e97fa9906a4a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "71d4e663-d589-490c-87b3-8effcdf39fea"
        },
        "item": {
          "id": "33e0226d-396d-475a-92ab-5133af8b2179",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5aab1d27-39ac-451e-9cc9-34dcc795b973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839dce35-7bb0-4e32-ae71-013894c8ae6d",
        "cursor": {
          "ref": "1302854d-187d-457a-8a0b-4ad191706e3d",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9b2b5a1c-0c08-4c1a-95b9-3e719e87b12d"
        },
        "item": {
          "id": "839dce35-7bb0-4e32-ae71-013894c8ae6d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "91f10898-e611-45a2-b37a-d922c2d3be9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b180f07f-3936-4019-baae-951e817d2d6c",
        "cursor": {
          "ref": "8a66b039-2402-4685-857c-e2ef43c08df3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cb88897f-7a4d-40b2-8b61-0082c74b4ca5"
        },
        "item": {
          "id": "b180f07f-3936-4019-baae-951e817d2d6c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5cca9ec6-1d52-46a0-a2ee-c8cea4a24745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d656fae5-dd6b-44ee-bef5-436f29431f1f",
        "cursor": {
          "ref": "980c7929-9bd3-4ec6-8421-f63f7afb30c9",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6fa9ac53-494a-47f7-bab0-a6bf388a5c33"
        },
        "item": {
          "id": "d656fae5-dd6b-44ee-bef5-436f29431f1f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "99c8eb53-8e5c-4107-9423-db1d135a6d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffe1e2a-d903-480e-8467-b4aae009889b",
        "cursor": {
          "ref": "fecc07da-cb48-496c-b73e-43df378f33ff",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "399df127-c155-4d36-ba69-ffd712941985"
        },
        "item": {
          "id": "dffe1e2a-d903-480e-8467-b4aae009889b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6e4e7940-b0ad-4cee-b01a-a288d3174b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e797584-2bff-4cd7-b517-6d74a44e0b56",
        "cursor": {
          "ref": "8682d24c-c422-4799-8f1d-bf0fff353798",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2853ba95-a23a-43d7-8779-0e9bc92d4f5b"
        },
        "item": {
          "id": "5e797584-2bff-4cd7-b517-6d74a44e0b56",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8f504a41-0764-4138-90ec-900dcf83acc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db9a374-b6e5-48b3-8139-ccf7bccbeb95",
        "cursor": {
          "ref": "0a06b443-bd8a-4a4d-a830-3678c8a561d1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "47c9174b-324f-41f9-a06e-4f7f760b907e"
        },
        "item": {
          "id": "9db9a374-b6e5-48b3-8139-ccf7bccbeb95",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2f4d95a5-584f-4a68-a5e2-1361eaa81ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74984d75-3a14-4a32-8024-68ac194ea5b2",
        "cursor": {
          "ref": "38818ce9-b446-4f83-859e-f06665deba6a",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "76959c32-fd0e-426b-88af-4af8e3a38e00"
        },
        "item": {
          "id": "74984d75-3a14-4a32-8024-68ac194ea5b2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bd9fadaf-2ade-407f-bfb0-e509f503712a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3052560-7929-4c8c-ac6a-08ff9152da12",
        "cursor": {
          "ref": "472f933e-8f83-41ca-b8cc-f001c7f44575",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2ca8b874-7e09-4314-ae4d-0cd4c9f89805"
        },
        "item": {
          "id": "c3052560-7929-4c8c-ac6a-08ff9152da12",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "995c7534-0a10-409d-a7ce-7d001d58ddce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95542fb-dcdb-4052-8fce-6179b4cb9888",
        "cursor": {
          "ref": "2e7d8f2e-3f8c-4cae-9f82-c44a8e189e80",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "90e3e3ab-3c1c-41ce-9734-026369600c40"
        },
        "item": {
          "id": "b95542fb-dcdb-4052-8fce-6179b4cb9888",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "75f6ea90-a3c6-4df7-984a-816a9d16dde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d5734dea-50cb-4254-84d0-d17f45471014",
        "cursor": {
          "ref": "715fd35f-36d1-4e1a-b374-2d23fbb7bf5f",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fcc6451c-4a50-4462-be98-2e2e4774011d"
        },
        "item": {
          "id": "d5734dea-50cb-4254-84d0-d17f45471014",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c8ee8017-dcc1-48f9-a0c9-ef27c838a847",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7672f7bd-3508-4e95-8fe0-e0f32e001a77",
        "cursor": {
          "ref": "5452b723-2209-492e-9097-1b22f594b386",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "568e26a3-ee4c-4e5b-85ad-a7718f7426bb"
        },
        "item": {
          "id": "7672f7bd-3508-4e95-8fe0-e0f32e001a77",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "db2b9b05-dfaf-42f7-9c4a-4f315f961029",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b23fbe-4ee5-416d-a4dd-c51590ebdc28",
        "cursor": {
          "ref": "f1f18c26-dcbf-4854-863b-065941a1d7f8",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1438d961-5811-4535-8680-d7d49ed8d6ad"
        },
        "item": {
          "id": "19b23fbe-4ee5-416d-a4dd-c51590ebdc28",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4cb53a00-636f-4184-aa11-b7b1ba3617f3",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f02474-7dd5-48ee-b2ec-b48893b72bd5",
        "cursor": {
          "ref": "7fe8ba59-0295-4500-9c7f-e77a1f55bed4",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "48aa8eed-4af5-40ed-af0f-198d5d77e5aa"
        },
        "item": {
          "id": "58f02474-7dd5-48ee-b2ec-b48893b72bd5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9bbf2d39-17a2-490b-b8e1-8521f520bcab",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "464f73e2-9365-498d-a3b7-070f216681bb",
        "cursor": {
          "ref": "3b28bcda-6759-45d0-bc9c-c7d5ccbac026",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "51e54bd3-c6c3-48d8-9b9d-84ee48624754"
        },
        "item": {
          "id": "464f73e2-9365-498d-a3b7-070f216681bb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d3fbc584-3203-490e-9db1-5cf4d2859e90",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-08T00:30:00.406Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-08T00:30:00.406Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "13b93a9a-3240-4b82-80c0-907247240adb",
        "cursor": {
          "ref": "43e66ab9-ee5e-4226-8549-0f29eea75eaf",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a36a566e-717e-4d63-aab6-88b6fe4febd2"
        },
        "item": {
          "id": "13b93a9a-3240-4b82-80c0-907247240adb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ff5142ed-a6c0-41f5-92d5-fff72a79d65f",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a830b8ee-b359-44d1-bc2a-5049e8a7a272",
        "cursor": {
          "ref": "d1016edb-7b53-4ba4-8b81-670f73e14a70",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c106872b-7f13-4c8f-a234-6c65cf68769b"
        },
        "item": {
          "id": "a830b8ee-b359-44d1-bc2a-5049e8a7a272",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "82a47416-944d-4650-8b44-6243d9e1e410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869395f1-ae81-4dc0-b39e-8d3e1db01d6a",
        "cursor": {
          "ref": "02dda3c4-f52e-4ffc-98a7-a4237007d984",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8395708b-b385-4c84-9afc-b8410f976248"
        },
        "item": {
          "id": "869395f1-ae81-4dc0-b39e-8d3e1db01d6a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eb8679ea-d581-4980-8648-ad29639d9578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21ac559-11cb-45d5-a018-c6534a56372d",
        "cursor": {
          "ref": "90f45e7b-3056-4e2f-a594-361372079846",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3b47984c-bae3-40a1-b5e4-b90526f44d18"
        },
        "item": {
          "id": "f21ac559-11cb-45d5-a018-c6534a56372d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "da14a5a0-7db7-424a-b733-f7f4e058878c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ee6efb-789e-4157-b284-9bf459f817e9",
        "cursor": {
          "ref": "17be4776-d9ad-4b58-acce-da8f77280c42",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2f70580e-8877-493e-a552-84a1e53d459c"
        },
        "item": {
          "id": "c7ee6efb-789e-4157-b284-9bf459f817e9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "36c3f262-8e4a-4a38-aecf-7cc0d5b8acdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754367a6-0915-4f6c-963f-4cbc98c7d608",
        "cursor": {
          "ref": "c1d844fc-1620-4540-b7d8-fa866dc32147",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "888a43b4-fb9e-4133-be3d-dad3ccd2d16c"
        },
        "item": {
          "id": "754367a6-0915-4f6c-963f-4cbc98c7d608",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4baf7069-1017-4e96-8e16-832acc969b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0183b6d1-9480-4157-ba7e-477d81a6ad79",
        "cursor": {
          "ref": "37f05dda-65c6-4dc5-9457-43bf210b0052",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fdc79c84-b615-426b-a192-e2d047d71a80"
        },
        "item": {
          "id": "0183b6d1-9480-4157-ba7e-477d81a6ad79",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9edd4fa4-f04a-4436-a349-d2aaa8d78537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fab12d-cee3-4f88-ac13-6ec52f85786a",
        "cursor": {
          "ref": "f841f9f4-53bc-496d-85a9-364f95608326",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b259ec30-ef33-4ea3-8554-55e6ef7fe4f0"
        },
        "item": {
          "id": "61fab12d-cee3-4f88-ac13-6ec52f85786a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0969e3fd-43bc-4acb-95c4-da96d324612b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c901b39e-d1eb-4bc1-8cb2-6adf9bfe40c2",
        "cursor": {
          "ref": "e3d4933b-af7e-43a2-88da-ca6f2eb93f67",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5da2672b-55ce-447d-a1a6-5d421d524823"
        },
        "item": {
          "id": "c901b39e-d1eb-4bc1-8cb2-6adf9bfe40c2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4a4f83ab-e9e3-4887-a9fc-49aa088dee60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc97473-839e-47d5-b0a6-0b7d8c1512da",
        "cursor": {
          "ref": "0e38fd98-2458-40d6-bd60-7c2a5cf3cff3",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d3614724-5c8d-4dd2-b64e-b086c29edb37"
        },
        "item": {
          "id": "adc97473-839e-47d5-b0a6-0b7d8c1512da",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "852f7dec-63f8-474d-a800-f33381eba4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d866d96f-2428-481c-bf0f-3f2151aa259a",
        "cursor": {
          "ref": "09b6a234-4698-4618-95a8-c8cc267d77be",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "559fdbad-8830-4d5e-b645-712ce8802562"
        },
        "item": {
          "id": "d866d96f-2428-481c-bf0f-3f2151aa259a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f056fc07-37e5-4249-830a-6c5bab38ea1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbbf825-e738-4a25-aef8-3105757596ad",
        "cursor": {
          "ref": "8a60d608-9666-46ae-89ea-8f3c0deea387",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "272685e7-5c59-410c-9458-ee5e039129a8"
        },
        "item": {
          "id": "1bbbf825-e738-4a25-aef8-3105757596ad",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6fce21d3-3807-4451-9b59-16fa4bc4c594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df7b495-54ab-46eb-8b07-484816b6e979",
        "cursor": {
          "ref": "f77531db-f4f8-4dca-badc-19cb3a21ab1d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e781915d-cd19-4056-a688-4002c96dc0c1"
        },
        "item": {
          "id": "2df7b495-54ab-46eb-8b07-484816b6e979",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "53c9e874-1bcd-4925-994f-9a398cce5f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64c3c46-ef49-4cb5-abfb-8b24e97e0ac9",
        "cursor": {
          "ref": "9039a0bc-0e6d-40a9-bd4d-2bb8dc81362d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "39257102-ce0b-485a-87ca-33c59756683d"
        },
        "item": {
          "id": "d64c3c46-ef49-4cb5-abfb-8b24e97e0ac9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cf2cc7a0-2fe2-43de-b0c5-7d779bcae651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8be20d-143c-494c-9444-7b87a3cf4e31",
        "cursor": {
          "ref": "f6ec71a5-af74-4a8e-89ad-451e7976e2e6",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b2098ea5-95c3-44bb-93b4-56853b97305d"
        },
        "item": {
          "id": "aa8be20d-143c-494c-9444-7b87a3cf4e31",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "029a2d96-beb4-41b8-8f7f-7dee588aede5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a171aa85-b645-4104-b516-2f54c333d866",
        "cursor": {
          "ref": "96381126-a1a9-4b15-9c3a-38f927606fa5",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "83f8fb9b-4a06-4296-a315-a74ba5e97cbc"
        },
        "item": {
          "id": "a171aa85-b645-4104-b516-2f54c333d866",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "faf5496b-1a2a-498e-9a0b-7336636c7ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619cc384-72d2-4f9a-8d82-501594c19afb",
        "cursor": {
          "ref": "1214ddd9-e9f8-4d26-9980-5baf0f851ac1",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f8d7b39-fc99-469a-8de0-ef4af459516d"
        },
        "item": {
          "id": "619cc384-72d2-4f9a-8d82-501594c19afb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "16595c30-7786-407c-b007-7899cbf62c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bae704c-4fbe-4c20-80a1-c68b4992e2b1",
        "cursor": {
          "ref": "55792e66-0849-4108-b8b4-b6b401263594",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3a47e117-ad1c-42dc-8ec2-2ce898bc0dc9"
        },
        "item": {
          "id": "0bae704c-4fbe-4c20-80a1-c68b4992e2b1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e109a889-c1f6-4d79-8b86-aba6bc987366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a0d213-c8a6-4ca8-b6eb-34213ac013e7",
        "cursor": {
          "ref": "e3fe55c1-2b37-470f-92a7-48151999b1f8",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "38514302-0b9a-49ff-b3a3-9cd818c7c874"
        },
        "item": {
          "id": "d2a0d213-c8a6-4ca8-b6eb-34213ac013e7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d0a2135d-ce47-4883-b308-ce582ce2e1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345f0b55-e36e-42be-9fd3-4f92134bbd90",
        "cursor": {
          "ref": "f61a82ca-de2c-4c2d-823c-2ac803c74e67",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6e9bbf70-9c79-41c3-a399-0734969553f2"
        },
        "item": {
          "id": "345f0b55-e36e-42be-9fd3-4f92134bbd90",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b70419d8-8ea3-476f-938f-b3f36539907a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5966fc6e-a161-4599-bfac-4033d7a89c71",
        "cursor": {
          "ref": "c2d97f0c-6ed2-45ba-927b-a82904d1d5be",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "241f3196-5c86-4ae6-80bd-ab962e82be23"
        },
        "item": {
          "id": "5966fc6e-a161-4599-bfac-4033d7a89c71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d545dc19-70a4-453e-b33f-8c2f19774873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1f5a17-0ca0-4d24-b0da-2c31ff8e1fba",
        "cursor": {
          "ref": "9443d8ed-3b8a-4078-bf65-3df429e959c5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "52380044-adfb-41a9-bfe4-24984216c329"
        },
        "item": {
          "id": "0c1f5a17-0ca0-4d24-b0da-2c31ff8e1fba",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5f04117a-a55d-4766-9bf0-5147896ec15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc710e1-1e97-43ca-a01f-3ed4d925c19c",
        "cursor": {
          "ref": "308ebc03-7b49-46e4-bacd-102357918c3a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a79c13c7-cb9b-4efb-9ede-0fcc8732d47a"
        },
        "item": {
          "id": "4fc710e1-1e97-43ca-a01f-3ed4d925c19c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fdfdc735-5c88-482b-ac1d-2f51fbb684ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450dac13-9f63-46a4-89b3-a6b76bf5b21e",
        "cursor": {
          "ref": "2f9925c1-fd9a-499b-b7fb-2f641dbdaa58",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "516ee18d-adc5-4865-ad13-055f14766527"
        },
        "item": {
          "id": "450dac13-9f63-46a4-89b3-a6b76bf5b21e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f62c8282-8522-427d-973f-d85b161be0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946b6dee-8b39-4dd7-99f5-9f54bd747eeb",
        "cursor": {
          "ref": "5878e1ec-8cd0-4a1e-b769-955fbbcd1a92",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1403f4c4-3608-4e78-946e-706bac23ecda"
        },
        "item": {
          "id": "946b6dee-8b39-4dd7-99f5-9f54bd747eeb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c4dd917f-3a63-4598-b2bc-1303e1843267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cd5791-56e1-4915-bd34-af86b0f38599",
        "cursor": {
          "ref": "1087561e-4ab9-423c-9bcf-aa2509499bfc",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "52b59e82-486b-4444-bb03-9f9a4346424d"
        },
        "item": {
          "id": "46cd5791-56e1-4915-bd34-af86b0f38599",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a9f3702c-11de-4eb8-abd5-0b29e54589ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57b3b55-5e5b-4795-9a7f-168b7c51e516",
        "cursor": {
          "ref": "bc592c11-5475-435b-aeb1-670572951f7e",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "53fb7225-1fd3-4540-ac1d-7b2054043ddb"
        },
        "item": {
          "id": "e57b3b55-5e5b-4795-9a7f-168b7c51e516",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0ca1ef31-f7ef-4288-b8a4-062a9faec3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a23419-cb51-4536-bd23-1cb23197b229",
        "cursor": {
          "ref": "d3b3b26a-cee7-4d0b-8be1-87ffd7b69602",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5aa5e970-233a-4dfb-82b9-c81fd1dbd1e0"
        },
        "item": {
          "id": "c9a23419-cb51-4536-bd23-1cb23197b229",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8eb043e3-7d32-453c-8fa9-3618fd5899d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a6b8cd-b400-4a16-abb8-782d165dcd5a",
        "cursor": {
          "ref": "e3b75d29-27e2-47bf-85fc-86bde96e2bc1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6f146b60-6e9e-4b9f-883a-3376654e745a"
        },
        "item": {
          "id": "72a6b8cd-b400-4a16-abb8-782d165dcd5a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0ee474ce-dcfe-4549-b739-305cf7df48d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fe09c9-f3d6-4343-aa56-7764bd9a148c",
        "cursor": {
          "ref": "cd3a1662-9565-4df4-afc8-d17de1527fad",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d896d1f1-3afc-4949-9cd8-e0653819f49a"
        },
        "item": {
          "id": "b3fe09c9-f3d6-4343-aa56-7764bd9a148c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ef49cca5-336f-4f7b-ad07-73c0ac558952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b303079-2839-4062-9830-277cefbbfe21",
        "cursor": {
          "ref": "373711d2-16f7-4a4a-b355-937393afb9c5",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b026875f-d7e4-4b17-a215-eff37935f67c"
        },
        "item": {
          "id": "8b303079-2839-4062-9830-277cefbbfe21",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1e317202-e08e-4438-876b-eef51f1e8bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f2ff5e-d189-4860-8a64-9a27464f88c0",
        "cursor": {
          "ref": "8ebed044-e9b5-44ab-9859-a9b1cb8b6e74",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b53e8e73-a91c-493c-8777-005f9469149e"
        },
        "item": {
          "id": "83f2ff5e-d189-4860-8a64-9a27464f88c0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5e776caf-b364-4446-89dd-92fc80bceac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74361d97-f517-408c-95dc-f72ed1f3a472",
        "cursor": {
          "ref": "0f393ca7-6ec6-4ecc-966a-58479c4758dc",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cb057553-3c50-43a7-8c8e-5cd11a764469"
        },
        "item": {
          "id": "74361d97-f517-408c-95dc-f72ed1f3a472",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "961ce01a-cb4c-4bbd-8d75-102f2638009e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6efdb0-fe6a-474e-a7af-76589639a7ed",
        "cursor": {
          "ref": "e27d835d-5aae-4c23-92b0-f0ef8be6b682",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "34420180-c2c5-47c5-bfe2-4494047889f0"
        },
        "item": {
          "id": "da6efdb0-fe6a-474e-a7af-76589639a7ed",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b763b13e-acf3-46e1-bade-bef8381a32ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82d3ff8-cf40-4464-93bb-ff4557c91add",
        "cursor": {
          "ref": "2956375f-adae-4a4e-9a58-80aa74d0c94e",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f0104eea-cd41-458e-9c6c-8c16db9292bd"
        },
        "item": {
          "id": "d82d3ff8-cf40-4464-93bb-ff4557c91add",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7ac69927-3173-422d-a205-bb8fcdc2720f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da20d6d-81f3-4217-b7bc-4b52a3b53da6",
        "cursor": {
          "ref": "482656cb-4814-4a9d-ba4d-32bd601e07ad",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d4db388f-3530-4a86-b090-6d7673821c38"
        },
        "item": {
          "id": "0da20d6d-81f3-4217-b7bc-4b52a3b53da6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ab2c17d0-9a42-4031-94e0-859ae5c6183b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4730407-9bf3-4887-bb66-c7a640b9ec4c",
        "cursor": {
          "ref": "1be665ce-798b-4c36-91cf-bde148290798",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0f5def55-c75d-4e66-9bf3-be05300e05ec"
        },
        "item": {
          "id": "f4730407-9bf3-4887-bb66-c7a640b9ec4c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "56a5464c-6c02-46b3-85bf-38aba3b500b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb2273c-b456-46c7-8c61-40d1f668eb3d",
        "cursor": {
          "ref": "f26b4cf9-97c9-4eb8-8aec-2c7fbb7c8271",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2377d480-ba30-4d87-9480-5dc0c9eb5133"
        },
        "item": {
          "id": "3cb2273c-b456-46c7-8c61-40d1f668eb3d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a4a9707d-a6ca-4705-ba1f-d5d9ed374714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd5ffdc-ad6e-445c-a7d6-edaa3d432009",
        "cursor": {
          "ref": "44d8c35e-cf65-47ad-99e2-1752ad6596be",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "868a39da-5518-4845-a4cf-c1732602b92e"
        },
        "item": {
          "id": "ddd5ffdc-ad6e-445c-a7d6-edaa3d432009",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d38d8c6-4b58-47eb-8254-028cf7dcc328",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fc3cd3-3752-4cf7-a404-bd677b465b2c",
        "cursor": {
          "ref": "45474de3-527d-4ff6-962c-33773a3f8a4c",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "73f40389-c910-486a-822a-7a1036dc2a05"
        },
        "item": {
          "id": "f7fc3cd3-3752-4cf7-a404-bd677b465b2c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a68772c1-4c3a-4534-b77f-0b5b19a90b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b120ffcf-bd46-48f2-b73b-3986e8e0979c",
        "cursor": {
          "ref": "a2ae13e5-7028-403d-9c41-35702cfec855",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "95d6d282-c2bd-405c-8e59-ccc5a3a15b74"
        },
        "item": {
          "id": "b120ffcf-bd46-48f2-b73b-3986e8e0979c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "abe20762-ec01-4476-84e8-ec89570f314a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66e77d6-2b2d-4a84-87e1-e895ca42a539",
        "cursor": {
          "ref": "015c7f52-98a7-4b44-bed7-dd8b1192dbff",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c04ba9d7-20dd-4c2b-878d-c2914c1f09ac"
        },
        "item": {
          "id": "d66e77d6-2b2d-4a84-87e1-e895ca42a539",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f911cbb1-4911-460f-9850-56ce6b7c0f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869d21a7-a08c-47e6-ba28-1904232e4991",
        "cursor": {
          "ref": "5feb10ee-d70a-4c2c-8056-9cacbbfd1c96",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "85af9338-8b2a-4fd4-a701-16e757919a88"
        },
        "item": {
          "id": "869d21a7-a08c-47e6-ba28-1904232e4991",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ba7e21bb-06d4-4f66-b3f4-cac84e57eca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3af4a9a-08d9-46b1-8f15-cfdde7c5669e",
        "cursor": {
          "ref": "65ba4f55-c54b-417f-b02d-eb37ec792674",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "17cd9fed-654e-4dd4-b23f-4d0dcb8d005b"
        },
        "item": {
          "id": "b3af4a9a-08d9-46b1-8f15-cfdde7c5669e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b5fc4037-bd5f-45f3-9cff-afa72cd5b619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529aa050-6155-4fe2-bb67-6d4f219e73ad",
        "cursor": {
          "ref": "3d4de9dc-1945-4985-8222-4a1667907031",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2143adb8-f993-428f-a8b9-b367d782f948"
        },
        "item": {
          "id": "529aa050-6155-4fe2-bb67-6d4f219e73ad",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "85aa0655-f062-4d38-8c46-8c24169d08b5",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "14b2bd6b-71f8-4169-a1ff-05929af53602",
        "cursor": {
          "ref": "6c517791-98f5-4edc-a023-8a5778eb604b",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9d1043c8-9e78-41e4-a413-6b04f3881c6a"
        },
        "item": {
          "id": "14b2bd6b-71f8-4169-a1ff-05929af53602",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2d41a3fd-da9b-4d0f-85b1-b36a71fc88f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833492e2-9fbd-4dc1-bc6d-f60cda05af61",
        "cursor": {
          "ref": "27184233-c699-411c-ab1f-15f3ba07ca65",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3a48195a-4a59-47bf-8233-9ecc08d71ccd"
        },
        "item": {
          "id": "833492e2-9fbd-4dc1-bc6d-f60cda05af61",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2f03bea5-97bc-441d-8333-2874ac8a73c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40261b6-3d1b-4776-8f07-a9d53f1ee754",
        "cursor": {
          "ref": "75f594be-41fb-4ffe-a631-cd118f0ebccf",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ea6b3dfd-b69b-454d-80e4-18d7df70257a"
        },
        "item": {
          "id": "d40261b6-3d1b-4776-8f07-a9d53f1ee754",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dab76ae2-fd40-4b21-a650-904b794d0732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe34239-dca0-42ef-9531-9e9dc4309595",
        "cursor": {
          "ref": "e98b7c40-ca89-4bab-9aae-2d1eb15a0946",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "525af2b2-296b-4786-8990-1a61a1e201cc"
        },
        "item": {
          "id": "fbe34239-dca0-42ef-9531-9e9dc4309595",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ca0e1471-1031-4d50-b518-4f865fd131ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e26375f-6f54-42ae-b10a-d9d1a2a6ddfa",
        "cursor": {
          "ref": "f5d14b7c-e613-41ef-8718-90856af8a067",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0a583e8b-15e2-4f5e-85c0-e29bcbd3e0a1"
        },
        "item": {
          "id": "2e26375f-6f54-42ae-b10a-d9d1a2a6ddfa",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3dea6031-682f-474a-8698-9949cf5266a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb80ee5-d566-45e2-bda8-6ea38f9c4e47",
        "cursor": {
          "ref": "f1b54d4b-0c65-4351-bf22-f9c0eb134fda",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d56277db-a16f-486a-bffd-6f2cb977f922"
        },
        "item": {
          "id": "0fb80ee5-d566-45e2-bda8-6ea38f9c4e47",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "579756a2-795d-4d3b-a54f-dd957f2e05cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b364b8-f626-44a7-a984-ef6a2b642e85",
        "cursor": {
          "ref": "9bfcd8b8-5258-452a-934c-9f2484cd2ccb",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "472406b1-aa0d-427b-bea7-9e923b95cbc7"
        },
        "item": {
          "id": "09b364b8-f626-44a7-a984-ef6a2b642e85",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0042d630-d857-4f07-b417-9e67ce11f2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee16555-4fe1-4ac4-b156-512773b5b6dc",
        "cursor": {
          "ref": "e6a20a65-3d31-4446-8f24-da033549d9ec",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "07e2282a-7dc4-4dd2-b65c-f96d7ad019eb"
        },
        "item": {
          "id": "3ee16555-4fe1-4ac4-b156-512773b5b6dc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cfd124be-fc5e-4442-bff6-9445225a3419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b930f83f-803e-4d0f-9f1b-be21f7bec1e7",
        "cursor": {
          "ref": "d06c6262-59f0-4115-b880-ede68c2b7d78",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ae0e0c82-7727-4d94-bf13-bbbc3d6b260c"
        },
        "item": {
          "id": "b930f83f-803e-4d0f-9f1b-be21f7bec1e7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "06f788b0-5d29-44a3-818c-db9b63f0b766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e9374d-2786-4b5c-9ae1-aafe966d416d",
        "cursor": {
          "ref": "dbb1ab30-782d-420d-9642-cfb317c95472",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "640b5ffe-063a-4909-93fd-8a31011f9072"
        },
        "item": {
          "id": "89e9374d-2786-4b5c-9ae1-aafe966d416d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2e95e8ca-08ca-477e-b796-37846827ad99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50caad48-866f-4552-960f-50b5b595a73f",
        "cursor": {
          "ref": "41962570-586a-46ed-91ad-28c4dbdd57d9",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "52663c94-2990-4b9a-acf3-a8ff98b40722"
        },
        "item": {
          "id": "50caad48-866f-4552-960f-50b5b595a73f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "326bdc2b-1ad3-489e-8b1a-1c69495bc341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dcb9fd-e491-4a05-8c52-6ebf543e30d7",
        "cursor": {
          "ref": "2a08bc5d-e12a-4ad9-a766-42e69224b135",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "49f3b159-ffcf-462e-aec1-3aae968844df"
        },
        "item": {
          "id": "28dcb9fd-e491-4a05-8c52-6ebf543e30d7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ef1a6265-b22d-4877-a02d-d8381f0c397c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07741308-9d67-46ed-bd88-da7f9ba66b04",
        "cursor": {
          "ref": "276bdaae-0a09-403d-b5b4-e9a57507f312",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7e9de78c-4f8d-4c06-9378-db4aa3e33a99"
        },
        "item": {
          "id": "07741308-9d67-46ed-bd88-da7f9ba66b04",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "753e325f-3072-441b-a7d0-32018521d3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38662b58-e6ce-4703-9312-10094b8e736c",
        "cursor": {
          "ref": "8e8d69fc-ee4a-4997-9e7f-784d383f3ac8",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4ba5c5f2-2bf0-4340-8dcb-013c9b8390b8"
        },
        "item": {
          "id": "38662b58-e6ce-4703-9312-10094b8e736c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0b652901-b87d-408d-b73d-dcdd3106fe2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67edcc54-7cbf-476e-bae9-f8372e4bd2d2",
        "cursor": {
          "ref": "81b29333-1ade-4bc2-b6e3-af29e3e6479f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cf6db03c-7bfb-4eef-becf-df589c5501a3"
        },
        "item": {
          "id": "67edcc54-7cbf-476e-bae9-f8372e4bd2d2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d61a6e87-b3ce-4f22-b251-820e2c3a1482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdfea15-7581-4f2d-bc85-2fc8399c3bd1",
        "cursor": {
          "ref": "c870e575-ae4a-44f6-a00a-ad29d4d30907",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fe4257a1-5260-404d-80a8-ae88cfd6df21"
        },
        "item": {
          "id": "9bdfea15-7581-4f2d-bc85-2fc8399c3bd1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d4e2c70c-9a1b-42b5-8af6-3945cd2e4d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841944d1-cc37-44f1-84bc-07edd238db20",
        "cursor": {
          "ref": "95e3fa61-45d7-4a72-ae25-cd32e5b42db4",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "57bc93d4-3d52-4e8d-aa02-c3a12d1fbd81"
        },
        "item": {
          "id": "841944d1-cc37-44f1-84bc-07edd238db20",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1f57f32c-9c45-4530-9664-c6491c568fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2e205b-7f5b-455e-adf7-7fe8441469f2",
        "cursor": {
          "ref": "de92b055-493d-4721-8643-139b61f90a56",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3e9f2afd-0fc5-4a98-95d0-d5c190fd8e28"
        },
        "item": {
          "id": "7b2e205b-7f5b-455e-adf7-7fe8441469f2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "dc1e6179-6fb4-4c2c-9a48-6bac621bcf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0aba929-26b3-4fd0-a68e-b063c671c8b6",
        "cursor": {
          "ref": "345349dc-358a-4c24-bc77-b59472b48dbc",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a64b2dfa-49b6-4a9d-b206-5d70a48c87b4"
        },
        "item": {
          "id": "b0aba929-26b3-4fd0-a68e-b063c671c8b6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fbf8f21d-84ed-4d33-94d7-5a8d070c7eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6d793c-495f-49fb-85db-e188976b658f",
        "cursor": {
          "ref": "5a35cf74-d094-4ce5-814c-25192f95518d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fd600a03-3b0a-4341-a19f-081bccfb4a7e"
        },
        "item": {
          "id": "0a6d793c-495f-49fb-85db-e188976b658f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fcdb7a46-9889-413e-a73f-b0a5e2f4db92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb5288e-6602-485a-8cb7-489c7db01bde",
        "cursor": {
          "ref": "01d6bc9d-72af-4a2e-8232-73962f6d79c0",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "52e6ef31-1101-449b-aa11-98e464017b65"
        },
        "item": {
          "id": "5cb5288e-6602-485a-8cb7-489c7db01bde",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "74c58023-f8e7-43bc-a6a4-b1737e5acd8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58cae25-680c-45a4-894c-27359b68479b",
        "cursor": {
          "ref": "2f82d1fd-f205-44b2-bdef-71be7baf84d1",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "900978a6-6963-4c37-b9ba-d9d316e31bf0"
        },
        "item": {
          "id": "c58cae25-680c-45a4-894c-27359b68479b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "57cafc41-0fef-494d-8823-921bd2f286ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd87d44-f6cc-4038-948f-dbb5995e0ad0",
        "cursor": {
          "ref": "f2d76a4a-e4b2-46a1-a587-8b08fe9f87e7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e3fce689-5f8e-4194-a5ba-0a3691a1d5d4"
        },
        "item": {
          "id": "4dd87d44-f6cc-4038-948f-dbb5995e0ad0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "af293af2-58a6-4bef-84ea-222e7f44adf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc79b59f-dcc0-47a1-b8a9-2cadf2b74c79",
        "cursor": {
          "ref": "a0f97bf8-0783-49fe-ac8e-26bf8bd39c6f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "211e4f65-4c93-42d5-9c1c-51768f72d584"
        },
        "item": {
          "id": "fc79b59f-dcc0-47a1-b8a9-2cadf2b74c79",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7660ed7d-eadf-478f-9c8f-bf7545b1f94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e1ec29-ced6-4fc7-ac25-4f3fdbd45c52",
        "cursor": {
          "ref": "5280fff9-3907-4fad-a9a2-7acaf746371f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4f08f030-9bc7-4d98-9582-86da3a49478f"
        },
        "item": {
          "id": "d5e1ec29-ced6-4fc7-ac25-4f3fdbd45c52",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d332ea79-7762-4d3a-a7bc-fabe6503f3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ecaca7-4ac2-45ef-a195-a486a17d73d0",
        "cursor": {
          "ref": "9da9e55a-8335-48c0-9965-875fd00f0ee6",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a669893f-c6ca-4801-a314-68379520d782"
        },
        "item": {
          "id": "d9ecaca7-4ac2-45ef-a195-a486a17d73d0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "70af7aab-2231-4619-a977-d769ade7921f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c98359-0080-4a34-9a36-05fdb02a1a90",
        "cursor": {
          "ref": "979923c2-1137-4d4a-ada1-f831c199b055",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "eade242d-685a-42d4-81ed-a1ae078778a6"
        },
        "item": {
          "id": "15c98359-0080-4a34-9a36-05fdb02a1a90",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cd07c599-3593-4c62-8374-7de3832962b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fd34fe-e55e-4e6a-8794-380c9966b712",
        "cursor": {
          "ref": "18e8e061-2be0-43dc-9065-4bb5c344717b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b351a20d-95cc-4e46-8008-0cc8e127b1b5"
        },
        "item": {
          "id": "92fd34fe-e55e-4e6a-8794-380c9966b712",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "33987b2a-6481-4ded-be68-73b19f8655d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141c58bd-9c5b-444d-96a6-af704f95b2a1",
        "cursor": {
          "ref": "ce6f03e7-f4f0-44b5-abb1-58b0019f34c7",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d9233a66-3f3e-49f7-bdf0-6626d8e87744"
        },
        "item": {
          "id": "141c58bd-9c5b-444d-96a6-af704f95b2a1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "eb53f195-7ca2-4301-b63b-1cf6f69f2120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d63b855-f534-4b16-b9c6-47d801932171",
        "cursor": {
          "ref": "7600f0f9-20ec-41fe-b280-fb8895dd61d9",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3a859929-1147-41be-b48e-11eacac54f7d"
        },
        "item": {
          "id": "5d63b855-f534-4b16-b9c6-47d801932171",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e30c179f-d2f1-42f9-8aa9-c2ffec06dfbf",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "998a649a-9c5b-4f5b-a4aa-d3263279891b",
        "cursor": {
          "ref": "e9ff5c5d-3247-4f55-a3c0-9a6c4ac1bb18",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f6e46af9-9d7c-4c49-8c43-3d637580719a"
        },
        "item": {
          "id": "998a649a-9c5b-4f5b-a4aa-d3263279891b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "930e51a0-f772-44c4-9c01-05adc2121b07",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0e451f80-de1c-42da-8823-783f40f58057",
        "cursor": {
          "ref": "0bc427ad-b1c1-43da-b7ce-f052dfe99314",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "619836be-f3f1-4e3f-9694-cead536f94df"
        },
        "item": {
          "id": "0e451f80-de1c-42da-8823-783f40f58057",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "74eeb980-9574-4afd-a39a-d39248d8e097",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3fab82a6-4d03-4824-a987-791af29b4113",
        "cursor": {
          "ref": "9772d0aa-f8ef-4ed7-bf8f-2f39dfb79fa3",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f0811e24-bcec-4c70-a561-2bce6f7bd555"
        },
        "item": {
          "id": "3fab82a6-4d03-4824-a987-791af29b4113",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "31f4d235-fd2e-40b7-80ea-6621b0ae9353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac337c7-e50a-4411-b550-e02ff55034a6",
        "cursor": {
          "ref": "e73c709e-5157-4a67-8647-9dce923843b5",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4597b4d0-994b-4acb-89eb-05112c0c65ca"
        },
        "item": {
          "id": "bac337c7-e50a-4411-b550-e02ff55034a6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "47edc869-2463-4e25-b61a-d2d1dcfc8634",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "feae44b4-81e3-4b6e-a683-7ef6a3e7631b",
        "cursor": {
          "ref": "7f44f25d-2418-4e96-b4d2-81000a4838a5",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ebf908f0-a6ac-4d0a-b5ee-50d17c2f9a49"
        },
        "item": {
          "id": "feae44b4-81e3-4b6e-a683-7ef6a3e7631b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a763e05e-3abf-45e5-8691-c2b83e0aaa67",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "85a60b87-0f61-422c-aae0-ca30456deb88",
        "cursor": {
          "ref": "d3143a77-428a-4a5b-a8a1-0f998c4a7745",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "631f4153-fa97-41f5-a5b6-9fce8fff0f21"
        },
        "item": {
          "id": "85a60b87-0f61-422c-aae0-ca30456deb88",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a22baf19-5c6f-4975-a4d5-4302499bee93",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "78d2fa7a-4bc0-4f87-aeff-76ea6b7bed00",
        "cursor": {
          "ref": "62ae0239-8344-402a-afe8-b5c860ac13ea",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f83b6ef8-e3c4-4b05-a78a-4c4fe837e501"
        },
        "item": {
          "id": "78d2fa7a-4bc0-4f87-aeff-76ea6b7bed00",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "88a3e09d-dc71-47ce-95a8-bcb7f37ebef9",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "676139e6-7f38-4010-894a-36d7812ba897",
        "cursor": {
          "ref": "54575daf-5756-43f9-97b6-4dacf5f97b67",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "367b6768-ef4f-4d8c-8bdb-1b27d6a6c23a"
        },
        "item": {
          "id": "676139e6-7f38-4010-894a-36d7812ba897",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cb60aad7-ab53-49ae-b96d-10432dbfe033",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "52f18871-51c8-43b7-983a-d8b2d4d738b8",
        "cursor": {
          "ref": "495d31fb-4a46-4043-8c81-36bf373313b2",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "19066ea1-9978-41e5-9b91-cbe802109900"
        },
        "item": {
          "id": "52f18871-51c8-43b7-983a-d8b2d4d738b8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e9425ee8-dba1-4079-a600-53f9212312ae",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c885604e-67aa-42de-b38a-71d47106548c",
        "cursor": {
          "ref": "6e228774-b739-4280-aed3-dd077985e64a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a106087d-07d5-477e-8703-227321728af0"
        },
        "item": {
          "id": "c885604e-67aa-42de-b38a-71d47106548c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "18204805-5d74-42d6-9c8a-c7613f7a4d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c2b364-8bf2-473e-ac48-a35342688a93",
        "cursor": {
          "ref": "cc8854f1-534e-42b0-b529-dc38049b4772",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "93b4454e-af5e-4540-a0d2-356a67282391"
        },
        "item": {
          "id": "b3c2b364-8bf2-473e-ac48-a35342688a93",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6d97dda3-1ecd-4b6c-9297-b95a3c1b73d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7272b07e-9bb9-4ada-bbf0-552f4acc94c2",
        "cursor": {
          "ref": "1b197fbf-5de3-476e-a65d-89e25bee1473",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0a1b6b64-37d7-4250-8e3f-e8193b99cedc"
        },
        "item": {
          "id": "7272b07e-9bb9-4ada-bbf0-552f4acc94c2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "54cef299-a009-443c-9a36-28d04b83a863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b82305-f514-4192-8d3e-a96b79747276",
        "cursor": {
          "ref": "44df2191-3a84-4115-9729-e2281d1649d8",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "61d2dbc6-d6e5-4953-8e77-83a15e37f65b"
        },
        "item": {
          "id": "f4b82305-f514-4192-8d3e-a96b79747276",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3ac38f97-e6eb-4cec-89f1-193a18c102ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7c8aa1-e611-4049-ac07-27b23977a10e",
        "cursor": {
          "ref": "4cea6b91-786a-4e86-8295-d595ce0e1bcb",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f2d217ed-7317-437c-a953-21a1e8ef10b2"
        },
        "item": {
          "id": "3d7c8aa1-e611-4049-ac07-27b23977a10e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "121d48c5-0c76-4beb-955c-7ec40f18fbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f96e13e-141f-4e48-8290-00e2a3193255",
        "cursor": {
          "ref": "176460f6-6ff3-40b8-b4fe-cb5919da1ec9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4e7c8a78-ce95-4861-8213-a7c70cac1771"
        },
        "item": {
          "id": "7f96e13e-141f-4e48-8290-00e2a3193255",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "507d1994-354c-4602-9d45-3de9c46a4d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9a0c3d-5401-4751-b9da-0319c61b4b99",
        "cursor": {
          "ref": "13bff752-4740-497c-ab7b-be521ca2b672",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6dfd40c6-0022-4cef-954f-36fafe47598f"
        },
        "item": {
          "id": "aa9a0c3d-5401-4751-b9da-0319c61b4b99",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1b757a38-a9eb-48b7-8a6e-9a3d308af103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30c308f-ad3a-4be5-aeef-b1c21d2a55a1",
        "cursor": {
          "ref": "8135c6d6-7aa0-4bae-ab52-050fa7e58b8f",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fb0f8a0c-ad4d-4ea7-8a41-5e59fd89fe33"
        },
        "item": {
          "id": "f30c308f-ad3a-4be5-aeef-b1c21d2a55a1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c22c83be-f453-423c-8533-b13eac1434e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafc6362-da44-40f3-abcf-c327c82f88c5",
        "cursor": {
          "ref": "a273d787-2668-4b21-bb4d-2021312f24d7",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "745c39ab-68e7-4438-8e89-ce9ee3379cd2"
        },
        "item": {
          "id": "eafc6362-da44-40f3-abcf-c327c82f88c5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f815787d-4b5f-41c6-8b08-b6a450ef17e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e89bf1-3758-4f8f-b00f-808e2457453f",
        "cursor": {
          "ref": "cbbc34e3-c50b-4646-a926-9f5adc15eb4b",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "46de5b9f-397a-42c0-bbe2-3039c6f9b864"
        },
        "item": {
          "id": "f7e89bf1-3758-4f8f-b00f-808e2457453f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "21f5ef07-c944-4097-a45c-6bbf4124325c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681e5821-32b9-4ea4-ae2c-c8cfa42efed7",
        "cursor": {
          "ref": "bd4e538f-fca1-41fb-bbc2-be5b0dd18326",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b80b56bb-f2fa-4aa1-871c-7791e75ad40e"
        },
        "item": {
          "id": "681e5821-32b9-4ea4-ae2c-c8cfa42efed7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0013a993-cce1-432d-919a-37167da57569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f98f4b-502c-4327-99ad-487e9f0930dd",
        "cursor": {
          "ref": "58cdad77-2911-47dd-843f-3e563b5000f1",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "27fedfe7-94c2-4bd3-a220-06e73bc453a2"
        },
        "item": {
          "id": "33f98f4b-502c-4327-99ad-487e9f0930dd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ec6e87b0-afa4-4f9c-aa24-057b5b376f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f7e4fd-ee83-45de-bf13-594742feff71",
        "cursor": {
          "ref": "bcde9d67-403a-4ca8-8449-9355ee4557da",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6bfa7031-a1cd-4d7b-9ac6-d0420d97fb55"
        },
        "item": {
          "id": "45f7e4fd-ee83-45de-bf13-594742feff71",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "509bfe68-57f2-497c-9447-54deea2e45f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1540a8ff-1636-4712-9e9a-b828a9b087b5",
        "cursor": {
          "ref": "4a0ae828-e33b-427a-8e04-efedec543b16",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8f40a6c3-12e7-45b7-a570-228d4c684d1c"
        },
        "item": {
          "id": "1540a8ff-1636-4712-9e9a-b828a9b087b5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e5b38511-6946-4356-953e-36ac16261da6",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "be3333f7-af75-468c-ad18-42b13b598d3f",
        "cursor": {
          "ref": "a43955b4-416d-4351-ae52-bfcbed8c4f6e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c47d0a1b-663d-4872-aa1c-000487a572c8"
        },
        "item": {
          "id": "be3333f7-af75-468c-ad18-42b13b598d3f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fafbcd56-11d7-4c91-ac0a-6a6cfdcd952d",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7ca5b0df-3bcf-4559-80b0-5dd03df8b08e",
        "cursor": {
          "ref": "09546ca7-b558-4a1c-82b3-7a34e9772723",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0856c667-012e-4eb7-bad2-fda4e57945bc"
        },
        "item": {
          "id": "7ca5b0df-3bcf-4559-80b0-5dd03df8b08e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ae94b37d-0828-4b74-ae1b-e2ddf7a40bdd",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8ce41a4a-f172-4f1d-9340-e8905eee41fb",
        "cursor": {
          "ref": "079e7420-5d4c-41b9-b8ad-e97a34f3c61f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "82e8486e-4c12-4ce0-a5ea-3bbe4bf4abad"
        },
        "item": {
          "id": "8ce41a4a-f172-4f1d-9340-e8905eee41fb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1da515f8-706a-4a8d-94ff-4c4012f62739",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f108e253-3d4c-4b44-b265-770c83d48750",
        "cursor": {
          "ref": "64a29943-8f47-44d3-9a0e-81e9d7dbdf1c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b072d4d4-86e2-4edf-86b5-f630942e1d62"
        },
        "item": {
          "id": "f108e253-3d4c-4b44-b265-770c83d48750",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6ba79986-1d87-4fc3-b2d4-26aa20279af7",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4a1eec4c-420a-408a-a9d1-e8ff3c69385d",
        "cursor": {
          "ref": "ce714e9f-a59a-4c54-be89-5c97d85489ca",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ca89c77f-e1ad-4283-b03e-4379f407fbcb"
        },
        "item": {
          "id": "4a1eec4c-420a-408a-a9d1-e8ff3c69385d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "40c73665-18a0-4f80-99b2-ab850cf27226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c22104-7547-4000-973d-5d54bd8d5f2c",
        "cursor": {
          "ref": "aa69aee4-76f5-4d92-83b3-6ab620cb325a",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c87adf5d-d438-484e-aecf-25923688963f"
        },
        "item": {
          "id": "b6c22104-7547-4000-973d-5d54bd8d5f2c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7d5d1057-0480-4731-bda9-6bb2e82c62f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8770de0-d2a8-4f09-b2ab-a10cb7375359",
        "cursor": {
          "ref": "b8b29676-b13d-4f36-b6f8-f4c3d679d238",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e3cb9c89-06a5-45a4-b140-ab3ffad7d921"
        },
        "item": {
          "id": "a8770de0-d2a8-4f09-b2ab-a10cb7375359",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "25fff760-3517-4f74-9364-3dca34a65fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d3dc00-027f-409a-b668-b4fe23453626",
        "cursor": {
          "ref": "1960c7fe-70da-445c-bd23-282cafd7afe1",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "982012bd-3d70-48a0-885a-65402bcb6751"
        },
        "item": {
          "id": "f5d3dc00-027f-409a-b668-b4fe23453626",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "eeb2a492-c6a5-4196-bef7-d271ccd8999c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dca678c-a572-4140-9f2a-4f1f145e7789",
        "cursor": {
          "ref": "79746991-8d72-4226-b23c-a8e158355e97",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "acc48db9-2604-4929-90cc-4d944e0256a4"
        },
        "item": {
          "id": "1dca678c-a572-4140-9f2a-4f1f145e7789",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "94efa64f-77fd-4de4-a3a2-bb9aca0e08a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9308e61-2789-4be1-a035-fabe8ad633ff",
        "cursor": {
          "ref": "edfa6c38-8460-4827-967b-2b67a63b7a93",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "13715eab-218c-49ae-85e8-0dbf9a17e01f"
        },
        "item": {
          "id": "d9308e61-2789-4be1-a035-fabe8ad633ff",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fa78b7d9-6193-4d5d-8342-35d4b34e59ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481cdce1-b9dc-439c-96b1-479d14a419fa",
        "cursor": {
          "ref": "c0b23fb4-5501-4079-98b5-e1766274c5c3",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0d8f6e6f-731b-4ff7-82da-0198c09b3fe3"
        },
        "item": {
          "id": "481cdce1-b9dc-439c-96b1-479d14a419fa",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5ed60fd5-7a15-484f-b927-71ac257ad3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cf4718-a2a4-4569-a838-f83c3782780c",
        "cursor": {
          "ref": "eaacf1e0-3ca9-4b29-b2c4-db554c9801b0",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "63fec1f5-1060-4c5e-9294-e3fd341cf48a"
        },
        "item": {
          "id": "66cf4718-a2a4-4569-a838-f83c3782780c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7262b8ba-1280-445d-ad3d-fa90d7b09b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d1ef4f-8f12-4d94-9ed1-50774127e60a",
        "cursor": {
          "ref": "30c49f84-51ae-474a-b102-3b5c9c4f56f5",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "354b7505-041c-4ced-8b13-3643ce6ed566"
        },
        "item": {
          "id": "e5d1ef4f-8f12-4d94-9ed1-50774127e60a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e3683951-7b0d-41b3-ad86-8e691ee8c9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f705a38f-593b-4b40-a0a9-915eaea7480b",
        "cursor": {
          "ref": "bfb2678c-e2c8-48cd-b244-77d5e7c052d2",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3cbebedf-5880-4001-9e23-afc9eed1b39a"
        },
        "item": {
          "id": "f705a38f-593b-4b40-a0a9-915eaea7480b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "335bfbda-6f0c-412d-a256-f4f9196f3b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3529a263-c91f-4336-ad89-c23664c7d003",
        "cursor": {
          "ref": "426561e0-172c-41b8-8624-d1d8408c97b3",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6638a398-3f87-484a-9438-8f1790ac9b9e"
        },
        "item": {
          "id": "3529a263-c91f-4336-ad89-c23664c7d003",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3deb0d40-5d0b-4dba-b85c-35456663240a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6766a30-b157-42bd-bb68-b318ac862f88",
        "cursor": {
          "ref": "4051ba8c-8946-41c0-b743-406d72b88601",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b530f3cd-10ec-4f6a-9be0-f33ddbdca13d"
        },
        "item": {
          "id": "a6766a30-b157-42bd-bb68-b318ac862f88",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ac82d440-4bc0-4313-841c-efd1af18aaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b995cc-c9d7-4d2e-b239-7369c34d2eba",
        "cursor": {
          "ref": "fb0c8ea7-737e-4cf7-bccc-56e909f2adb3",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "beded556-9a6a-4b89-a9ae-ef161a10d7b2"
        },
        "item": {
          "id": "91b995cc-c9d7-4d2e-b239-7369c34d2eba",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bbf6c12f-4604-4047-a5c9-37cbc44039b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d72f07d-c114-46a4-8cd7-28d2744ec27d",
        "cursor": {
          "ref": "c112622b-436c-4bc3-938b-a63f0599b7e1",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4b32a8a2-b21d-49b5-bb73-65bde49b9afb"
        },
        "item": {
          "id": "8d72f07d-c114-46a4-8cd7-28d2744ec27d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "78e53aa2-1a3c-48bb-b011-d46422c8aaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3145c8c6-bcd7-464f-9ea8-3008f18b4663",
        "cursor": {
          "ref": "ecb27910-f50a-49cc-94b0-1977db1441cc",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "19a9957f-d895-4e80-91f4-95f8370f336f"
        },
        "item": {
          "id": "3145c8c6-bcd7-464f-9ea8-3008f18b4663",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b3634bde-fca2-47c3-ae8b-20de7ae6e519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c508cf-5739-4be9-8741-df0ef53fac0f",
        "cursor": {
          "ref": "9f24b48c-5f45-419f-bbef-b041348e4476",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aef3da67-dee7-4b71-8931-0f959b896b25"
        },
        "item": {
          "id": "e7c508cf-5739-4be9-8741-df0ef53fac0f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "24fe6169-4c53-4c8c-bd47-9bb1aef047d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8f7b16-34c1-44f5-9edd-7c5ab5e48224",
        "cursor": {
          "ref": "c33c690e-bea3-493d-a7bb-09a449809d17",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ecd9e0c0-9760-4e06-a232-10f1d841c9a1"
        },
        "item": {
          "id": "9f8f7b16-34c1-44f5-9edd-7c5ab5e48224",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a562ba54-7155-4824-8f8b-34688135d5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fa2dc2-c998-47e6-a77a-beb096ad9f79",
        "cursor": {
          "ref": "592e9290-c75c-462e-8579-5224cc261799",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6774520a-ee26-4ad1-8e81-da7f03338f3d"
        },
        "item": {
          "id": "e3fa2dc2-c998-47e6-a77a-beb096ad9f79",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dc8086cf-ba11-4cf3-9be5-fb2b6143367d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5646b0fd-7b8d-4171-a9ef-ccd8d26dd119",
        "cursor": {
          "ref": "6e2a0a08-02a0-429b-888f-92b03253a4d6",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "054edf70-6f87-4273-bfd3-bc226f35b045"
        },
        "item": {
          "id": "5646b0fd-7b8d-4171-a9ef-ccd8d26dd119",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e3741cd3-f1d1-4153-a213-aacf370e527e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecec479b-c536-4b95-bb99-e85850cfa244",
        "cursor": {
          "ref": "8beb7d0a-84e4-4c77-adf3-6c422160e19b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "21d798c9-8740-455b-abdc-528294676321"
        },
        "item": {
          "id": "ecec479b-c536-4b95-bb99-e85850cfa244",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e6bb3378-a175-418a-9d2c-b617f06f562b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62b1abb-ca04-4408-b270-3201fd049925",
        "cursor": {
          "ref": "432a58e0-c0da-44e2-b8fc-d75811fd4723",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7c51600b-a3e8-40f2-b02a-cc1d7f9f47a9"
        },
        "item": {
          "id": "f62b1abb-ca04-4408-b270-3201fd049925",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2c268073-c107-4e9a-8798-5481a0820223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baba622-dbb7-4863-a4c3-80ff89161ae5",
        "cursor": {
          "ref": "906304f4-227c-4a08-8018-753f3b7eceee",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "54bf95da-1cdf-4a49-a251-f3cd2157d4d2"
        },
        "item": {
          "id": "0baba622-dbb7-4863-a4c3-80ff89161ae5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "61646d2a-34b3-4e97-aadb-47f46db25e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef128050-efaf-41c5-b024-95624a19cf7c",
        "cursor": {
          "ref": "6b021f3d-03f6-4a2b-b5bd-23a10da61070",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cee9b1a5-e4b5-4b35-8346-085731cb56e8"
        },
        "item": {
          "id": "ef128050-efaf-41c5-b024-95624a19cf7c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1625ebe7-5154-42c9-9708-d5941dd7bae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d5ee71-b884-4bbe-8c54-b415913eeee6",
        "cursor": {
          "ref": "c8f26521-2849-452d-a01d-315b81474988",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bcdaf868-cc85-471b-90be-e1af642176b9"
        },
        "item": {
          "id": "27d5ee71-b884-4bbe-8c54-b415913eeee6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "61bc4682-2130-455e-ba30-d8a9090be48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b42be2-953d-4777-aef4-163ea862fa0d",
        "cursor": {
          "ref": "832f0371-f008-47ed-ade4-b3e8899e2cfb",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a3004271-f307-4cb4-a859-71f6fe97a016"
        },
        "item": {
          "id": "12b42be2-953d-4777-aef4-163ea862fa0d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "66eb733f-95da-41bb-9200-d2e25e456189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee94fc2-40ad-4a76-b9c4-2b1d156f7dc8",
        "cursor": {
          "ref": "9854ed7e-9f76-4ab1-8c1c-3566cce270b7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bf695b2a-76f4-415b-ab43-6226fb34e206"
        },
        "item": {
          "id": "cee94fc2-40ad-4a76-b9c4-2b1d156f7dc8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a7fca7e3-6029-44e8-a7c2-12cf578bf26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17194ec5-c107-40e8-a0ca-f352aef129d1",
        "cursor": {
          "ref": "54a946e2-69d3-450a-92c7-97a053183e5a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "db5e3972-e1a5-4bcb-9763-9b59aa4f9de7"
        },
        "item": {
          "id": "17194ec5-c107-40e8-a0ca-f352aef129d1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9460ec60-0fea-49e6-9921-6022d2650b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294ae76f-18e8-47f8-a05c-2321fe0ad104",
        "cursor": {
          "ref": "fe1eca4a-213c-4bca-a395-1ecac7024fa8",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "334461b9-60d3-4803-a9d5-0361bb26c08e"
        },
        "item": {
          "id": "294ae76f-18e8-47f8-a05c-2321fe0ad104",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fbddd890-22d6-4f0d-bd49-aceedb7cf740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528e9821-5f4a-46d9-8369-7a6830159222",
        "cursor": {
          "ref": "404f88dd-d39b-4fee-9e56-0a7f6dfb5d00",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bf714e02-59cf-44ab-97f8-4cb897cafbca"
        },
        "item": {
          "id": "528e9821-5f4a-46d9-8369-7a6830159222",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "25a88043-7e24-4dc8-9ed4-08e535481e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8490e59-b069-432d-baa7-d602704eefdf",
        "cursor": {
          "ref": "9380b045-e431-4750-999a-8ce27b1f9032",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a86d7062-6418-4d17-a7bd-63c243fa94f3"
        },
        "item": {
          "id": "e8490e59-b069-432d-baa7-d602704eefdf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e1737592-8c3b-4712-8a4a-820cc2d29852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af977ea4-f128-496c-a79a-9fe01d26930a",
        "cursor": {
          "ref": "4eff85d0-f875-46ba-9fa1-73e7c68daaa9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cf46621b-5600-4000-9a35-1499fbd48af1"
        },
        "item": {
          "id": "af977ea4-f128-496c-a79a-9fe01d26930a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a476c328-62be-4ac9-a9b7-cdb28474e9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e96fbed-3824-419c-b15e-f12fefc79104",
        "cursor": {
          "ref": "7e0afa57-3314-42ce-9e34-4f81e2ee9f31",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e24b899e-ada9-4f97-856d-888a7ed91e17"
        },
        "item": {
          "id": "2e96fbed-3824-419c-b15e-f12fefc79104",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6981566d-7073-4c89-a3d9-c96b71a1fb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a617f25-91e0-47a6-97a6-7fc4e2683756",
        "cursor": {
          "ref": "6dd34598-dc02-4a81-a189-86bb387d582e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f25337ae-3d69-43d8-baf9-22abeefd3fab"
        },
        "item": {
          "id": "6a617f25-91e0-47a6-97a6-7fc4e2683756",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5ab999ed-ee0a-45d4-b067-f7eb10f13a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dec58b8-258e-402c-bb7f-77d5eabce2a5",
        "cursor": {
          "ref": "5c91d683-0928-4f18-a396-b55cd186d2ac",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a4729992-a79d-4f50-b752-37d324d1cbc1"
        },
        "item": {
          "id": "6dec58b8-258e-402c-bb7f-77d5eabce2a5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1bcabf6a-d07b-432b-81c3-ee81bd0cfd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a53126-ff67-41f7-83e2-675b4646d016",
        "cursor": {
          "ref": "d22212e1-99b8-49ad-9610-e02304caf945",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1972e03c-451e-4b09-83f3-f08f133c78a7"
        },
        "item": {
          "id": "e1a53126-ff67-41f7-83e2-675b4646d016",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "44ebcf2d-738c-40cf-a7df-70a6cec85eac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b39a184-b746-4bcf-ba1c-58f508791d3d",
        "cursor": {
          "ref": "d8fc72f1-d704-458d-bb05-9c7374b974ee",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "865a9a23-ca84-410a-aed6-ebb3bb19b8a6"
        },
        "item": {
          "id": "5b39a184-b746-4bcf-ba1c-58f508791d3d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1b9d9a48-8c6a-4ce5-bf9d-3cbe46f39d5c",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "38b36874-1d14-49ed-9822-18d872d479eb",
        "cursor": {
          "ref": "39097f7d-bcae-4707-8d97-65d40e0987ff",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dbe5b7a6-a046-4457-b5ae-7362d406db0a"
        },
        "item": {
          "id": "38b36874-1d14-49ed-9822-18d872d479eb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2754eaee-0aeb-4f1c-8eb4-1d6ff1f35468",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2896e2-7bd4-425f-897c-e1dae305c3cc",
        "cursor": {
          "ref": "559ecd19-8555-4d84-b7a7-c3a86074d6c1",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "95d2759c-726f-43d8-a16b-3a8295c8dd32"
        },
        "item": {
          "id": "2a2896e2-7bd4-425f-897c-e1dae305c3cc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dd9b39f5-9de8-4f87-af92-8d5e89d9c407",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b480c6a-fc5f-4f76-92b0-f8a8ad975108",
        "cursor": {
          "ref": "b8c5edb9-7c51-4670-98d6-bb08e1bc7047",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da928ae3-cfb2-4858-b4f1-9efe161f62fd"
        },
        "item": {
          "id": "6b480c6a-fc5f-4f76-92b0-f8a8ad975108",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ce2158dd-b255-4156-95b1-6bf9179ca8a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b480c6a-fc5f-4f76-92b0-f8a8ad975108",
        "cursor": {
          "ref": "b8c5edb9-7c51-4670-98d6-bb08e1bc7047",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da928ae3-cfb2-4858-b4f1-9efe161f62fd"
        },
        "item": {
          "id": "6b480c6a-fc5f-4f76-92b0-f8a8ad975108",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ce2158dd-b255-4156-95b1-6bf9179ca8a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6e69ed-89d7-450e-9a30-dc7cf52c09ff",
        "cursor": {
          "ref": "2dfce170-ef23-4773-81b1-542438e4f1c5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7e8b8b7b-6749-4ef7-bff6-4ab76881c353"
        },
        "item": {
          "id": "4f6e69ed-89d7-450e-9a30-dc7cf52c09ff",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2fd40ecc-1a0d-40e4-bc10-809afec449a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab12f36-b04c-459c-82ec-01cc5cb63c3e",
        "cursor": {
          "ref": "b372ace5-cb4e-4834-bd7b-f1fe59bb4a0e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f83d41da-183f-46e3-a49a-8f69dc4ee364"
        },
        "item": {
          "id": "4ab12f36-b04c-459c-82ec-01cc5cb63c3e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "75bcc584-f725-461e-ac04-ec5818115fa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}