{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "79256e2f-ad38-49af-9d47-12646ba57c92",
        "name": "Clear Cache",
        "item": [
          {
            "id": "71c065b3-9fe4-4311-aa3f-fdc27a380d17",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6793261-e0d2-48e8-a98f-d711a6118145",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "24565355-10c5-4c63-b9d5-7e8d106dbc71"
                }
              }
            ]
          },
          {
            "id": "cdf2bff5-874b-468c-8751-23f4c714e4f7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cacde716-60d0-46e0-8ada-924a6d993a39",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8b6282c6-6cb4-40ff-9a49-82e102aa628e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "43c6818b-11af-4c17-aff3-79615cefac58",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1fa6f073-35c1-451f-a38a-fd0fc0075885",
            "name": "Positive Testing",
            "item": [
              {
                "id": "71f184b8-ad5b-43d3-a8c3-8cf973c844a9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "027e06a8-8f22-479c-82d1-245a2556e1f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94f460d2-d372-453a-ac82-513278b5a948"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5027cf28-7cdd-475e-99a2-18a533bc2b9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38d61899-b68b-40a3-9fe3-99f1e8f2825f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "063892da-20cf-475c-b369-33c703d6f479",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf847cbe-c1ea-4dc8-858d-bcc50eea0f32"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7576542-0bcd-48f8-9a3e-af57dcdaad47",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cf388d3b-f23f-4202-8b82-1371e944d31f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70e3bdb0-f26f-4470-9474-236c28814bef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "011ff804-063c-441b-840d-3bc123f75b28"
            }
          }
        ]
      },
      {
        "id": "854a641f-a15e-47b2-a954-90279b4bdd01",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e66a0e06-05a8-4367-b6c7-5e79c3231bde",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1248944f-4f5d-4b92-a5ac-2fb699f5bb21",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "02a4980b-44c2-442d-b7b2-17a6ecb1436f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac894145-f4b1-4215-bac5-18d02f81d664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40f3bf5f-df00-45a7-8147-163359b0e1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e2a52c-27d4-42bb-810a-283e1911bb4d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefcc139-a265-4b8c-a01b-4a673ad60900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b41e45e-9e7b-4ffb-94d0-691643b02d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e4f5eb-9511-42b5-95cc-909593a6adae",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a42dd3-907e-44e6-bc69-b00914517218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b48d6419-eeeb-41f0-9aba-68be304acfd2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ad90af16-34cc-486b-946f-698315e7e2e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0c8bd0d-f57a-425f-9776-b2419de8b4cc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be20eb7-548f-4eeb-ba38-817871d6ecda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10b383fa-809f-46f0-bdc2-84f11016590a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54da10e3-3163-4d6a-be06-f23ebd378f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe7ea9c-3264-4f68-a13f-12d12654442e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c344291f-b64b-4f8d-9fb7-4a57fa90662d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8656edbd-a67e-48f7-8025-7974567e9cdf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fb865ad-c4fd-494b-9513-1fde392d9433",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b11076a2-c48f-4fa1-bfa7-d236cc9a0480"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d4e568c-869f-4c89-b0ce-1d059dfbf10d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bfe47733-7fc4-4cd4-8523-7af4ad41ef62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7bf6007-b83c-4cfd-9ddf-67f4015b0c9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e94b89d5-8d01-4800-8a64-75176f0d3ace"
            }
          }
        ]
      },
      {
        "id": "24a3cc4d-cf48-48bd-ba37-df97f7a25f61",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e4d7fb63-4ad7-49ca-a52e-ab4a41077bc9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3935b998-5bab-4081-bb4a-be5188285579",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9f9ddce1-328d-445b-aa87-a6861f44a650",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60774135-fb8c-4b84-8a4c-d3f3f14f8e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddc4418-e40e-4767-a5fc-4d67de476b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bf33fc-827f-4717-b638-848e6a2d7a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32f3cfd5-36ff-4622-a083-f8cd1136f8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adeba62-d948-4188-931e-5aa524dab3a0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d7765e-f003-4c0d-a8c1-659e3e91faf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40fb4e3-b8d1-4d5a-b097-08bae9ca8dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2ff816-47c1-46cd-9f6b-baa8b652104c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13e39f65-438d-490b-90ca-f688c1ca1797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee000a03-38f7-47fb-ae41-08eefaac6055",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7fa014-5720-498f-b03d-9decf80c859c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77de724-3904-4e95-9fe9-4b5765fdf149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7132ca-342c-440b-95a3-63107bb4295a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33dc91fb-5bef-4903-9a47-20393a44dd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee915ae7-5f58-4807-8846-e9f50a2e2f6b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac6445f-0bea-4cc9-8141-4a2582f3524c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28bdc64e-f252-4fc4-89ab-097a33a2c6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d30d685-a3ba-46fe-a104-cab79c163935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08e902b2-1666-4833-b1d1-0d61220c63a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8407d672-aaff-4e80-a53b-c779354e85a3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d96b21a-9bb9-4e20-afaa-c311b04c3d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec5cd77-7a08-48e5-bb73-8b1cfca04f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33bd555-274d-4cba-8864-30fc1c38b06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5de2acf1-eda7-4e5c-a19b-ed548af86a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ab7b16-c47c-40bf-8be1-e088f69c7963",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18dde082-6732-40c9-902f-a45054658587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c756c678-81e2-44df-8029-f4cc9c6daa12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b04825-116e-49f4-99d3-52c67cddc72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81176e83-7250-4b70-b2db-e0e9102326ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33cc3c4-29b8-4d86-bf48-8a5679403c47",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8271cf00-2da3-4c6c-81e5-323ab142ed36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb05ca1-2b5c-4094-b932-ecccc09287d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c046b8-c80b-4fa5-bc9b-7abd706ed1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08a81b37-c570-423b-b2d7-408ebc6987ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f852cbe-119f-4bdb-a1af-6f184e8925df",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3531d8ac-9e9b-4eb5-996e-4b5376e3dba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10eea7d6-9bb9-455e-89c8-e48cb72098af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c1d5f9-da42-4502-9c58-cde233db3997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd466dc8-9899-4186-bd92-b39404105bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c831d409-849f-4734-b171-881cebfc40f5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703d0154-a6b7-4058-b586-c0ba15751041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71d5df36-75eb-4f57-9534-75a459912188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9f6894-9ea1-4fc9-a3d4-f9d4a50c4302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7482bca-5c25-4b06-a03d-9b688e3c5bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af216e48-5ef8-447a-b5e1-4a0f2ecf0339",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe00504-c4fd-4e50-9ce9-3247560b8a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f1e430c-d9d4-4971-9fbe-f6899ad042ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d43b19-8cbc-487d-acce-b9c70f378dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7deb7c8-4e41-4b41-b49b-f22f76562e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fed52ba-1829-4169-b66e-1acd81837d03",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affa9551-aefc-41f1-90a3-ba13b6101746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bd342b-4dbc-4b38-81b8-a6cd3340c840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e333e88-f1b8-4472-9d87-71fbf4bcdcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2d99183-fd17-42b8-a0cf-bc0f30668013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effec04e-8809-4934-8a23-f058b8ee0a41",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733cc390-f2f6-4345-946f-f8adf126eb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3fdc1c-74f4-401a-b47e-aa5117a68608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044efe25-a6f0-44da-a114-e2d02f9b5b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dba63153-839c-48dc-a58a-1dc64d78d391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4646de6d-3b3f-4dc6-b47e-6dcc90651265",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdf4255-bf12-4cf5-99ff-2fa400e3bc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605c9841-8521-4a91-ae30-71e4d0caa1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2a97b4-616b-439a-b00a-dbd23853c734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbb50ac3-aa1c-4bf4-9db6-e305a83ab1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b76cd2c-adc7-408e-a6e0-c79911ade247",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2165e25a-ef22-4865-a285-b8c6e4bb6a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c505cde6-3f63-4fc8-9455-8b437445b6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5e0174-f9e7-4507-aa1c-dfa0b7d82745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "081f0acc-3aa5-46ac-97ec-8d3dc60ddab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612fd6a0-0ff9-4a9d-85f8-9bf1e4b65f33",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17770ea-2054-40e7-8a09-21aa2ca94609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506dad01-a1ab-45d1-80ff-4806ea19062d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38901e19-452f-4ab9-9641-c56f87526b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40d4641d-cac6-4f26-9b32-38f031800a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f77467-1fe2-4856-96bd-ba3c1c930435",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee1076e-f50d-4622-bb73-69d022b4e64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624ef19a-57e1-4179-84be-08724f4a0e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c78c185-760b-44a4-9634-3125aa8ed684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "777d0440-a1c0-4e64-811c-8560f714ce39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57fd91e-6a7d-46a3-b8b7-c1412b493875",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a23c23-88f3-4c21-8929-ba60f3257c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb930e5-c182-4fc7-8208-f50e9d9a68ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71099d6-9d55-44b3-9d02-f77d7a84548d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a33c35a4-c252-4e6d-a524-2b48a95ca800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc1aade-0dbc-4f91-99b0-4819c499d746",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ce1d3f-7fed-4a2b-a773-f66b9e8353e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8079f601-75e6-40df-8337-2713ba9fd7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7813b4-ed2f-49ec-b2cb-b3fc2c667ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "47bbc36e-763c-406c-ad08-0dc0ca22d9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e14e9b-54e1-40bc-93a8-75e2a95ae665",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5ca069-e3c0-4146-ae79-b810c99edbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62ae701-fae0-47e4-bfe6-2811683e6f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8cb229-a76a-4920-a683-c2dfc34cf4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41064175-b110-4f21-acaa-26f4d6d05079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7264b11b-7ad8-41c0-9d52-47a728490dd7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f927de07-4428-42ea-9cbb-e10ceeb41b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa44afe6-5b3e-4344-8dd3-18f1b4f66cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c741d9-32d8-438b-a30a-d418b746643e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ba56af-875c-4770-ab8a-d8778a248840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d2bfb4-3111-482b-bf87-aba4effc5a7a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5cb129-a9b1-4ff2-a5c8-cef0d38cb723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2413fe-7065-4d99-a71f-70093202692b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e91fc55-8ee1-40b1-8b3d-30f528cf4c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fcdc92-f3f6-4dfe-98c1-82c98d8af3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3010dddf-5b04-45dd-9e8e-758529fda8e6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7d9f4f-ac1c-46e4-978f-e90c2c43ba7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38e6442-c1d5-4447-9659-33abb1adfd21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e502b43-260c-4394-8ae7-83d5461df3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0865a1-3572-4775-85ce-db1f88363eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30279c6a-a338-47d9-a05a-ada1aad03911",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d948e6-e2bb-4d49-9d7c-24918940c98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a24f65-045c-4042-a917-ea4347650dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b14475-21cb-4a05-81b6-5a671d35600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eeccfe00-a693-415e-a84d-e1448f60a33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9fc82f-bfcf-44e1-aae6-d6854ecb9b0a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd96691e-9f81-40d0-935e-6a17260faed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5009fac5-bbf9-4cec-b0a7-fdb6de4d500f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36964a69-f95e-4f84-abff-d652b23def3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1110eb59-9e8e-484c-8224-57b224a6e67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726329f9-3b8d-4d0d-86a3-e3cdb5459a53",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b090ef-3c8c-4897-b143-11d284be4111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433cee34-bcdf-4081-9570-bd4e3666d667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9ed5aa-34c0-4fce-8741-fd6ad517673c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cee721c1-dade-4f0e-83ba-d43fa93392bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7661f74a-354b-4f78-b576-bf21eebf7d92",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e235d1-4502-4657-8274-9858511d3ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22536549-91bb-432c-bc52-29bd0b0688d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4985fb93-9a8c-445f-9c86-8be41c1326af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5de1df-a70e-4a51-ba44-ef30bfe820ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3741d2-faca-4021-a971-739215228b19",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a462ba76-7800-463c-a719-ca6fe99102ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ffa390-d075-4c0a-91ad-c80bb74e23f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68941d88-78ef-4921-84cb-874b811ba0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d88c9c5b-d473-4c9a-8c0c-1131dd0372fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffab9e8-e32e-4cc3-b88c-c4c4d7243b73",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019528d2-7dbd-4588-b312-6a97c1b6ec8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da4c9c2-8caf-48ad-ac98-e5df8e454396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16aa4b6-2e31-42ca-b7f7-af8884b96bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "339d613b-06dd-4ecc-ac7b-a92645ea555e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d396ae5-983a-4d2f-8f8f-833ac1252c3e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acedb9b-2d83-40f6-9325-a53d36f7fc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98227fa-a634-46ec-94ea-7136f349e65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7488310-066a-405c-a7f2-4c39930c81e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be5b8400-5bf5-421c-930c-22d7bc260997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d442526-3169-4a86-adfa-23677c40bb8e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb7c895-4878-4090-9f16-16d2879fb4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e6f9ad-1e7a-4dd1-a689-871627a4927b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f516271-3adf-4d85-8979-07bc2dc17d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "281fea81-4fad-4693-bcd0-b030e4479853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc09727-b458-44bf-9b41-8f1e80156db4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5cb51c-5f83-42d9-b4a9-8260f09fdc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb27418-d71c-4d6a-949f-f04f009232f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf67009-e7ea-4b9c-9a85-ba0c4afb3ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "714d990e-f5b3-4d41-9ce1-58ab5f719ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddddffef-e31d-486f-8cb4-811d0721d3f3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff96ade9-1df8-4078-b669-88a61b5fb933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82f0184-21a1-4ae1-a05e-9830b538b385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359c5e24-587b-4bd8-9561-97cd771bd99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acc2f223-471f-4ccc-918e-796fffdbc914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2483a3-6a7e-4b0c-85ad-f3a1993fdf44",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f45556-f0c9-4521-8b65-c1beb1cf2687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037a234a-fbbb-497e-9e81-514641803fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3bac15-7d32-4168-a42d-b2ecb5dee357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c30d8a84-1977-447a-af8f-5bb73be85e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d501035-8dd3-4a0f-998d-4af0ece9d4c3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43b544d-41d5-4270-8a0b-52413d3c040f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751d7ce0-4aaa-4d86-a49a-0d64e74c6cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013779eb-4fdf-4a2b-a09c-b1c92a853209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c82c9d1-eba9-4f67-a154-492100375230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276a9d90-3c60-4168-a2a2-7a817c89ccb1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4106f605-0634-4419-a3f2-44e0e638ee4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2d2998-223a-4859-9f8f-e214a696b494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c078e6-8701-4ea5-a815-e6f174d7cd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a907bf31-ef36-4098-a22c-28bd9fbc65a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b519f92-47c8-4e79-86f6-f110c1d68d7d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16a52cb-c8c9-439e-b2cb-ce6caa14a988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44789d60-2cc6-4957-a784-9bd2456853ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fe7e68-408e-489a-9345-69c106044913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29f4c7ce-c8c0-496e-aaee-5c60081acec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fd3f3f-7f1a-4411-aff3-0e265547c739",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2b0fe6-6959-4872-badd-eb6262f508c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d7b797-1574-4a72-b5bd-ef95671752eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0d04f4-920d-4494-9e59-1e7b9dd551dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76b3c301-f82b-47c3-89d4-525e60aa16e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e21064d-07e6-4b35-80be-990ba131915d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755d93ad-f4dd-4d50-9357-174c9bbf1f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4589d153-85b9-49e5-adaa-61b3101bca8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e503fb1c-f2d9-4c55-a711-5eee95655b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "26ee07e1-15e6-473b-b8dc-0e7ee08e9e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5045de72-f48e-4c72-ba50-c8f715fe3c17",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511ad0c6-7593-463e-b10f-40309e604593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80ba19a-f528-447b-9ef3-ed007080d46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9bd91d-550c-4700-b919-fced4afe1ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a793831-38b7-4a52-ac58-dfe3bff538b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b953dab-ec64-4cd7-8415-e77c21f0b3dd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d3d525-1575-443f-8407-aaf6189e11aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7122b2f6-51e3-46f7-a7cd-f6f283939d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea6d4e3-e546-4209-b41c-8467931b6074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1728b3-ba95-4182-9abd-019a18c90611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f19b91-b973-41dc-9885-7f5079f221ae",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec61c56b-bf31-4dd4-9117-e32d9cf3646b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f2858e-e737-46c2-9f29-6f0a9de1f38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea053c3-2a80-4472-b9c5-e28a73c96070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b45aec03-4aef-4d32-8ab2-28faefcd60d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5458ad1f-30c8-43db-835b-e5a3a1848928",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3749a719-6a95-4d04-8c50-b870c6c87a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b935f7-91a6-4cf3-b42b-9c53bc082c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9c41f1-b7cc-4791-9c87-1b3f2392874f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "52a1217a-2b4c-4e33-9236-59e03e1eab70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b8eb9b-5b98-4fa4-b24b-c47e159b224e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ab3ae4-e00b-4c2c-a249-a13fdbe72266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237e7044-7a0c-4045-8ca8-91e66baeff32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce02967-7cec-4f13-a9b4-98109bc12948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "53f9e974-11eb-4e2e-b0be-00532237e825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0967332-592e-4897-bc1a-a6f1e5bc1f5b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ec8961-2511-460d-972e-46c42dbaab88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e401e1-e0fa-4273-8568-ddb8c455b891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a470d3-b809-4957-bba9-6bb3f04c6e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "33423fff-94ff-4bfc-a208-04e24796c7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5739c9a5-fa46-4ca5-8908-26c5326a1912",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642210a5-40f1-48fe-8961-b9b994fb7789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcee6f9c-9ba3-4fb4-ab25-004ccf988010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab82ee59-2d2e-49e2-862d-27f30128e2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8d7872-fef7-4091-a854-a89f28e77fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3791c72a-f101-4d93-8903-7078e8f7d535",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73f485d-99d2-410a-a56c-c78478d1433d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e49ecd23-9119-4d3c-a819-a1cc8aff9f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f245067b-2f2a-40ed-9609-208cd85d779e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0afc1a9c-643a-445e-ac14-f96e635d4a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928e0ff0-8599-4432-97cd-8d7058969b58",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322cffb8-3190-40c4-b883-c5346f02c221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a5e3e4-1bef-46b1-99bd-5ce4c8e4eb90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccec022-bf79-4b85-9e5a-cf8269fa765b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25ef2ac1-0ff2-479f-b7a8-80b6a9b3a4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3f481f-7cc3-4478-8306-abfaa28b0e63",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad6c6cd-22b1-49c5-9c55-da0ef503d4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97244e31-51f0-48f7-8090-6cfd73b912e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c86b0bc-adb7-4674-a6be-06becdc1b90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac5679f-38cb-4f47-a592-f9a37ccfe00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd607947-5cd5-40d7-b993-bc0258b081d7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62530177-808d-43fd-a5f4-7d56fca7fd7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d944c5-700e-4f13-9582-29cf58c3ce25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a672698-47c9-40a6-8916-3450a92b86b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4d7667-682e-455f-ac82-ecce150e28a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fdd83a-24e3-4aad-ae0c-a02348e2104d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40119a2-ea01-4c81-b143-543abf1f663c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f20958-2c7b-43f0-9e02-a51e65e4a9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6346e865-6d22-42a2-b988-191d51a3523a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa06ee4-c952-4c14-b03d-7abf03798e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a1c87c-d380-459b-85fb-411d852163ad",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5465ad-cdd7-466b-a6e7-b518a56b63f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352b6d04-b43e-4391-9c95-fa27077965fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250f2ad0-0a5f-4bf7-b9a7-a9b48593ff14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d870c59-3c72-4fd0-a317-4224d12d2878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5883d8fd-7db7-4809-b48b-4cbc369e661b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb1353b-ff0c-4e74-bbde-4cb96064d39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59069168-6c0d-4cb1-9a8f-aba1fd45d2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a9b9a2-b434-4f05-ae50-4119317d646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8e78ed-dd63-426a-86c2-0af5c14a6a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7911459-9ffb-41f4-b8c2-9fb0fc9c8953",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8df55dd-aafd-4c1e-ad48-3e6154844995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebeb1450-0ff6-46e5-a932-f07037f28ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee798d3-dbec-4e32-a219-ef146ac97842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2dbdb17-4e6f-4c38-8aa0-e090ff9608f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963c5a76-5573-4653-a052-d5dceeb5bee5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d159d9b5-48d5-499d-897b-f6ef308c9095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71b51d8-b520-460c-9d3f-2608b3fff10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d31e3b-9049-487f-9740-1765b7878cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36b66027-f883-45f2-b308-b90dc5af5132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d3ca41-50d2-4ab6-8805-0da26d5d7d5e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da0178f-9331-4532-b62f-ab6d936b7941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d518b4-16e5-48e5-9198-6155f76feef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629614ca-856f-41a9-909c-ba37c9c5afa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c465b69-78e5-4290-9c2a-39f2fbbf8f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b8367c-260d-41b7-91ce-30009379046b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9f6279-85b3-427c-a07e-d01466690789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467408b6-f402-463b-82f6-4d614bde3f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fe791d-698d-4ced-bc2e-31fe5cd8e586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "70b10bbc-c6e4-4fa4-bea7-8454e9dcb266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e486daf6-80c2-4c8f-82c5-82eff5fed2d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c942a526-a1c6-46c3-b6ce-995015d9ce23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d425e507-1c20-4aab-bda3-50a09245803c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a5754f-74e1-4896-89b8-5f9599f485d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "81204797-c945-483b-8ed2-cfc95c108a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc7a74b-c6aa-441a-8398-685a0e414566",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6f78ac-f59f-4480-a517-599f2c47bb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8bd821-d929-4be4-8773-0ef7b30c4197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4125d058-5481-4cfa-85fd-ce55592bdde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21b82c9a-9a3a-4ce7-bd5e-9bb26b12338e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9acc4c-f646-4a06-9867-63991073c43d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a54f4bc-6d36-4e56-b378-798457273637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "532a0a02-455a-4497-8cd3-c3990713438d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180cacf1-bca9-4f1e-a2e1-dfe825b022f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "346366ad-61e9-470e-a611-f273bcc9bdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6879fda2-440e-440b-b6c3-038c0d89e6e3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff667f21-adda-4a2f-a825-33a1d1dd530c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549eeeb2-e39e-4007-94fc-b90cb5913d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d9d18f-b0ac-4a05-a5ef-4f6f17133c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6668ca04-43d1-4f84-94ba-96852ee3d73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810b8a41-3e8f-4779-83ee-024408f8dd43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ebade3-563c-4c0b-8f67-4698f28771e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d628f4a7-7e3c-4788-a326-03d134898817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bf376f-57f2-4161-ba71-17d71e4f720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3efb95e-de7f-466a-80dd-251745bde575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d206551-62ef-417e-87d0-6e80c9e6a0fa",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9111da7-9fe9-4586-8abd-17a783105613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf70fcab-7aa2-4117-82f2-1d5f8d2aad12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00627c0-beee-45fc-9087-205b51991b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8751ac16-b29d-4a0f-93a3-640e6c3a1711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea0c189-b2ab-47b1-8e0c-b2898bfcb625",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa048628-04a9-4c61-be13-719751a50421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15bd480-9b14-456b-9c09-fe47ff93c9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cb4980-3bea-46cf-aef8-457b54ca39b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbffbfa-5b4a-4236-9d19-1e54526fbf46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258f1d7c-9547-4a00-9b9b-058ae09cd14c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ab1a41-a585-404b-b943-649557f62bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c56514-d940-41e3-b07a-db184ac89a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae826ae-4d52-41cd-a93a-0bf8f9de5190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8e7a4fd-0013-4e1e-8c1b-4d68c063835c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09428708-35e1-4f64-a220-014a12155cba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194b8ac7-13c2-40e0-95cf-559e92ff6852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb671a69-fc22-46bf-85a5-ddc3b1dd4c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e6159d-1ad9-480d-8ddf-65b663d1fdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c1837d-ff5f-49c7-a910-be0bfc28c742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5bd75b-ca4c-4573-9e6f-e54911b4dcda",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdb5918-4b04-4023-970b-7045ff303cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0550122b-f6eb-48df-b3ad-9712826f56f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e371d78-3807-4fa6-873b-93e6ec5bf64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b29df1d-14d0-4c8c-85df-344d6a5b8144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50738576-a818-4c1f-b58b-a3f4925b1947",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a89d77-378b-4f21-837a-6ec95381cf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc55cb3a-be5d-4369-96fe-4e5b516523bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b91e831-37d7-4019-8009-157c14856ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "436f9ff4-e149-4aeb-a4c6-6d3937a79710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2dce8b-8e11-4542-8286-f144a37ddb1d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27183d23-b2e4-4433-8727-5e04d829c502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab4e243-00f4-4755-b009-405652c361fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0279d7-422a-4052-9eb8-71ae4a6e572a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a37cf88-1bfb-43fb-87e2-f0adac0cbf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be8c43a-1904-4847-8942-2e38a0c5cfac",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03ee577-558f-4154-9358-60f17a5af6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f110b06f-c733-469e-9428-05100d201cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fab1252-0f20-4b44-a347-a12e3c2b25da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b86dbd3d-1a2e-42ea-9361-8f3c24f014bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69e0d92-12fa-40a2-b223-f9d858bb878a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e659bd71-ba01-46ed-92d0-7cbf926f95b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e058157-7ec9-4531-b839-87fd0029e7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d80067-5143-4ea3-85ac-fd5a7c8cb591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca0b3a2-33fb-4ae3-903a-57ea297c1664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ad7698-df95-4a20-9d24-59cc43a3feb9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db58ec77-9b47-41d5-a0b0-c633a51546a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba85495-6676-48e9-9016-82eb89c58b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88a28c9-280c-4c7c-aab5-eba519c83237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf2554e-fdc1-4ec5-8fc9-b5957fdebe18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3dbdd0-6007-4c96-adae-86a269f9beb8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d9c8ba-030f-4ed8-9ca5-d0d24f287bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6537911-1c90-47b2-acf1-9d7725d72fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdb6ad1-eea3-4d7b-bda0-c4f1c74f1073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "597c94dc-d4c3-458e-b612-409eb919272d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38508d7e-e650-4d0d-92bc-bba87b1d1f37",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f8ad6a-adc1-4f9f-9f3f-0838e017036a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c174f1d2-cef1-4853-900a-33082c54613d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d83a1d-097d-49d6-885f-e4130ca63b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16959469-3e7c-4f41-93c7-4f4c47999ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0559151f-255c-463c-bd02-bdd55f64ee2c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b1643e-5f32-42c7-9f51-f148e8475925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45254a0-030f-4af6-ad2a-dd0deda2e1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091bbd26-1772-4537-9e5a-759680db9ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89db6238-270b-4a82-9fe1-813b5cfff700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f54fb68-e77a-49fe-97ca-0a3a62b0288f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44c07db-2785-4713-9590-bb2f3cf693fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360e7532-2744-42e3-b332-a6e7a5320543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50aefff-b2d1-412c-af85-bab4179985c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f13644e-b175-46cc-86dd-7a3e8fb29f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801e7d3e-e57c-4c5e-9abb-aab157dbddb1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c4621c-2e23-4d78-9198-02e974c8683b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bac5382-b1fd-4211-b525-f63c9047118f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25fd176-d85a-494c-98ba-3b83f7053f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b96a10-1fc4-4ce1-be2a-593f0efb022a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa1f7e4-9a40-4348-bb4f-c8fbbae8a4dc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61fdb0f-a76a-48e9-9468-4603d441a7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd53e156-adbd-4dd3-88c7-34f017d83941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba90a612-8e08-4969-a7e0-cf0d7c8cc51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b67648-4002-4085-9830-d4eb4012dbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2b1b0d-2384-4ca8-8c27-05c3db9f6a5a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8034ac-f445-44a2-b002-7ad2f2274ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6b5ff7-6acd-4615-bb66-3060483d62ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac3a591-f431-433c-bc2a-81913d16e331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fc5768-f2d9-485d-ae65-3e7521921bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4563a2-d8fd-41af-8d37-35725ae8e26d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54f4827-521c-4d65-9d71-c62bc379948d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0252efaf-821e-4455-9c37-fdd678062c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b454d40d-f43d-4e03-b34a-8cdf078bd5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a2089e-5017-4133-bb09-6a6abd4d7332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47bde21-2f78-460e-9d79-1d39c32a11ca",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f352c57c-44ce-445b-9cb0-9132bedafaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec29145d-72a4-4ec1-b5c6-4a9d49aa5bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68514905-32bb-42e5-b745-59566af6d7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40ff0c0a-28be-4241-af50-9c37abaf4faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaf7f97-2f23-4bd7-85dd-4a5ea8928c3e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d15877a-e529-41de-a55f-dfb3b8998a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d77bace2-fc2d-4a28-94f3-f13d6f92691e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f85761-a072-4b4d-9db1-a64f6e6545b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "52de73fc-739d-4015-b66b-b40bc4269bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c0fa13-4758-49cf-992b-5f79895d03b9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6255423b-2381-4963-81da-eddf0c83b211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccb9e9d-5c7c-4ada-b5f9-862195c2d0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511a861f-81d4-40d1-91ec-30ae1c6d4f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ce23cb-1d15-48c5-b46d-6c11323cf10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236ad8a7-5f1c-447e-b7cd-de383449ff2a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1954737-54b7-4cb4-9526-e4340977f6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6642255-3e01-43f7-b2ef-e79926b9709f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d722f3-ecab-4cb4-8a44-7d4c85fc5bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd91837-0bd5-4e91-b293-f12b441c8d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912e59b9-a40e-4b2d-abb7-e16fabfd7ca8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a015aa30-4c19-47ad-89ca-56c1b9ff6d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbfc910-8718-45a4-aa81-834216f80275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ff7543-bc5a-420f-9376-773f0c84997a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f627f809-8806-4948-bfa6-2af96d5d3981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2179f913-79e4-48b0-88ac-a4d11f1ab118",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82491564-daaa-4c55-9375-1b6f4c169dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cd650b-e5d2-4ec2-8a30-0ef6f63fe74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950c9055-ca11-437d-8611-855c727a24bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d05d0b7f-a3aa-4ce9-8a5b-ec77703ff42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5aef5a-4d5d-409f-8029-4e243b4fe9ed",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12eabcf2-cd21-41f2-b575-0c044ddf6703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd929864-8534-4c52-944d-9d072feb02a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dcdd24-8390-4f18-81ba-dac95ad98e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "002eaff9-e308-4e00-ac96-b0c9e541f2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7a60bf-2e86-47a7-b7c0-1933bc2761a0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3e7df8-6a0f-43df-9765-77de048f0191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a876338d-26fb-4522-8dc2-5b1f97fb54ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627f8f71-589b-4a0d-af07-e1fa55ffeb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "377bc668-1801-4d2e-a2ae-065fefee1b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462a4e4c-fcd1-4ccd-93e3-7f0ac0802055",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a67531d-0937-490c-b7ff-6956efce280a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbca657-b8fd-4233-b877-5bd01e33cca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc9293d-cb7b-446c-aea1-c6f10c933ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c201e2-2a31-4357-b41e-4302d703040b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d562b5-308d-4bb0-800e-1ab94fc06dad",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b95e0e-177a-4540-9508-bc88a41e848e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcaa9b4b-c832-4e74-b4ca-883431ae7a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a55db8-e434-4340-b49c-32ad93678792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55fa9aea-426d-41d2-a7fa-76749c6493b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ac10bd-69f1-460c-a934-8b82ab262d80",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73fe1bc-704c-47b3-ba13-5dba18607743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81302ee4-7045-47ef-8b30-8a13ab5d7d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0effba2a-a45d-4e37-a88b-8223589821a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf389e5-c46e-48f4-ac6a-7df696623853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6310a8-933c-4387-bbf1-99725666bdb7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b079d3d0-c2a1-4eeb-bbc4-85493e7a3a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fc4238-b8bc-475a-8c8d-de11a6b2d56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd4316e-5b9a-4596-9e7b-db7dcc36b776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "71fa3d00-231d-412d-bdcc-b29b35c0be65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7da1fb-5d10-4479-8b02-26b2934951a9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ace3498-fa1e-4f23-bad9-6d5a9ef84043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7163a991-8c0c-4dda-827b-394fb0e497b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144bb691-e3d5-447f-90c4-677266403a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f45ae29-cfed-4b85-9bf7-7ec2e8c88202"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "67f8ef18-c494-4ac9-90e3-b125aa4998b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "374791bc-b89a-4195-895e-d85bb8cac7ff",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccd78f1-2dde-4f28-9278-c92eb91988cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46ea02df-b6b7-4478-bf6e-797823c63dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777b63d2-8dce-4db5-ab65-15dc5687df41",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dfc0f9e-38a2-41fa-a6df-675e3e5b0265"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb76831c-0dd1-4c07-91ec-140409556518",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41acb4ff-11b7-48da-afb2-062cbb75a6a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46edd195-7091-4707-a35f-69343b0f45da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74f677d3-b1d8-479e-bd63-be85776393f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7a02da12-9724-45b3-ba78-fe8ba8b5b0e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97263933-b09b-4118-ac64-30f85834f8f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "efd81782-3a2c-43ce-83af-8c3da86292ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0737dd0-4067-4c80-a6ba-df1f2e43397f"
                }
              }
            ]
          },
          {
            "id": "c8c30215-7218-40ba-b658-1dd84d5cf834",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02cf7b0f-6893-4355-81b8-f4a78da509b5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e2b8b340-ac87-42ca-a7b0-a7ac4950a60b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2030bf96-082c-41b4-93c5-21ce00a022e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6d597371-a501-4370-998d-5ff8911f2ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485b42b1-478d-4f61-bc74-85bf5e15ca17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f3ee3a-333a-4235-a3de-99800281c212"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e96b1f46-b2af-456c-8254-6b301566fe51",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf36d201-e247-4e54-9c50-8f765fa3a7f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "365fdd86-7d0c-4644-bce3-a08c6148620c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b19eeb4c-374b-47a5-9b0c-0f4ee2512f06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0005790-3fd9-4e73-a40c-b4fc4bb44701"
                    }
                  }
                ]
              },
              {
                "id": "5005ff1a-4f82-4ef3-bcc1-bb3aa5edb114",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cff7dbd-7dda-4e76-8fe8-32d57f63a05b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8349c30-058a-451c-8dec-fc123a2c9b9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fbc5144-46b3-4938-9cf5-8028f780496e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42bd29e2-7918-4938-a624-9fca98b31353"
                    }
                  }
                ]
              },
              {
                "id": "ed4a49f1-90a2-4018-9b7d-290dcfde1b6e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3c3fb52-db9b-4eed-99cd-6ae816b5a9ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e602c2b4-6946-4dfa-96b5-e1b5de7f94c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "753984da-5321-41d4-a6c1-b99e39dc31a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eccd565f-e2bc-4913-a0b9-f7e8374a27d0"
                    }
                  }
                ]
              },
              {
                "id": "b9be5066-77bc-44d2-8cdb-6dce3e400cf1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a47026d9-49c4-4e9c-b8ed-243ae2465d50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40860a14-5c09-4cd3-9163-133bb305130e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41a77f35-c221-44ca-be60-ddcef11025e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0aa66f19-f100-46e6-bc48-94a4d4853549"
                    }
                  }
                ]
              },
              {
                "id": "3bde2c72-4eaf-409a-a0fd-9b54b8222736",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d9eff5e-9a05-477a-a76d-ff9ce0626003",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14fddb55-d296-42cd-86a4-ac6ff2c9a1c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a041746-fc46-4cc6-ab44-23f9658f16e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d91e9466-4459-4eb7-bc21-569885d13329"
                    }
                  }
                ]
              },
              {
                "id": "1834dcb3-69bb-465f-8456-c3d872e06994",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cefd6a96-5dba-400f-9c5c-74f72c8db5a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3f710f3-004a-421d-93d3-dbd55fce82ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1625607-7d0c-469f-8d9c-321d159a44b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5f299f88-9a3e-4321-87be-4cb69e168463"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "603d230e-96fd-4860-ae18-f5948b563113",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "663dd00d-7d82-431b-9985-d16b84a6f4ae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93fefb37-cace-4a88-bc27-00f2dafb83d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "631ce6a5-8c93-4ba6-8f42-e91c1eee76ee"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fdb2cf0-020d-4012-bb0e-6a9162f4a477",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8db955bd-0d1d-430d-a276-c45f7b82c020"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea4c1a41-ce02-422a-a2e7-0db2fb004d5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd45f12e-69ac-48b1-ae09-47c94882fc39"
            }
          }
        ]
      },
      {
        "id": "37fcb631-9d86-40eb-9441-c40a69bd7ed5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2d967218-7ac2-4a1e-b8e0-fefd42cca943",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efe75760-d15f-4303-86a5-79b548d65f40",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1cb58efa-2dde-4749-8123-0892ef2ac542",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd9bdef-f828-4aa7-92dd-23bf14a4c94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a64b17-e7a6-46c9-a9fb-eb54a3ef53d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5942d5c0-a443-4713-9045-d07595aefb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "43b23b03-4697-4e69-bbf1-3ffc407b349f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57273807-b2f8-4ea7-af3d-d8d3b13fa077",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c7f985-51b0-4308-9f8a-24d6bd60207e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5014c3-7741-4b7d-acdb-038a56329b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfcbd1e-ab21-48ac-825e-77acc1a79634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6fcfcf-9616-49a9-a549-c87ed5995052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ee6944-59bd-46f4-94e3-d11eb64802ac",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ef719e-4516-4ed2-8317-28218738a1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa68a672-2262-46f7-a068-5c65b681c9b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713c3433-32b3-4786-bca7-c6169cda198d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce84d86-e4fd-40f9-be2b-e2d2869bf2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d163262b-d610-4dbb-b78f-a901c6d50984",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcec5994-85e4-4661-99f1-02936707ed95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd2e0a2-4323-48ce-99c7-ef29a748a759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09bf1e7-1172-43d8-8157-fd80a59d567a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ab2447-b5aa-4e4c-beaf-c311b1f757ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028ca3b5-085f-4aca-82c2-5d1c0c097b7b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fe3aef-f026-44cb-a9c0-274e338e9147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0060ee-6c73-49b3-bb60-e54ee450a616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87efb8dd-a0d3-401b-9f29-b55200982287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0921237-384e-488a-b1af-d9a34f018d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517074b4-0502-4c25-b9bc-6d53e00f59b5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d29d4b-3ac3-4189-a704-17eefcc5ff14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af181384-ed06-40a0-b292-a3c7d1dfcb83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642f14a7-d18a-4810-abd2-6d179a15e39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff3f485-b4c2-4fae-bddb-2b7e32ffbfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca62cd84-8194-402f-9443-35efba533e74",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7a26cb-6cd6-4d88-ac77-d30e6bd4a2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57c44d8-7a85-44c1-9097-70a1a2140c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eb75d7-9445-4e53-be92-a24f3a4a6a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aae36b0-98d5-4574-a9b4-c1140ee4fa15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2da548-d6e8-4bd5-9681-0bb76fd7fe4d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12cdbdf-1473-41c6-a480-482af606b179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42ca596-f4ea-4e97-8793-3df61da774bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e70f58-dba7-4893-a31f-573c242aaf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09437fe8-7074-458b-bbee-d7c8dd97b9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdec419-e992-4630-b685-704ba5260ac4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58e22bc-2639-49ab-a2f3-b879bfe3737a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f168481-bb15-407d-8b51-b262d116942c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3349ab33-0cd7-4055-8a98-c1eb1b36fd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a93341-1c14-40a2-8b93-5dcaefe6c7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014da7ab-6c96-4387-9a5d-a10d4470c268",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29e5b62-6774-4f9b-a069-c78e82702e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b667da7f-5872-4c6a-bbd0-98d883a6b5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee2499f-3ed9-45c5-9feb-dde2a011dbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06723b92-b0c7-4630-b539-12f6c2cf7687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4231b8be-7b2a-4cf1-9c51-cf22a7e0be9b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8acdcd-a98b-4f19-9fd0-2b46c410d864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6497f1-f760-4d4f-8069-dc0ca1df6c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedc81cf-b656-4158-8aea-6f8ece03e741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "250b8ed1-9ea3-4c5c-b423-5f045df5f88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8403dc7a-80cf-4cc2-9f9a-0d3b28d94399",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266d03d3-5beb-481f-8315-dd4cb65c4d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0dab6b-1722-49de-8078-867ccd9faa5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cae9c3-9129-4596-b33b-1ccc3b67f8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83302ad3-11fa-408d-ae28-3a2298c6bbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd6cd12-5931-487f-b783-13b4c4bad0a4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d6e07b-44e7-4323-a6f9-34e7cc96c67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d50229c-e64c-4c3d-b659-9245d3efc485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6c8783-a0bb-42a8-a080-9e1d86d001ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c194b83-84d7-4c4b-8ab3-70bc7525b036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc7b50c-c8bc-4365-b915-1018a63e236b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4178cab-95ed-4370-96f9-6d84c4e9b2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30bc83a-8740-405e-9da5-c259d82b91f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6347a43-4d8d-4c00-974a-a54b866be0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3de6cfb4-961e-4ab4-acb6-23666a74d54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b9ae26-e946-4afe-a3d1-c0bd39343b3e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c710a83-1a06-43d7-acef-45b5e401e9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191ba059-5fd3-4cba-861a-1b988552de3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4c3f30-c3a2-44fa-a2f7-229352e08f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef12463c-71e5-46fe-b38f-6066fc1cb4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973f433c-a9ea-459c-b740-06b52b66f3e9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6c9fc6-2231-43dd-a050-e27693d2aed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee811bfd-9b17-4c2b-90e8-4d695805bff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d83555-d845-4e09-9aed-7bcd27670574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef37dae-b58c-4c37-8c43-62326b923c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2add25e-3c1c-41fa-86f8-5afac35ac00c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a219c347-e744-46cc-85a8-eb924b071e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e83ada-e520-4b53-8f42-d9a30f85a7d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0c27a8-b7b0-4385-a9c2-298d14049feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9840a701-19f8-4698-afac-2b1a49531940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f43486e-d0fc-47d1-800a-1f32bef15833",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62ddabc-8b7b-43af-bd9e-1aabe6782b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c0ddaf-bd75-48d8-9fa3-4e3f7e948d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a274f310-abb1-4495-a3d3-26007979325c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c181237-707d-44b1-803a-825db5a0bd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288fb2b2-e7d7-4bab-96a3-16a7117e5b68",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e4e1cc-d676-40bd-ba50-def25f980d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f161f31b-d3d7-471e-975c-326e9b4aa587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d974d850-a7a1-4c9d-b2af-173daa10db5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d563b089-78dc-4024-9546-831da50218ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d119e0-9e1b-47e7-a00e-50d290de7af8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5eb7b8-3836-48e6-b87f-50d0af726f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f81f885-7ed4-4ff1-b27c-899bf7794528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b39bf7f-ff29-4735-8a1d-a4d338f0a797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f85679cf-3b31-446a-88ee-fd9552a467db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab173e1-5497-443c-b255-1efa9ffe0324",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0519b97c-3fa5-4e95-90a8-062c1ce6cde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2258f27-6036-41ad-91ea-a3e5ebdeb6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7969613d-8768-40f6-ad74-c2275b918b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2be14ccd-572d-4f01-ac9d-46241a7e2b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c511a5ca-0ffa-4ab7-a3a3-6b5aa3d8ab05",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d855dd92-b1f8-4051-ad6f-b3282a46a899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e56878-e629-4254-8d50-853d42c63e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc20df8-537d-418d-bc00-2817c1af62b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31e9d9dc-cef4-4e9a-9428-f1deb76a94a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65d353c-7d04-4397-bbea-87e60287deda",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e645525d-6b52-4eee-b46d-685d06f092b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35eaac5b-0c28-44f9-bb8a-282ed96f068c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71b2b93-1a08-4054-9115-bd35d55cbed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d3b775-f568-4739-b496-cfc1ae1085a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e6779c-91d5-4987-bd59-9a9376e53dfa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d44235-74b8-452e-a003-1bcaa21862c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f443f4-c796-4b76-8d0a-339efae836b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e76ad1-693e-46a5-98b0-75314e30ca2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa6eec7-c7f6-453e-be6f-a95bf41d25a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f521db28-da93-439f-a3d0-9fc296758a75",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1294a83-9033-44fe-8cd2-df8e7cc36995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b65151d-b8c6-416c-9cb6-06c46225806e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b77eab-0751-4023-8b7b-adee885aadd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "288f1b3b-b82b-4fe1-b4fb-d6400e887fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb3ccf2-b88d-4b8e-9a15-762886d9b4be",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6c90a5-0447-428b-b3b4-bc637222d9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d07574-ddbd-471a-acd7-dc2586716f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd67b65-76d0-474f-bb7d-07dceb3dfbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97764a97-e60d-44ca-8e6f-edb0e4e174fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b8f101-86aa-493e-9b55-724c14ac621d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bf93f1-c44c-4b2f-a800-de7a03b0fece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9ddf3b-ccf6-42fe-86cc-e9cd1eb67ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a60f92b-6eed-49f4-a269-af544e5ad441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61558971-2a9f-4bf2-bf15-5ed4ad118175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea441ed-d4a8-4205-9ab3-64bafec1b331",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b611a6-ead1-4d31-b1fc-925449fc4df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a312b5cb-04cf-451c-b2d9-d7cb3adf04e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce931a03-1162-44a2-a2c9-86dd29dbd252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ed9863-cb3f-4c27-98a6-4d1e70d2e328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c486dd4b-4d65-47b1-8cf2-73743602ed9f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fcfdf4-fdc3-4b0d-97b3-f508db37338e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6790bc0-086f-4e1c-8d3e-a62da235631e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725c9b16-755f-461e-b62c-c725c1ef9bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa53fbb-e09a-43f5-9dc3-858bf021fc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2990af77-82fe-431d-871b-f4bf0bb23570",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c2c9d5-1445-4dfa-82ab-8f73738d97a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2cd9284-3e40-4aab-98b9-1b842679c377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d56d6f-4b87-43e2-baf8-ba5e54c15bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad40ad0-66bb-4472-8315-58658ae40908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda424d8-fe8f-4cb9-8463-8d89a5a7b5f2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33982225-764e-4b5d-b152-bd53789c71a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f48070-44c6-4dcb-ad4d-c5d5d1fe6745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0914da-589d-4c64-9d72-61931ad3adc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1376beac-6309-49a7-8c3a-903d85eed1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b0a0b7-c122-4fcc-b9d6-8de4678a491a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8205398b-b216-41df-b31a-b61c603098d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b763b802-0873-4dd1-b583-39b0cf0eacea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d30ee7-0d91-4e70-8ae7-9f618831bd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f688d2-6d52-4f8f-90f7-fcfe40fd1094"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46bfc377-95e7-4349-8e56-a2326b0404b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e42a2174-3ce7-4b5d-a4a3-f3828cb3edc5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3136a3a-2a77-42c1-a23a-a67eb48b76ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c76e7d96-1743-4c89-8773-c9c3bf7ab4f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729bd5e0-82a8-428c-b814-48611860513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa262988-1cd5-4832-b169-7b4ff86bd84f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a23049d-ab53-4be1-9cd9-a523bcf84653",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5878086-b0b1-40ff-a461-b96849fe81e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "099ba007-7ae5-4219-a317-1e0aca34abf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "770c3e48-185b-40f8-bbf3-eab20ba1027d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5625a5b7-afcc-457c-b209-afa420f48fde",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2c3ec0c0-695e-4587-9205-c8c364b7f689"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93013b53-9bec-4471-a9e8-e6411063fca2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8aece643-c597-40ce-89eb-705eb599585f"
            }
          }
        ]
      },
      {
        "id": "a327e0e4-d9ce-4598-9c7c-cbbce3c69d8c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "59c49914-336c-4a79-b8b8-825007f4507a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f2ef714-bca0-48ac-b52e-f0bc5fcf58d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c932f5b-d0d2-422b-b056-3d5ab12a987b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585e333b-0730-4cfb-a0f9-ecba3eddf204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8347f411-e6e8-4eca-b5b8-eb3404ad0599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88e7ec6-57f5-4f4a-bff3-871a9a997d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb15e0dc-a55d-4fdb-b197-970ebc4a9da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cdbf3a-9a62-4943-8994-fda26ddc49d9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28067c2-014d-4c5a-aeb4-fcab4a623525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270b9581-8f40-4d10-bdba-4cbf90f171d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3d7a1a-41e7-4eba-a2ea-89e8956c0c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b55e1405-d898-458c-8792-87c4561cfe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f74292-1d8f-44e0-81fe-c502ff419efb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f59f51-4c27-4376-af34-f34350e9f4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75147a7b-56f5-4bfa-a7ba-0f4424d65730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c6c0ee-97d9-44b0-b0db-944e978d7049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20142762-0350-4553-b6b6-4cef26566347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126731da-b606-4387-bdf9-9e5c459eacf5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51389424-a189-44b1-9ccf-7b62bd56f21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117f977f-255a-456b-9fef-3c542d2cfdd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9ef759-ed72-4ebf-b320-434b5f7c4013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5771a325-78ad-4166-b6b4-89e1478d82e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2666bfa1-aec4-4825-b2cc-d2c8139be0d9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3625c891-aea2-4a57-b780-9633d2309c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8b8386-3c4b-49af-b6ab-8bc47b53a4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272f4ac8-5423-41cd-97aa-8cddb260bc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c639fe4-7c0f-4916-8ac2-4b57f7c7210c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f982fb48-7b60-4fa5-89c5-be94029dc336",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65806ac-c56a-4fe0-88db-1cb128577e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f274b6-8b45-457c-a0bf-cd0e316bc438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f167a0d0-125e-419e-b8e0-816e4560c882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaae1eb1-d05b-4ac5-8a1c-961587152b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec349e1-1d3d-402f-953a-f1a4a87e99e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83974eff-e9cb-4d02-b5c1-9c0c0d05e961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f5e6e9-a19c-44aa-9443-c63caeaa30c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c01f28-294e-45f7-b40b-55a02a6cc439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1107e79-7ec4-4877-a596-c14b85b99795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def7291f-ae9b-416e-860a-285d733b3e50",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b413097e-0f9f-4ac0-9742-a44fd108e150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d001ff6e-5f42-4811-b53f-eb522cdee81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71be8c3-37e0-42e3-a17d-043b9808af4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b560fc0-89b3-47e5-b7db-17b8e900630e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16fa113-66e5-4396-8f1f-24c668ace422",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6d33a1-d145-4d09-88b9-8b458b5dd994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3f4baa-22f0-49d2-84ec-b5e7566d7779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8240b5-4966-4817-a7d2-c5f1be3fd21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "074bc992-86d0-451a-837f-1bab6ea9307e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305b5dc3-f238-4664-9707-40923c57db45",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27d98af-4a96-4a8c-8b1b-5ed47842470d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3540ba-4163-463f-b0c2-e2e56f8406a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa70631-869e-48ff-b142-2d6784157e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2457144-0f83-4a7b-b14e-9d05345dc5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30502586-65b4-467e-8409-b7216630f41d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0545ceed-3f40-42b2-89ae-73c8554bb843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53700d1b-dea0-4c52-b2e3-55c1c775b205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f81a6c3-00b9-44c5-bda1-b33ce0500067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "721df57c-0bc6-406b-a8da-03b15d46acb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc715f25-04fa-4e7d-b8a7-9aff962702e9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15115eaa-c7c5-4bfe-bf96-5e86d7f86b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1580ab45-79ae-44de-b819-bad3323376ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a84d574-a93d-4f8a-8086-6f06cb9556ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e25aa077-1211-4c8c-b5f0-43b42d9e2aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fd8846-194d-4405-9551-90de003d6e69",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d04adb-a276-429a-b603-a77c48a14739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440e3249-9949-4be7-867b-b73bbf49de61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c85a68d-1bf6-4e09-b91f-3abc136feb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "395f51ec-0289-4be0-9afa-af4f2ca5c8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6998afb-ae41-4560-8277-d0c88c06c738",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7640bf60-7761-4ff1-8ca4-11eed19b43e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5e7e53-8108-4fac-9fde-b42296ced6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90324e10-96dc-45e0-b852-d11ad403b0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb26bc0-e36e-4e5c-a0b7-7f1c9be5a070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254e6747-9a87-4226-a4d7-05cfa839494c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b32c553-18f5-43a6-8b61-b6200d59607e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e81ceb-134d-480a-9895-c4bfc4f26343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f282ac34-0d0b-4241-b05b-9d1bb876c138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "042ff589-a781-4716-b297-c2bf5684ff2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fb390a-fa13-4815-bcde-0cc5ecfe2f9e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df84b643-e55c-4ed3-94c8-cc702a241094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64deb5be-106f-4dde-bbd8-214f0d85fd27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2347b741-3f54-4ede-92c9-0c5b47a16ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee258d93-81bd-4959-b09d-11e72fd9dae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b976ca46-48de-4b78-bbee-b75152eb0a6c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba4629d-3c2d-43ca-9e5e-969d610a6df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76806b76-7dde-4fb6-96fe-11f4a1246a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1ca5aa-db65-4880-b961-6cf854649677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1501f7-8e26-4f25-8892-6219f836a21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb70e2f-9628-4229-ba45-d4c6786fcc50",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1485389-4e6c-45b8-9591-d6ed53e6aa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50637d3d-9c04-4ce8-8672-862ff6feeb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70b3ddf-59e9-423d-b864-fe1f63e7546a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1025b7c-bd21-44b9-8412-20beb30432ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77973fa5-71ed-4637-8a11-7570c0cdad0e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934086a3-ce7d-45a9-bfcb-45836f346700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe02c44d-2b17-4fcc-b823-1d0ccdc9bff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dd0c76-909c-4c66-9399-b2287e523278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f450c311-c748-4b09-9f3c-3f523c363935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf01a60-1356-45c1-8651-6d898abfe67b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870fc0a1-4f91-4c33-9978-81030f35bc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a986ea4-54a6-4e00-bd29-6aaf255c5a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342cfc3a-755f-4b7c-8810-90f585eac7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "206b316c-1183-44db-bec0-33b54c2f61aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70bcdbd-7751-46fe-b9b4-962a38138243",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28da00de-5aad-4828-8759-61e62ab9e02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee42282-c2a0-4a6f-bf71-5ea089b833cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddae1053-860a-47e7-b89b-b2f299f68b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99cb856a-675d-41b7-9ec4-67c795328e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303f6eb7-8447-499d-8176-b4af927162a2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef47731-d10b-47e5-95c1-927fdf117b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca500ea-76bf-4b3e-88ac-6277436b8215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab92eb1-b17d-4e20-aa99-a0301948b160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc26fd11-4cf4-4f47-96f5-6110b48eaaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86e2ff9-b5c8-4145-b3e6-7acf6a05739d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94abf63-b5b0-4beb-8564-a1754562ec89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651236c3-af62-47d2-aaed-171f5040cbce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53aa5a7-9839-489f-8ae6-14257b1999a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e8ca976-bf14-4a31-8143-11fe78a44246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12919ff4-eb14-42c8-9380-1becdf8de03e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19097f1-fb94-40fb-97ea-98a5b6cbb619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad82922-6eef-44d8-b4db-13f32827dd54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac9bb34-8a25-4456-9063-3baaff1daac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "186edac7-ccf9-4f4d-a760-d1019fc6af17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefc329e-6419-404a-ab01-cb3532cdabc9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d530772-ba26-4a56-8b94-994aa1c9c01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712ee55c-128b-4793-b20c-91cd9c179a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ce5ff0-2206-414d-9314-ef6b92d75a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32e96cb7-a817-4bc5-8699-755aa5c930e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b421fb-4db6-4cb9-86c7-2c569939e8ec",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c711230a-0c62-4a68-b6c0-f93c43be449e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5425161-554c-48eb-83a2-e8bfed37316a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3671ff0-4a03-4918-8f84-bd59642ee9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1960238c-c3a5-44f1-aabc-80a9bfdccbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1e0344-5e90-436e-8b79-cc81b1458d2a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af59eb44-62e1-4e97-a1e4-68bd3c345988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bed066-125f-4bf6-a842-c3bcc39f2022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68e0ff5-19c7-4d73-8e81-003f3315ff5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7b7baa-799b-47bc-8b9c-b1a6de8659f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64b4dd7-ec38-4581-9d75-6637a19e691c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686ecd0a-91b5-4840-9ddc-e85fe9dd411d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e292dba-f3bc-416c-8729-f9551b6863b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c681bab0-95cb-42c9-9594-8063e5c3751c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1f6396-59d7-4f86-94e5-35b983eef6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9282f1e-4cf7-47c3-a692-1e885065bcfa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ff73c8-b3ce-4f21-9a9b-67e80e7113f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf50b69e-5c3b-4350-b687-5aed005041e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f2b7c4-7508-4c31-8ec9-e6a5ef016863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94dd983d-a311-4bdf-afc0-866abd96bdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988cb5e6-33b7-4f5c-853e-c0746da09994",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f06b607-31b2-49f2-bcad-9748a9cb7baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e3743c-b430-4154-9555-bf44a66b020a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3f5d81-9798-4641-8355-ea62c9c53b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "506113dc-d060-4e7d-b918-018487ffbad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ac465f-308a-4628-906c-86c3ba90bfab",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1c849b-2104-479f-893a-10b14f335cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da60009f-1a4a-4131-aeed-7c2bba391a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d951fcb9-8ed6-4912-b681-f0b6cfcb3d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa293e88-e203-4d34-ad2f-9dbdbb033a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73937a8a-a719-4a02-8efb-7b15bb321647",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9856f7-e709-4f23-947d-23ed035b7cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510473b6-9c3c-446a-a842-2b51664ccb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c50b56-3bdf-4be9-ba32-587c285eeca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4047475-4f24-4621-8820-173618b7cd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0f0c75-5bc1-4e0b-be7b-7f487ef93f4a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80756bf8-4cd8-4b61-b6be-ff8d63a3fa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b161a20-6d76-4de0-8e5d-ba7209999f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7824ca81-bdb6-4701-badd-1fdc1dc457be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b79f14-8541-433d-90ae-a24702398ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f0fa2f-6f1c-4bfc-b497-e218f163d913",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67162fdb-efda-4750-9fae-7206a8c50c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05a0567-0dce-4e8f-8a42-d1ee8a157fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3b5148-3be1-4e9a-9f2b-2f8466351324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04c2e226-42f6-4182-b05a-3591960fedbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b1f6e8-e25e-4c75-a9f4-fc0f618620c5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26764a4b-f87a-4838-a77d-77b893955cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd48530e-8f59-4c2d-ac37-5e63b5dc1b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41c3b7f-39f2-4cf7-95dc-289920e3f390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f37d88-09e6-4a54-a8d3-386b3c789ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7330976-f42f-4072-ae09-3fab56215bcf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8692a2-21ce-47d3-8e7f-2a5c09e7795e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a19882-8235-472a-96be-3a2e0ace3a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed2745e-d092-4ee1-9dad-48a26d91b819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b716e44b-082b-43c6-aeef-e681290c189d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad185d8-1bcf-4628-8571-5c8d7fa232b6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db6d45d-37c8-442c-8769-66fe753713ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09171808-e4e4-4c1c-b3b9-4d944f825513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375d2bd3-5fe9-40fb-8956-7e4a8cde0249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4271452f-f224-48a3-9c09-1f93f3bceb2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "080c2199-4e53-4754-a623-d281e7596c9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ac1877d-89eb-4f92-b7c0-02e782e65282",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b89dd1-f485-40f1-978f-45b799f016d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1edf0009-4b85-44cc-8fdd-40c4b8944c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e415c62-217b-4367-b153-98d2d4bf1a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "630d10de-2a07-474e-acec-dcdb2ffb64f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dc7dffb-3abb-4906-8635-36cae938135a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e8ee000-d9be-439d-8ba3-8ed6059a8fc7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73148cec-2f17-4f42-b669-dee166c86e6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3dc0226-2283-4785-bfc7-aec4d89a3cf0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e699e6c4-3595-488d-97a8-0083ada151ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1db0ef78-9a10-4237-a606-4f4c6b56c441"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "082b2943-e393-4df3-b09d-8311e96b7bc3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3af5f639-2222-4d98-84e7-3515c03216a1"
            }
          }
        ]
      },
      {
        "id": "4e7749d1-90d8-4ea0-8bef-be271eaf491f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "787611e0-ce42-43b4-a94b-df825d57c611",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b201734-2b20-4051-8764-e1713a4e7b15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "76b4d463-5192-4b27-a410-a9f53aae4346",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0231f9c4-eb39-4de9-b7a2-1e5f930dadf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4701231d-e24f-4ae8-9782-b9bb915bc0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ea154e-c0a7-4097-bfda-92ca23773a78",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ac2298-96de-4f13-86c8-2b638ed34c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54179a43-1cc6-4995-ba50-88e8c2d8b76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1803c09-5d2d-4d0b-9f61-f332b2e2a31a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed1dbf-27dd-4993-9a70-261df1585f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c62c04-5ce0-4640-adae-45629a2c64b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7e2ad0-ffd0-4cb6-a163-347393827753",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24637e93-0970-45d9-b7e5-831526567d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3f565e-7523-4b2c-a7ab-781f8ed8ee84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d14326-eefa-4953-90d5-83e03bc0140e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75af4a25-d1ad-4910-a402-15229faf7870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6002864-a2b1-44bc-96bb-a2bfca1c4330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889e8960-4d0d-49e6-86f0-475e65fc9301",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802b926b-ced1-4af0-95ee-f75826e4d374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7ad9c2-cd5a-46c2-886e-e131cd7502bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2736306-1751-4f8c-94c7-e97a470fa7cd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cff7802-8bf6-48d1-abb0-5d2b808b2ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d150d46-475b-4990-b23b-f91925b0aed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2258c706-d6e0-4e45-a297-d9134549b3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e8572a-d1f3-4a16-81d9-85a5c080ad10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b112ab-2e39-455a-8448-0b1e2c7e4fd9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df5423c-ca6f-4d81-9889-51d733b36925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71f3f01f-c6c9-4d15-b0a8-77e5a10d7a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a129128b-bb1b-494d-98ce-53fd65124d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6c96d8-bf56-4062-9040-638584a71a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b4b89f-a3ec-4d24-b406-d209609c43fa",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb20457-4632-4332-83f6-f72893af8890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f1375a6-2caa-4893-8ddf-4b5e5297d7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cebeb9-c705-4e89-a259-16770df7405f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f9c087-234f-40eb-b103-72393c7ef5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f9291c-e2d3-4a86-b817-99d63acf01ec",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41fcad2-07a5-44be-849d-e18974f1aecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93ebc24f-0aee-4eee-bdcf-916414fd43d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b58653e-2b6b-4dbc-a7bc-8005cd6df4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1152be82-b5fa-44a4-adae-ac0ffc1ca012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff95927-99d9-44f4-9ba4-2379c8435c24",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d969de7c-4e57-4ab8-b77b-0f9edae11c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82848e3c-df44-4a75-b9aa-0059abb77918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c967cd-7684-4f51-a81a-f8e862bedb92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07410254-b938-4396-bda9-c7231d691445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0f6488-8df7-4e22-8eea-10cb2aec677a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58498ca-5e70-4cf1-82ab-7d44e8b0b646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcd8bd0-a050-4198-a489-eb5f7ed7bcd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b09d76c-fe70-4a29-a974-c7e7b9c305f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1efda95d-3002-4a02-90e1-347e1fbcb1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d368cddf-fd68-4435-9f9a-8fda5e157f32",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea580416-e03d-4eb5-b7fd-cb9667ca2bca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c19843ce-a99c-4eff-8b22-af10809aadb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d135f7-b6df-4924-9e21-97392a6d6528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4b3c2c-0d54-4cbe-9c09-197898c154db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc7a841-0b9e-4ea3-b342-d43ffabec9b1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbe66c4-9e64-4916-929b-70bfff970884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1cc0be4-8f73-44e5-bb69-db66f533e3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac87f4ad-c09d-49f5-858a-8d93bd7e1c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dea042f-0e19-4c90-a70e-4b44ddde3bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567b902f-5a47-4ea7-9530-8ff5c6637a64",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027192cc-240f-4f2c-b812-6cf4eb88ef7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a7d171-2f12-4e07-bd29-0af1dbc2401c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f432d600-82cd-488d-b6e0-1c9d87a9c3d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9115f26-1726-4270-bc0c-3c3b615a1258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a8152d-4ee8-4fad-abc5-c65f9555ab5c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e213b137-ce0f-46a9-b0d0-a608bab72bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b24b4709-457a-425d-b6fb-bfe44f92035f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc5f42f-c63b-481d-bfa0-d2b113982a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bbab9d5-080b-4241-9830-478b9094c6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acca5fb-9ea5-4cd7-a338-16f06544ee2d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f104445-1538-42b8-a41f-180f17cc5486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301caabb-325a-4286-9554-124cc62767c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26db696f-b521-4ad0-b13b-bc559ef19afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5408630f-7e53-4f33-af43-57a415319734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6604109-5ce2-4f1a-8273-7062aa482870",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a97984e-3651-40a8-9bab-f2d419532ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a00acd-7354-496e-912e-75d2da747812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2f7ab2-8c0b-43cb-ba89-b5d7bcc958be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2eb009-e08d-4a5c-816b-7952865fc5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb1f7c6-5471-4c14-971c-b087c245a580",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59b13a8-70fa-4098-9855-1c2c103e7d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bc5885-8054-4cbe-9f05-108ae304998b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6637bfcd-c03f-4c42-8ba6-f8032d1e1390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c321a3-2b62-45b9-913c-0ed7e54b9e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fede0e76-54ca-49e5-8cf0-f08a3eb6862d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1419d481-4932-4f66-9fd0-4d81aa739390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f341edd1-75bf-4fea-b27a-9c53c2e433b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac383dac-2704-44d8-8671-f64913656c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8119f6-21b3-40e9-9738-06ac8e1ba87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8b8d98-5c91-426f-82ea-b1a1c935db02",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa50402-a631-4e0a-855a-9d832171a3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa46ed0-9a01-4467-b57a-cdf3fc231a6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94704827-c1b7-4a8f-a092-06eaf40eefe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd8e4ff-f620-452e-9d2d-019734b041aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96debbb-07d9-4607-884f-d72c9e0dc693",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c49412-5a29-481e-a1c7-6097a10914b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa3f501-32fe-40f2-9801-660bae8527a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43d7d4d-cd06-4d27-9627-eb2162eebf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d6eaea-3a0c-42d0-abe0-be5b6599bbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52099711-feef-4e16-9431-7b5ff228c059",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5a9b21-9a68-4d4c-a303-84996ffdbdf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a002534-831f-4417-adfc-eeddad5ed90a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ab5003-a33b-4f5f-911d-9f6616f9368c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be9604f-0665-4a7c-9f96-156480200d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a3b280-b410-4ca8-aaea-8fa8c9c4dfd1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8abfef3-db75-4b83-ac7e-82b29fa22b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31fc234b-eb3a-46a2-a8a6-d3399201b6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe7fe81-1dcb-49fc-b7f5-d4b5b0dbc51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd57d01-6eb5-465f-ad6e-d978cc46949c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d76d6f3-c19e-49e9-be7b-bcad730e750b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a055a9b-7518-44c6-9d8a-c371329f2d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "378e8a01-c2e6-45b4-a812-9738e920b9bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b7372c-6da2-4a10-ae1a-60941eea4e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed4828d-d809-4f4c-ae71-0fc16c6ad4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a50170-1c0b-4eff-b14e-233fbe7a8e9a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d6d049-2b06-4cc1-bb49-b290221e0f01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c05c32d0-4355-4b0e-b987-a33efe78da2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8300ff67-e400-4155-9d32-db4efcb56c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfda8e9-57f5-4632-8c61-6b4e4429b3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ca6195-a94d-4254-8836-17ef6225dccd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23d31b5-6b2d-42a1-a159-358b9aeb393c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37fa0634-f791-4023-87cd-a20ed4fe7231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "695426e1-d9ff-4239-a607-bf645bfc7458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747a905c-e76a-4983-9dfb-49030df07b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a2e94f-392c-45c2-b691-020a495744b5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f187f8-8877-429e-b571-56171af4d283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65237c67-812f-45c0-b8bd-19570cb7f8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ed92f6-438a-4bb0-b919-1be7d1fc8d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac9efdb-cfc9-455e-8ee4-160664d41962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97438b3e-80f6-4c29-b593-7d03d191206e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a9b1bb-e920-4691-8a6e-4ff3fd1e41c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e39c8358-e37a-4b98-823e-7b92aea0e390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e3644d-5334-4b0a-9c7e-94baf4ffa334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738d8c05-ad1e-403c-a149-adde36eba15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99cb003-1da9-461a-a10c-b627e7f7ced4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3cfb06-d2b3-4b1f-817c-a3b30d6c9bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aa5bf35-01f4-40ad-8d1d-35a9c7a12f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b614ee9-3beb-43b5-b1a6-d339073f1928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f69925-4488-4358-ac91-8ac3c3b80858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509952f1-3f73-4d92-8dba-19ec1abce37b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6590633f-2653-4d5f-be53-b9aae4282c19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0adec4b7-357d-441e-9ece-791ee8d6934a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b8cf36-3bfd-4e42-b5aa-07e09fcf0f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de810343-1ee7-49cc-814a-55c0dd2a9a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603b3b6a-221d-405d-9f79-681c9c3e0e6e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21361e43-4ec9-48c7-bdcd-d3a6f50ab070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f792f6a4-fabc-4de5-ac58-ef8a075ebe08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462dc36a-2486-4bb0-8e24-81c3e1b8bde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399d8a96-4745-4e21-82ee-ce99d8d9c429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae936ca-2ec7-4148-b368-9324d61abd08",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ad5cbd-7d1a-44a9-9385-bc5e45850f39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3d5c4b-3288-4d75-b35b-6cb25f5d5cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7534388-1b84-48fe-8365-0d121e6e6761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb94c18e-2d21-4187-8595-79ed321d3d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5826b049-8f16-46a2-a674-d95e899cc20e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c916f6-e566-47da-ba06-c515f62ebf92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98a9ae04-0d7b-4078-b6a6-cdac8d0cf2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286f145e-0bbb-4de7-be56-8d88940bd960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47290501-e6b1-4d90-b8fb-095988e7de61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b75a7de-6de6-46db-8f03-44125c07bdbd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a87e6e8-a852-4651-b2ea-8dfbc242ac91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df12d27-d1b6-413d-b463-6ec1a2c38270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe36c9c-32a4-4b4d-8d68-30070452099e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab17b841-653d-44af-9d36-bc96e81661d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1636b253-f405-46d7-a45b-34fdc61c38cc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79383580-dfb8-4bcf-b492-49679aab89bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1a169f-c105-4d71-b8a0-d6bd6745f28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f455cc7e-f4bd-4450-a820-69d09d1a940f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52853157-7c40-4531-9959-c4d8bb817b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a927f5c2-9c8b-49d4-9fbc-11c74c9de67d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2d50ec-6228-488f-96a4-a3ea83dc8f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c75189b-1c3d-4a0a-be26-6885e4cf4904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192cad52-6ea2-4a40-9dfa-f16632aa89d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6794ca-0a15-4682-824d-7eb2bcbae3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cf88d3-dc95-4696-adce-3c37ea8ccee4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ffe6c0-c5ce-40da-99fd-f4fe65e0513e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60eb1d8f-b201-40f2-b194-3dd1d1282da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc259788-3a1d-4a0c-9dc3-1b1c6776f38b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fcdd3b5-ee40-448b-adb1-cb0346d03b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7897a3f-4ec7-4654-a02e-c185f481b829",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc69d94b-aa9b-4592-8f48-dfd2588bad6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca5dbd1-1756-4d55-9aa8-1f71269c637a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb23911-56dc-4d89-9e23-8fcb360c2600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dd85c2-9680-4c32-ba36-9f45f7fa6559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2cf1a3-9b7d-4489-ad75-67adf1dad198",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceead785-1bcf-42f0-bafc-c115b9562c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9169b737-2c27-47af-831b-44f90a17e622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33ada4b-459b-4227-a046-8526caab4b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84335682-1e17-4e19-a6ee-42661bdf642e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca7f7d2-966e-4b00-85f8-015a1bc69b19",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5bf0f3-947e-4fdc-a9e1-7440045b9b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6169b5cd-f1c2-4bee-9ed7-7ffa09621993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7794220f-b094-4f54-ab93-355308175f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745e07e8-6aba-4285-83d9-e558f8e965b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571d0831-7484-42be-9b77-211c8c276f36",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c126c8aa-f5aa-474c-b8ac-d9cb5a2168b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f147f66c-014e-4588-8758-ab17aa9a78cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2470cf9-5c37-4325-9cb2-e4bf3c097975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db22e774-8157-44f4-b683-4b55eff67729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d694d7c-22ca-4bb6-a061-61bcdb413f7f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325ad953-a124-4104-80ca-89ab102bef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a85d9ba-6706-4fa0-ac54-836105b9e17e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b0975d-863e-4f85-bebe-d62e8b38bcbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae28878-696e-4fb8-a587-807494beb10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e186d0-3749-48aa-a3f1-488bb1c82170",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8951c462-411e-4332-aff8-61882f215fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d362ea2a-a862-4188-8c49-6a37722859d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ce7c58-aebd-49ac-af18-38d813910302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bdfeaf-3188-448a-a74e-a9e698929614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7481c7f-daa0-48a4-979c-05a407e47804",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55d6c57-c01a-443f-9a72-2122e4066ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a76e132-8be0-4b8e-ae0e-e8dba286da54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d63f10-3ff1-4ef7-9a6e-0ef056e5566c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3525b62-100a-4275-be26-88445f7dbb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25099147-e04d-4e76-9367-3a084a942051",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9b46ee-523b-450c-9241-13d942721033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c78998-1fac-407c-8b49-5c71e33bb480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e624f509-3e8c-4edd-ad5d-5c8ff533d77e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e0337f-e639-4dbc-bf52-3cb9c8b52768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77902d07-2e78-4659-b89b-f3ecbe24d083",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ae2156-22f7-42d8-a7d9-aacd26031353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f76dc1d-74b2-4c4c-ae89-6be3ca3e032e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d572ae-5b39-4ce9-ae18-136bdc05eee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee39a0f-cfbd-45d6-8a8b-b3322fce382d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7260b8c7-290b-480a-8812-ef8557c5734c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add7392d-456a-4ef7-9e3d-c37eb7b419be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f678efee-0c3b-4d36-8339-afde03ab11b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb41fde-d68f-41fa-8025-04517750c687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d736867a-9e39-4b94-ab28-b3571fa5f16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7b38f4-4599-4712-bebf-6de7abbab503",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87350c9-cea7-416d-82f4-636d724e444d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b4c6f5-5bbf-41c5-94fd-411facbca374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c7c62b-6086-4adc-98f6-5406ec5ad2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99424e4-ca91-43fb-8541-10fe378c4650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792759ec-1ecc-43cd-a8a6-23e94a8df277",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648cb4ee-fa69-459d-b5c6-de5b16e87678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ec1bcd-0d07-4b5e-a4b5-75d9095e4b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212a27d4-d689-4b3c-b6d3-6393d2445d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72492e7c-d5a1-4c68-a189-2ee9585a5ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df065f8-af05-4fd1-8e10-cb156bf4adaa",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2139ab9-5e41-4017-bd57-ee0a6737d381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a91442a-df40-44f7-bd14-b0c7a34f92a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586836a1-1bb6-4460-a8cf-1652d7fbd8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b4b937-32e2-450f-8d5a-7bf00eed81e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30781d2-eaed-4e05-bc89-7f32fcd44cf6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0240534e-4278-4732-95d6-b03793fff088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf1f8a6-532b-4bfe-a68b-5b7fd66455e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5ace79-959b-4e51-bf14-8e1918542471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13f6143-b48b-4423-a362-d521e7f64a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eceb7cb-79fd-4661-b5f8-575f240615c0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fa8a44-fd7e-4bf8-99a1-e847a87eeac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ba2bcb-a8b6-459e-992d-974da346576d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a276587-d90a-42e3-af17-a890d0b38a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4a01dd-7d39-4fb9-8f1c-0d1893b21522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d47832e-7aa0-4438-8f92-214ec3010e67",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8ed134-27a4-429f-ac16-4bd7ef4cd1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80a35d7-d419-4430-80ad-ae67ea1b2b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d121f2-b75c-4dd2-98a6-01ebc931abec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05ed7a4-1d71-4395-9136-672ee7375a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356ccd8f-7f29-457d-9520-9be81ee3c2d2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab99e208-9d80-41e6-aa74-c268d269d2a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90be8823-3e7c-4026-8956-159dc4b5a76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fdd6ea-6e5e-4e50-abfc-d3d8dc039133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfeea6a6-02ba-470a-8745-868bb390888c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82780c63-0a26-487e-91a8-a9398c27f1e3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fba2c6f-681d-463d-b6c0-eee103b89b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99595340-7ce2-4c63-97a9-20687da5efe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2149a5-ba38-490c-bec6-cd23b22fb5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8693a092-7b14-4970-b880-62b11b483697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674a9982-8252-4892-91af-693d1e1176de",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c649d2-84b9-47e1-8a65-86184cff7f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200f36a9-b68b-45f0-9db1-46c14c4a4a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1acd99-e3db-4f5a-a39f-ec30ef77fb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615de9a6-87ad-4313-8174-53329eb2fb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580fc102-684e-4985-be9b-c24ef0883a6f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861c7778-335f-4d12-a473-3e7b8e3bf229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014ada10-3cb5-4f76-a785-93856a6b9e0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b14856-c5d1-4410-aca6-b86fccc92719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109cea37-e935-4c7a-a5e6-7afe6eae815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af2e86d-f0db-4419-ad85-301f79320a0e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105a315b-8d71-4e30-8765-e8ffdec0c063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010a12e0-1783-4f18-820d-03463f3daffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fa7c44-b366-4950-a5c4-948ff057735e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbbd49f-7041-4d7d-862f-f3f876d7ff46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ad78dd-8a87-41e0-9c40-57c86eabf442",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20618ad-6128-4da2-8f9e-fb325554857b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff03252-1c3a-41e3-9c93-9e63905325c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b2a502-79b1-400f-b429-3609e7edb881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a41def7-1634-4b53-b47e-d8eb9d478eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f254b5-c08a-41b8-813e-807b02f427d0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d97e02-fc1b-4c69-aa8b-ab0ba3ae9fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34186e3f-d95e-47f9-844f-404c6eb4ead7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d27472-aa52-4c14-8329-34c6ce3e1649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76b5b51-2e58-4885-8e98-c8ff29cb6466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d0e1ea-253f-44c6-b5df-4111aef9e691",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe2b87e-8a34-46b2-983a-e19b19ae833b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de855a1-cc2a-46b8-ab55-19c0b9127e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c29dfdc-78fd-4382-b744-06778f93bf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fadc39d-6b2e-4892-99ce-4b82bd1f9499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab052bdc-eaef-42b4-b493-caaccc5e4b66",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffd78d6-593e-4ed7-ad77-4ed9a1e91d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c6e186-fd77-43ff-8954-b25b597bd3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bc3238-6d93-401b-a916-30cac77e5280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cd87b7-4f93-4407-b06e-370416d94a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eeb603f-1f4d-4cec-adae-37f67d6a1924",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824cca57-2d30-45da-a39e-b457a018f39d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003fcbc7-77b5-4a47-b317-0e12a7eb662f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27f5d5b-179d-4c72-b99c-133e4fdcaf6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c178197-5c58-4c4c-aa98-6e31e62d69e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd8e811-fc33-4952-932b-5b12c3821c5b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737dfadb-6525-4fc1-9a32-50b601f3e686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df751f5d-80dc-4d1f-9082-ff1ea55f60c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36aa70db-812f-4093-8f3f-eb8b9cac3731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6024f982-a8de-49bf-a272-194b7b69da36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4e6ad4-bbcb-4fac-9c52-5e5680a5db85",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14fa264-f2b3-42dc-a9a5-335c3ea888ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d87695a-c445-4b96-84e4-3fadbb80f748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f97749-7701-413b-8f71-30811ffb2992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e0102a-f552-44ec-957a-795c6bf8490b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c85f7e-0502-474c-b0cd-b86b8299152b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a26b4df-4169-44c8-a3fb-b2a5ba6a4b20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8718ea6f-0c94-49fd-8dc2-e007232f74ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f52493c-048b-41cd-9012-1cdd083a5bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97654ba9-6bcd-4005-bc27-7b2f9ab476ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1733156-a2fe-4fd4-9b12-57d2389db5d4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5c289c-8643-415a-b171-f5382d792e8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b80858b-066f-46f2-b76e-9bcd889df5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a0ec15-d5ed-4780-95d2-41e8d53ce213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b575fb67-483c-4dd8-bd5a-4a28f002f260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c0e770-978d-4668-b766-f34eaf104802",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e823ce6-9b72-4cbe-b07c-065bba99aa8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47ac20bf-2c03-4d58-9953-0bd1a79d8463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c5472c-2dbd-4a04-aa66-7850263ca0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3ebe7d-64a4-4ecd-b7bc-af1bb9778dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0bbbc9-7d7d-4fec-835c-925e6b3b0af1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18ba5fa-a358-4fad-9ea3-0edbd439eae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "793c74ff-5299-4b28-85fa-4d5208f6e13b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d8ff2b-8c10-4b44-9518-2ea8310161b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a5fc0b-3ef5-4f52-ad0d-9670b2278b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa878ed2-ed4b-4c98-bf1f-c47c23c0d106",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34723828-0f9d-4e9b-8c51-b9367b160ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f899898-6e05-4df7-91ed-ffdf36beb98d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189c580b-7774-438b-b561-f4d132eb4044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca85372-8714-4218-a402-a9196e0e9afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9010643-a98e-4e0b-833f-bd35515bf186",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ec2e0b-6045-48ed-b302-a2735abc90ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcbad567-a5b4-4235-a3d4-1fe47e08f8ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86c4d9a-b69a-448d-a1bc-0b4db45cfbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf51834a-e741-4583-9183-e91b5ef5399b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cf2780-56c1-4851-8912-be5e8c07b907",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e00245-9d2b-479c-82e8-9ccdaea27c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97e6d4a8-e751-41b6-b029-8ace6d7c0bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa74adc6-d0cf-4206-abe0-83964078fd8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbe368d-7fbe-4e61-bc3a-3018ccb7c86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8de38e-9ff4-4263-bf9e-9fc77340615b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9d76be-df79-4379-b09a-f5a32668da48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60c0d1e4-aa3e-4af5-b2b6-4ab63f7f1885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da4d2ec-3e7d-4ed4-b52c-f964f0e4764e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f402cd31-075d-4a63-8cda-d5933d2d3b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20257a9-7b36-429a-86f1-4bc5c5eaf689",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a6e179-1711-43ab-b152-4a0c5e49a72d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ada6c02-6b50-4252-942a-1f3e7ae55501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce90cf3a-ba3e-4c57-bd4e-21570886c921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e26d90-961e-498b-a940-a2c1c44e2d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74303028-1698-418c-b9d1-f19d90886b84",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2257d940-8048-4129-a373-e45bcdf4e947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a3dbafd-59a6-4d40-bd04-ac5ca7c6b3f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83f7488-3f2d-43ef-b8fc-6d1d68c1ef15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e148bf-fc11-4b64-af30-742692abbae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e912f5eb-91b5-4ed4-87e7-a0f64b36be33",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed650be-5bb6-4786-957e-5043368392d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44aed48c-fc74-47fe-be94-18eda1fb6cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e278b2-09fc-4e86-9104-3bb394afa19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63f7365-2738-493a-9583-82fc05fbc7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112af98d-9fca-45db-b616-e3bbe61a44e8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7570043-e0d1-4e96-9cfc-d9b2064ac51a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b41bc8-522d-4bf2-9d69-d08558f6902d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493f46b9-1fe9-4b07-82d0-a975e4c7c5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f80b91-851e-4ab8-b0e7-77e2bfdded87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849ced5a-0fe5-4c29-8cd7-5ee474ffc998",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc589b6f-0954-4b03-88e5-79beb01fd217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b1838b6-9843-4ff3-95d2-6daa33cba04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3c6cd2-7f1a-459d-91a0-8dd9a4417ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3e8fdd-42aa-4ab8-b9d8-c4dc540d7a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ecd94f-7d15-4c60-8d29-dd79c434a48d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14dd915-3db6-40db-89b6-b8128f89a362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5efd49c0-e4bb-4e1e-a267-caca64da05a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e499c1be-c990-4065-a38b-280aff5c4421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f96267b-85ee-4a4b-9783-e5ae2000d0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a40909-a82c-466c-87d5-f5074d313a32",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d8e259-8a34-4f96-b97b-0dd999828a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97e77c5a-27b3-406e-b368-8581d0eff11a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa97493-28a1-4405-8a74-d9030dee96d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e20037-c8be-4d54-8be7-36f6cfa65eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16af999e-8a2f-4e3d-9ba8-6680b214ec11",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302a18b0-a90f-45c3-b86e-77e6d008e956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039c8722-7b8d-4652-b284-b03b91e4314d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b756c07-08e0-47f9-a68d-1d8e4064eecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e54e48-b192-4d89-8faa-52bf357acd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e815d3b7-d014-4108-9cdb-5e5f3081fa73",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1193c270-1eb7-4ae0-98c3-e9054da3709c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07266798-cad6-4189-a1cc-d6c64ef7eeef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27bc90b-b51d-4668-bf5d-472c91359b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3572d5b-c996-4327-b66e-211a86c5b6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94a6ad0-5034-4d22-ba56-df82c7f45ce5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161597a7-72de-451f-b40d-e436d585e87c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8afd2e19-77af-48a2-ab55-8f5bda0bc9a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8046c3c-cb57-4eac-8622-30807451737a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4b5b70-ba26-469b-9e2e-846a8fdfebd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474d2bd9-bda1-477b-8c98-fc4dd2d343d3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e712b7f4-692d-485d-a8b7-c080276d7fea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db0de1a2-519c-451e-b322-924d2ef30e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc1784c-8c57-4dc5-aff3-c02d0f9031e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ce4b8e-d9ad-40ef-b2c5-161e57a447f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359d3bd4-8199-4785-837a-7040827f03a3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df44abdf-9465-42c5-ae5d-694d5f27e381",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe71577e-cff2-45fa-8368-ec9c53b20078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f845e0b0-9d86-480a-9140-30b3edcc7ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed4444c-b79e-4ac6-ad8b-f34885b96039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f080e2aa-d752-44d7-8f34-ec547ae70ecc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a0276a-1046-4cef-9ee4-47e43ac08f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5988218-3d14-42a3-9f85-478b52f7d125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7665876a-1a3a-47e3-a679-547fe0a83783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35cb3a3-d6ab-4c70-ad8b-835512418a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e5b35c-fa36-4cc1-8983-e43f50941b9d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc5e17b-1d6f-418a-93a6-e915c7af59b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f36492-b969-467f-be82-fd4246c559e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fc6a40-5c3a-4308-b72d-5ab5d2043526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e5d380-93e1-4072-ac9e-3dbcf7a6e8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2ce90c-6aa3-4aaa-8545-cafbac3ff9d3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8316258-045a-4db6-b246-27a9aad0e17e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc501c31-658b-4703-84b4-17fcf87fffaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89df86b-178e-4103-b4f3-26feb39258f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbdeb15-a3f0-49a6-a508-48d4f61a2b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3078b80-5e79-47ba-9d6c-02d3c7abbe39",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87b988a-554a-40c9-bda2-9674c4657f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b42f3732-c482-4915-82e9-2da12ed9509f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b17af53-b595-4a83-8bc6-2b2785bb75ed",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7308ea8-8f29-4fb4-bfea-9fbf1d6801e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066a3553-c12f-4159-ad5a-62df9d772ebb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8496e617-39a0-41a0-99c4-8e200880ad20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f4608c-9be8-48b5-b17e-175b7634ccd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff709ce-0975-4c63-8873-36f0e58b1622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c988382-69e9-40d4-8fe8-dfbb6b470ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006cf1dd-057c-4052-9b9a-3bf6856fb801",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a1f06b-544f-4719-8447-0f0011022db9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f539f154-b6d8-4663-8c8e-206e37c817ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d56222-9cb1-4b89-95cb-f1fffa065fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b397bebb-634e-471c-b2c9-b1fb2668c6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c87c6a5-8d49-4dd3-a89e-78db03329cf9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63711d81-b5d2-43b5-928b-ab0d1ebe37bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "261a660a-1923-46d7-a84c-404c9ab91fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ac2b59-8393-480b-b594-794a87633b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c307222-5bd4-41de-a633-dfe10298cd2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08414483-0ffd-4bba-ac13-f267ce13befb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4efcbe-990c-4b5e-9a1f-3cd1c41a1131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe6e259c-968a-4c7b-b89e-17f772e342a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c095f2e8-b57f-4ae9-83fa-f65797571cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042cb026-cdc1-4766-b2d4-9df3b1296456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642781d6-2eee-4f38-b359-df6e232dbbde",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a25a96-4395-470e-8215-153dcedfb10d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdc9f098-bd3b-4123-9fb3-431d1d10121b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1f6a04-8905-4027-9e11-04d23c3e143e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9413fc5-e7ac-4507-8df6-a922dacc707b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9ff180-8c59-4c4c-8205-bda909133647",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13cde13-a9f7-44c3-8d78-a7a5dc14092f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "987fa8d5-37d9-4af7-b2fc-3832987d76f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c5f6ac-1289-4d22-ad67-6c4bc962ba3f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25476c82-0645-4706-89cd-ac1adfeeae9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de2c156-3da1-4735-85f4-de1138b4a0c1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cea9b26-ec81-437a-a33a-e0c670d7c1ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f86215d1-6f82-4907-8dd8-a73e96205b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d404db7b-cc63-4fc2-8a4c-dedea4096dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c3ecd4-66cd-4f00-a171-410e1d299e07"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "397f0b6d-417b-46a5-ad51-86dc94ea52cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ba09ed3-97e9-4e88-81eb-669b85bf2ab5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bff2116-ef4e-47d0-b419-6d22f3338865",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea41de2d-818f-4025-8948-9ef476fe42b3"
                    }
                  }
                ]
              },
              {
                "id": "69fd589d-650f-4452-a68c-8476ccdcb39b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "365c66ad-6677-4a02-abea-bd93fd15262b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2354e3-4937-496d-9a09-7c2a5a20c4f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "31383c63-9132-40a7-843e-639e14543554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fde2e46-8679-46b5-8928-2bacf9c4d08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9eda72e1-8013-462d-9551-14c9c91a6f7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "927e8ff0-d969-41d6-8e4c-d54f08245170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1308080c-9b7d-4b7a-b805-0a1ea05712c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adb8fac6-4257-48ca-ad07-bcdfc3fd8464",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4fd0b55-a29a-4895-aa71-cb0f8783ddd3"
                    }
                  }
                ]
              },
              {
                "id": "5c46d685-1df2-4f35-bd39-2056c9cf043a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c9cac0e8-bcb6-45ba-ab9d-eaa79535502d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d936abe-fe49-404e-bd38-4250bf2df99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "284c7121-5ad5-4c68-8f2b-8f8db208910b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a982094-ed8c-4324-adb0-5918922b635e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf0072f-d5b4-41a7-8628-a12f28771bd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e5c9fab8-3de3-4cb8-bbc3-7e792bfca327",
            "name": "Positive Testing",
            "item": [
              {
                "id": "55a643e1-5693-48c7-9dbb-be69505f6995",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abeff093-525f-4fc1-a217-492e4c3dcd2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d6a4972b-833a-41da-a919-81f66a3e24d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6f28997-a945-4733-b5d8-ce5b648c4963",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bab48ab-f70b-4f0a-a826-f42913036aca"
                    }
                  }
                ]
              },
              {
                "id": "c39e8943-374b-450f-b9cb-01fe31114f46",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9376fc77-c1cf-4dae-8592-9e96e28693bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7c2ec4e2-b262-4f9e-b8c9-fededd6494b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e71a0fa-6482-42a2-b22e-16fd5429798a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2495bc3-f4ff-401c-8972-7fee019f0200"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c1c8c67-c234-4c52-b28a-b5eb89003f0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "db37cbfa-342c-408a-ba95-93f2997ab4ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a874c37-edcd-4b88-819d-1a8feff1a112",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f85334fe-e756-4290-b3d3-ec0f2e45d000"
            }
          }
        ]
      },
      {
        "id": "064ce6c3-6dcc-48c8-aabe-9c03c7bbff81",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b2f997e7-7aac-473c-be3d-8dee14952ef3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ce2ea03-9598-4de2-8268-d1b5be9205d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "175e904f-8b39-452a-ba0b-f55c6d5b0ac2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460edcf5-4fa8-48ee-a4aa-2be6956a936a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d201d95-40e4-4858-b767-e5262a621a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b00e7f-3036-4e34-8797-e6bae83cf865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e40a596-2e9b-437c-9c48-eb5c1c85a978"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e73831a-bad4-45f3-820f-11e4cf3cb895",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ce4e5fe-8228-408f-8672-c83ed4923b0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32d73ac0-629f-4b76-80da-39071537bb0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd41e478-9b5b-4698-8be8-1c32b34ac64a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eefe9e20-026e-4979-a81f-c92e03bf155b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "098ab80b-dfc8-4780-a2f3-87ba2ee91243"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "065e93df-7f32-451c-a03c-b9dcc2bdd3e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd2c5540-caed-4b06-8ee4-1d42be3b1ca7"
            }
          }
        ]
      },
      {
        "id": "35211776-79da-461b-84b5-565248a85560",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "45195840-72ed-4785-b0c0-4bf5376361dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "293e46d9-be82-4de1-8dd0-4762d1ff8054",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0fcdb80b-cab0-407d-a05b-bec4fb602ac6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8c1b1e-1c3f-47d7-8e7d-280c379c3c8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4359046f-f291-4b6b-9167-c6dd14e435e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8391c3f6-c94f-4458-8d42-3e99471ed9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72b74365-4e85-4880-bf72-b5717f7095d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aee4f0d1-bb94-4569-8713-55be5f078049",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20618fdb-6e28-4400-8f22-8d2a774bd306"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ceab4f2-aa1c-4edc-86af-dbfe562d424c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54004ebf-2aff-4468-8945-cb4f8fdfba9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fdd5c25b-eaea-4639-95a1-16ffdd4ced8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b173fce-0705-4d17-bf10-341b7318e8ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1530dfe-356d-4aeb-a594-af94d96f0274",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa252a62-2dc2-4178-84ba-f6bb3c767b42"
            }
          }
        ]
      },
      {
        "id": "a58dcfd7-173e-4250-abd3-b9627da9e7fa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4d6523d9-e682-4042-b5af-209aed78a278",
            "name": "Negative Testing",
            "item": [
              {
                "id": "668581f0-730b-4d63-9d88-f748478c013e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78d6b5ab-f26d-4601-92e2-f7d65b1e2a9a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca3585b-cfb8-4e6f-8cbe-41072d5ceed4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72f9be08-0a8f-4ce9-b68c-732056250f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae12bd5f-2fe4-4055-be4f-99b70ed4bee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "745fc46c-6132-41e5-9a18-09cddf46e66f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26369447-ef5e-440f-89af-33215dbd123e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80f171cb-2621-4252-b4cd-28b5e7e93f31"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86e1cf56-122d-42c4-9808-54767870de50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a704641d-e92b-4419-912a-4c82cb77d89c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bcc0113-616a-4113-a213-9003e6139729",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8d2dde19-04a4-4a14-a837-740f34149b92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9afb16f8-dc2e-43d4-8819-912fb3f239ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb38aa0a-73e2-416c-a570-c671a6b6ba61"
            }
          }
        ]
      },
      {
        "id": "cf0ab033-ef2e-4c42-934f-2b8c41d99d77",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6643346b-bd62-4f63-a8a2-634f012e708e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b893a7b4-65c0-412b-ba7f-6aa6b53cccce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5ba7c0d7-4188-4eb0-938c-120aec03af8d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0241fea-35df-4825-a4e3-935ca9906a2c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ac4f46f-15b7-46b7-a8ea-7c0628632597",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.93262411347518,
      "responseMin": 9,
      "responseMax": 788,
      "responseSd": 36.156952965148506,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706315657491,
      "completed": 1706315702617
    },
    "executions": [
      {
        "id": "71c065b3-9fe4-4311-aa3f-fdc27a380d17",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d3052880-a4c1-4714-8744-cedfa468dd62",
          "httpRequestId": "e37290ea-9cc5-470b-a6fc-48ef85f2b65a"
        },
        "item": {
          "id": "71c065b3-9fe4-4311-aa3f-fdc27a380d17",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "324594d7-fc5e-4f19-a7a5-1edfe9088850",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "cdf2bff5-874b-468c-8751-23f4c714e4f7",
        "cursor": {
          "ref": "c85e7fdd-e8e0-442c-9ff1-7bcaee657850",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "14e30e2a-93f2-48a1-b28d-3a80282ba727"
        },
        "item": {
          "id": "cdf2bff5-874b-468c-8751-23f4c714e4f7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ca4f94f8-f47b-44e6-a91d-44128fc2b440",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "71f184b8-ad5b-43d3-a8c3-8cf973c844a9",
        "cursor": {
          "ref": "2d8ccf21-cfb5-4fc0-a24d-f8c826441ed5",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8d0273d4-f7ee-4ee3-b7e1-bed4365e35a1"
        },
        "item": {
          "id": "71f184b8-ad5b-43d3-a8c3-8cf973c844a9",
          "name": "did_json"
        },
        "response": {
          "id": "8ca123a9-8390-4d1e-b80b-0174c207f24e",
          "status": "OK",
          "code": 200,
          "responseTime": 788,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a4980b-44c2-442d-b7b2-17a6ecb1436f",
        "cursor": {
          "ref": "afd5f6fe-0529-4beb-a67f-94e464fb7465",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "56ce06b7-4b89-4989-bc73-31ae1c84282d"
        },
        "item": {
          "id": "02a4980b-44c2-442d-b7b2-17a6ecb1436f",
          "name": "did:invalid"
        },
        "response": {
          "id": "12903c1f-1843-4882-9867-d0200a5731c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a4980b-44c2-442d-b7b2-17a6ecb1436f",
        "cursor": {
          "ref": "afd5f6fe-0529-4beb-a67f-94e464fb7465",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "56ce06b7-4b89-4989-bc73-31ae1c84282d"
        },
        "item": {
          "id": "02a4980b-44c2-442d-b7b2-17a6ecb1436f",
          "name": "did:invalid"
        },
        "response": {
          "id": "12903c1f-1843-4882-9867-d0200a5731c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e2a52c-27d4-42bb-810a-283e1911bb4d",
        "cursor": {
          "ref": "b6f2010a-059d-46ec-a0b8-9801148289df",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6d5ce36e-f852-4155-b837-fceb6c3aac5f"
        },
        "item": {
          "id": "c2e2a52c-27d4-42bb-810a-283e1911bb4d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bddcb75a-f8e7-4e6e-a4c6-fa6c1e0620a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e2a52c-27d4-42bb-810a-283e1911bb4d",
        "cursor": {
          "ref": "b6f2010a-059d-46ec-a0b8-9801148289df",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6d5ce36e-f852-4155-b837-fceb6c3aac5f"
        },
        "item": {
          "id": "c2e2a52c-27d4-42bb-810a-283e1911bb4d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bddcb75a-f8e7-4e6e-a4c6-fa6c1e0620a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e4f5eb-9511-42b5-95cc-909593a6adae",
        "cursor": {
          "ref": "a29059a0-0318-4e50-bc59-9c165e859c5c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8c3f2439-edd2-4bc0-9b2c-df2c2237b8f7"
        },
        "item": {
          "id": "85e4f5eb-9511-42b5-95cc-909593a6adae",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e82e88ac-6123-4807-a71e-84395c83343f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e4f5eb-9511-42b5-95cc-909593a6adae",
        "cursor": {
          "ref": "a29059a0-0318-4e50-bc59-9c165e859c5c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8c3f2439-edd2-4bc0-9b2c-df2c2237b8f7"
        },
        "item": {
          "id": "85e4f5eb-9511-42b5-95cc-909593a6adae",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e82e88ac-6123-4807-a71e-84395c83343f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c8bd0d-f57a-425f-9776-b2419de8b4cc",
        "cursor": {
          "ref": "fd45b47a-8825-45a7-ac3b-e78cc73f2605",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "743a39f5-6916-4649-a301-04afc705e3fe"
        },
        "item": {
          "id": "a0c8bd0d-f57a-425f-9776-b2419de8b4cc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3e9ea895-8b35-438f-9ece-581419c6f178",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c8bd0d-f57a-425f-9776-b2419de8b4cc",
        "cursor": {
          "ref": "fd45b47a-8825-45a7-ac3b-e78cc73f2605",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "743a39f5-6916-4649-a301-04afc705e3fe"
        },
        "item": {
          "id": "a0c8bd0d-f57a-425f-9776-b2419de8b4cc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3e9ea895-8b35-438f-9ece-581419c6f178",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8656edbd-a67e-48f7-8025-7974567e9cdf",
        "cursor": {
          "ref": "5bb0ac00-bf57-4f6f-be74-5883ad900923",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9dad4d71-cc75-497f-b750-da4125b461c4"
        },
        "item": {
          "id": "8656edbd-a67e-48f7-8025-7974567e9cdf",
          "name": "identifiers"
        },
        "response": {
          "id": "fcd03d0c-d3aa-48fe-8fde-b685377f468a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8656edbd-a67e-48f7-8025-7974567e9cdf",
        "cursor": {
          "ref": "5bb0ac00-bf57-4f6f-be74-5883ad900923",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9dad4d71-cc75-497f-b750-da4125b461c4"
        },
        "item": {
          "id": "8656edbd-a67e-48f7-8025-7974567e9cdf",
          "name": "identifiers"
        },
        "response": {
          "id": "fcd03d0c-d3aa-48fe-8fde-b685377f468a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9f9ddce1-328d-445b-aa87-a6861f44a650",
        "cursor": {
          "ref": "e8220b05-dfe7-4b02-bc7b-377659670afb",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15cff08d-ae37-4ef6-a1b0-8be56ddb4b1c"
        },
        "item": {
          "id": "9f9ddce1-328d-445b-aa87-a6861f44a650",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b0062ea9-3a61-460a-bfc0-df1b8b459d13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9ddce1-328d-445b-aa87-a6861f44a650",
        "cursor": {
          "ref": "e8220b05-dfe7-4b02-bc7b-377659670afb",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15cff08d-ae37-4ef6-a1b0-8be56ddb4b1c"
        },
        "item": {
          "id": "9f9ddce1-328d-445b-aa87-a6861f44a650",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b0062ea9-3a61-460a-bfc0-df1b8b459d13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adeba62-d948-4188-931e-5aa524dab3a0",
        "cursor": {
          "ref": "bb31f73f-3c0b-4a09-9e0b-2f58ef0e6fa9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9fb36dee-d0b7-42c6-9f31-280b6a5fc9dd"
        },
        "item": {
          "id": "2adeba62-d948-4188-931e-5aa524dab3a0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "592952b2-5f82-4cb0-ada4-9eb6f483a516",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adeba62-d948-4188-931e-5aa524dab3a0",
        "cursor": {
          "ref": "bb31f73f-3c0b-4a09-9e0b-2f58ef0e6fa9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9fb36dee-d0b7-42c6-9f31-280b6a5fc9dd"
        },
        "item": {
          "id": "2adeba62-d948-4188-931e-5aa524dab3a0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "592952b2-5f82-4cb0-ada4-9eb6f483a516",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee000a03-38f7-47fb-ae41-08eefaac6055",
        "cursor": {
          "ref": "df9bed54-47b8-4406-8f34-3ac22a88c6a3",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ea2f4cad-afc1-4a5a-8bb1-9fe7a286e778"
        },
        "item": {
          "id": "ee000a03-38f7-47fb-ae41-08eefaac6055",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "69a3a3f4-6507-44d7-bf58-6fe80178055e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee000a03-38f7-47fb-ae41-08eefaac6055",
        "cursor": {
          "ref": "df9bed54-47b8-4406-8f34-3ac22a88c6a3",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ea2f4cad-afc1-4a5a-8bb1-9fe7a286e778"
        },
        "item": {
          "id": "ee000a03-38f7-47fb-ae41-08eefaac6055",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "69a3a3f4-6507-44d7-bf58-6fe80178055e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee915ae7-5f58-4807-8846-e9f50a2e2f6b",
        "cursor": {
          "ref": "9372521c-b2dd-4c7f-a9d9-5b6c9b79403f",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ecf7a1ac-92c9-4187-a619-0094490895b2"
        },
        "item": {
          "id": "ee915ae7-5f58-4807-8846-e9f50a2e2f6b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "95badce6-e7ad-4941-972b-a594913c3dbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee915ae7-5f58-4807-8846-e9f50a2e2f6b",
        "cursor": {
          "ref": "9372521c-b2dd-4c7f-a9d9-5b6c9b79403f",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ecf7a1ac-92c9-4187-a619-0094490895b2"
        },
        "item": {
          "id": "ee915ae7-5f58-4807-8846-e9f50a2e2f6b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "95badce6-e7ad-4941-972b-a594913c3dbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8407d672-aaff-4e80-a53b-c779354e85a3",
        "cursor": {
          "ref": "2502314b-da27-45f3-a1f1-e23385702b43",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0e13bdbd-63c1-4ac1-bc54-aad5a19d241c"
        },
        "item": {
          "id": "8407d672-aaff-4e80-a53b-c779354e85a3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "45773208-bea1-4c90-b00f-e3442668bfdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8407d672-aaff-4e80-a53b-c779354e85a3",
        "cursor": {
          "ref": "2502314b-da27-45f3-a1f1-e23385702b43",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0e13bdbd-63c1-4ac1-bc54-aad5a19d241c"
        },
        "item": {
          "id": "8407d672-aaff-4e80-a53b-c779354e85a3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "45773208-bea1-4c90-b00f-e3442668bfdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ab7b16-c47c-40bf-8be1-e088f69c7963",
        "cursor": {
          "ref": "a16be973-c923-49ca-be84-150508b63a0f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "52989bae-d8c8-47c8-81c9-b7f0ea7e986f"
        },
        "item": {
          "id": "a1ab7b16-c47c-40bf-8be1-e088f69c7963",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9fdabc97-a731-44df-8140-b1a8cb09d7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ab7b16-c47c-40bf-8be1-e088f69c7963",
        "cursor": {
          "ref": "a16be973-c923-49ca-be84-150508b63a0f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "52989bae-d8c8-47c8-81c9-b7f0ea7e986f"
        },
        "item": {
          "id": "a1ab7b16-c47c-40bf-8be1-e088f69c7963",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9fdabc97-a731-44df-8140-b1a8cb09d7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33cc3c4-29b8-4d86-bf48-8a5679403c47",
        "cursor": {
          "ref": "1ff1ea1f-4421-4b9d-bbda-7364e75ba1b2",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9b261d80-4808-4432-b261-1b0518cd8c9e"
        },
        "item": {
          "id": "b33cc3c4-29b8-4d86-bf48-8a5679403c47",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "42817393-054e-403f-9d69-96f38a18a21f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33cc3c4-29b8-4d86-bf48-8a5679403c47",
        "cursor": {
          "ref": "1ff1ea1f-4421-4b9d-bbda-7364e75ba1b2",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9b261d80-4808-4432-b261-1b0518cd8c9e"
        },
        "item": {
          "id": "b33cc3c4-29b8-4d86-bf48-8a5679403c47",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "42817393-054e-403f-9d69-96f38a18a21f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f852cbe-119f-4bdb-a1af-6f184e8925df",
        "cursor": {
          "ref": "b224fa89-b980-4ab4-9b6b-74620b64aa28",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6b713953-a274-4eed-8d4f-8eec09a82ab8"
        },
        "item": {
          "id": "4f852cbe-119f-4bdb-a1af-6f184e8925df",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8fc507ed-4a85-4cf3-b137-0a8c471b82c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f852cbe-119f-4bdb-a1af-6f184e8925df",
        "cursor": {
          "ref": "b224fa89-b980-4ab4-9b6b-74620b64aa28",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6b713953-a274-4eed-8d4f-8eec09a82ab8"
        },
        "item": {
          "id": "4f852cbe-119f-4bdb-a1af-6f184e8925df",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8fc507ed-4a85-4cf3-b137-0a8c471b82c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c831d409-849f-4734-b171-881cebfc40f5",
        "cursor": {
          "ref": "97af7890-b107-4e72-8b8f-28989a33a6c3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c762acf6-5739-4609-9d59-8f2ac52f2bf2"
        },
        "item": {
          "id": "c831d409-849f-4734-b171-881cebfc40f5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b9436139-038f-41b1-b9b3-bd3bf3dd4555",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c831d409-849f-4734-b171-881cebfc40f5",
        "cursor": {
          "ref": "97af7890-b107-4e72-8b8f-28989a33a6c3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c762acf6-5739-4609-9d59-8f2ac52f2bf2"
        },
        "item": {
          "id": "c831d409-849f-4734-b171-881cebfc40f5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b9436139-038f-41b1-b9b3-bd3bf3dd4555",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af216e48-5ef8-447a-b5e1-4a0f2ecf0339",
        "cursor": {
          "ref": "75fe3e4d-fa2c-488c-9c74-24ec2daa9935",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1bbea8fe-f6a9-4f34-9faa-b9ce8f17e436"
        },
        "item": {
          "id": "af216e48-5ef8-447a-b5e1-4a0f2ecf0339",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e2b8a63f-7b4e-4559-ba26-59a75f27b27b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af216e48-5ef8-447a-b5e1-4a0f2ecf0339",
        "cursor": {
          "ref": "75fe3e4d-fa2c-488c-9c74-24ec2daa9935",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1bbea8fe-f6a9-4f34-9faa-b9ce8f17e436"
        },
        "item": {
          "id": "af216e48-5ef8-447a-b5e1-4a0f2ecf0339",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e2b8a63f-7b4e-4559-ba26-59a75f27b27b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fed52ba-1829-4169-b66e-1acd81837d03",
        "cursor": {
          "ref": "43895246-d976-4872-adfa-0e2bd04ef6a9",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3f91837a-1c81-4785-a5a0-2d509a280191"
        },
        "item": {
          "id": "4fed52ba-1829-4169-b66e-1acd81837d03",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c4a9d94f-ef37-4745-a99f-8b454d2f331b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fed52ba-1829-4169-b66e-1acd81837d03",
        "cursor": {
          "ref": "43895246-d976-4872-adfa-0e2bd04ef6a9",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3f91837a-1c81-4785-a5a0-2d509a280191"
        },
        "item": {
          "id": "4fed52ba-1829-4169-b66e-1acd81837d03",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c4a9d94f-ef37-4745-a99f-8b454d2f331b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effec04e-8809-4934-8a23-f058b8ee0a41",
        "cursor": {
          "ref": "99a5b00a-8f20-45cf-964a-42562b95734f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "414af16f-9575-4c2c-8d08-6a2f2c0634d4"
        },
        "item": {
          "id": "effec04e-8809-4934-8a23-f058b8ee0a41",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "924a57d9-fb67-4f83-b13b-01db7afd891a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effec04e-8809-4934-8a23-f058b8ee0a41",
        "cursor": {
          "ref": "99a5b00a-8f20-45cf-964a-42562b95734f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "414af16f-9575-4c2c-8d08-6a2f2c0634d4"
        },
        "item": {
          "id": "effec04e-8809-4934-8a23-f058b8ee0a41",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "924a57d9-fb67-4f83-b13b-01db7afd891a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4646de6d-3b3f-4dc6-b47e-6dcc90651265",
        "cursor": {
          "ref": "0b7a1369-a28b-47c7-badf-d92a9385067f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a71c2ffa-0aa1-4db5-b4c3-810780d4ad46"
        },
        "item": {
          "id": "4646de6d-3b3f-4dc6-b47e-6dcc90651265",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b1f7367b-31e7-45c0-85ff-1ab043a3f4d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4646de6d-3b3f-4dc6-b47e-6dcc90651265",
        "cursor": {
          "ref": "0b7a1369-a28b-47c7-badf-d92a9385067f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a71c2ffa-0aa1-4db5-b4c3-810780d4ad46"
        },
        "item": {
          "id": "4646de6d-3b3f-4dc6-b47e-6dcc90651265",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b1f7367b-31e7-45c0-85ff-1ab043a3f4d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b76cd2c-adc7-408e-a6e0-c79911ade247",
        "cursor": {
          "ref": "46beb063-3ea7-4c0e-836e-48e97dddf3d3",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5d30c605-ed1b-4b3b-9f68-b43d9771ae91"
        },
        "item": {
          "id": "1b76cd2c-adc7-408e-a6e0-c79911ade247",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dbd0938f-782d-4eab-866e-b7b9d250b03b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b76cd2c-adc7-408e-a6e0-c79911ade247",
        "cursor": {
          "ref": "46beb063-3ea7-4c0e-836e-48e97dddf3d3",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5d30c605-ed1b-4b3b-9f68-b43d9771ae91"
        },
        "item": {
          "id": "1b76cd2c-adc7-408e-a6e0-c79911ade247",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dbd0938f-782d-4eab-866e-b7b9d250b03b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612fd6a0-0ff9-4a9d-85f8-9bf1e4b65f33",
        "cursor": {
          "ref": "1612fb1f-c93c-4b57-a8d1-4a15cbdd338b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ed3728e6-6f69-44cf-abdb-22581a8987b6"
        },
        "item": {
          "id": "612fd6a0-0ff9-4a9d-85f8-9bf1e4b65f33",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "43a3fd8a-4a89-4a5f-9daf-f3797ea79a49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612fd6a0-0ff9-4a9d-85f8-9bf1e4b65f33",
        "cursor": {
          "ref": "1612fb1f-c93c-4b57-a8d1-4a15cbdd338b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ed3728e6-6f69-44cf-abdb-22581a8987b6"
        },
        "item": {
          "id": "612fd6a0-0ff9-4a9d-85f8-9bf1e4b65f33",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "43a3fd8a-4a89-4a5f-9daf-f3797ea79a49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f77467-1fe2-4856-96bd-ba3c1c930435",
        "cursor": {
          "ref": "83b9c6e3-7e91-45f4-92ba-255fa3f170bd",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5bf96f11-10f7-4029-bec2-faffd8ad5218"
        },
        "item": {
          "id": "46f77467-1fe2-4856-96bd-ba3c1c930435",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6a7f4060-7013-444d-bea7-7b5ea2f252df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f77467-1fe2-4856-96bd-ba3c1c930435",
        "cursor": {
          "ref": "83b9c6e3-7e91-45f4-92ba-255fa3f170bd",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5bf96f11-10f7-4029-bec2-faffd8ad5218"
        },
        "item": {
          "id": "46f77467-1fe2-4856-96bd-ba3c1c930435",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6a7f4060-7013-444d-bea7-7b5ea2f252df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57fd91e-6a7d-46a3-b8b7-c1412b493875",
        "cursor": {
          "ref": "087029e7-918f-4e1b-b5ac-53bc96d1c7f8",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8c41588d-c288-44c3-90ea-7edbb0e52854"
        },
        "item": {
          "id": "d57fd91e-6a7d-46a3-b8b7-c1412b493875",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c2affaab-19a2-41cc-bc2f-f0061ac4f9fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57fd91e-6a7d-46a3-b8b7-c1412b493875",
        "cursor": {
          "ref": "087029e7-918f-4e1b-b5ac-53bc96d1c7f8",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8c41588d-c288-44c3-90ea-7edbb0e52854"
        },
        "item": {
          "id": "d57fd91e-6a7d-46a3-b8b7-c1412b493875",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c2affaab-19a2-41cc-bc2f-f0061ac4f9fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc1aade-0dbc-4f91-99b0-4819c499d746",
        "cursor": {
          "ref": "07f26000-699b-4824-8413-3b10cb99c8a7",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "798640d4-6ac7-463d-af2d-30b42b5049d9"
        },
        "item": {
          "id": "4bc1aade-0dbc-4f91-99b0-4819c499d746",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "00b6bf70-8f6a-400d-b677-c9fcef05a63f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc1aade-0dbc-4f91-99b0-4819c499d746",
        "cursor": {
          "ref": "07f26000-699b-4824-8413-3b10cb99c8a7",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "798640d4-6ac7-463d-af2d-30b42b5049d9"
        },
        "item": {
          "id": "4bc1aade-0dbc-4f91-99b0-4819c499d746",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "00b6bf70-8f6a-400d-b677-c9fcef05a63f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e14e9b-54e1-40bc-93a8-75e2a95ae665",
        "cursor": {
          "ref": "0be39cb1-8da4-40e6-bea2-e5d32bb40e8e",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7d421650-7d3e-4ac8-9550-fceffe7c508c"
        },
        "item": {
          "id": "b5e14e9b-54e1-40bc-93a8-75e2a95ae665",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4f05637a-effd-4669-8835-f5b9ce8a1d4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e14e9b-54e1-40bc-93a8-75e2a95ae665",
        "cursor": {
          "ref": "0be39cb1-8da4-40e6-bea2-e5d32bb40e8e",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7d421650-7d3e-4ac8-9550-fceffe7c508c"
        },
        "item": {
          "id": "b5e14e9b-54e1-40bc-93a8-75e2a95ae665",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4f05637a-effd-4669-8835-f5b9ce8a1d4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7264b11b-7ad8-41c0-9d52-47a728490dd7",
        "cursor": {
          "ref": "ff5e5143-61f1-4ca6-b694-5e412c1dc5c2",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "81a8df22-61fe-4f4f-8f18-2fb8ebf198a4"
        },
        "item": {
          "id": "7264b11b-7ad8-41c0-9d52-47a728490dd7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8ea8f9a4-cc12-40b4-9e3f-fd3f51142abb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7264b11b-7ad8-41c0-9d52-47a728490dd7",
        "cursor": {
          "ref": "ff5e5143-61f1-4ca6-b694-5e412c1dc5c2",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "81a8df22-61fe-4f4f-8f18-2fb8ebf198a4"
        },
        "item": {
          "id": "7264b11b-7ad8-41c0-9d52-47a728490dd7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8ea8f9a4-cc12-40b4-9e3f-fd3f51142abb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d2bfb4-3111-482b-bf87-aba4effc5a7a",
        "cursor": {
          "ref": "1d449607-0ce9-498f-9b72-a96877953a55",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e8a2a5d-71fd-4cc1-973d-4ad706e6b996"
        },
        "item": {
          "id": "a2d2bfb4-3111-482b-bf87-aba4effc5a7a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "49b4c09a-e268-4fb6-9fd8-8c1d9b769c0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d2bfb4-3111-482b-bf87-aba4effc5a7a",
        "cursor": {
          "ref": "1d449607-0ce9-498f-9b72-a96877953a55",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e8a2a5d-71fd-4cc1-973d-4ad706e6b996"
        },
        "item": {
          "id": "a2d2bfb4-3111-482b-bf87-aba4effc5a7a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "49b4c09a-e268-4fb6-9fd8-8c1d9b769c0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3010dddf-5b04-45dd-9e8e-758529fda8e6",
        "cursor": {
          "ref": "3b2903aa-0574-40dc-9b7e-cfc51404102b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "df018716-2881-4f9e-9e8d-0d225fa7acaa"
        },
        "item": {
          "id": "3010dddf-5b04-45dd-9e8e-758529fda8e6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "56e06a10-cfc4-45b9-9351-53fd154c0b79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3010dddf-5b04-45dd-9e8e-758529fda8e6",
        "cursor": {
          "ref": "3b2903aa-0574-40dc-9b7e-cfc51404102b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "df018716-2881-4f9e-9e8d-0d225fa7acaa"
        },
        "item": {
          "id": "3010dddf-5b04-45dd-9e8e-758529fda8e6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "56e06a10-cfc4-45b9-9351-53fd154c0b79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30279c6a-a338-47d9-a05a-ada1aad03911",
        "cursor": {
          "ref": "38e9b1c0-9524-4e61-a12b-3a1040f01b37",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "27ad1ef0-16f5-467b-bb33-9644ce94a578"
        },
        "item": {
          "id": "30279c6a-a338-47d9-a05a-ada1aad03911",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3acebc65-ddc2-4528-9990-de5952c2cfb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30279c6a-a338-47d9-a05a-ada1aad03911",
        "cursor": {
          "ref": "38e9b1c0-9524-4e61-a12b-3a1040f01b37",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "27ad1ef0-16f5-467b-bb33-9644ce94a578"
        },
        "item": {
          "id": "30279c6a-a338-47d9-a05a-ada1aad03911",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3acebc65-ddc2-4528-9990-de5952c2cfb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9fc82f-bfcf-44e1-aae6-d6854ecb9b0a",
        "cursor": {
          "ref": "5c6f5e50-027f-4eb5-a36e-dc456bc19aa6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cd646dea-61c5-47f2-a9f1-4fbb96353840"
        },
        "item": {
          "id": "eb9fc82f-bfcf-44e1-aae6-d6854ecb9b0a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "decb3a79-220f-49cd-989a-d187ac5ccf31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9fc82f-bfcf-44e1-aae6-d6854ecb9b0a",
        "cursor": {
          "ref": "5c6f5e50-027f-4eb5-a36e-dc456bc19aa6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cd646dea-61c5-47f2-a9f1-4fbb96353840"
        },
        "item": {
          "id": "eb9fc82f-bfcf-44e1-aae6-d6854ecb9b0a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "decb3a79-220f-49cd-989a-d187ac5ccf31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726329f9-3b8d-4d0d-86a3-e3cdb5459a53",
        "cursor": {
          "ref": "064b01c8-c25e-43f5-8b1f-710606d716b1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9f81de64-7a9b-442c-8d9d-4f1dac65f403"
        },
        "item": {
          "id": "726329f9-3b8d-4d0d-86a3-e3cdb5459a53",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ff232d5a-8d9f-422e-981a-5407f81e3b50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726329f9-3b8d-4d0d-86a3-e3cdb5459a53",
        "cursor": {
          "ref": "064b01c8-c25e-43f5-8b1f-710606d716b1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9f81de64-7a9b-442c-8d9d-4f1dac65f403"
        },
        "item": {
          "id": "726329f9-3b8d-4d0d-86a3-e3cdb5459a53",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ff232d5a-8d9f-422e-981a-5407f81e3b50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7661f74a-354b-4f78-b576-bf21eebf7d92",
        "cursor": {
          "ref": "22c82a8b-83bc-4ca3-8770-814e968edf78",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "61e09b45-05bc-434b-93f9-be41eef60b09"
        },
        "item": {
          "id": "7661f74a-354b-4f78-b576-bf21eebf7d92",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e67f0ff1-163b-47bc-a930-17c6a5ab24e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7661f74a-354b-4f78-b576-bf21eebf7d92",
        "cursor": {
          "ref": "22c82a8b-83bc-4ca3-8770-814e968edf78",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "61e09b45-05bc-434b-93f9-be41eef60b09"
        },
        "item": {
          "id": "7661f74a-354b-4f78-b576-bf21eebf7d92",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e67f0ff1-163b-47bc-a930-17c6a5ab24e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3741d2-faca-4021-a971-739215228b19",
        "cursor": {
          "ref": "8894c2d3-5837-400f-bd69-c62bc92dfd41",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c6519cdd-5bb3-405e-b4b7-3f962db7d424"
        },
        "item": {
          "id": "2c3741d2-faca-4021-a971-739215228b19",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fdd03873-a957-453e-b3d1-1d7b3bd7c272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3741d2-faca-4021-a971-739215228b19",
        "cursor": {
          "ref": "8894c2d3-5837-400f-bd69-c62bc92dfd41",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c6519cdd-5bb3-405e-b4b7-3f962db7d424"
        },
        "item": {
          "id": "2c3741d2-faca-4021-a971-739215228b19",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fdd03873-a957-453e-b3d1-1d7b3bd7c272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffab9e8-e32e-4cc3-b88c-c4c4d7243b73",
        "cursor": {
          "ref": "4a3c5c46-c67f-43f9-9e8e-81116bd688f0",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "96cf16c8-364d-44ac-841e-f933a9b27167"
        },
        "item": {
          "id": "3ffab9e8-e32e-4cc3-b88c-c4c4d7243b73",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8f7a2a6c-6d94-4380-83fc-a76f0978e9c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffab9e8-e32e-4cc3-b88c-c4c4d7243b73",
        "cursor": {
          "ref": "4a3c5c46-c67f-43f9-9e8e-81116bd688f0",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "96cf16c8-364d-44ac-841e-f933a9b27167"
        },
        "item": {
          "id": "3ffab9e8-e32e-4cc3-b88c-c4c4d7243b73",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8f7a2a6c-6d94-4380-83fc-a76f0978e9c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d396ae5-983a-4d2f-8f8f-833ac1252c3e",
        "cursor": {
          "ref": "94d2f95e-2acf-4b47-8329-81300b6e084b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "97d6f6e8-d08e-4112-a13d-933dc5f553d1"
        },
        "item": {
          "id": "2d396ae5-983a-4d2f-8f8f-833ac1252c3e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "347edead-1ba2-40c5-a368-fa62b6cdbcab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d396ae5-983a-4d2f-8f8f-833ac1252c3e",
        "cursor": {
          "ref": "94d2f95e-2acf-4b47-8329-81300b6e084b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "97d6f6e8-d08e-4112-a13d-933dc5f553d1"
        },
        "item": {
          "id": "2d396ae5-983a-4d2f-8f8f-833ac1252c3e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "347edead-1ba2-40c5-a368-fa62b6cdbcab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d442526-3169-4a86-adfa-23677c40bb8e",
        "cursor": {
          "ref": "2f709692-87c5-4a9c-a66f-5fdfb97d7829",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9760126a-d3fe-4f49-8452-11b0cabd7f71"
        },
        "item": {
          "id": "3d442526-3169-4a86-adfa-23677c40bb8e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e801fb24-89fd-457d-b5df-3bf12e10378a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d442526-3169-4a86-adfa-23677c40bb8e",
        "cursor": {
          "ref": "2f709692-87c5-4a9c-a66f-5fdfb97d7829",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9760126a-d3fe-4f49-8452-11b0cabd7f71"
        },
        "item": {
          "id": "3d442526-3169-4a86-adfa-23677c40bb8e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e801fb24-89fd-457d-b5df-3bf12e10378a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc09727-b458-44bf-9b41-8f1e80156db4",
        "cursor": {
          "ref": "0bcebdb6-03e4-4b40-83a9-74fc05b77175",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "585a8c06-1396-4a28-8a25-9e4398fdcb84"
        },
        "item": {
          "id": "afc09727-b458-44bf-9b41-8f1e80156db4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d483243a-889b-4055-9703-7461b9c84697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc09727-b458-44bf-9b41-8f1e80156db4",
        "cursor": {
          "ref": "0bcebdb6-03e4-4b40-83a9-74fc05b77175",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "585a8c06-1396-4a28-8a25-9e4398fdcb84"
        },
        "item": {
          "id": "afc09727-b458-44bf-9b41-8f1e80156db4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d483243a-889b-4055-9703-7461b9c84697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddddffef-e31d-486f-8cb4-811d0721d3f3",
        "cursor": {
          "ref": "bda8e6f4-94a7-4df4-9388-8b118832d13e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "893d7b4e-01c0-4b43-ac1b-da45fbd22174"
        },
        "item": {
          "id": "ddddffef-e31d-486f-8cb4-811d0721d3f3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3367180a-76d7-40e4-801c-e2f14a13742d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddddffef-e31d-486f-8cb4-811d0721d3f3",
        "cursor": {
          "ref": "bda8e6f4-94a7-4df4-9388-8b118832d13e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "893d7b4e-01c0-4b43-ac1b-da45fbd22174"
        },
        "item": {
          "id": "ddddffef-e31d-486f-8cb4-811d0721d3f3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3367180a-76d7-40e4-801c-e2f14a13742d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2483a3-6a7e-4b0c-85ad-f3a1993fdf44",
        "cursor": {
          "ref": "dbe0cf20-8557-4a64-8293-344de9ee9155",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "376da4d2-3013-4ffb-ba9b-87367d2998b2"
        },
        "item": {
          "id": "1f2483a3-6a7e-4b0c-85ad-f3a1993fdf44",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0518b846-b69d-4c53-8539-fc4ea8f3e1af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2483a3-6a7e-4b0c-85ad-f3a1993fdf44",
        "cursor": {
          "ref": "dbe0cf20-8557-4a64-8293-344de9ee9155",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "376da4d2-3013-4ffb-ba9b-87367d2998b2"
        },
        "item": {
          "id": "1f2483a3-6a7e-4b0c-85ad-f3a1993fdf44",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0518b846-b69d-4c53-8539-fc4ea8f3e1af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d501035-8dd3-4a0f-998d-4af0ece9d4c3",
        "cursor": {
          "ref": "8eedb2bb-ee35-4891-8543-f79e6b868030",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c31b4182-756e-45e6-a1ee-380d6e6d941b"
        },
        "item": {
          "id": "4d501035-8dd3-4a0f-998d-4af0ece9d4c3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8c152222-1085-4a76-997d-f03660648378",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d501035-8dd3-4a0f-998d-4af0ece9d4c3",
        "cursor": {
          "ref": "8eedb2bb-ee35-4891-8543-f79e6b868030",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c31b4182-756e-45e6-a1ee-380d6e6d941b"
        },
        "item": {
          "id": "4d501035-8dd3-4a0f-998d-4af0ece9d4c3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8c152222-1085-4a76-997d-f03660648378",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276a9d90-3c60-4168-a2a2-7a817c89ccb1",
        "cursor": {
          "ref": "67799f03-efc0-4e6d-9095-ac97e5d68ebc",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b63586b8-603b-4683-9202-f3ac1e4fb2c0"
        },
        "item": {
          "id": "276a9d90-3c60-4168-a2a2-7a817c89ccb1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1d2cf211-0f1b-47d4-aa57-a6068bca72ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276a9d90-3c60-4168-a2a2-7a817c89ccb1",
        "cursor": {
          "ref": "67799f03-efc0-4e6d-9095-ac97e5d68ebc",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b63586b8-603b-4683-9202-f3ac1e4fb2c0"
        },
        "item": {
          "id": "276a9d90-3c60-4168-a2a2-7a817c89ccb1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1d2cf211-0f1b-47d4-aa57-a6068bca72ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b519f92-47c8-4e79-86f6-f110c1d68d7d",
        "cursor": {
          "ref": "4262e9ca-562b-42da-a343-bf1cc6a9d72b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f55e5545-e7dd-42ca-aebf-ce941a201797"
        },
        "item": {
          "id": "4b519f92-47c8-4e79-86f6-f110c1d68d7d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1ccecfb2-f7ce-4025-9dad-3c95a76575aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b519f92-47c8-4e79-86f6-f110c1d68d7d",
        "cursor": {
          "ref": "4262e9ca-562b-42da-a343-bf1cc6a9d72b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f55e5545-e7dd-42ca-aebf-ce941a201797"
        },
        "item": {
          "id": "4b519f92-47c8-4e79-86f6-f110c1d68d7d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1ccecfb2-f7ce-4025-9dad-3c95a76575aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fd3f3f-7f1a-4411-aff3-0e265547c739",
        "cursor": {
          "ref": "4d017ebc-5265-4b75-a620-f64c533d9cee",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6bb1f227-c198-4756-901a-3d8d610ce475"
        },
        "item": {
          "id": "85fd3f3f-7f1a-4411-aff3-0e265547c739",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8c0b2427-7801-4fb9-a5ac-d2da824cc4ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fd3f3f-7f1a-4411-aff3-0e265547c739",
        "cursor": {
          "ref": "4d017ebc-5265-4b75-a620-f64c533d9cee",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6bb1f227-c198-4756-901a-3d8d610ce475"
        },
        "item": {
          "id": "85fd3f3f-7f1a-4411-aff3-0e265547c739",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8c0b2427-7801-4fb9-a5ac-d2da824cc4ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e21064d-07e6-4b35-80be-990ba131915d",
        "cursor": {
          "ref": "4c7e366f-002f-4123-b64f-644b21e4bd89",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "73a51982-cc9d-49a1-be97-672e38a999ea"
        },
        "item": {
          "id": "7e21064d-07e6-4b35-80be-990ba131915d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0f37786d-2bec-4873-a3cf-7570fb82cacd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e21064d-07e6-4b35-80be-990ba131915d",
        "cursor": {
          "ref": "4c7e366f-002f-4123-b64f-644b21e4bd89",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "73a51982-cc9d-49a1-be97-672e38a999ea"
        },
        "item": {
          "id": "7e21064d-07e6-4b35-80be-990ba131915d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0f37786d-2bec-4873-a3cf-7570fb82cacd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5045de72-f48e-4c72-ba50-c8f715fe3c17",
        "cursor": {
          "ref": "0eb494f1-6093-4100-81a4-dc07d334572b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8eab8de4-7a83-4732-b14f-33ae98ed028c"
        },
        "item": {
          "id": "5045de72-f48e-4c72-ba50-c8f715fe3c17",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8171c5da-abf4-464f-825b-e3f962d7ad59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5045de72-f48e-4c72-ba50-c8f715fe3c17",
        "cursor": {
          "ref": "0eb494f1-6093-4100-81a4-dc07d334572b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8eab8de4-7a83-4732-b14f-33ae98ed028c"
        },
        "item": {
          "id": "5045de72-f48e-4c72-ba50-c8f715fe3c17",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8171c5da-abf4-464f-825b-e3f962d7ad59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b953dab-ec64-4cd7-8415-e77c21f0b3dd",
        "cursor": {
          "ref": "06a6ab8d-41ee-4416-8a9e-289ef33197fd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f69a75b7-2d3b-45a5-b9eb-74355b78f765"
        },
        "item": {
          "id": "3b953dab-ec64-4cd7-8415-e77c21f0b3dd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "91e8d728-9f2f-410c-94c6-7225c03ecf0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b953dab-ec64-4cd7-8415-e77c21f0b3dd",
        "cursor": {
          "ref": "06a6ab8d-41ee-4416-8a9e-289ef33197fd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f69a75b7-2d3b-45a5-b9eb-74355b78f765"
        },
        "item": {
          "id": "3b953dab-ec64-4cd7-8415-e77c21f0b3dd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "91e8d728-9f2f-410c-94c6-7225c03ecf0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f19b91-b973-41dc-9885-7f5079f221ae",
        "cursor": {
          "ref": "7d49aa86-dad7-4ac0-bc8c-a28f0b285128",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "83fe4179-ae56-4a41-8bd3-babeedf7d7b0"
        },
        "item": {
          "id": "56f19b91-b973-41dc-9885-7f5079f221ae",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f80c59db-5098-4a20-952a-341c4144e5de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f19b91-b973-41dc-9885-7f5079f221ae",
        "cursor": {
          "ref": "7d49aa86-dad7-4ac0-bc8c-a28f0b285128",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "83fe4179-ae56-4a41-8bd3-babeedf7d7b0"
        },
        "item": {
          "id": "56f19b91-b973-41dc-9885-7f5079f221ae",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f80c59db-5098-4a20-952a-341c4144e5de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5458ad1f-30c8-43db-835b-e5a3a1848928",
        "cursor": {
          "ref": "55931c77-b1bd-4589-b04a-6bb8e9d7d3d7",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f3a43e9d-3060-4044-b00b-f78d8a0afe04"
        },
        "item": {
          "id": "5458ad1f-30c8-43db-835b-e5a3a1848928",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a71939a6-37f0-4886-b602-5db10b2bcc24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5458ad1f-30c8-43db-835b-e5a3a1848928",
        "cursor": {
          "ref": "55931c77-b1bd-4589-b04a-6bb8e9d7d3d7",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f3a43e9d-3060-4044-b00b-f78d8a0afe04"
        },
        "item": {
          "id": "5458ad1f-30c8-43db-835b-e5a3a1848928",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a71939a6-37f0-4886-b602-5db10b2bcc24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b8eb9b-5b98-4fa4-b24b-c47e159b224e",
        "cursor": {
          "ref": "c12d920c-cabb-40e4-8d6e-0e0ea8521b86",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0dba8b40-7a42-4f13-96a8-a687a2cdf10a"
        },
        "item": {
          "id": "60b8eb9b-5b98-4fa4-b24b-c47e159b224e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a837f7db-1261-4bec-925f-2754eb5563e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b8eb9b-5b98-4fa4-b24b-c47e159b224e",
        "cursor": {
          "ref": "c12d920c-cabb-40e4-8d6e-0e0ea8521b86",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0dba8b40-7a42-4f13-96a8-a687a2cdf10a"
        },
        "item": {
          "id": "60b8eb9b-5b98-4fa4-b24b-c47e159b224e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a837f7db-1261-4bec-925f-2754eb5563e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0967332-592e-4897-bc1a-a6f1e5bc1f5b",
        "cursor": {
          "ref": "7cfd57b8-e69d-43e1-a6cc-b4e76ad6201d",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9668e30e-64e9-4c00-97dd-0b8e98689ee5"
        },
        "item": {
          "id": "a0967332-592e-4897-bc1a-a6f1e5bc1f5b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e410fc56-7238-4309-8bb0-1e14ea804ce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0967332-592e-4897-bc1a-a6f1e5bc1f5b",
        "cursor": {
          "ref": "7cfd57b8-e69d-43e1-a6cc-b4e76ad6201d",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9668e30e-64e9-4c00-97dd-0b8e98689ee5"
        },
        "item": {
          "id": "a0967332-592e-4897-bc1a-a6f1e5bc1f5b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e410fc56-7238-4309-8bb0-1e14ea804ce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5739c9a5-fa46-4ca5-8908-26c5326a1912",
        "cursor": {
          "ref": "70a73f90-a715-4a0a-b8a2-68d4e7ba6177",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cd81ff11-81b7-4ef7-b468-ae6dbfe91c30"
        },
        "item": {
          "id": "5739c9a5-fa46-4ca5-8908-26c5326a1912",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3370139e-8251-4472-98d0-654dde85746d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5739c9a5-fa46-4ca5-8908-26c5326a1912",
        "cursor": {
          "ref": "70a73f90-a715-4a0a-b8a2-68d4e7ba6177",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cd81ff11-81b7-4ef7-b468-ae6dbfe91c30"
        },
        "item": {
          "id": "5739c9a5-fa46-4ca5-8908-26c5326a1912",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3370139e-8251-4472-98d0-654dde85746d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3791c72a-f101-4d93-8903-7078e8f7d535",
        "cursor": {
          "ref": "ef8d6d6e-f874-41fe-af43-c1c02121f1b6",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1c78128d-adf6-4bc9-bab2-e51c46987475"
        },
        "item": {
          "id": "3791c72a-f101-4d93-8903-7078e8f7d535",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "151942c7-17a7-4c3f-8b9a-23acfc83d81d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3791c72a-f101-4d93-8903-7078e8f7d535",
        "cursor": {
          "ref": "ef8d6d6e-f874-41fe-af43-c1c02121f1b6",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1c78128d-adf6-4bc9-bab2-e51c46987475"
        },
        "item": {
          "id": "3791c72a-f101-4d93-8903-7078e8f7d535",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "151942c7-17a7-4c3f-8b9a-23acfc83d81d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928e0ff0-8599-4432-97cd-8d7058969b58",
        "cursor": {
          "ref": "b3dd7d86-b2f8-47ae-bfe3-9bf5b8beac9b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bbecfcbe-81e2-4e8c-87ce-f2d996c8c701"
        },
        "item": {
          "id": "928e0ff0-8599-4432-97cd-8d7058969b58",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e282f8ee-f4f3-40d1-94bf-32f23367233f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928e0ff0-8599-4432-97cd-8d7058969b58",
        "cursor": {
          "ref": "b3dd7d86-b2f8-47ae-bfe3-9bf5b8beac9b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bbecfcbe-81e2-4e8c-87ce-f2d996c8c701"
        },
        "item": {
          "id": "928e0ff0-8599-4432-97cd-8d7058969b58",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e282f8ee-f4f3-40d1-94bf-32f23367233f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3f481f-7cc3-4478-8306-abfaa28b0e63",
        "cursor": {
          "ref": "b029af9b-b0a0-4601-b71a-bedd8c6786ae",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d3b71789-328d-4080-818e-6084bf4259ed"
        },
        "item": {
          "id": "ce3f481f-7cc3-4478-8306-abfaa28b0e63",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e394d558-e221-4779-a8d2-412fd634ba19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3f481f-7cc3-4478-8306-abfaa28b0e63",
        "cursor": {
          "ref": "b029af9b-b0a0-4601-b71a-bedd8c6786ae",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d3b71789-328d-4080-818e-6084bf4259ed"
        },
        "item": {
          "id": "ce3f481f-7cc3-4478-8306-abfaa28b0e63",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e394d558-e221-4779-a8d2-412fd634ba19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd607947-5cd5-40d7-b993-bc0258b081d7",
        "cursor": {
          "ref": "c9a99a2c-d4fc-4a9d-a4ec-cb90070c58d5",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "30840a53-5519-49c0-b7f4-564ab1f5f955"
        },
        "item": {
          "id": "bd607947-5cd5-40d7-b993-bc0258b081d7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "77a72937-beb1-4ebf-b040-059c2d08abab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd607947-5cd5-40d7-b993-bc0258b081d7",
        "cursor": {
          "ref": "c9a99a2c-d4fc-4a9d-a4ec-cb90070c58d5",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "30840a53-5519-49c0-b7f4-564ab1f5f955"
        },
        "item": {
          "id": "bd607947-5cd5-40d7-b993-bc0258b081d7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "77a72937-beb1-4ebf-b040-059c2d08abab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fdd83a-24e3-4aad-ae0c-a02348e2104d",
        "cursor": {
          "ref": "c477c66f-9d6d-41bd-860b-81d462086caf",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e2afc0aa-f2e2-4d75-9ff4-433d424218fb"
        },
        "item": {
          "id": "41fdd83a-24e3-4aad-ae0c-a02348e2104d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "974e0152-a53f-4096-94c7-ef64820abb73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fdd83a-24e3-4aad-ae0c-a02348e2104d",
        "cursor": {
          "ref": "c477c66f-9d6d-41bd-860b-81d462086caf",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e2afc0aa-f2e2-4d75-9ff4-433d424218fb"
        },
        "item": {
          "id": "41fdd83a-24e3-4aad-ae0c-a02348e2104d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "974e0152-a53f-4096-94c7-ef64820abb73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a1c87c-d380-459b-85fb-411d852163ad",
        "cursor": {
          "ref": "507f48cc-1c1e-4aa3-bd88-256b8fb8d0f7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7f8eab93-5786-4878-a524-0ab0d7114439"
        },
        "item": {
          "id": "84a1c87c-d380-459b-85fb-411d852163ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "33bc074e-5acb-4ece-b668-c08fddb056ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a1c87c-d380-459b-85fb-411d852163ad",
        "cursor": {
          "ref": "507f48cc-1c1e-4aa3-bd88-256b8fb8d0f7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7f8eab93-5786-4878-a524-0ab0d7114439"
        },
        "item": {
          "id": "84a1c87c-d380-459b-85fb-411d852163ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "33bc074e-5acb-4ece-b668-c08fddb056ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5883d8fd-7db7-4809-b48b-4cbc369e661b",
        "cursor": {
          "ref": "83e29e43-5b7e-42a7-8346-ffaf40ffa0df",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d5c06a87-b2de-489d-832c-03d89968a770"
        },
        "item": {
          "id": "5883d8fd-7db7-4809-b48b-4cbc369e661b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0a67943b-cde1-40a4-9b90-eaa1559842c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5883d8fd-7db7-4809-b48b-4cbc369e661b",
        "cursor": {
          "ref": "83e29e43-5b7e-42a7-8346-ffaf40ffa0df",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d5c06a87-b2de-489d-832c-03d89968a770"
        },
        "item": {
          "id": "5883d8fd-7db7-4809-b48b-4cbc369e661b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0a67943b-cde1-40a4-9b90-eaa1559842c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7911459-9ffb-41f4-b8c2-9fb0fc9c8953",
        "cursor": {
          "ref": "2ba5c709-171d-4439-b2a8-924c3dee888c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9ce110ad-3e06-41a1-b9b6-0ad7f92f2f26"
        },
        "item": {
          "id": "c7911459-9ffb-41f4-b8c2-9fb0fc9c8953",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9292c356-704f-4892-9b74-6a6d54f5b9b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7911459-9ffb-41f4-b8c2-9fb0fc9c8953",
        "cursor": {
          "ref": "2ba5c709-171d-4439-b2a8-924c3dee888c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9ce110ad-3e06-41a1-b9b6-0ad7f92f2f26"
        },
        "item": {
          "id": "c7911459-9ffb-41f4-b8c2-9fb0fc9c8953",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9292c356-704f-4892-9b74-6a6d54f5b9b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963c5a76-5573-4653-a052-d5dceeb5bee5",
        "cursor": {
          "ref": "ff008d66-1b66-43c5-b250-cfebcd55496d",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0007b38d-a3ba-449a-bc71-75e18cba6fe3"
        },
        "item": {
          "id": "963c5a76-5573-4653-a052-d5dceeb5bee5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bdc64cf7-cafa-4632-ac40-a985c84d1db3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963c5a76-5573-4653-a052-d5dceeb5bee5",
        "cursor": {
          "ref": "ff008d66-1b66-43c5-b250-cfebcd55496d",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0007b38d-a3ba-449a-bc71-75e18cba6fe3"
        },
        "item": {
          "id": "963c5a76-5573-4653-a052-d5dceeb5bee5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bdc64cf7-cafa-4632-ac40-a985c84d1db3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d3ca41-50d2-4ab6-8805-0da26d5d7d5e",
        "cursor": {
          "ref": "8f4ae57d-7328-4eea-a51f-5a4d9bbdc94f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f38b3654-f793-4112-8dbe-56eed057d048"
        },
        "item": {
          "id": "17d3ca41-50d2-4ab6-8805-0da26d5d7d5e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "abd186ca-c6a4-4b39-98ee-3f8d7a635c39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d3ca41-50d2-4ab6-8805-0da26d5d7d5e",
        "cursor": {
          "ref": "8f4ae57d-7328-4eea-a51f-5a4d9bbdc94f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f38b3654-f793-4112-8dbe-56eed057d048"
        },
        "item": {
          "id": "17d3ca41-50d2-4ab6-8805-0da26d5d7d5e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "abd186ca-c6a4-4b39-98ee-3f8d7a635c39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b8367c-260d-41b7-91ce-30009379046b",
        "cursor": {
          "ref": "a86508bb-f72f-48fc-85fc-fa2c4a35427c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5ba7748e-1134-4431-b9bd-2a43efb7e228"
        },
        "item": {
          "id": "f5b8367c-260d-41b7-91ce-30009379046b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2a49a729-795d-4c63-8259-d58a5c83442b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b8367c-260d-41b7-91ce-30009379046b",
        "cursor": {
          "ref": "a86508bb-f72f-48fc-85fc-fa2c4a35427c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5ba7748e-1134-4431-b9bd-2a43efb7e228"
        },
        "item": {
          "id": "f5b8367c-260d-41b7-91ce-30009379046b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2a49a729-795d-4c63-8259-d58a5c83442b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e486daf6-80c2-4c8f-82c5-82eff5fed2d3",
        "cursor": {
          "ref": "961993ee-e169-4e59-bcb7-8937383ecff6",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b300e5c3-7771-4e90-9f1c-2a2438629807"
        },
        "item": {
          "id": "e486daf6-80c2-4c8f-82c5-82eff5fed2d3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c9a0f439-0ca7-4693-9b2e-21c3b453dacb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e486daf6-80c2-4c8f-82c5-82eff5fed2d3",
        "cursor": {
          "ref": "961993ee-e169-4e59-bcb7-8937383ecff6",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b300e5c3-7771-4e90-9f1c-2a2438629807"
        },
        "item": {
          "id": "e486daf6-80c2-4c8f-82c5-82eff5fed2d3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c9a0f439-0ca7-4693-9b2e-21c3b453dacb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc7a74b-c6aa-441a-8398-685a0e414566",
        "cursor": {
          "ref": "0640ad59-3940-4978-9ca7-49f3419f20ba",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0dabcbe1-2b16-499f-9f33-88b4a3db6773"
        },
        "item": {
          "id": "9cc7a74b-c6aa-441a-8398-685a0e414566",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7936cfb7-8d15-44f0-bb18-741c24957404",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc7a74b-c6aa-441a-8398-685a0e414566",
        "cursor": {
          "ref": "0640ad59-3940-4978-9ca7-49f3419f20ba",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0dabcbe1-2b16-499f-9f33-88b4a3db6773"
        },
        "item": {
          "id": "9cc7a74b-c6aa-441a-8398-685a0e414566",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7936cfb7-8d15-44f0-bb18-741c24957404",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9acc4c-f646-4a06-9867-63991073c43d",
        "cursor": {
          "ref": "b9b5ceed-ca91-44da-a506-d6bf3148f594",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "47783977-5a59-40ab-aba3-ce4e9109aa09"
        },
        "item": {
          "id": "6b9acc4c-f646-4a06-9867-63991073c43d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "033a84ae-34b2-4b9f-b3bb-742e13885661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9acc4c-f646-4a06-9867-63991073c43d",
        "cursor": {
          "ref": "b9b5ceed-ca91-44da-a506-d6bf3148f594",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "47783977-5a59-40ab-aba3-ce4e9109aa09"
        },
        "item": {
          "id": "6b9acc4c-f646-4a06-9867-63991073c43d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "033a84ae-34b2-4b9f-b3bb-742e13885661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6879fda2-440e-440b-b6c3-038c0d89e6e3",
        "cursor": {
          "ref": "d169ca6d-e4e4-400a-9f55-c8ff568cf945",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3a0333fe-fc14-424f-b434-24513d50b8bb"
        },
        "item": {
          "id": "6879fda2-440e-440b-b6c3-038c0d89e6e3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "baa5b01c-c3ab-4e9e-b907-b1c77d50e531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6879fda2-440e-440b-b6c3-038c0d89e6e3",
        "cursor": {
          "ref": "d169ca6d-e4e4-400a-9f55-c8ff568cf945",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3a0333fe-fc14-424f-b434-24513d50b8bb"
        },
        "item": {
          "id": "6879fda2-440e-440b-b6c3-038c0d89e6e3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "baa5b01c-c3ab-4e9e-b907-b1c77d50e531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810b8a41-3e8f-4779-83ee-024408f8dd43",
        "cursor": {
          "ref": "983b5dac-91cb-491f-8917-39f9be5d1a1e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1ed3e466-6e50-498e-9439-936446061c3b"
        },
        "item": {
          "id": "810b8a41-3e8f-4779-83ee-024408f8dd43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9134e255-b7fa-409a-a8d0-6a4f10a73641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810b8a41-3e8f-4779-83ee-024408f8dd43",
        "cursor": {
          "ref": "983b5dac-91cb-491f-8917-39f9be5d1a1e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1ed3e466-6e50-498e-9439-936446061c3b"
        },
        "item": {
          "id": "810b8a41-3e8f-4779-83ee-024408f8dd43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9134e255-b7fa-409a-a8d0-6a4f10a73641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d206551-62ef-417e-87d0-6e80c9e6a0fa",
        "cursor": {
          "ref": "90ec94fd-fa21-4381-9ce8-58a55e846b86",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "23e2673b-8bfa-46d0-b785-d5924f311259"
        },
        "item": {
          "id": "7d206551-62ef-417e-87d0-6e80c9e6a0fa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "08e6f2c0-cf76-4cb1-835c-436245dae371",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d206551-62ef-417e-87d0-6e80c9e6a0fa",
        "cursor": {
          "ref": "90ec94fd-fa21-4381-9ce8-58a55e846b86",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "23e2673b-8bfa-46d0-b785-d5924f311259"
        },
        "item": {
          "id": "7d206551-62ef-417e-87d0-6e80c9e6a0fa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "08e6f2c0-cf76-4cb1-835c-436245dae371",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea0c189-b2ab-47b1-8e0c-b2898bfcb625",
        "cursor": {
          "ref": "f24e9094-0610-4b03-950d-8340e3d1fb2d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "be5fa3fb-28cc-4011-a6a2-2ec79951246f"
        },
        "item": {
          "id": "5ea0c189-b2ab-47b1-8e0c-b2898bfcb625",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fca20c48-35e4-4a4b-8eb5-1ec864ba3ea1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea0c189-b2ab-47b1-8e0c-b2898bfcb625",
        "cursor": {
          "ref": "f24e9094-0610-4b03-950d-8340e3d1fb2d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "be5fa3fb-28cc-4011-a6a2-2ec79951246f"
        },
        "item": {
          "id": "5ea0c189-b2ab-47b1-8e0c-b2898bfcb625",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fca20c48-35e4-4a4b-8eb5-1ec864ba3ea1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258f1d7c-9547-4a00-9b9b-058ae09cd14c",
        "cursor": {
          "ref": "f5b63778-ab3f-40f7-913d-b2871a5c1a7d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9a8dab16-1a8e-4e26-9b7b-75da3b0a123c"
        },
        "item": {
          "id": "258f1d7c-9547-4a00-9b9b-058ae09cd14c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b645c83-8c0c-4bc2-9858-10e0e2f0259e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258f1d7c-9547-4a00-9b9b-058ae09cd14c",
        "cursor": {
          "ref": "f5b63778-ab3f-40f7-913d-b2871a5c1a7d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9a8dab16-1a8e-4e26-9b7b-75da3b0a123c"
        },
        "item": {
          "id": "258f1d7c-9547-4a00-9b9b-058ae09cd14c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b645c83-8c0c-4bc2-9858-10e0e2f0259e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09428708-35e1-4f64-a220-014a12155cba",
        "cursor": {
          "ref": "86843188-6932-450e-a133-3984210040d9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8d0bf9d2-fd2c-4231-aa6c-a434361d836a"
        },
        "item": {
          "id": "09428708-35e1-4f64-a220-014a12155cba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fd5a43e7-8304-419e-9456-be168ddc799e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09428708-35e1-4f64-a220-014a12155cba",
        "cursor": {
          "ref": "86843188-6932-450e-a133-3984210040d9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8d0bf9d2-fd2c-4231-aa6c-a434361d836a"
        },
        "item": {
          "id": "09428708-35e1-4f64-a220-014a12155cba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fd5a43e7-8304-419e-9456-be168ddc799e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5bd75b-ca4c-4573-9e6f-e54911b4dcda",
        "cursor": {
          "ref": "e7a7830e-4fca-4046-9ed3-d6bfcc18aa38",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "047e9bf2-a711-442a-88ac-83a46c521bdb"
        },
        "item": {
          "id": "2e5bd75b-ca4c-4573-9e6f-e54911b4dcda",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "484ab885-09db-4feb-bd78-3c9a6053d7db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5bd75b-ca4c-4573-9e6f-e54911b4dcda",
        "cursor": {
          "ref": "e7a7830e-4fca-4046-9ed3-d6bfcc18aa38",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "047e9bf2-a711-442a-88ac-83a46c521bdb"
        },
        "item": {
          "id": "2e5bd75b-ca4c-4573-9e6f-e54911b4dcda",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "484ab885-09db-4feb-bd78-3c9a6053d7db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50738576-a818-4c1f-b58b-a3f4925b1947",
        "cursor": {
          "ref": "400e5763-1346-4350-8c37-c759af2cc1ae",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "42a94838-af26-49e5-937b-5240381c2d6d"
        },
        "item": {
          "id": "50738576-a818-4c1f-b58b-a3f4925b1947",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "931372f1-f2d1-472a-a5bf-bcf4c60f7a6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50738576-a818-4c1f-b58b-a3f4925b1947",
        "cursor": {
          "ref": "400e5763-1346-4350-8c37-c759af2cc1ae",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "42a94838-af26-49e5-937b-5240381c2d6d"
        },
        "item": {
          "id": "50738576-a818-4c1f-b58b-a3f4925b1947",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "931372f1-f2d1-472a-a5bf-bcf4c60f7a6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2dce8b-8e11-4542-8286-f144a37ddb1d",
        "cursor": {
          "ref": "69178f82-b985-4ef7-855c-89839f712fbd",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "288c4d0a-cdcd-466a-bfae-160e3052e59b"
        },
        "item": {
          "id": "1a2dce8b-8e11-4542-8286-f144a37ddb1d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a085baf3-7598-4d1f-8a11-3d1b5b3d2a47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2dce8b-8e11-4542-8286-f144a37ddb1d",
        "cursor": {
          "ref": "69178f82-b985-4ef7-855c-89839f712fbd",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "288c4d0a-cdcd-466a-bfae-160e3052e59b"
        },
        "item": {
          "id": "1a2dce8b-8e11-4542-8286-f144a37ddb1d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a085baf3-7598-4d1f-8a11-3d1b5b3d2a47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be8c43a-1904-4847-8942-2e38a0c5cfac",
        "cursor": {
          "ref": "346f0fe4-a10a-49c1-b440-12eb827b7c48",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eca9c061-4fd8-4939-bccb-246b49086225"
        },
        "item": {
          "id": "7be8c43a-1904-4847-8942-2e38a0c5cfac",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f07aab0e-fc79-48ff-95f1-fb4f2185ce27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be8c43a-1904-4847-8942-2e38a0c5cfac",
        "cursor": {
          "ref": "346f0fe4-a10a-49c1-b440-12eb827b7c48",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eca9c061-4fd8-4939-bccb-246b49086225"
        },
        "item": {
          "id": "7be8c43a-1904-4847-8942-2e38a0c5cfac",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f07aab0e-fc79-48ff-95f1-fb4f2185ce27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69e0d92-12fa-40a2-b223-f9d858bb878a",
        "cursor": {
          "ref": "b5627ac0-fe11-4b45-9bf9-bbb49554c5c8",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e9f24fd2-8b57-42b7-9e15-cb690004f3dc"
        },
        "item": {
          "id": "e69e0d92-12fa-40a2-b223-f9d858bb878a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3b718b6b-8e6f-474b-a5fa-c3868165c5c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69e0d92-12fa-40a2-b223-f9d858bb878a",
        "cursor": {
          "ref": "b5627ac0-fe11-4b45-9bf9-bbb49554c5c8",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e9f24fd2-8b57-42b7-9e15-cb690004f3dc"
        },
        "item": {
          "id": "e69e0d92-12fa-40a2-b223-f9d858bb878a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3b718b6b-8e6f-474b-a5fa-c3868165c5c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ad7698-df95-4a20-9d24-59cc43a3feb9",
        "cursor": {
          "ref": "6aacfb74-e225-4522-a693-a03de8ff3196",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7af0905c-5448-4b3c-8b43-54463749ff73"
        },
        "item": {
          "id": "30ad7698-df95-4a20-9d24-59cc43a3feb9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "79412068-d26a-4d1f-aab2-e07e27050365",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ad7698-df95-4a20-9d24-59cc43a3feb9",
        "cursor": {
          "ref": "6aacfb74-e225-4522-a693-a03de8ff3196",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7af0905c-5448-4b3c-8b43-54463749ff73"
        },
        "item": {
          "id": "30ad7698-df95-4a20-9d24-59cc43a3feb9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "79412068-d26a-4d1f-aab2-e07e27050365",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3dbdd0-6007-4c96-adae-86a269f9beb8",
        "cursor": {
          "ref": "0b3a753a-9267-425e-b2cd-4d117a1f51b3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9372a8d1-a206-4a55-8de2-cb6ada72c3ae"
        },
        "item": {
          "id": "ec3dbdd0-6007-4c96-adae-86a269f9beb8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3005a1dd-f7f1-4356-9bc2-1584a6b81314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3dbdd0-6007-4c96-adae-86a269f9beb8",
        "cursor": {
          "ref": "0b3a753a-9267-425e-b2cd-4d117a1f51b3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9372a8d1-a206-4a55-8de2-cb6ada72c3ae"
        },
        "item": {
          "id": "ec3dbdd0-6007-4c96-adae-86a269f9beb8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3005a1dd-f7f1-4356-9bc2-1584a6b81314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38508d7e-e650-4d0d-92bc-bba87b1d1f37",
        "cursor": {
          "ref": "5a5f98e1-7dc3-4afd-b40e-b712c0713f12",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "56bcf119-6fc0-44a7-8bcb-cb72f0790f36"
        },
        "item": {
          "id": "38508d7e-e650-4d0d-92bc-bba87b1d1f37",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2ba037ce-9f41-43b6-8d67-20b98bc3ca36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38508d7e-e650-4d0d-92bc-bba87b1d1f37",
        "cursor": {
          "ref": "5a5f98e1-7dc3-4afd-b40e-b712c0713f12",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "56bcf119-6fc0-44a7-8bcb-cb72f0790f36"
        },
        "item": {
          "id": "38508d7e-e650-4d0d-92bc-bba87b1d1f37",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2ba037ce-9f41-43b6-8d67-20b98bc3ca36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0559151f-255c-463c-bd02-bdd55f64ee2c",
        "cursor": {
          "ref": "f6566295-9e2b-4b2a-998f-fb101069925a",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "286aca33-a158-4cbd-9983-ed035e709231"
        },
        "item": {
          "id": "0559151f-255c-463c-bd02-bdd55f64ee2c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "da77ce93-d2b6-486a-a13b-261cf95fcde8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0559151f-255c-463c-bd02-bdd55f64ee2c",
        "cursor": {
          "ref": "f6566295-9e2b-4b2a-998f-fb101069925a",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "286aca33-a158-4cbd-9983-ed035e709231"
        },
        "item": {
          "id": "0559151f-255c-463c-bd02-bdd55f64ee2c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "da77ce93-d2b6-486a-a13b-261cf95fcde8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f54fb68-e77a-49fe-97ca-0a3a62b0288f",
        "cursor": {
          "ref": "b049ebb4-f2b2-4c50-b4de-459f5d2fb6b0",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e9ce20cb-6223-4670-b5c7-5b04dce2582d"
        },
        "item": {
          "id": "2f54fb68-e77a-49fe-97ca-0a3a62b0288f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "50fb253c-152e-4bcd-b2ea-614cca201697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f54fb68-e77a-49fe-97ca-0a3a62b0288f",
        "cursor": {
          "ref": "b049ebb4-f2b2-4c50-b4de-459f5d2fb6b0",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e9ce20cb-6223-4670-b5c7-5b04dce2582d"
        },
        "item": {
          "id": "2f54fb68-e77a-49fe-97ca-0a3a62b0288f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "50fb253c-152e-4bcd-b2ea-614cca201697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801e7d3e-e57c-4c5e-9abb-aab157dbddb1",
        "cursor": {
          "ref": "e8f3a0ec-771b-43f8-b3ff-ea1f8f15243b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1c7264c8-8be1-46a1-8099-b88743ec061b"
        },
        "item": {
          "id": "801e7d3e-e57c-4c5e-9abb-aab157dbddb1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "89733f79-9aaf-49c0-a125-162ce9d52208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801e7d3e-e57c-4c5e-9abb-aab157dbddb1",
        "cursor": {
          "ref": "e8f3a0ec-771b-43f8-b3ff-ea1f8f15243b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1c7264c8-8be1-46a1-8099-b88743ec061b"
        },
        "item": {
          "id": "801e7d3e-e57c-4c5e-9abb-aab157dbddb1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "89733f79-9aaf-49c0-a125-162ce9d52208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa1f7e4-9a40-4348-bb4f-c8fbbae8a4dc",
        "cursor": {
          "ref": "9f54199b-30bc-416c-b212-4d1d8ab99d41",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f3581ba1-c671-48b8-9d91-2bc63c4f3367"
        },
        "item": {
          "id": "2fa1f7e4-9a40-4348-bb4f-c8fbbae8a4dc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2b0ceaab-9ab5-4525-b142-b839f47cfd9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa1f7e4-9a40-4348-bb4f-c8fbbae8a4dc",
        "cursor": {
          "ref": "9f54199b-30bc-416c-b212-4d1d8ab99d41",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f3581ba1-c671-48b8-9d91-2bc63c4f3367"
        },
        "item": {
          "id": "2fa1f7e4-9a40-4348-bb4f-c8fbbae8a4dc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2b0ceaab-9ab5-4525-b142-b839f47cfd9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2b1b0d-2384-4ca8-8c27-05c3db9f6a5a",
        "cursor": {
          "ref": "7e75b9a8-3ec2-409d-b25b-d29a0525b609",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "57b305b7-2eb9-4fe0-bef4-a4785ed0db95"
        },
        "item": {
          "id": "3e2b1b0d-2384-4ca8-8c27-05c3db9f6a5a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3c47ee7b-4ad1-4087-8730-23e18d04dafa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2b1b0d-2384-4ca8-8c27-05c3db9f6a5a",
        "cursor": {
          "ref": "7e75b9a8-3ec2-409d-b25b-d29a0525b609",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "57b305b7-2eb9-4fe0-bef4-a4785ed0db95"
        },
        "item": {
          "id": "3e2b1b0d-2384-4ca8-8c27-05c3db9f6a5a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3c47ee7b-4ad1-4087-8730-23e18d04dafa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4563a2-d8fd-41af-8d37-35725ae8e26d",
        "cursor": {
          "ref": "bf189e8e-7034-4128-9767-904dba752f7a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a7c9fb09-eb45-4f47-b843-8ba7da5b1090"
        },
        "item": {
          "id": "ef4563a2-d8fd-41af-8d37-35725ae8e26d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a8f58966-7ffc-46d1-901e-341d18240b3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4563a2-d8fd-41af-8d37-35725ae8e26d",
        "cursor": {
          "ref": "bf189e8e-7034-4128-9767-904dba752f7a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a7c9fb09-eb45-4f47-b843-8ba7da5b1090"
        },
        "item": {
          "id": "ef4563a2-d8fd-41af-8d37-35725ae8e26d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a8f58966-7ffc-46d1-901e-341d18240b3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47bde21-2f78-460e-9d79-1d39c32a11ca",
        "cursor": {
          "ref": "b3071076-22a7-4eff-88d1-0eb76c31dee4",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d838d552-2637-4f63-b3a4-2736cce08bdc"
        },
        "item": {
          "id": "d47bde21-2f78-460e-9d79-1d39c32a11ca",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4392713f-482c-4afc-9649-b1b898d76d4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47bde21-2f78-460e-9d79-1d39c32a11ca",
        "cursor": {
          "ref": "b3071076-22a7-4eff-88d1-0eb76c31dee4",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d838d552-2637-4f63-b3a4-2736cce08bdc"
        },
        "item": {
          "id": "d47bde21-2f78-460e-9d79-1d39c32a11ca",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4392713f-482c-4afc-9649-b1b898d76d4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beaf7f97-2f23-4bd7-85dd-4a5ea8928c3e",
        "cursor": {
          "ref": "15de5c0a-02e2-4ca5-9d85-0ff26233b9e2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "099a87f7-6d4d-4389-b5e7-aa67797932d5"
        },
        "item": {
          "id": "beaf7f97-2f23-4bd7-85dd-4a5ea8928c3e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5eefaec5-f3f3-4c62-b39e-3bf1546ecffb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beaf7f97-2f23-4bd7-85dd-4a5ea8928c3e",
        "cursor": {
          "ref": "15de5c0a-02e2-4ca5-9d85-0ff26233b9e2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "099a87f7-6d4d-4389-b5e7-aa67797932d5"
        },
        "item": {
          "id": "beaf7f97-2f23-4bd7-85dd-4a5ea8928c3e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5eefaec5-f3f3-4c62-b39e-3bf1546ecffb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c0fa13-4758-49cf-992b-5f79895d03b9",
        "cursor": {
          "ref": "35dbd02f-b04d-4d96-9bcd-518a761fac98",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "877602f2-d01f-4392-a237-077eb4ffceae"
        },
        "item": {
          "id": "79c0fa13-4758-49cf-992b-5f79895d03b9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "679a5274-3360-4da4-83af-3adba46b27a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c0fa13-4758-49cf-992b-5f79895d03b9",
        "cursor": {
          "ref": "35dbd02f-b04d-4d96-9bcd-518a761fac98",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "877602f2-d01f-4392-a237-077eb4ffceae"
        },
        "item": {
          "id": "79c0fa13-4758-49cf-992b-5f79895d03b9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "679a5274-3360-4da4-83af-3adba46b27a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236ad8a7-5f1c-447e-b7cd-de383449ff2a",
        "cursor": {
          "ref": "128b2f15-0ecf-45fd-b6dc-c0f8bd95f8d5",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "339cfd3a-b668-449e-8a9e-545004076043"
        },
        "item": {
          "id": "236ad8a7-5f1c-447e-b7cd-de383449ff2a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5f295a5c-4f04-4c93-8196-d5e1729fb8ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236ad8a7-5f1c-447e-b7cd-de383449ff2a",
        "cursor": {
          "ref": "128b2f15-0ecf-45fd-b6dc-c0f8bd95f8d5",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "339cfd3a-b668-449e-8a9e-545004076043"
        },
        "item": {
          "id": "236ad8a7-5f1c-447e-b7cd-de383449ff2a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5f295a5c-4f04-4c93-8196-d5e1729fb8ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912e59b9-a40e-4b2d-abb7-e16fabfd7ca8",
        "cursor": {
          "ref": "1c77006d-3fe7-472c-bba5-605e0c3dc858",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6a1078c8-a078-43f5-8ad1-20e391a3a5dc"
        },
        "item": {
          "id": "912e59b9-a40e-4b2d-abb7-e16fabfd7ca8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ad60736e-e4fb-44da-bf3f-444eb3522184",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912e59b9-a40e-4b2d-abb7-e16fabfd7ca8",
        "cursor": {
          "ref": "1c77006d-3fe7-472c-bba5-605e0c3dc858",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6a1078c8-a078-43f5-8ad1-20e391a3a5dc"
        },
        "item": {
          "id": "912e59b9-a40e-4b2d-abb7-e16fabfd7ca8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ad60736e-e4fb-44da-bf3f-444eb3522184",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179f913-79e4-48b0-88ac-a4d11f1ab118",
        "cursor": {
          "ref": "373a9595-a6c1-4ce0-b7b0-70620574faf0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c0bdf7b5-b228-4dfc-8953-ee0c13840a81"
        },
        "item": {
          "id": "2179f913-79e4-48b0-88ac-a4d11f1ab118",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ebe6c828-b848-4b91-bef7-35d82fc2e3a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179f913-79e4-48b0-88ac-a4d11f1ab118",
        "cursor": {
          "ref": "373a9595-a6c1-4ce0-b7b0-70620574faf0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c0bdf7b5-b228-4dfc-8953-ee0c13840a81"
        },
        "item": {
          "id": "2179f913-79e4-48b0-88ac-a4d11f1ab118",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ebe6c828-b848-4b91-bef7-35d82fc2e3a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5aef5a-4d5d-409f-8029-4e243b4fe9ed",
        "cursor": {
          "ref": "21264449-78a3-44e1-9f62-754d11c7a5a3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "69736769-1c35-442a-aabe-8c46e6832941"
        },
        "item": {
          "id": "5a5aef5a-4d5d-409f-8029-4e243b4fe9ed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "552e364d-6916-4613-96e5-28a085183d50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5aef5a-4d5d-409f-8029-4e243b4fe9ed",
        "cursor": {
          "ref": "21264449-78a3-44e1-9f62-754d11c7a5a3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "69736769-1c35-442a-aabe-8c46e6832941"
        },
        "item": {
          "id": "5a5aef5a-4d5d-409f-8029-4e243b4fe9ed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "552e364d-6916-4613-96e5-28a085183d50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7a60bf-2e86-47a7-b7c0-1933bc2761a0",
        "cursor": {
          "ref": "b12f9bd9-171e-4ef3-9e19-8e98da18541a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6ded6a3d-8267-4073-96ba-fa5767f6bf0d"
        },
        "item": {
          "id": "6e7a60bf-2e86-47a7-b7c0-1933bc2761a0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7a6075b2-51fc-4cb8-b0f4-3008551af5ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7a60bf-2e86-47a7-b7c0-1933bc2761a0",
        "cursor": {
          "ref": "b12f9bd9-171e-4ef3-9e19-8e98da18541a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6ded6a3d-8267-4073-96ba-fa5767f6bf0d"
        },
        "item": {
          "id": "6e7a60bf-2e86-47a7-b7c0-1933bc2761a0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7a6075b2-51fc-4cb8-b0f4-3008551af5ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462a4e4c-fcd1-4ccd-93e3-7f0ac0802055",
        "cursor": {
          "ref": "7af8dc2e-887d-499b-9c2d-aed725abba0a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fcf65148-a8c4-4542-a829-5553e72c7c97"
        },
        "item": {
          "id": "462a4e4c-fcd1-4ccd-93e3-7f0ac0802055",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0c122ce6-c803-4cf9-8353-03ed33af3653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462a4e4c-fcd1-4ccd-93e3-7f0ac0802055",
        "cursor": {
          "ref": "7af8dc2e-887d-499b-9c2d-aed725abba0a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fcf65148-a8c4-4542-a829-5553e72c7c97"
        },
        "item": {
          "id": "462a4e4c-fcd1-4ccd-93e3-7f0ac0802055",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0c122ce6-c803-4cf9-8353-03ed33af3653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d562b5-308d-4bb0-800e-1ab94fc06dad",
        "cursor": {
          "ref": "f1c049b4-62f7-4d13-9193-76a4ac1f85d5",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "47790c3f-6445-4696-a052-f5ad00540cd8"
        },
        "item": {
          "id": "46d562b5-308d-4bb0-800e-1ab94fc06dad",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "13f1b9c9-5a2c-4efe-b88f-cb7683c4fbdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d562b5-308d-4bb0-800e-1ab94fc06dad",
        "cursor": {
          "ref": "f1c049b4-62f7-4d13-9193-76a4ac1f85d5",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "47790c3f-6445-4696-a052-f5ad00540cd8"
        },
        "item": {
          "id": "46d562b5-308d-4bb0-800e-1ab94fc06dad",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "13f1b9c9-5a2c-4efe-b88f-cb7683c4fbdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ac10bd-69f1-460c-a934-8b82ab262d80",
        "cursor": {
          "ref": "dbe5a0b3-053c-4006-806c-e0a2e7d6385f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4ed04783-82d0-4032-90df-2a6a794dc412"
        },
        "item": {
          "id": "e3ac10bd-69f1-460c-a934-8b82ab262d80",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "431fc890-3916-490c-97cb-3bceef82f1c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ac10bd-69f1-460c-a934-8b82ab262d80",
        "cursor": {
          "ref": "dbe5a0b3-053c-4006-806c-e0a2e7d6385f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4ed04783-82d0-4032-90df-2a6a794dc412"
        },
        "item": {
          "id": "e3ac10bd-69f1-460c-a934-8b82ab262d80",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "431fc890-3916-490c-97cb-3bceef82f1c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6310a8-933c-4387-bbf1-99725666bdb7",
        "cursor": {
          "ref": "11018bd9-cff2-41f2-b814-6d481e180e3f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2fd2d376-333b-4373-80e1-bedadc829a75"
        },
        "item": {
          "id": "4d6310a8-933c-4387-bbf1-99725666bdb7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e417639c-b77f-42af-b0bf-e2265577a62d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6310a8-933c-4387-bbf1-99725666bdb7",
        "cursor": {
          "ref": "11018bd9-cff2-41f2-b814-6d481e180e3f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2fd2d376-333b-4373-80e1-bedadc829a75"
        },
        "item": {
          "id": "4d6310a8-933c-4387-bbf1-99725666bdb7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e417639c-b77f-42af-b0bf-e2265577a62d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7da1fb-5d10-4479-8b02-26b2934951a9",
        "cursor": {
          "ref": "340eaae8-082f-40a6-9b7e-b8a7a098ed6a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cf379dd9-60f8-492e-a275-d0694b19c6f9"
        },
        "item": {
          "id": "6d7da1fb-5d10-4479-8b02-26b2934951a9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e1264466-3a08-47c0-aae9-51e391a37eea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7da1fb-5d10-4479-8b02-26b2934951a9",
        "cursor": {
          "ref": "340eaae8-082f-40a6-9b7e-b8a7a098ed6a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cf379dd9-60f8-492e-a275-d0694b19c6f9"
        },
        "item": {
          "id": "6d7da1fb-5d10-4479-8b02-26b2934951a9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e1264466-3a08-47c0-aae9-51e391a37eea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374791bc-b89a-4195-895e-d85bb8cac7ff",
        "cursor": {
          "ref": "928e9a3d-bd98-495b-ac4c-6b0bfbc18fd8",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ba218337-c7d8-4921-af01-edd8980366ed"
        },
        "item": {
          "id": "374791bc-b89a-4195-895e-d85bb8cac7ff",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4a2ab0b9-f775-402e-b98b-50287b34f182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374791bc-b89a-4195-895e-d85bb8cac7ff",
        "cursor": {
          "ref": "928e9a3d-bd98-495b-ac4c-6b0bfbc18fd8",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ba218337-c7d8-4921-af01-edd8980366ed"
        },
        "item": {
          "id": "374791bc-b89a-4195-895e-d85bb8cac7ff",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4a2ab0b9-f775-402e-b98b-50287b34f182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b8b340-ac87-42ca-a7b0-a7ac4950a60b",
        "cursor": {
          "ref": "2a61d667-7354-4b57-a6c0-886b2e508a1f",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "093c38fd-3c58-408d-ac09-1c12e624bc88"
        },
        "item": {
          "id": "e2b8b340-ac87-42ca-a7b0-a7ac4950a60b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8f6eb3d4-b9c7-427d-9943-3342b263d222",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e2b8b340-ac87-42ca-a7b0-a7ac4950a60b",
        "cursor": {
          "ref": "2a61d667-7354-4b57-a6c0-886b2e508a1f",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "093c38fd-3c58-408d-ac09-1c12e624bc88"
        },
        "item": {
          "id": "e2b8b340-ac87-42ca-a7b0-a7ac4950a60b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8f6eb3d4-b9c7-427d-9943-3342b263d222",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e96b1f46-b2af-456c-8254-6b301566fe51",
        "cursor": {
          "ref": "10848b87-5f10-42c6-9655-708e5143087b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "334f4ec3-69b5-4aae-b4ca-ce7becbe7ca9"
        },
        "item": {
          "id": "e96b1f46-b2af-456c-8254-6b301566fe51",
          "name": "credentials_issue"
        },
        "response": {
          "id": "769bf474-77b2-4d7b-854f-4c376f889019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "e96b1f46-b2af-456c-8254-6b301566fe51",
        "cursor": {
          "ref": "10848b87-5f10-42c6-9655-708e5143087b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "334f4ec3-69b5-4aae-b4ca-ce7becbe7ca9"
        },
        "item": {
          "id": "e96b1f46-b2af-456c-8254-6b301566fe51",
          "name": "credentials_issue"
        },
        "response": {
          "id": "769bf474-77b2-4d7b-854f-4c376f889019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "5005ff1a-4f82-4ef3-bcc1-bb3aa5edb114",
        "cursor": {
          "ref": "df6bbced-577b-4bf0-be6c-be58b062fbbd",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b9b50fc3-344a-446b-8b6c-42c63b4b1f1f"
        },
        "item": {
          "id": "5005ff1a-4f82-4ef3-bcc1-bb3aa5edb114",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "830cb7cc-e3dd-4f1f-81e2-701c18d8e681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "5005ff1a-4f82-4ef3-bcc1-bb3aa5edb114",
        "cursor": {
          "ref": "df6bbced-577b-4bf0-be6c-be58b062fbbd",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b9b50fc3-344a-446b-8b6c-42c63b4b1f1f"
        },
        "item": {
          "id": "5005ff1a-4f82-4ef3-bcc1-bb3aa5edb114",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "830cb7cc-e3dd-4f1f-81e2-701c18d8e681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "ed4a49f1-90a2-4018-9b7d-290dcfde1b6e",
        "cursor": {
          "ref": "9dc4404e-d413-4bb3-afcc-5790bca7cc06",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1ba60093-56e3-4718-bccd-c5c1b6a8f9cc"
        },
        "item": {
          "id": "ed4a49f1-90a2-4018-9b7d-290dcfde1b6e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "af0cb87f-f073-4ac5-9ce8-5f04aaf056d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ed4a49f1-90a2-4018-9b7d-290dcfde1b6e",
        "cursor": {
          "ref": "9dc4404e-d413-4bb3-afcc-5790bca7cc06",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1ba60093-56e3-4718-bccd-c5c1b6a8f9cc"
        },
        "item": {
          "id": "ed4a49f1-90a2-4018-9b7d-290dcfde1b6e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "af0cb87f-f073-4ac5-9ce8-5f04aaf056d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "b9be5066-77bc-44d2-8cdb-6dce3e400cf1",
        "cursor": {
          "ref": "71230469-e07d-4c0b-8064-d6dc1de90c2a",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d86f0a46-5252-4590-83ee-56969ae09f96"
        },
        "item": {
          "id": "b9be5066-77bc-44d2-8cdb-6dce3e400cf1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "063c4e5f-7e06-48d7-9705-d168d913e0c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "b9be5066-77bc-44d2-8cdb-6dce3e400cf1",
        "cursor": {
          "ref": "71230469-e07d-4c0b-8064-d6dc1de90c2a",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d86f0a46-5252-4590-83ee-56969ae09f96"
        },
        "item": {
          "id": "b9be5066-77bc-44d2-8cdb-6dce3e400cf1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "063c4e5f-7e06-48d7-9705-d168d913e0c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "3bde2c72-4eaf-409a-a0fd-9b54b8222736",
        "cursor": {
          "ref": "37246b3d-35a0-4bdb-a00b-a6178188a0b9",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e71ba360-892f-42a5-a12a-32f7535a123d"
        },
        "item": {
          "id": "3bde2c72-4eaf-409a-a0fd-9b54b8222736",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "debf559d-30bc-441c-9685-cf12e539d14a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3bde2c72-4eaf-409a-a0fd-9b54b8222736",
        "cursor": {
          "ref": "37246b3d-35a0-4bdb-a00b-a6178188a0b9",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e71ba360-892f-42a5-a12a-32f7535a123d"
        },
        "item": {
          "id": "3bde2c72-4eaf-409a-a0fd-9b54b8222736",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "debf559d-30bc-441c-9685-cf12e539d14a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1834dcb3-69bb-465f-8456-c3d872e06994",
        "cursor": {
          "ref": "fc3049ff-a44b-46aa-991f-9ae6fb1991c8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b74b385c-202d-4ae7-9d8e-f6ed95d1196e"
        },
        "item": {
          "id": "1834dcb3-69bb-465f-8456-c3d872e06994",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "81ece252-8600-4feb-8e01-705fb7157612",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1834dcb3-69bb-465f-8456-c3d872e06994",
        "cursor": {
          "ref": "fc3049ff-a44b-46aa-991f-9ae6fb1991c8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b74b385c-202d-4ae7-9d8e-f6ed95d1196e"
        },
        "item": {
          "id": "1834dcb3-69bb-465f-8456-c3d872e06994",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "81ece252-8600-4feb-8e01-705fb7157612",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1cb58efa-2dde-4749-8123-0892ef2ac542",
        "cursor": {
          "ref": "ce3dfdcc-3194-473c-93c7-5a3a9fb443be",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "621622d2-dbc9-4d1f-bc25-ccc350825d8a"
        },
        "item": {
          "id": "1cb58efa-2dde-4749-8123-0892ef2ac542",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5c020c3e-08db-4798-b971-92133610afbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb58efa-2dde-4749-8123-0892ef2ac542",
        "cursor": {
          "ref": "ce3dfdcc-3194-473c-93c7-5a3a9fb443be",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "621622d2-dbc9-4d1f-bc25-ccc350825d8a"
        },
        "item": {
          "id": "1cb58efa-2dde-4749-8123-0892ef2ac542",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5c020c3e-08db-4798-b971-92133610afbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57273807-b2f8-4ea7-af3d-d8d3b13fa077",
        "cursor": {
          "ref": "d58cc87f-6148-4182-9d64-f5b1f1cce4f2",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "88843f0c-ec22-440c-98bc-854671c62a5c"
        },
        "item": {
          "id": "57273807-b2f8-4ea7-af3d-d8d3b13fa077",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f29ec308-e03b-42d7-8f3f-27aa133a4fc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57273807-b2f8-4ea7-af3d-d8d3b13fa077",
        "cursor": {
          "ref": "d58cc87f-6148-4182-9d64-f5b1f1cce4f2",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "88843f0c-ec22-440c-98bc-854671c62a5c"
        },
        "item": {
          "id": "57273807-b2f8-4ea7-af3d-d8d3b13fa077",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f29ec308-e03b-42d7-8f3f-27aa133a4fc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ee6944-59bd-46f4-94e3-d11eb64802ac",
        "cursor": {
          "ref": "1edccedc-7317-4c9d-9f08-37def1b6a284",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "232a0e51-859d-4007-8f9c-b1f4a08f5c9d"
        },
        "item": {
          "id": "71ee6944-59bd-46f4-94e3-d11eb64802ac",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3c14c8d3-4bb8-4eaa-8cdb-8b8de923eafb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ee6944-59bd-46f4-94e3-d11eb64802ac",
        "cursor": {
          "ref": "1edccedc-7317-4c9d-9f08-37def1b6a284",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "232a0e51-859d-4007-8f9c-b1f4a08f5c9d"
        },
        "item": {
          "id": "71ee6944-59bd-46f4-94e3-d11eb64802ac",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3c14c8d3-4bb8-4eaa-8cdb-8b8de923eafb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d163262b-d610-4dbb-b78f-a901c6d50984",
        "cursor": {
          "ref": "a1fbee9c-c1fe-4bb5-a011-cf1539f815b8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "82d32da3-662a-4a14-bc54-97f0a107bcaf"
        },
        "item": {
          "id": "d163262b-d610-4dbb-b78f-a901c6d50984",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f2a5e94d-0afa-4c5f-8a2b-6bfa31e5684b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d163262b-d610-4dbb-b78f-a901c6d50984",
        "cursor": {
          "ref": "a1fbee9c-c1fe-4bb5-a011-cf1539f815b8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "82d32da3-662a-4a14-bc54-97f0a107bcaf"
        },
        "item": {
          "id": "d163262b-d610-4dbb-b78f-a901c6d50984",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f2a5e94d-0afa-4c5f-8a2b-6bfa31e5684b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028ca3b5-085f-4aca-82c2-5d1c0c097b7b",
        "cursor": {
          "ref": "41efd0f4-299e-4938-a4b3-960c2ed7fb67",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6179f2d1-db45-461f-bcf3-22b04e6815b5"
        },
        "item": {
          "id": "028ca3b5-085f-4aca-82c2-5d1c0c097b7b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e7509cb0-07bb-4a5b-8a72-32280c5c1ef4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028ca3b5-085f-4aca-82c2-5d1c0c097b7b",
        "cursor": {
          "ref": "41efd0f4-299e-4938-a4b3-960c2ed7fb67",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6179f2d1-db45-461f-bcf3-22b04e6815b5"
        },
        "item": {
          "id": "028ca3b5-085f-4aca-82c2-5d1c0c097b7b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e7509cb0-07bb-4a5b-8a72-32280c5c1ef4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517074b4-0502-4c25-b9bc-6d53e00f59b5",
        "cursor": {
          "ref": "b758dd53-2412-4329-9600-51a6881f0664",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9a3ff2fc-9a30-4303-bb9e-2ab808a595df"
        },
        "item": {
          "id": "517074b4-0502-4c25-b9bc-6d53e00f59b5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c2730577-44e8-488d-a487-7c483d02cf27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517074b4-0502-4c25-b9bc-6d53e00f59b5",
        "cursor": {
          "ref": "b758dd53-2412-4329-9600-51a6881f0664",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9a3ff2fc-9a30-4303-bb9e-2ab808a595df"
        },
        "item": {
          "id": "517074b4-0502-4c25-b9bc-6d53e00f59b5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c2730577-44e8-488d-a487-7c483d02cf27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca62cd84-8194-402f-9443-35efba533e74",
        "cursor": {
          "ref": "7e12da05-24c6-494a-a30c-37ddaf8071f9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7510a213-99d2-4b9b-bc41-6ec115d90a49"
        },
        "item": {
          "id": "ca62cd84-8194-402f-9443-35efba533e74",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1bbb9d50-0f22-48e5-b86d-8b4f455909e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca62cd84-8194-402f-9443-35efba533e74",
        "cursor": {
          "ref": "7e12da05-24c6-494a-a30c-37ddaf8071f9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7510a213-99d2-4b9b-bc41-6ec115d90a49"
        },
        "item": {
          "id": "ca62cd84-8194-402f-9443-35efba533e74",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1bbb9d50-0f22-48e5-b86d-8b4f455909e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2da548-d6e8-4bd5-9681-0bb76fd7fe4d",
        "cursor": {
          "ref": "aa90685f-75f3-4431-80a2-9ed254d0014c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7b74d137-62c2-4978-a1ef-d61be6b276d1"
        },
        "item": {
          "id": "7c2da548-d6e8-4bd5-9681-0bb76fd7fe4d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f869ddae-5213-40a9-bad2-81ebaff08f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2da548-d6e8-4bd5-9681-0bb76fd7fe4d",
        "cursor": {
          "ref": "aa90685f-75f3-4431-80a2-9ed254d0014c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7b74d137-62c2-4978-a1ef-d61be6b276d1"
        },
        "item": {
          "id": "7c2da548-d6e8-4bd5-9681-0bb76fd7fe4d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f869ddae-5213-40a9-bad2-81ebaff08f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdec419-e992-4630-b685-704ba5260ac4",
        "cursor": {
          "ref": "f3d7f7bf-ab65-419b-b6a8-f0f28927f362",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "04c78360-d4c2-4e5f-837d-9cb2b9c9ce6c"
        },
        "item": {
          "id": "dfdec419-e992-4630-b685-704ba5260ac4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "db44093f-dc8b-4f8c-a642-d02e5408b3f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdec419-e992-4630-b685-704ba5260ac4",
        "cursor": {
          "ref": "f3d7f7bf-ab65-419b-b6a8-f0f28927f362",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "04c78360-d4c2-4e5f-837d-9cb2b9c9ce6c"
        },
        "item": {
          "id": "dfdec419-e992-4630-b685-704ba5260ac4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "db44093f-dc8b-4f8c-a642-d02e5408b3f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014da7ab-6c96-4387-9a5d-a10d4470c268",
        "cursor": {
          "ref": "1f17adde-507c-497f-8ff2-8a9a679ac775",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3d280af4-4c73-4fc4-9a42-659007c534d0"
        },
        "item": {
          "id": "014da7ab-6c96-4387-9a5d-a10d4470c268",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "276a678c-878f-4e18-8ae2-1a19d0850a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014da7ab-6c96-4387-9a5d-a10d4470c268",
        "cursor": {
          "ref": "1f17adde-507c-497f-8ff2-8a9a679ac775",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3d280af4-4c73-4fc4-9a42-659007c534d0"
        },
        "item": {
          "id": "014da7ab-6c96-4387-9a5d-a10d4470c268",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "276a678c-878f-4e18-8ae2-1a19d0850a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4231b8be-7b2a-4cf1-9c51-cf22a7e0be9b",
        "cursor": {
          "ref": "e4d560bb-1c7b-4422-b02f-16731d218a01",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a52da51c-12cb-40b0-91c5-ca70a2a27928"
        },
        "item": {
          "id": "4231b8be-7b2a-4cf1-9c51-cf22a7e0be9b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "942d87c5-acbd-4755-a4b1-f7bc3000860b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4231b8be-7b2a-4cf1-9c51-cf22a7e0be9b",
        "cursor": {
          "ref": "e4d560bb-1c7b-4422-b02f-16731d218a01",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a52da51c-12cb-40b0-91c5-ca70a2a27928"
        },
        "item": {
          "id": "4231b8be-7b2a-4cf1-9c51-cf22a7e0be9b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "942d87c5-acbd-4755-a4b1-f7bc3000860b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8403dc7a-80cf-4cc2-9f9a-0d3b28d94399",
        "cursor": {
          "ref": "23dc2545-47bb-4c8d-979c-4dcf6d884997",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c81a210a-501f-4c31-88cf-d122fd9ec692"
        },
        "item": {
          "id": "8403dc7a-80cf-4cc2-9f9a-0d3b28d94399",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4c51317c-a20d-4da3-b5af-36da3d9592d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8403dc7a-80cf-4cc2-9f9a-0d3b28d94399",
        "cursor": {
          "ref": "23dc2545-47bb-4c8d-979c-4dcf6d884997",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c81a210a-501f-4c31-88cf-d122fd9ec692"
        },
        "item": {
          "id": "8403dc7a-80cf-4cc2-9f9a-0d3b28d94399",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4c51317c-a20d-4da3-b5af-36da3d9592d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd6cd12-5931-487f-b783-13b4c4bad0a4",
        "cursor": {
          "ref": "58374bdc-8e2f-4dc9-a3d4-4ca3d297934e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7ab2dfc2-4508-4796-8b1a-cd5a5853e072"
        },
        "item": {
          "id": "3cd6cd12-5931-487f-b783-13b4c4bad0a4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7cb15895-8e6b-467a-9cf7-f79e3f70b3a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd6cd12-5931-487f-b783-13b4c4bad0a4",
        "cursor": {
          "ref": "58374bdc-8e2f-4dc9-a3d4-4ca3d297934e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7ab2dfc2-4508-4796-8b1a-cd5a5853e072"
        },
        "item": {
          "id": "3cd6cd12-5931-487f-b783-13b4c4bad0a4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7cb15895-8e6b-467a-9cf7-f79e3f70b3a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc7b50c-c8bc-4365-b915-1018a63e236b",
        "cursor": {
          "ref": "9b1dfe42-eac2-4da9-947f-ca87342d3fad",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "639a3262-4111-437c-b10c-5dbec50d145e"
        },
        "item": {
          "id": "4bc7b50c-c8bc-4365-b915-1018a63e236b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a97ab4b5-99d4-4b35-8e28-7faa1649a7fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc7b50c-c8bc-4365-b915-1018a63e236b",
        "cursor": {
          "ref": "9b1dfe42-eac2-4da9-947f-ca87342d3fad",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "639a3262-4111-437c-b10c-5dbec50d145e"
        },
        "item": {
          "id": "4bc7b50c-c8bc-4365-b915-1018a63e236b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a97ab4b5-99d4-4b35-8e28-7faa1649a7fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b9ae26-e946-4afe-a3d1-c0bd39343b3e",
        "cursor": {
          "ref": "2c9cd51a-64aa-4b7c-974a-633b0601f363",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f004f879-f1a6-48d4-a5cf-acd07510f920"
        },
        "item": {
          "id": "d9b9ae26-e946-4afe-a3d1-c0bd39343b3e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f718d275-9e2e-42d9-846e-417c8815a803",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b9ae26-e946-4afe-a3d1-c0bd39343b3e",
        "cursor": {
          "ref": "2c9cd51a-64aa-4b7c-974a-633b0601f363",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f004f879-f1a6-48d4-a5cf-acd07510f920"
        },
        "item": {
          "id": "d9b9ae26-e946-4afe-a3d1-c0bd39343b3e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f718d275-9e2e-42d9-846e-417c8815a803",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973f433c-a9ea-459c-b740-06b52b66f3e9",
        "cursor": {
          "ref": "f77ce6fa-3e60-45fd-b9d9-c21cca29784b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5ba022f3-9e88-46a4-97a6-94834bcff0af"
        },
        "item": {
          "id": "973f433c-a9ea-459c-b740-06b52b66f3e9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2e7123ad-ed6a-40ae-acfe-d2e5e7d58ec3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973f433c-a9ea-459c-b740-06b52b66f3e9",
        "cursor": {
          "ref": "f77ce6fa-3e60-45fd-b9d9-c21cca29784b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5ba022f3-9e88-46a4-97a6-94834bcff0af"
        },
        "item": {
          "id": "973f433c-a9ea-459c-b740-06b52b66f3e9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2e7123ad-ed6a-40ae-acfe-d2e5e7d58ec3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2add25e-3c1c-41fa-86f8-5afac35ac00c",
        "cursor": {
          "ref": "15b923b9-ba1d-4d54-bfea-55f29c9208bf",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5b8960fe-f74a-48a2-8071-4e29e980486f"
        },
        "item": {
          "id": "b2add25e-3c1c-41fa-86f8-5afac35ac00c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2ac5244f-0430-4d06-8bb1-c768b0e058e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2add25e-3c1c-41fa-86f8-5afac35ac00c",
        "cursor": {
          "ref": "15b923b9-ba1d-4d54-bfea-55f29c9208bf",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5b8960fe-f74a-48a2-8071-4e29e980486f"
        },
        "item": {
          "id": "b2add25e-3c1c-41fa-86f8-5afac35ac00c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2ac5244f-0430-4d06-8bb1-c768b0e058e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f43486e-d0fc-47d1-800a-1f32bef15833",
        "cursor": {
          "ref": "7f0b5a37-b377-4c93-b333-6a9969129fb0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5fd7a5df-7d97-4a04-ae1f-bae051aef820"
        },
        "item": {
          "id": "6f43486e-d0fc-47d1-800a-1f32bef15833",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8a72644e-1722-4eae-8a5a-9afa882f903b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f43486e-d0fc-47d1-800a-1f32bef15833",
        "cursor": {
          "ref": "7f0b5a37-b377-4c93-b333-6a9969129fb0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5fd7a5df-7d97-4a04-ae1f-bae051aef820"
        },
        "item": {
          "id": "6f43486e-d0fc-47d1-800a-1f32bef15833",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8a72644e-1722-4eae-8a5a-9afa882f903b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288fb2b2-e7d7-4bab-96a3-16a7117e5b68",
        "cursor": {
          "ref": "ad3aeeb9-f5f0-4d47-b024-56751d7bc1c8",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "53e69406-4704-4fd4-a308-b3465db2d410"
        },
        "item": {
          "id": "288fb2b2-e7d7-4bab-96a3-16a7117e5b68",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8fb679af-a479-4cdc-bb5c-54ece022871c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288fb2b2-e7d7-4bab-96a3-16a7117e5b68",
        "cursor": {
          "ref": "ad3aeeb9-f5f0-4d47-b024-56751d7bc1c8",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "53e69406-4704-4fd4-a308-b3465db2d410"
        },
        "item": {
          "id": "288fb2b2-e7d7-4bab-96a3-16a7117e5b68",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8fb679af-a479-4cdc-bb5c-54ece022871c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d119e0-9e1b-47e7-a00e-50d290de7af8",
        "cursor": {
          "ref": "3b39b0cd-41e7-45f6-931f-e5f25c75b7b2",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ed0b82c8-1d03-4e09-80fd-5ab74b24b39c"
        },
        "item": {
          "id": "25d119e0-9e1b-47e7-a00e-50d290de7af8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "13eb9bae-d3bc-4a7d-8eba-b9238799ddb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d119e0-9e1b-47e7-a00e-50d290de7af8",
        "cursor": {
          "ref": "3b39b0cd-41e7-45f6-931f-e5f25c75b7b2",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ed0b82c8-1d03-4e09-80fd-5ab74b24b39c"
        },
        "item": {
          "id": "25d119e0-9e1b-47e7-a00e-50d290de7af8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "13eb9bae-d3bc-4a7d-8eba-b9238799ddb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab173e1-5497-443c-b255-1efa9ffe0324",
        "cursor": {
          "ref": "71bb514e-ce79-4883-ad0b-c55851e12f78",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6f57b610-c158-4cfb-b075-adb50f23ec10"
        },
        "item": {
          "id": "bab173e1-5497-443c-b255-1efa9ffe0324",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5fd984f7-ade9-47d1-ab50-a4542aac1a8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab173e1-5497-443c-b255-1efa9ffe0324",
        "cursor": {
          "ref": "71bb514e-ce79-4883-ad0b-c55851e12f78",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6f57b610-c158-4cfb-b075-adb50f23ec10"
        },
        "item": {
          "id": "bab173e1-5497-443c-b255-1efa9ffe0324",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5fd984f7-ade9-47d1-ab50-a4542aac1a8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c511a5ca-0ffa-4ab7-a3a3-6b5aa3d8ab05",
        "cursor": {
          "ref": "8e7dfc9c-06d6-4010-9b42-c4a1c574742a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f6f96f43-8c71-4a26-838d-d5c720a2bea9"
        },
        "item": {
          "id": "c511a5ca-0ffa-4ab7-a3a3-6b5aa3d8ab05",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1c696802-6d84-42e7-a738-6b31ed1e9193",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c511a5ca-0ffa-4ab7-a3a3-6b5aa3d8ab05",
        "cursor": {
          "ref": "8e7dfc9c-06d6-4010-9b42-c4a1c574742a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f6f96f43-8c71-4a26-838d-d5c720a2bea9"
        },
        "item": {
          "id": "c511a5ca-0ffa-4ab7-a3a3-6b5aa3d8ab05",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1c696802-6d84-42e7-a738-6b31ed1e9193",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65d353c-7d04-4397-bbea-87e60287deda",
        "cursor": {
          "ref": "1924be76-c1c0-46fb-b8ca-621a46c41852",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b39aac6f-534c-4054-8692-b64709102a06"
        },
        "item": {
          "id": "c65d353c-7d04-4397-bbea-87e60287deda",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "58ce801b-d567-4f73-93d3-4793aad9b239",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65d353c-7d04-4397-bbea-87e60287deda",
        "cursor": {
          "ref": "1924be76-c1c0-46fb-b8ca-621a46c41852",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b39aac6f-534c-4054-8692-b64709102a06"
        },
        "item": {
          "id": "c65d353c-7d04-4397-bbea-87e60287deda",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "58ce801b-d567-4f73-93d3-4793aad9b239",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e6779c-91d5-4987-bd59-9a9376e53dfa",
        "cursor": {
          "ref": "29d2ef66-1f0a-4e45-bb4f-9d29e9944f37",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cffb0e19-1bc3-448a-8e7f-1d51820ddec9"
        },
        "item": {
          "id": "e9e6779c-91d5-4987-bd59-9a9376e53dfa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "156f0f8b-31fa-4b6f-bc0c-a26b49dc9ef9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e6779c-91d5-4987-bd59-9a9376e53dfa",
        "cursor": {
          "ref": "29d2ef66-1f0a-4e45-bb4f-9d29e9944f37",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cffb0e19-1bc3-448a-8e7f-1d51820ddec9"
        },
        "item": {
          "id": "e9e6779c-91d5-4987-bd59-9a9376e53dfa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "156f0f8b-31fa-4b6f-bc0c-a26b49dc9ef9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f521db28-da93-439f-a3d0-9fc296758a75",
        "cursor": {
          "ref": "8a4e1b25-d406-4eba-9395-9648ec2cb282",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ff8f44c2-f10d-4395-b242-50d05aa498db"
        },
        "item": {
          "id": "f521db28-da93-439f-a3d0-9fc296758a75",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "308883b8-c79b-46dc-8f9c-e3cdc35aacef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f521db28-da93-439f-a3d0-9fc296758a75",
        "cursor": {
          "ref": "8a4e1b25-d406-4eba-9395-9648ec2cb282",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ff8f44c2-f10d-4395-b242-50d05aa498db"
        },
        "item": {
          "id": "f521db28-da93-439f-a3d0-9fc296758a75",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "308883b8-c79b-46dc-8f9c-e3cdc35aacef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb3ccf2-b88d-4b8e-9a15-762886d9b4be",
        "cursor": {
          "ref": "84273f9f-a374-4251-826e-b2e71a814f70",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5b1a14ee-5d08-4dc1-8222-fd529238617f"
        },
        "item": {
          "id": "0fb3ccf2-b88d-4b8e-9a15-762886d9b4be",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "988ab8ca-92cd-4ff8-8619-278f2540af17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb3ccf2-b88d-4b8e-9a15-762886d9b4be",
        "cursor": {
          "ref": "84273f9f-a374-4251-826e-b2e71a814f70",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5b1a14ee-5d08-4dc1-8222-fd529238617f"
        },
        "item": {
          "id": "0fb3ccf2-b88d-4b8e-9a15-762886d9b4be",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "988ab8ca-92cd-4ff8-8619-278f2540af17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b8f101-86aa-493e-9b55-724c14ac621d",
        "cursor": {
          "ref": "a4558a32-1397-49a0-be97-652f5d7f9e57",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ebcc4b76-2f35-4cc5-a562-2f57a7614c53"
        },
        "item": {
          "id": "07b8f101-86aa-493e-9b55-724c14ac621d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ddc4505b-f883-4d8c-ba02-8859efb486a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b8f101-86aa-493e-9b55-724c14ac621d",
        "cursor": {
          "ref": "a4558a32-1397-49a0-be97-652f5d7f9e57",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ebcc4b76-2f35-4cc5-a562-2f57a7614c53"
        },
        "item": {
          "id": "07b8f101-86aa-493e-9b55-724c14ac621d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ddc4505b-f883-4d8c-ba02-8859efb486a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea441ed-d4a8-4205-9ab3-64bafec1b331",
        "cursor": {
          "ref": "28c1e8b6-039a-4562-88a9-d9d439ad7d10",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bf8319cf-9af2-45d9-93b5-b7537bd135af"
        },
        "item": {
          "id": "bea441ed-d4a8-4205-9ab3-64bafec1b331",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2d167e82-7a19-4cdb-942b-ac1b3c97509a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea441ed-d4a8-4205-9ab3-64bafec1b331",
        "cursor": {
          "ref": "28c1e8b6-039a-4562-88a9-d9d439ad7d10",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bf8319cf-9af2-45d9-93b5-b7537bd135af"
        },
        "item": {
          "id": "bea441ed-d4a8-4205-9ab3-64bafec1b331",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2d167e82-7a19-4cdb-942b-ac1b3c97509a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c486dd4b-4d65-47b1-8cf2-73743602ed9f",
        "cursor": {
          "ref": "74e6d8c9-73fb-443d-b8fa-3fbe2de2d4d6",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "70d3ee72-3693-4709-afbb-11bbcee55d2d"
        },
        "item": {
          "id": "c486dd4b-4d65-47b1-8cf2-73743602ed9f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f40c5710-bbdd-4743-b3d9-cf06514a077e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c486dd4b-4d65-47b1-8cf2-73743602ed9f",
        "cursor": {
          "ref": "74e6d8c9-73fb-443d-b8fa-3fbe2de2d4d6",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "70d3ee72-3693-4709-afbb-11bbcee55d2d"
        },
        "item": {
          "id": "c486dd4b-4d65-47b1-8cf2-73743602ed9f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f40c5710-bbdd-4743-b3d9-cf06514a077e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2990af77-82fe-431d-871b-f4bf0bb23570",
        "cursor": {
          "ref": "ba70c6ca-b1f1-491c-90a1-f31fa53c1a03",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5ef882e1-16e2-45bc-9ae7-6b09e95ad39b"
        },
        "item": {
          "id": "2990af77-82fe-431d-871b-f4bf0bb23570",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7c6e69e7-c689-4959-9974-c5876022df28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2990af77-82fe-431d-871b-f4bf0bb23570",
        "cursor": {
          "ref": "ba70c6ca-b1f1-491c-90a1-f31fa53c1a03",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5ef882e1-16e2-45bc-9ae7-6b09e95ad39b"
        },
        "item": {
          "id": "2990af77-82fe-431d-871b-f4bf0bb23570",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7c6e69e7-c689-4959-9974-c5876022df28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda424d8-fe8f-4cb9-8463-8d89a5a7b5f2",
        "cursor": {
          "ref": "44eeb834-e48d-4b25-9bb0-7c8b1bf81269",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "69dee473-ed3d-4274-b539-d157ada81f45"
        },
        "item": {
          "id": "cda424d8-fe8f-4cb9-8463-8d89a5a7b5f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4395de3f-aa09-4ba2-82ff-3fb32f2e48d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda424d8-fe8f-4cb9-8463-8d89a5a7b5f2",
        "cursor": {
          "ref": "44eeb834-e48d-4b25-9bb0-7c8b1bf81269",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "69dee473-ed3d-4274-b539-d157ada81f45"
        },
        "item": {
          "id": "cda424d8-fe8f-4cb9-8463-8d89a5a7b5f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4395de3f-aa09-4ba2-82ff-3fb32f2e48d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b0a0b7-c122-4fcc-b9d6-8de4678a491a",
        "cursor": {
          "ref": "eff80c0e-5184-459b-8f4b-876fd2aa2cf4",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "27c5d685-a632-400a-a5b5-d74e340f1212"
        },
        "item": {
          "id": "20b0a0b7-c122-4fcc-b9d6-8de4678a491a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "90c3c8da-15ac-4dbc-ab0c-696166e889d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b0a0b7-c122-4fcc-b9d6-8de4678a491a",
        "cursor": {
          "ref": "eff80c0e-5184-459b-8f4b-876fd2aa2cf4",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "27c5d685-a632-400a-a5b5-d74e340f1212"
        },
        "item": {
          "id": "20b0a0b7-c122-4fcc-b9d6-8de4678a491a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "90c3c8da-15ac-4dbc-ab0c-696166e889d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42a2174-3ce7-4b5d-a4a3-f3828cb3edc5",
        "cursor": {
          "ref": "393c4db2-e2be-459a-bffd-a7cf9b499913",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "87ddf06a-5e88-4af9-86ee-4a5887ccedcd"
        },
        "item": {
          "id": "e42a2174-3ce7-4b5d-a4a3-f3828cb3edc5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a7b7d46e-3810-40a9-a919-0516612ca811",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42a2174-3ce7-4b5d-a4a3-f3828cb3edc5",
        "cursor": {
          "ref": "393c4db2-e2be-459a-bffd-a7cf9b499913",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "87ddf06a-5e88-4af9-86ee-4a5887ccedcd"
        },
        "item": {
          "id": "e42a2174-3ce7-4b5d-a4a3-f3828cb3edc5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a7b7d46e-3810-40a9-a919-0516612ca811",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c932f5b-d0d2-422b-b056-3d5ab12a987b",
        "cursor": {
          "ref": "66c70217-65ee-4411-8636-750d3ad750f4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d67c9fe8-6639-4a64-86aa-95f682cf2419"
        },
        "item": {
          "id": "1c932f5b-d0d2-422b-b056-3d5ab12a987b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "97a133c7-8150-428a-8883-062ce9021f45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c932f5b-d0d2-422b-b056-3d5ab12a987b",
        "cursor": {
          "ref": "66c70217-65ee-4411-8636-750d3ad750f4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d67c9fe8-6639-4a64-86aa-95f682cf2419"
        },
        "item": {
          "id": "1c932f5b-d0d2-422b-b056-3d5ab12a987b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "97a133c7-8150-428a-8883-062ce9021f45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cdbf3a-9a62-4943-8994-fda26ddc49d9",
        "cursor": {
          "ref": "bc3936ac-d23a-483f-8cb5-5b5e1c0e94c8",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d77e6061-05f4-4e67-ae5b-9590e7c244ac"
        },
        "item": {
          "id": "d1cdbf3a-9a62-4943-8994-fda26ddc49d9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "983ce943-5b70-4d92-af06-5980d1555eb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cdbf3a-9a62-4943-8994-fda26ddc49d9",
        "cursor": {
          "ref": "bc3936ac-d23a-483f-8cb5-5b5e1c0e94c8",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d77e6061-05f4-4e67-ae5b-9590e7c244ac"
        },
        "item": {
          "id": "d1cdbf3a-9a62-4943-8994-fda26ddc49d9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "983ce943-5b70-4d92-af06-5980d1555eb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f74292-1d8f-44e0-81fe-c502ff419efb",
        "cursor": {
          "ref": "2fe8e20a-4721-466c-a5f8-740e1532eade",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7f1a0eb6-5c6b-46cd-8fa0-9f441fd4c473"
        },
        "item": {
          "id": "a4f74292-1d8f-44e0-81fe-c502ff419efb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "346140de-617a-4738-be3e-bcee602e9397",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f74292-1d8f-44e0-81fe-c502ff419efb",
        "cursor": {
          "ref": "2fe8e20a-4721-466c-a5f8-740e1532eade",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7f1a0eb6-5c6b-46cd-8fa0-9f441fd4c473"
        },
        "item": {
          "id": "a4f74292-1d8f-44e0-81fe-c502ff419efb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "346140de-617a-4738-be3e-bcee602e9397",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126731da-b606-4387-bdf9-9e5c459eacf5",
        "cursor": {
          "ref": "45b3a388-c1f1-42d2-a810-c4730a08f5b4",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b870f451-64b5-49bf-9f42-4959ad90d438"
        },
        "item": {
          "id": "126731da-b606-4387-bdf9-9e5c459eacf5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7cdcb7c5-4eef-4ccf-9cda-6ebb94d26438",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126731da-b606-4387-bdf9-9e5c459eacf5",
        "cursor": {
          "ref": "45b3a388-c1f1-42d2-a810-c4730a08f5b4",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b870f451-64b5-49bf-9f42-4959ad90d438"
        },
        "item": {
          "id": "126731da-b606-4387-bdf9-9e5c459eacf5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7cdcb7c5-4eef-4ccf-9cda-6ebb94d26438",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2666bfa1-aec4-4825-b2cc-d2c8139be0d9",
        "cursor": {
          "ref": "a71e58f8-52ca-4e3d-9a92-710ecaf9ccc2",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7ba9be15-7a6f-4329-804f-c4e78587d43b"
        },
        "item": {
          "id": "2666bfa1-aec4-4825-b2cc-d2c8139be0d9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "00a57c3d-1c8f-4ad6-822c-eec7965bf7df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2666bfa1-aec4-4825-b2cc-d2c8139be0d9",
        "cursor": {
          "ref": "a71e58f8-52ca-4e3d-9a92-710ecaf9ccc2",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7ba9be15-7a6f-4329-804f-c4e78587d43b"
        },
        "item": {
          "id": "2666bfa1-aec4-4825-b2cc-d2c8139be0d9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "00a57c3d-1c8f-4ad6-822c-eec7965bf7df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f982fb48-7b60-4fa5-89c5-be94029dc336",
        "cursor": {
          "ref": "8741c60d-e8e3-468a-a90f-fd3ccee07a3a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cb59a58f-9cc6-4ab3-a63c-902e34d11dc0"
        },
        "item": {
          "id": "f982fb48-7b60-4fa5-89c5-be94029dc336",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9d2d6ea7-27e4-435e-a829-68a1da87fbf5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f982fb48-7b60-4fa5-89c5-be94029dc336",
        "cursor": {
          "ref": "8741c60d-e8e3-468a-a90f-fd3ccee07a3a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cb59a58f-9cc6-4ab3-a63c-902e34d11dc0"
        },
        "item": {
          "id": "f982fb48-7b60-4fa5-89c5-be94029dc336",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9d2d6ea7-27e4-435e-a829-68a1da87fbf5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec349e1-1d3d-402f-953a-f1a4a87e99e8",
        "cursor": {
          "ref": "1ef2583a-4622-48df-a8de-84ebea49bc51",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2042c1dc-32f7-4d68-9492-10a3b9491dc6"
        },
        "item": {
          "id": "aec349e1-1d3d-402f-953a-f1a4a87e99e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "99b1ce7d-72c2-4419-b1a3-73fa88f17c67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec349e1-1d3d-402f-953a-f1a4a87e99e8",
        "cursor": {
          "ref": "1ef2583a-4622-48df-a8de-84ebea49bc51",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2042c1dc-32f7-4d68-9492-10a3b9491dc6"
        },
        "item": {
          "id": "aec349e1-1d3d-402f-953a-f1a4a87e99e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "99b1ce7d-72c2-4419-b1a3-73fa88f17c67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def7291f-ae9b-416e-860a-285d733b3e50",
        "cursor": {
          "ref": "cf7488ae-61c2-4cf7-94f8-a162704641cb",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a7b0aee9-bca6-43ac-ab15-e87f1be36fe1"
        },
        "item": {
          "id": "def7291f-ae9b-416e-860a-285d733b3e50",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d59e5ca9-dcd6-4db1-b5ff-eab2b29e1ee5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def7291f-ae9b-416e-860a-285d733b3e50",
        "cursor": {
          "ref": "cf7488ae-61c2-4cf7-94f8-a162704641cb",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a7b0aee9-bca6-43ac-ab15-e87f1be36fe1"
        },
        "item": {
          "id": "def7291f-ae9b-416e-860a-285d733b3e50",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d59e5ca9-dcd6-4db1-b5ff-eab2b29e1ee5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16fa113-66e5-4396-8f1f-24c668ace422",
        "cursor": {
          "ref": "0c2e3970-0181-49e2-af9b-7ba4c343e4d7",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bc4cc2b3-89ab-49cd-820a-b9b8f3781fd1"
        },
        "item": {
          "id": "d16fa113-66e5-4396-8f1f-24c668ace422",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4c49c940-92db-4b83-b763-c3f72c9271b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16fa113-66e5-4396-8f1f-24c668ace422",
        "cursor": {
          "ref": "0c2e3970-0181-49e2-af9b-7ba4c343e4d7",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bc4cc2b3-89ab-49cd-820a-b9b8f3781fd1"
        },
        "item": {
          "id": "d16fa113-66e5-4396-8f1f-24c668ace422",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4c49c940-92db-4b83-b763-c3f72c9271b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305b5dc3-f238-4664-9707-40923c57db45",
        "cursor": {
          "ref": "a0d5895b-b855-4ce6-85bc-77eb1a784e4b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "664dda81-d207-432d-80e1-fefb5efbd489"
        },
        "item": {
          "id": "305b5dc3-f238-4664-9707-40923c57db45",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0d62eb27-7b96-4fc8-8611-a0975c16c0c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305b5dc3-f238-4664-9707-40923c57db45",
        "cursor": {
          "ref": "a0d5895b-b855-4ce6-85bc-77eb1a784e4b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "664dda81-d207-432d-80e1-fefb5efbd489"
        },
        "item": {
          "id": "305b5dc3-f238-4664-9707-40923c57db45",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0d62eb27-7b96-4fc8-8611-a0975c16c0c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30502586-65b4-467e-8409-b7216630f41d",
        "cursor": {
          "ref": "c7fc9e3e-25ef-4820-9adf-ae4afd027737",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "371b18aa-29e9-469b-b4ed-22ac4edf200c"
        },
        "item": {
          "id": "30502586-65b4-467e-8409-b7216630f41d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6c8f5df2-fd85-4bcb-9c4e-e71da0b33630",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30502586-65b4-467e-8409-b7216630f41d",
        "cursor": {
          "ref": "c7fc9e3e-25ef-4820-9adf-ae4afd027737",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "371b18aa-29e9-469b-b4ed-22ac4edf200c"
        },
        "item": {
          "id": "30502586-65b4-467e-8409-b7216630f41d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6c8f5df2-fd85-4bcb-9c4e-e71da0b33630",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc715f25-04fa-4e7d-b8a7-9aff962702e9",
        "cursor": {
          "ref": "9504459b-3722-4ecc-9e31-bfd2726dd6ff",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a2e31970-cf03-43d4-9b30-2a6f54d7440d"
        },
        "item": {
          "id": "dc715f25-04fa-4e7d-b8a7-9aff962702e9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d9ce9cd5-ed49-4e64-8162-e86c9bdcd4a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc715f25-04fa-4e7d-b8a7-9aff962702e9",
        "cursor": {
          "ref": "9504459b-3722-4ecc-9e31-bfd2726dd6ff",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a2e31970-cf03-43d4-9b30-2a6f54d7440d"
        },
        "item": {
          "id": "dc715f25-04fa-4e7d-b8a7-9aff962702e9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d9ce9cd5-ed49-4e64-8162-e86c9bdcd4a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fd8846-194d-4405-9551-90de003d6e69",
        "cursor": {
          "ref": "f4458104-8672-4c04-b845-f962973a5872",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d1cee562-fa97-4cb6-80f5-c9e7e73675c5"
        },
        "item": {
          "id": "04fd8846-194d-4405-9551-90de003d6e69",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8affd035-1b17-4e9e-926f-c7babcd8edaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fd8846-194d-4405-9551-90de003d6e69",
        "cursor": {
          "ref": "f4458104-8672-4c04-b845-f962973a5872",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d1cee562-fa97-4cb6-80f5-c9e7e73675c5"
        },
        "item": {
          "id": "04fd8846-194d-4405-9551-90de003d6e69",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8affd035-1b17-4e9e-926f-c7babcd8edaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6998afb-ae41-4560-8277-d0c88c06c738",
        "cursor": {
          "ref": "56bdee42-40a9-4225-b01c-3c9b852aa89d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f0795285-2c7e-4bfc-a358-f74259d813af"
        },
        "item": {
          "id": "d6998afb-ae41-4560-8277-d0c88c06c738",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5c3889b3-79b4-4ae3-a90c-4521a983675b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6998afb-ae41-4560-8277-d0c88c06c738",
        "cursor": {
          "ref": "56bdee42-40a9-4225-b01c-3c9b852aa89d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f0795285-2c7e-4bfc-a358-f74259d813af"
        },
        "item": {
          "id": "d6998afb-ae41-4560-8277-d0c88c06c738",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5c3889b3-79b4-4ae3-a90c-4521a983675b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254e6747-9a87-4226-a4d7-05cfa839494c",
        "cursor": {
          "ref": "611e9cb5-ec74-42da-a668-50e2130c5cd8",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "063fceac-50a3-4a38-932a-bf27cbdd9263"
        },
        "item": {
          "id": "254e6747-9a87-4226-a4d7-05cfa839494c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "07104d95-b8f6-416c-830a-4f1033dac870",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254e6747-9a87-4226-a4d7-05cfa839494c",
        "cursor": {
          "ref": "611e9cb5-ec74-42da-a668-50e2130c5cd8",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "063fceac-50a3-4a38-932a-bf27cbdd9263"
        },
        "item": {
          "id": "254e6747-9a87-4226-a4d7-05cfa839494c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "07104d95-b8f6-416c-830a-4f1033dac870",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fb390a-fa13-4815-bcde-0cc5ecfe2f9e",
        "cursor": {
          "ref": "509a1263-00fb-4d79-aabf-250a17b8ed64",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "83278c97-7385-4f35-b15e-56092a972f95"
        },
        "item": {
          "id": "b9fb390a-fa13-4815-bcde-0cc5ecfe2f9e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3c659bb3-ac0b-4d18-9a10-078d3a3c6d0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fb390a-fa13-4815-bcde-0cc5ecfe2f9e",
        "cursor": {
          "ref": "509a1263-00fb-4d79-aabf-250a17b8ed64",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "83278c97-7385-4f35-b15e-56092a972f95"
        },
        "item": {
          "id": "b9fb390a-fa13-4815-bcde-0cc5ecfe2f9e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3c659bb3-ac0b-4d18-9a10-078d3a3c6d0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b976ca46-48de-4b78-bbee-b75152eb0a6c",
        "cursor": {
          "ref": "96c64ed1-1bf5-4fcf-9bd9-b1dd0eee8d93",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "14e72b47-5985-4133-a231-4a10a6b98534"
        },
        "item": {
          "id": "b976ca46-48de-4b78-bbee-b75152eb0a6c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0a8819af-47a1-48ac-87e5-297427982c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b976ca46-48de-4b78-bbee-b75152eb0a6c",
        "cursor": {
          "ref": "96c64ed1-1bf5-4fcf-9bd9-b1dd0eee8d93",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "14e72b47-5985-4133-a231-4a10a6b98534"
        },
        "item": {
          "id": "b976ca46-48de-4b78-bbee-b75152eb0a6c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0a8819af-47a1-48ac-87e5-297427982c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb70e2f-9628-4229-ba45-d4c6786fcc50",
        "cursor": {
          "ref": "b868d1a7-8ad7-417f-8382-cc5ab600af24",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4c7774cb-ca29-4e8f-8d3c-14b5de8b8b89"
        },
        "item": {
          "id": "3cb70e2f-9628-4229-ba45-d4c6786fcc50",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "302015e5-501f-45f9-8a96-e85fe4f3cfa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb70e2f-9628-4229-ba45-d4c6786fcc50",
        "cursor": {
          "ref": "b868d1a7-8ad7-417f-8382-cc5ab600af24",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4c7774cb-ca29-4e8f-8d3c-14b5de8b8b89"
        },
        "item": {
          "id": "3cb70e2f-9628-4229-ba45-d4c6786fcc50",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "302015e5-501f-45f9-8a96-e85fe4f3cfa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77973fa5-71ed-4637-8a11-7570c0cdad0e",
        "cursor": {
          "ref": "694f2224-fdce-47c8-954a-290fcc080d05",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5f9c50ca-cbb4-4d42-b993-397d699511fe"
        },
        "item": {
          "id": "77973fa5-71ed-4637-8a11-7570c0cdad0e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65f511de-f615-44d1-ae7e-45dda5c92794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77973fa5-71ed-4637-8a11-7570c0cdad0e",
        "cursor": {
          "ref": "694f2224-fdce-47c8-954a-290fcc080d05",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5f9c50ca-cbb4-4d42-b993-397d699511fe"
        },
        "item": {
          "id": "77973fa5-71ed-4637-8a11-7570c0cdad0e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65f511de-f615-44d1-ae7e-45dda5c92794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf01a60-1356-45c1-8651-6d898abfe67b",
        "cursor": {
          "ref": "e80b85df-a7fe-48ec-99f9-990e08565897",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7cd330f4-a2f0-4380-989c-9f20f5bdde75"
        },
        "item": {
          "id": "cbf01a60-1356-45c1-8651-6d898abfe67b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "19a98255-87b9-4010-a083-713b2dba3485",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf01a60-1356-45c1-8651-6d898abfe67b",
        "cursor": {
          "ref": "e80b85df-a7fe-48ec-99f9-990e08565897",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7cd330f4-a2f0-4380-989c-9f20f5bdde75"
        },
        "item": {
          "id": "cbf01a60-1356-45c1-8651-6d898abfe67b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "19a98255-87b9-4010-a083-713b2dba3485",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70bcdbd-7751-46fe-b9b4-962a38138243",
        "cursor": {
          "ref": "325a4168-ba09-48e2-a148-cf9ec4d48ab3",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "90d253a8-8788-48eb-b5ce-e6ec4a2fe553"
        },
        "item": {
          "id": "c70bcdbd-7751-46fe-b9b4-962a38138243",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "228d12e6-c591-41e2-a5ca-340d775a9615",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70bcdbd-7751-46fe-b9b4-962a38138243",
        "cursor": {
          "ref": "325a4168-ba09-48e2-a148-cf9ec4d48ab3",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "90d253a8-8788-48eb-b5ce-e6ec4a2fe553"
        },
        "item": {
          "id": "c70bcdbd-7751-46fe-b9b4-962a38138243",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "228d12e6-c591-41e2-a5ca-340d775a9615",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303f6eb7-8447-499d-8176-b4af927162a2",
        "cursor": {
          "ref": "3244ce30-e6dc-41bb-b2e6-ee969911e773",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2d73f03d-3356-40cb-ada7-14e46a1bb05c"
        },
        "item": {
          "id": "303f6eb7-8447-499d-8176-b4af927162a2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2a335b66-53b2-4ab3-8127-946e3c07fe6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303f6eb7-8447-499d-8176-b4af927162a2",
        "cursor": {
          "ref": "3244ce30-e6dc-41bb-b2e6-ee969911e773",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2d73f03d-3356-40cb-ada7-14e46a1bb05c"
        },
        "item": {
          "id": "303f6eb7-8447-499d-8176-b4af927162a2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2a335b66-53b2-4ab3-8127-946e3c07fe6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86e2ff9-b5c8-4145-b3e6-7acf6a05739d",
        "cursor": {
          "ref": "ec4b2e70-101a-4424-9db5-814e03306544",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f8bb3787-3221-4ffb-bd91-10cbab705ddb"
        },
        "item": {
          "id": "e86e2ff9-b5c8-4145-b3e6-7acf6a05739d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "81abb71e-5598-486f-9c76-96c29dfe9bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86e2ff9-b5c8-4145-b3e6-7acf6a05739d",
        "cursor": {
          "ref": "ec4b2e70-101a-4424-9db5-814e03306544",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f8bb3787-3221-4ffb-bd91-10cbab705ddb"
        },
        "item": {
          "id": "e86e2ff9-b5c8-4145-b3e6-7acf6a05739d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "81abb71e-5598-486f-9c76-96c29dfe9bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12919ff4-eb14-42c8-9380-1becdf8de03e",
        "cursor": {
          "ref": "e64ef69f-a62a-4853-8694-2c6ef4cf6902",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "75592b24-1392-4a51-bcd0-d2c1be1b4b3a"
        },
        "item": {
          "id": "12919ff4-eb14-42c8-9380-1becdf8de03e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8c5acab6-ab7c-4788-9911-8c8ed01aa9a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12919ff4-eb14-42c8-9380-1becdf8de03e",
        "cursor": {
          "ref": "e64ef69f-a62a-4853-8694-2c6ef4cf6902",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "75592b24-1392-4a51-bcd0-d2c1be1b4b3a"
        },
        "item": {
          "id": "12919ff4-eb14-42c8-9380-1becdf8de03e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8c5acab6-ab7c-4788-9911-8c8ed01aa9a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefc329e-6419-404a-ab01-cb3532cdabc9",
        "cursor": {
          "ref": "6ca82118-808b-4c28-9825-df28cb373cd7",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "17885f4a-8f96-40f3-8a2b-3a22eafedcd5"
        },
        "item": {
          "id": "fefc329e-6419-404a-ab01-cb3532cdabc9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ec285a04-26b6-47a0-93de-9957d61ad2eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefc329e-6419-404a-ab01-cb3532cdabc9",
        "cursor": {
          "ref": "6ca82118-808b-4c28-9825-df28cb373cd7",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "17885f4a-8f96-40f3-8a2b-3a22eafedcd5"
        },
        "item": {
          "id": "fefc329e-6419-404a-ab01-cb3532cdabc9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ec285a04-26b6-47a0-93de-9957d61ad2eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b421fb-4db6-4cb9-86c7-2c569939e8ec",
        "cursor": {
          "ref": "81c23349-aabd-4606-9c90-56b2743a9731",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "42d60031-8829-4ea8-8669-aef569a286e7"
        },
        "item": {
          "id": "72b421fb-4db6-4cb9-86c7-2c569939e8ec",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7f184f0c-d55a-4579-9ea0-ff1cb2007a9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b421fb-4db6-4cb9-86c7-2c569939e8ec",
        "cursor": {
          "ref": "81c23349-aabd-4606-9c90-56b2743a9731",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "42d60031-8829-4ea8-8669-aef569a286e7"
        },
        "item": {
          "id": "72b421fb-4db6-4cb9-86c7-2c569939e8ec",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7f184f0c-d55a-4579-9ea0-ff1cb2007a9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1e0344-5e90-436e-8b79-cc81b1458d2a",
        "cursor": {
          "ref": "d3d36d73-bce0-4d15-a69a-57199bc1f5a4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cba91655-506b-4ff6-8deb-5d3d43280fe4"
        },
        "item": {
          "id": "6e1e0344-5e90-436e-8b79-cc81b1458d2a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "48ed6173-6b6d-4f84-87df-676b4418fcdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1e0344-5e90-436e-8b79-cc81b1458d2a",
        "cursor": {
          "ref": "d3d36d73-bce0-4d15-a69a-57199bc1f5a4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cba91655-506b-4ff6-8deb-5d3d43280fe4"
        },
        "item": {
          "id": "6e1e0344-5e90-436e-8b79-cc81b1458d2a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "48ed6173-6b6d-4f84-87df-676b4418fcdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64b4dd7-ec38-4581-9d75-6637a19e691c",
        "cursor": {
          "ref": "b6e5eac6-714d-4382-9a08-0f753beaaecb",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "64938582-41ac-46a5-967b-44f18f005e73"
        },
        "item": {
          "id": "c64b4dd7-ec38-4581-9d75-6637a19e691c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b352cf0d-4041-409a-ba54-260371bfa740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64b4dd7-ec38-4581-9d75-6637a19e691c",
        "cursor": {
          "ref": "b6e5eac6-714d-4382-9a08-0f753beaaecb",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "64938582-41ac-46a5-967b-44f18f005e73"
        },
        "item": {
          "id": "c64b4dd7-ec38-4581-9d75-6637a19e691c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b352cf0d-4041-409a-ba54-260371bfa740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9282f1e-4cf7-47c3-a692-1e885065bcfa",
        "cursor": {
          "ref": "02d6a76f-5331-463a-9e3f-82c33e71305f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "73d995a2-5411-4987-9d99-2e10b08ed44b"
        },
        "item": {
          "id": "a9282f1e-4cf7-47c3-a692-1e885065bcfa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7ecdc741-5e1a-4a2e-97a5-fde551f0a27c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9282f1e-4cf7-47c3-a692-1e885065bcfa",
        "cursor": {
          "ref": "02d6a76f-5331-463a-9e3f-82c33e71305f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "73d995a2-5411-4987-9d99-2e10b08ed44b"
        },
        "item": {
          "id": "a9282f1e-4cf7-47c3-a692-1e885065bcfa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7ecdc741-5e1a-4a2e-97a5-fde551f0a27c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988cb5e6-33b7-4f5c-853e-c0746da09994",
        "cursor": {
          "ref": "2a3684ef-77ff-42a9-b07e-9fcdb26ff3cd",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6c4b7d4d-174e-47de-9c04-b64c40dfa53c"
        },
        "item": {
          "id": "988cb5e6-33b7-4f5c-853e-c0746da09994",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0810c1e0-6381-4591-9de7-48e7c5b241cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988cb5e6-33b7-4f5c-853e-c0746da09994",
        "cursor": {
          "ref": "2a3684ef-77ff-42a9-b07e-9fcdb26ff3cd",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6c4b7d4d-174e-47de-9c04-b64c40dfa53c"
        },
        "item": {
          "id": "988cb5e6-33b7-4f5c-853e-c0746da09994",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0810c1e0-6381-4591-9de7-48e7c5b241cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ac465f-308a-4628-906c-86c3ba90bfab",
        "cursor": {
          "ref": "5c184c7f-9f44-4208-986b-e8e236567c45",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3222dc2b-9c0a-4f41-b087-80946a1cc657"
        },
        "item": {
          "id": "66ac465f-308a-4628-906c-86c3ba90bfab",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6b3b68fb-8655-47a1-b1f7-38c8e107879b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ac465f-308a-4628-906c-86c3ba90bfab",
        "cursor": {
          "ref": "5c184c7f-9f44-4208-986b-e8e236567c45",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3222dc2b-9c0a-4f41-b087-80946a1cc657"
        },
        "item": {
          "id": "66ac465f-308a-4628-906c-86c3ba90bfab",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6b3b68fb-8655-47a1-b1f7-38c8e107879b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73937a8a-a719-4a02-8efb-7b15bb321647",
        "cursor": {
          "ref": "f8711d1f-ba1e-492a-8489-f4e8145c4096",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5eb95dcd-12a3-49b7-80dd-2af36589f56c"
        },
        "item": {
          "id": "73937a8a-a719-4a02-8efb-7b15bb321647",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "52ede3e3-c392-46b6-82fa-b358cce814e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73937a8a-a719-4a02-8efb-7b15bb321647",
        "cursor": {
          "ref": "f8711d1f-ba1e-492a-8489-f4e8145c4096",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5eb95dcd-12a3-49b7-80dd-2af36589f56c"
        },
        "item": {
          "id": "73937a8a-a719-4a02-8efb-7b15bb321647",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "52ede3e3-c392-46b6-82fa-b358cce814e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0f0c75-5bc1-4e0b-be7b-7f487ef93f4a",
        "cursor": {
          "ref": "ffb77995-0991-4e22-b6d2-5e60348cb896",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "48847c4b-d123-499d-a675-4d410e5a3dce"
        },
        "item": {
          "id": "1c0f0c75-5bc1-4e0b-be7b-7f487ef93f4a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7d826fd7-5946-4395-b72f-0d6a8a34dd60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0f0c75-5bc1-4e0b-be7b-7f487ef93f4a",
        "cursor": {
          "ref": "ffb77995-0991-4e22-b6d2-5e60348cb896",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "48847c4b-d123-499d-a675-4d410e5a3dce"
        },
        "item": {
          "id": "1c0f0c75-5bc1-4e0b-be7b-7f487ef93f4a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7d826fd7-5946-4395-b72f-0d6a8a34dd60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f0fa2f-6f1c-4bfc-b497-e218f163d913",
        "cursor": {
          "ref": "5a5cb59f-9e25-4ed2-aa3e-adb9158a215a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0080e5a5-e8de-4e0d-b113-3d28bc49549d"
        },
        "item": {
          "id": "86f0fa2f-6f1c-4bfc-b497-e218f163d913",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5c3b9ee6-31b2-4e01-a63d-377d5392e436",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f0fa2f-6f1c-4bfc-b497-e218f163d913",
        "cursor": {
          "ref": "5a5cb59f-9e25-4ed2-aa3e-adb9158a215a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0080e5a5-e8de-4e0d-b113-3d28bc49549d"
        },
        "item": {
          "id": "86f0fa2f-6f1c-4bfc-b497-e218f163d913",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5c3b9ee6-31b2-4e01-a63d-377d5392e436",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b1f6e8-e25e-4c75-a9f4-fc0f618620c5",
        "cursor": {
          "ref": "55363606-1c6b-4355-9a24-85bdc8e84555",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ee147e67-cffd-449e-a262-5585c3d38380"
        },
        "item": {
          "id": "58b1f6e8-e25e-4c75-a9f4-fc0f618620c5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a64778da-94ea-499e-a7ef-d3a5eccc892f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b1f6e8-e25e-4c75-a9f4-fc0f618620c5",
        "cursor": {
          "ref": "55363606-1c6b-4355-9a24-85bdc8e84555",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ee147e67-cffd-449e-a262-5585c3d38380"
        },
        "item": {
          "id": "58b1f6e8-e25e-4c75-a9f4-fc0f618620c5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a64778da-94ea-499e-a7ef-d3a5eccc892f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7330976-f42f-4072-ae09-3fab56215bcf",
        "cursor": {
          "ref": "9cc5f4ee-0279-4fdd-98b1-2e510f173564",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "92aaedad-12dc-47fc-919e-0e294d9b216a"
        },
        "item": {
          "id": "c7330976-f42f-4072-ae09-3fab56215bcf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "292b32ee-a8f8-43e6-b8a4-93502b89a46c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7330976-f42f-4072-ae09-3fab56215bcf",
        "cursor": {
          "ref": "9cc5f4ee-0279-4fdd-98b1-2e510f173564",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "92aaedad-12dc-47fc-919e-0e294d9b216a"
        },
        "item": {
          "id": "c7330976-f42f-4072-ae09-3fab56215bcf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "292b32ee-a8f8-43e6-b8a4-93502b89a46c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad185d8-1bcf-4628-8571-5c8d7fa232b6",
        "cursor": {
          "ref": "6693aa0e-52ac-49f7-a696-25c7f152faea",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8b1d3994-8175-49e7-9404-ff41d23a37cf"
        },
        "item": {
          "id": "6ad185d8-1bcf-4628-8571-5c8d7fa232b6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c092ed85-3b9b-49bd-a1a3-fd5643f87aed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad185d8-1bcf-4628-8571-5c8d7fa232b6",
        "cursor": {
          "ref": "6693aa0e-52ac-49f7-a696-25c7f152faea",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8b1d3994-8175-49e7-9404-ff41d23a37cf"
        },
        "item": {
          "id": "6ad185d8-1bcf-4628-8571-5c8d7fa232b6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c092ed85-3b9b-49bd-a1a3-fd5643f87aed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac1877d-89eb-4f92-b7c0-02e782e65282",
        "cursor": {
          "ref": "ddd59286-ae24-4ab9-bc4b-88f49762209b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0c4f0682-81ec-47fd-966c-5c37d97617f1"
        },
        "item": {
          "id": "6ac1877d-89eb-4f92-b7c0-02e782e65282",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7e485e17-e7f9-4e20-96ea-04b9d052dedd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac1877d-89eb-4f92-b7c0-02e782e65282",
        "cursor": {
          "ref": "ddd59286-ae24-4ab9-bc4b-88f49762209b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0c4f0682-81ec-47fd-966c-5c37d97617f1"
        },
        "item": {
          "id": "6ac1877d-89eb-4f92-b7c0-02e782e65282",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7e485e17-e7f9-4e20-96ea-04b9d052dedd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b4d463-5192-4b27-a410-a9f53aae4346",
        "cursor": {
          "ref": "dc506b5d-303a-4687-bdc7-8df97e61c860",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "be393904-5124-446b-bcbc-7f9e97a6b391"
        },
        "item": {
          "id": "76b4d463-5192-4b27-a410-a9f53aae4346",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ed4ece2f-f9cd-4f82-9b7c-4f14978b9adc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b4d463-5192-4b27-a410-a9f53aae4346",
        "cursor": {
          "ref": "dc506b5d-303a-4687-bdc7-8df97e61c860",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "be393904-5124-446b-bcbc-7f9e97a6b391"
        },
        "item": {
          "id": "76b4d463-5192-4b27-a410-a9f53aae4346",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ed4ece2f-f9cd-4f82-9b7c-4f14978b9adc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ea154e-c0a7-4097-bfda-92ca23773a78",
        "cursor": {
          "ref": "e24182bf-caa8-4a52-b384-0807695f7e68",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e2502454-991a-4e6d-9455-2a41d842577f"
        },
        "item": {
          "id": "e5ea154e-c0a7-4097-bfda-92ca23773a78",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5b0b77bb-ac04-42e7-920d-9741d31c5c7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ea154e-c0a7-4097-bfda-92ca23773a78",
        "cursor": {
          "ref": "e24182bf-caa8-4a52-b384-0807695f7e68",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e2502454-991a-4e6d-9455-2a41d842577f"
        },
        "item": {
          "id": "e5ea154e-c0a7-4097-bfda-92ca23773a78",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5b0b77bb-ac04-42e7-920d-9741d31c5c7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1803c09-5d2d-4d0b-9f61-f332b2e2a31a",
        "cursor": {
          "ref": "1c446c24-b496-497c-a4fa-6b338dcaed5b",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "967d1105-d5ee-4204-b833-35dd912cd42f"
        },
        "item": {
          "id": "d1803c09-5d2d-4d0b-9f61-f332b2e2a31a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5adc091b-d627-44a6-a572-47288e2d00ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1803c09-5d2d-4d0b-9f61-f332b2e2a31a",
        "cursor": {
          "ref": "1c446c24-b496-497c-a4fa-6b338dcaed5b",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "967d1105-d5ee-4204-b833-35dd912cd42f"
        },
        "item": {
          "id": "d1803c09-5d2d-4d0b-9f61-f332b2e2a31a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5adc091b-d627-44a6-a572-47288e2d00ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7e2ad0-ffd0-4cb6-a163-347393827753",
        "cursor": {
          "ref": "4d8f90f5-e610-4094-b708-0d36e7dacc41",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4be1621a-dac9-40f6-90bc-46cbaecd2afa"
        },
        "item": {
          "id": "ed7e2ad0-ffd0-4cb6-a163-347393827753",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f940c6a7-13f8-40c5-8865-e047b669a864",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7e2ad0-ffd0-4cb6-a163-347393827753",
        "cursor": {
          "ref": "4d8f90f5-e610-4094-b708-0d36e7dacc41",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4be1621a-dac9-40f6-90bc-46cbaecd2afa"
        },
        "item": {
          "id": "ed7e2ad0-ffd0-4cb6-a163-347393827753",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f940c6a7-13f8-40c5-8865-e047b669a864",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d14326-eefa-4953-90d5-83e03bc0140e",
        "cursor": {
          "ref": "961b21c6-7ab2-477b-ab0f-f95218848319",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8fc014ec-f962-4881-99bc-e7e6a9bd6225"
        },
        "item": {
          "id": "29d14326-eefa-4953-90d5-83e03bc0140e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4e8e734f-a973-4632-9276-f4c8c502ff15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d14326-eefa-4953-90d5-83e03bc0140e",
        "cursor": {
          "ref": "961b21c6-7ab2-477b-ab0f-f95218848319",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8fc014ec-f962-4881-99bc-e7e6a9bd6225"
        },
        "item": {
          "id": "29d14326-eefa-4953-90d5-83e03bc0140e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4e8e734f-a973-4632-9276-f4c8c502ff15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889e8960-4d0d-49e6-86f0-475e65fc9301",
        "cursor": {
          "ref": "6a5962b8-795f-46c3-9d55-3969f3b7c409",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "072b7586-550a-408f-a055-67b92c750ced"
        },
        "item": {
          "id": "889e8960-4d0d-49e6-86f0-475e65fc9301",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1f18d83e-7a3f-4466-bbae-0961e945fd47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889e8960-4d0d-49e6-86f0-475e65fc9301",
        "cursor": {
          "ref": "6a5962b8-795f-46c3-9d55-3969f3b7c409",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "072b7586-550a-408f-a055-67b92c750ced"
        },
        "item": {
          "id": "889e8960-4d0d-49e6-86f0-475e65fc9301",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1f18d83e-7a3f-4466-bbae-0961e945fd47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2736306-1751-4f8c-94c7-e97a470fa7cd",
        "cursor": {
          "ref": "baa36590-c95f-400e-8ba0-d16861554479",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b1832fed-e3d4-4b28-ae65-b6bf07aa44db"
        },
        "item": {
          "id": "b2736306-1751-4f8c-94c7-e97a470fa7cd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e832e010-48cc-4ebc-8513-db62bd6b964a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2736306-1751-4f8c-94c7-e97a470fa7cd",
        "cursor": {
          "ref": "baa36590-c95f-400e-8ba0-d16861554479",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b1832fed-e3d4-4b28-ae65-b6bf07aa44db"
        },
        "item": {
          "id": "b2736306-1751-4f8c-94c7-e97a470fa7cd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e832e010-48cc-4ebc-8513-db62bd6b964a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b112ab-2e39-455a-8448-0b1e2c7e4fd9",
        "cursor": {
          "ref": "6b727ca8-eda7-413f-8e11-b1f94f31e072",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "32243e38-ef17-4f23-8ae7-306a7b9d804e"
        },
        "item": {
          "id": "70b112ab-2e39-455a-8448-0b1e2c7e4fd9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0c4de7d4-a973-411a-9870-98bf48a49644",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b112ab-2e39-455a-8448-0b1e2c7e4fd9",
        "cursor": {
          "ref": "6b727ca8-eda7-413f-8e11-b1f94f31e072",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "32243e38-ef17-4f23-8ae7-306a7b9d804e"
        },
        "item": {
          "id": "70b112ab-2e39-455a-8448-0b1e2c7e4fd9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0c4de7d4-a973-411a-9870-98bf48a49644",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b4b89f-a3ec-4d24-b406-d209609c43fa",
        "cursor": {
          "ref": "8f6ebd1f-7803-4cd2-9e98-1367c2042151",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f0082a21-5eac-4d35-822f-f451b31c73b9"
        },
        "item": {
          "id": "35b4b89f-a3ec-4d24-b406-d209609c43fa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "731c1e84-0fa8-4534-a661-0d24913b81c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b4b89f-a3ec-4d24-b406-d209609c43fa",
        "cursor": {
          "ref": "8f6ebd1f-7803-4cd2-9e98-1367c2042151",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f0082a21-5eac-4d35-822f-f451b31c73b9"
        },
        "item": {
          "id": "35b4b89f-a3ec-4d24-b406-d209609c43fa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "731c1e84-0fa8-4534-a661-0d24913b81c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f9291c-e2d3-4a86-b817-99d63acf01ec",
        "cursor": {
          "ref": "9cb8ec4f-d2d5-4572-8c98-5519ae3c3524",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cfc84f16-0e59-4787-ab3a-abdf35da117b"
        },
        "item": {
          "id": "97f9291c-e2d3-4a86-b817-99d63acf01ec",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1f7f2ac4-075d-48cc-8864-de4d88ea0690",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f9291c-e2d3-4a86-b817-99d63acf01ec",
        "cursor": {
          "ref": "9cb8ec4f-d2d5-4572-8c98-5519ae3c3524",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cfc84f16-0e59-4787-ab3a-abdf35da117b"
        },
        "item": {
          "id": "97f9291c-e2d3-4a86-b817-99d63acf01ec",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1f7f2ac4-075d-48cc-8864-de4d88ea0690",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff95927-99d9-44f4-9ba4-2379c8435c24",
        "cursor": {
          "ref": "50099d1e-0126-4724-9a0d-50fd61028e63",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "04161947-9f0e-4e1c-9c61-507ba88063bd"
        },
        "item": {
          "id": "eff95927-99d9-44f4-9ba4-2379c8435c24",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "733b91b3-6129-4100-bffd-e6650cd2f011",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff95927-99d9-44f4-9ba4-2379c8435c24",
        "cursor": {
          "ref": "50099d1e-0126-4724-9a0d-50fd61028e63",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "04161947-9f0e-4e1c-9c61-507ba88063bd"
        },
        "item": {
          "id": "eff95927-99d9-44f4-9ba4-2379c8435c24",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "733b91b3-6129-4100-bffd-e6650cd2f011",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0f6488-8df7-4e22-8eea-10cb2aec677a",
        "cursor": {
          "ref": "3a224fe7-1ce8-489c-a76e-75c17f4b8549",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3bf409ae-c452-4734-8b71-b2d9865fd42c"
        },
        "item": {
          "id": "bc0f6488-8df7-4e22-8eea-10cb2aec677a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a21e467b-d27f-4cdf-aea3-f0d126633783",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0f6488-8df7-4e22-8eea-10cb2aec677a",
        "cursor": {
          "ref": "3a224fe7-1ce8-489c-a76e-75c17f4b8549",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3bf409ae-c452-4734-8b71-b2d9865fd42c"
        },
        "item": {
          "id": "bc0f6488-8df7-4e22-8eea-10cb2aec677a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a21e467b-d27f-4cdf-aea3-f0d126633783",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d368cddf-fd68-4435-9f9a-8fda5e157f32",
        "cursor": {
          "ref": "97286eed-e5c3-401e-b1fb-9e8a22021329",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cc8a7e23-7159-4513-a9d5-a1d7b762a80a"
        },
        "item": {
          "id": "d368cddf-fd68-4435-9f9a-8fda5e157f32",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "751e0cd2-b70c-4000-9984-ad075e198aa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d368cddf-fd68-4435-9f9a-8fda5e157f32",
        "cursor": {
          "ref": "97286eed-e5c3-401e-b1fb-9e8a22021329",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cc8a7e23-7159-4513-a9d5-a1d7b762a80a"
        },
        "item": {
          "id": "d368cddf-fd68-4435-9f9a-8fda5e157f32",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "751e0cd2-b70c-4000-9984-ad075e198aa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc7a841-0b9e-4ea3-b342-d43ffabec9b1",
        "cursor": {
          "ref": "76c2874b-26d3-4982-b0f9-0d6f3c9a3523",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7c0122f4-bd8d-4ba5-b552-bd4a1c35d36a"
        },
        "item": {
          "id": "6dc7a841-0b9e-4ea3-b342-d43ffabec9b1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2454f1bb-19c6-4e4a-ac66-ad6fa6d7112a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc7a841-0b9e-4ea3-b342-d43ffabec9b1",
        "cursor": {
          "ref": "76c2874b-26d3-4982-b0f9-0d6f3c9a3523",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7c0122f4-bd8d-4ba5-b552-bd4a1c35d36a"
        },
        "item": {
          "id": "6dc7a841-0b9e-4ea3-b342-d43ffabec9b1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2454f1bb-19c6-4e4a-ac66-ad6fa6d7112a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567b902f-5a47-4ea7-9530-8ff5c6637a64",
        "cursor": {
          "ref": "4cb77ad4-971d-46de-a7fa-44f43c39a59d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c2e2125a-0552-4a8a-bd85-136f7020a6af"
        },
        "item": {
          "id": "567b902f-5a47-4ea7-9530-8ff5c6637a64",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c0d9707c-d222-405b-84ec-ef4a1a9ac80b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567b902f-5a47-4ea7-9530-8ff5c6637a64",
        "cursor": {
          "ref": "4cb77ad4-971d-46de-a7fa-44f43c39a59d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c2e2125a-0552-4a8a-bd85-136f7020a6af"
        },
        "item": {
          "id": "567b902f-5a47-4ea7-9530-8ff5c6637a64",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c0d9707c-d222-405b-84ec-ef4a1a9ac80b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a8152d-4ee8-4fad-abc5-c65f9555ab5c",
        "cursor": {
          "ref": "00d12b32-7b62-4b18-92a7-122e1986f747",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f6aefdab-41a0-454d-93bb-ad7eb5dfbd62"
        },
        "item": {
          "id": "26a8152d-4ee8-4fad-abc5-c65f9555ab5c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5104d1b1-073a-4e32-83ec-62cacae38299",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a8152d-4ee8-4fad-abc5-c65f9555ab5c",
        "cursor": {
          "ref": "00d12b32-7b62-4b18-92a7-122e1986f747",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f6aefdab-41a0-454d-93bb-ad7eb5dfbd62"
        },
        "item": {
          "id": "26a8152d-4ee8-4fad-abc5-c65f9555ab5c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5104d1b1-073a-4e32-83ec-62cacae38299",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acca5fb-9ea5-4cd7-a338-16f06544ee2d",
        "cursor": {
          "ref": "956ba5d3-51e4-4ce4-bef4-ad345b77090f",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c2baff9e-f021-4146-9701-2c46b7218dc4"
        },
        "item": {
          "id": "6acca5fb-9ea5-4cd7-a338-16f06544ee2d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7cd9286a-7ecd-4a7c-a0f8-831800e80bc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acca5fb-9ea5-4cd7-a338-16f06544ee2d",
        "cursor": {
          "ref": "956ba5d3-51e4-4ce4-bef4-ad345b77090f",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c2baff9e-f021-4146-9701-2c46b7218dc4"
        },
        "item": {
          "id": "6acca5fb-9ea5-4cd7-a338-16f06544ee2d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7cd9286a-7ecd-4a7c-a0f8-831800e80bc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6604109-5ce2-4f1a-8273-7062aa482870",
        "cursor": {
          "ref": "61b61c99-6795-45d9-89f1-2c9fb91efd41",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7daeba27-f8ee-416a-81a2-2c46a64659ca"
        },
        "item": {
          "id": "a6604109-5ce2-4f1a-8273-7062aa482870",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8552c5bc-3fa8-4658-8b2d-a6e551ac6571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6604109-5ce2-4f1a-8273-7062aa482870",
        "cursor": {
          "ref": "61b61c99-6795-45d9-89f1-2c9fb91efd41",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7daeba27-f8ee-416a-81a2-2c46a64659ca"
        },
        "item": {
          "id": "a6604109-5ce2-4f1a-8273-7062aa482870",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8552c5bc-3fa8-4658-8b2d-a6e551ac6571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb1f7c6-5471-4c14-971c-b087c245a580",
        "cursor": {
          "ref": "fb23165e-c471-431f-9e79-e56c9518aa18",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7cfd2fb9-8443-4ddb-89f3-f8eff34a42eb"
        },
        "item": {
          "id": "4eb1f7c6-5471-4c14-971c-b087c245a580",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fc5c50f4-c540-4319-b41f-560baf4cedd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb1f7c6-5471-4c14-971c-b087c245a580",
        "cursor": {
          "ref": "fb23165e-c471-431f-9e79-e56c9518aa18",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7cfd2fb9-8443-4ddb-89f3-f8eff34a42eb"
        },
        "item": {
          "id": "4eb1f7c6-5471-4c14-971c-b087c245a580",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fc5c50f4-c540-4319-b41f-560baf4cedd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fede0e76-54ca-49e5-8cf0-f08a3eb6862d",
        "cursor": {
          "ref": "2920d708-8ea3-436d-8be6-159f20fabe9f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4b5b4b05-0a1a-47ac-b727-eec825d8e6c6"
        },
        "item": {
          "id": "fede0e76-54ca-49e5-8cf0-f08a3eb6862d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "340ef807-d6e8-433d-a582-3a12bfcbd5ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fede0e76-54ca-49e5-8cf0-f08a3eb6862d",
        "cursor": {
          "ref": "2920d708-8ea3-436d-8be6-159f20fabe9f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4b5b4b05-0a1a-47ac-b727-eec825d8e6c6"
        },
        "item": {
          "id": "fede0e76-54ca-49e5-8cf0-f08a3eb6862d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "340ef807-d6e8-433d-a582-3a12bfcbd5ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8b8d98-5c91-426f-82ea-b1a1c935db02",
        "cursor": {
          "ref": "5816deae-af5a-4b94-97e5-37842f254514",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "35f49705-9923-40bb-b10a-4a8c4b57337d"
        },
        "item": {
          "id": "bb8b8d98-5c91-426f-82ea-b1a1c935db02",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5c147af9-dca2-4d6b-9e8c-df8c1f996ec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8b8d98-5c91-426f-82ea-b1a1c935db02",
        "cursor": {
          "ref": "5816deae-af5a-4b94-97e5-37842f254514",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "35f49705-9923-40bb-b10a-4a8c4b57337d"
        },
        "item": {
          "id": "bb8b8d98-5c91-426f-82ea-b1a1c935db02",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5c147af9-dca2-4d6b-9e8c-df8c1f996ec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96debbb-07d9-4607-884f-d72c9e0dc693",
        "cursor": {
          "ref": "4af7540a-b9b8-43aa-90de-c3de3baede71",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "eb28adc5-e2f1-4e0f-a3c5-c5d9b7decbc7"
        },
        "item": {
          "id": "f96debbb-07d9-4607-884f-d72c9e0dc693",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a9ddb6fe-a072-4390-a042-cf421297a529",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96debbb-07d9-4607-884f-d72c9e0dc693",
        "cursor": {
          "ref": "4af7540a-b9b8-43aa-90de-c3de3baede71",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "eb28adc5-e2f1-4e0f-a3c5-c5d9b7decbc7"
        },
        "item": {
          "id": "f96debbb-07d9-4607-884f-d72c9e0dc693",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a9ddb6fe-a072-4390-a042-cf421297a529",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52099711-feef-4e16-9431-7b5ff228c059",
        "cursor": {
          "ref": "320e9f0b-f66c-4c32-bf7b-a126c7143ef6",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1699fd53-d424-42fd-8105-577985b05c0e"
        },
        "item": {
          "id": "52099711-feef-4e16-9431-7b5ff228c059",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1387fb52-13e5-49bc-a33a-849973bc244d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52099711-feef-4e16-9431-7b5ff228c059",
        "cursor": {
          "ref": "320e9f0b-f66c-4c32-bf7b-a126c7143ef6",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1699fd53-d424-42fd-8105-577985b05c0e"
        },
        "item": {
          "id": "52099711-feef-4e16-9431-7b5ff228c059",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1387fb52-13e5-49bc-a33a-849973bc244d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a3b280-b410-4ca8-aaea-8fa8c9c4dfd1",
        "cursor": {
          "ref": "530900e8-cb8a-434a-beab-85f4b23e16a2",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "007f2b28-8b5b-4b59-86f8-8f59e24a3dc0"
        },
        "item": {
          "id": "83a3b280-b410-4ca8-aaea-8fa8c9c4dfd1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d2315eba-4b23-4680-b13c-20c2819aeb14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a3b280-b410-4ca8-aaea-8fa8c9c4dfd1",
        "cursor": {
          "ref": "530900e8-cb8a-434a-beab-85f4b23e16a2",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "007f2b28-8b5b-4b59-86f8-8f59e24a3dc0"
        },
        "item": {
          "id": "83a3b280-b410-4ca8-aaea-8fa8c9c4dfd1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d2315eba-4b23-4680-b13c-20c2819aeb14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d76d6f3-c19e-49e9-be7b-bcad730e750b",
        "cursor": {
          "ref": "ca98cbe6-c02b-41e6-b8ca-2c5a55d770f2",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e56313e3-9199-49b3-ad1a-9e37a65a7f7c"
        },
        "item": {
          "id": "5d76d6f3-c19e-49e9-be7b-bcad730e750b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9aea6e34-7030-4852-a5b8-0b5f7414a5d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d76d6f3-c19e-49e9-be7b-bcad730e750b",
        "cursor": {
          "ref": "ca98cbe6-c02b-41e6-b8ca-2c5a55d770f2",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e56313e3-9199-49b3-ad1a-9e37a65a7f7c"
        },
        "item": {
          "id": "5d76d6f3-c19e-49e9-be7b-bcad730e750b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9aea6e34-7030-4852-a5b8-0b5f7414a5d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a50170-1c0b-4eff-b14e-233fbe7a8e9a",
        "cursor": {
          "ref": "ccf652d6-c89f-4793-be0f-c5d2fb2dc7ab",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c3f9cd91-c66c-4612-88ac-a55cfb990488"
        },
        "item": {
          "id": "a0a50170-1c0b-4eff-b14e-233fbe7a8e9a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3f96a048-07ac-4e3d-af78-f05a424aaca8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a50170-1c0b-4eff-b14e-233fbe7a8e9a",
        "cursor": {
          "ref": "ccf652d6-c89f-4793-be0f-c5d2fb2dc7ab",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c3f9cd91-c66c-4612-88ac-a55cfb990488"
        },
        "item": {
          "id": "a0a50170-1c0b-4eff-b14e-233fbe7a8e9a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3f96a048-07ac-4e3d-af78-f05a424aaca8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ca6195-a94d-4254-8836-17ef6225dccd",
        "cursor": {
          "ref": "bbe91de0-40e1-4021-94e1-8fa4284a8d01",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "25a4ec3a-13c5-4d69-9533-c202e1329cca"
        },
        "item": {
          "id": "07ca6195-a94d-4254-8836-17ef6225dccd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "03425774-cca5-45b6-8f79-51772e068948",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ca6195-a94d-4254-8836-17ef6225dccd",
        "cursor": {
          "ref": "bbe91de0-40e1-4021-94e1-8fa4284a8d01",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "25a4ec3a-13c5-4d69-9533-c202e1329cca"
        },
        "item": {
          "id": "07ca6195-a94d-4254-8836-17ef6225dccd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "03425774-cca5-45b6-8f79-51772e068948",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a2e94f-392c-45c2-b691-020a495744b5",
        "cursor": {
          "ref": "55a5f1ff-6313-401e-839b-17568a0e3276",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "735fdbfa-be5b-43c9-8c1c-e137f6ea6d2a"
        },
        "item": {
          "id": "b4a2e94f-392c-45c2-b691-020a495744b5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b47febed-5d4c-4e58-a186-d8b715442f0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a2e94f-392c-45c2-b691-020a495744b5",
        "cursor": {
          "ref": "55a5f1ff-6313-401e-839b-17568a0e3276",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "735fdbfa-be5b-43c9-8c1c-e137f6ea6d2a"
        },
        "item": {
          "id": "b4a2e94f-392c-45c2-b691-020a495744b5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b47febed-5d4c-4e58-a186-d8b715442f0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97438b3e-80f6-4c29-b593-7d03d191206e",
        "cursor": {
          "ref": "f81d77b2-712c-4017-8109-2aa1763d436f",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f7d0512d-ea9d-4be8-9179-b8fd27f8146f"
        },
        "item": {
          "id": "97438b3e-80f6-4c29-b593-7d03d191206e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "91e36515-5622-497c-860b-460ed68a3557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97438b3e-80f6-4c29-b593-7d03d191206e",
        "cursor": {
          "ref": "f81d77b2-712c-4017-8109-2aa1763d436f",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f7d0512d-ea9d-4be8-9179-b8fd27f8146f"
        },
        "item": {
          "id": "97438b3e-80f6-4c29-b593-7d03d191206e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "91e36515-5622-497c-860b-460ed68a3557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99cb003-1da9-461a-a10c-b627e7f7ced4",
        "cursor": {
          "ref": "b5000687-b1eb-4731-a27b-56e95c96e0c8",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ef78fe3b-0d48-4225-b7f2-b91aacf7573f"
        },
        "item": {
          "id": "b99cb003-1da9-461a-a10c-b627e7f7ced4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "73a0e4f8-c302-4328-8164-96f64de0136f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99cb003-1da9-461a-a10c-b627e7f7ced4",
        "cursor": {
          "ref": "b5000687-b1eb-4731-a27b-56e95c96e0c8",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ef78fe3b-0d48-4225-b7f2-b91aacf7573f"
        },
        "item": {
          "id": "b99cb003-1da9-461a-a10c-b627e7f7ced4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "73a0e4f8-c302-4328-8164-96f64de0136f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509952f1-3f73-4d92-8dba-19ec1abce37b",
        "cursor": {
          "ref": "686ab4f6-57b9-4e60-8d34-ed8528cbcda0",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a939683d-4414-470f-be36-ae01457cfcdf"
        },
        "item": {
          "id": "509952f1-3f73-4d92-8dba-19ec1abce37b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9b3689c1-a720-43c7-bb4c-60c19394b4df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509952f1-3f73-4d92-8dba-19ec1abce37b",
        "cursor": {
          "ref": "686ab4f6-57b9-4e60-8d34-ed8528cbcda0",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a939683d-4414-470f-be36-ae01457cfcdf"
        },
        "item": {
          "id": "509952f1-3f73-4d92-8dba-19ec1abce37b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9b3689c1-a720-43c7-bb4c-60c19394b4df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603b3b6a-221d-405d-9f79-681c9c3e0e6e",
        "cursor": {
          "ref": "aa04a905-1c31-4d1e-827b-9d7d449dc063",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0289ca1d-537e-449f-ad4c-7c260a0477f0"
        },
        "item": {
          "id": "603b3b6a-221d-405d-9f79-681c9c3e0e6e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2900b370-f0ce-4411-90f9-bc81abb0c73e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603b3b6a-221d-405d-9f79-681c9c3e0e6e",
        "cursor": {
          "ref": "aa04a905-1c31-4d1e-827b-9d7d449dc063",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0289ca1d-537e-449f-ad4c-7c260a0477f0"
        },
        "item": {
          "id": "603b3b6a-221d-405d-9f79-681c9c3e0e6e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2900b370-f0ce-4411-90f9-bc81abb0c73e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae936ca-2ec7-4148-b368-9324d61abd08",
        "cursor": {
          "ref": "b6cc4ab0-10b7-42f4-bd08-7a5d9425e4e8",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0fcf0601-3b86-46a1-8cd5-c05a628f51c3"
        },
        "item": {
          "id": "8ae936ca-2ec7-4148-b368-9324d61abd08",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "30621427-d475-43e6-aa9d-917bd8f5bd3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae936ca-2ec7-4148-b368-9324d61abd08",
        "cursor": {
          "ref": "b6cc4ab0-10b7-42f4-bd08-7a5d9425e4e8",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0fcf0601-3b86-46a1-8cd5-c05a628f51c3"
        },
        "item": {
          "id": "8ae936ca-2ec7-4148-b368-9324d61abd08",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "30621427-d475-43e6-aa9d-917bd8f5bd3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5826b049-8f16-46a2-a674-d95e899cc20e",
        "cursor": {
          "ref": "189e7020-229b-49ae-aa7e-106fe11007c4",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "32ff1697-e7c4-45e6-8d73-77467f467c1c"
        },
        "item": {
          "id": "5826b049-8f16-46a2-a674-d95e899cc20e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2aa606e6-ce46-4c73-a147-4e0c5a01cc58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5826b049-8f16-46a2-a674-d95e899cc20e",
        "cursor": {
          "ref": "189e7020-229b-49ae-aa7e-106fe11007c4",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "32ff1697-e7c4-45e6-8d73-77467f467c1c"
        },
        "item": {
          "id": "5826b049-8f16-46a2-a674-d95e899cc20e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2aa606e6-ce46-4c73-a147-4e0c5a01cc58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b75a7de-6de6-46db-8f03-44125c07bdbd",
        "cursor": {
          "ref": "52bbbd49-c1bf-4a55-baa7-517239b09b3a",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "193fcefe-958f-4af0-be2e-3310425cfaec"
        },
        "item": {
          "id": "3b75a7de-6de6-46db-8f03-44125c07bdbd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "00d51700-8344-4175-8bf5-cef36937c76c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 130,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b75a7de-6de6-46db-8f03-44125c07bdbd",
        "cursor": {
          "ref": "52bbbd49-c1bf-4a55-baa7-517239b09b3a",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "193fcefe-958f-4af0-be2e-3310425cfaec"
        },
        "item": {
          "id": "3b75a7de-6de6-46db-8f03-44125c07bdbd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "00d51700-8344-4175-8bf5-cef36937c76c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 130,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1636b253-f405-46d7-a45b-34fdc61c38cc",
        "cursor": {
          "ref": "fe7dec51-79c6-4064-8af9-aa7c77d24aef",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "65a19f92-27a2-461e-8b5f-2c5e67fd4bf6"
        },
        "item": {
          "id": "1636b253-f405-46d7-a45b-34fdc61c38cc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "83a5ed92-3a5c-44ba-a698-12c69864c829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1636b253-f405-46d7-a45b-34fdc61c38cc",
        "cursor": {
          "ref": "fe7dec51-79c6-4064-8af9-aa7c77d24aef",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "65a19f92-27a2-461e-8b5f-2c5e67fd4bf6"
        },
        "item": {
          "id": "1636b253-f405-46d7-a45b-34fdc61c38cc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "83a5ed92-3a5c-44ba-a698-12c69864c829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a927f5c2-9c8b-49d4-9fbc-11c74c9de67d",
        "cursor": {
          "ref": "97c35c5b-e148-42d8-8932-56c623bdc0bf",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5cf2744c-46f0-49de-bdae-61ec04fb4d09"
        },
        "item": {
          "id": "a927f5c2-9c8b-49d4-9fbc-11c74c9de67d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "34673cd0-8b12-49d5-862c-5e22319d3749",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a927f5c2-9c8b-49d4-9fbc-11c74c9de67d",
        "cursor": {
          "ref": "97c35c5b-e148-42d8-8932-56c623bdc0bf",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5cf2744c-46f0-49de-bdae-61ec04fb4d09"
        },
        "item": {
          "id": "a927f5c2-9c8b-49d4-9fbc-11c74c9de67d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "34673cd0-8b12-49d5-862c-5e22319d3749",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cf88d3-dc95-4696-adce-3c37ea8ccee4",
        "cursor": {
          "ref": "a307ebf5-5eb1-4c6c-9e7d-54fd3f3a0f16",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ab42647b-ff15-42f2-b09a-e71a2e7a404e"
        },
        "item": {
          "id": "62cf88d3-dc95-4696-adce-3c37ea8ccee4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "41f571e7-c34b-4033-84d6-c4e864de39d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cf88d3-dc95-4696-adce-3c37ea8ccee4",
        "cursor": {
          "ref": "a307ebf5-5eb1-4c6c-9e7d-54fd3f3a0f16",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ab42647b-ff15-42f2-b09a-e71a2e7a404e"
        },
        "item": {
          "id": "62cf88d3-dc95-4696-adce-3c37ea8ccee4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "41f571e7-c34b-4033-84d6-c4e864de39d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7897a3f-4ec7-4654-a02e-c185f481b829",
        "cursor": {
          "ref": "2020e3d0-3b8d-403d-acfd-f65d615a8ce5",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b0f88375-7cd4-4589-a66b-f6ff38f5db98"
        },
        "item": {
          "id": "a7897a3f-4ec7-4654-a02e-c185f481b829",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e74d9025-405a-4b77-a898-b3e15e7a863d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7897a3f-4ec7-4654-a02e-c185f481b829",
        "cursor": {
          "ref": "2020e3d0-3b8d-403d-acfd-f65d615a8ce5",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b0f88375-7cd4-4589-a66b-f6ff38f5db98"
        },
        "item": {
          "id": "a7897a3f-4ec7-4654-a02e-c185f481b829",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e74d9025-405a-4b77-a898-b3e15e7a863d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2cf1a3-9b7d-4489-ad75-67adf1dad198",
        "cursor": {
          "ref": "a356d9a2-87de-40c7-9d04-3ebcbc3f7051",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3adea0e3-7810-442f-9f8c-ae2370f6f549"
        },
        "item": {
          "id": "2f2cf1a3-9b7d-4489-ad75-67adf1dad198",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6034c165-2da1-4feb-95ec-6f170ce3d695",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2cf1a3-9b7d-4489-ad75-67adf1dad198",
        "cursor": {
          "ref": "a356d9a2-87de-40c7-9d04-3ebcbc3f7051",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3adea0e3-7810-442f-9f8c-ae2370f6f549"
        },
        "item": {
          "id": "2f2cf1a3-9b7d-4489-ad75-67adf1dad198",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6034c165-2da1-4feb-95ec-6f170ce3d695",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca7f7d2-966e-4b00-85f8-015a1bc69b19",
        "cursor": {
          "ref": "bf269727-fe4a-4421-ac0a-df62ff5666cd",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ad0509e7-99c1-4720-aa3c-8a5db7853c89"
        },
        "item": {
          "id": "2ca7f7d2-966e-4b00-85f8-015a1bc69b19",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "25ac2b33-1d67-4693-b1e8-fea8534f80d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca7f7d2-966e-4b00-85f8-015a1bc69b19",
        "cursor": {
          "ref": "bf269727-fe4a-4421-ac0a-df62ff5666cd",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ad0509e7-99c1-4720-aa3c-8a5db7853c89"
        },
        "item": {
          "id": "2ca7f7d2-966e-4b00-85f8-015a1bc69b19",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "25ac2b33-1d67-4693-b1e8-fea8534f80d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571d0831-7484-42be-9b77-211c8c276f36",
        "cursor": {
          "ref": "3cb0a4fa-b9da-4eff-a224-d66abecaf418",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "93e69889-ab89-489c-81c2-9ff77f0c775a"
        },
        "item": {
          "id": "571d0831-7484-42be-9b77-211c8c276f36",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "51ea3c83-27c4-4117-80b6-7162ad3fdd94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571d0831-7484-42be-9b77-211c8c276f36",
        "cursor": {
          "ref": "3cb0a4fa-b9da-4eff-a224-d66abecaf418",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "93e69889-ab89-489c-81c2-9ff77f0c775a"
        },
        "item": {
          "id": "571d0831-7484-42be-9b77-211c8c276f36",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "51ea3c83-27c4-4117-80b6-7162ad3fdd94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d694d7c-22ca-4bb6-a061-61bcdb413f7f",
        "cursor": {
          "ref": "a8547d90-ccfd-44af-a97c-6e0a1fc9023a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "12b08414-6eeb-40ea-acfa-65ece44058ef"
        },
        "item": {
          "id": "5d694d7c-22ca-4bb6-a061-61bcdb413f7f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "32acd7a4-9ef5-4aff-b091-59750938952e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d694d7c-22ca-4bb6-a061-61bcdb413f7f",
        "cursor": {
          "ref": "a8547d90-ccfd-44af-a97c-6e0a1fc9023a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "12b08414-6eeb-40ea-acfa-65ece44058ef"
        },
        "item": {
          "id": "5d694d7c-22ca-4bb6-a061-61bcdb413f7f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "32acd7a4-9ef5-4aff-b091-59750938952e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e186d0-3749-48aa-a3f1-488bb1c82170",
        "cursor": {
          "ref": "294414fc-896b-4b6b-bf48-cb376a4ad28c",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "211ebde8-e221-4f1b-a492-da0c7b75c82f"
        },
        "item": {
          "id": "87e186d0-3749-48aa-a3f1-488bb1c82170",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "56601966-cbde-4384-aa0c-e89de509322a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e186d0-3749-48aa-a3f1-488bb1c82170",
        "cursor": {
          "ref": "294414fc-896b-4b6b-bf48-cb376a4ad28c",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "211ebde8-e221-4f1b-a492-da0c7b75c82f"
        },
        "item": {
          "id": "87e186d0-3749-48aa-a3f1-488bb1c82170",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "56601966-cbde-4384-aa0c-e89de509322a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7481c7f-daa0-48a4-979c-05a407e47804",
        "cursor": {
          "ref": "e278ff8c-1ccd-4486-a901-185f06032f0a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c05163e5-08c5-4770-8a70-9c389e813eee"
        },
        "item": {
          "id": "f7481c7f-daa0-48a4-979c-05a407e47804",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "09a2e081-abe7-4eef-b614-481a722ad111",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7481c7f-daa0-48a4-979c-05a407e47804",
        "cursor": {
          "ref": "e278ff8c-1ccd-4486-a901-185f06032f0a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c05163e5-08c5-4770-8a70-9c389e813eee"
        },
        "item": {
          "id": "f7481c7f-daa0-48a4-979c-05a407e47804",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "09a2e081-abe7-4eef-b614-481a722ad111",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25099147-e04d-4e76-9367-3a084a942051",
        "cursor": {
          "ref": "b6aa0103-aab1-4f49-b897-91131f88a4f9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2c3d5e3b-b5df-4285-a772-8d3a351b6e94"
        },
        "item": {
          "id": "25099147-e04d-4e76-9367-3a084a942051",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "912877a0-def8-4acf-a3c8-0b4fee610250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25099147-e04d-4e76-9367-3a084a942051",
        "cursor": {
          "ref": "b6aa0103-aab1-4f49-b897-91131f88a4f9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2c3d5e3b-b5df-4285-a772-8d3a351b6e94"
        },
        "item": {
          "id": "25099147-e04d-4e76-9367-3a084a942051",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "912877a0-def8-4acf-a3c8-0b4fee610250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77902d07-2e78-4659-b89b-f3ecbe24d083",
        "cursor": {
          "ref": "35a2a9c7-9b4b-4d17-82cf-a8765371f5de",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6b5816ef-4989-45e0-81b9-31baf119d495"
        },
        "item": {
          "id": "77902d07-2e78-4659-b89b-f3ecbe24d083",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b7e70243-5de3-437f-b331-5815efdb14d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77902d07-2e78-4659-b89b-f3ecbe24d083",
        "cursor": {
          "ref": "35a2a9c7-9b4b-4d17-82cf-a8765371f5de",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6b5816ef-4989-45e0-81b9-31baf119d495"
        },
        "item": {
          "id": "77902d07-2e78-4659-b89b-f3ecbe24d083",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b7e70243-5de3-437f-b331-5815efdb14d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7260b8c7-290b-480a-8812-ef8557c5734c",
        "cursor": {
          "ref": "274354dc-7b8d-4333-89ef-5005975722c5",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8b1dc0f9-1a71-4bf0-8a06-033f39fb5e6d"
        },
        "item": {
          "id": "7260b8c7-290b-480a-8812-ef8557c5734c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1c400eb7-90c4-44ad-acff-24ed83bd9806",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7260b8c7-290b-480a-8812-ef8557c5734c",
        "cursor": {
          "ref": "274354dc-7b8d-4333-89ef-5005975722c5",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8b1dc0f9-1a71-4bf0-8a06-033f39fb5e6d"
        },
        "item": {
          "id": "7260b8c7-290b-480a-8812-ef8557c5734c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1c400eb7-90c4-44ad-acff-24ed83bd9806",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7b38f4-4599-4712-bebf-6de7abbab503",
        "cursor": {
          "ref": "d484549e-e1b8-4c0b-9edd-3f2c17319183",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0b7a775d-172e-46f2-9396-cf5a773ad822"
        },
        "item": {
          "id": "de7b38f4-4599-4712-bebf-6de7abbab503",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9413b0ab-5f73-43f2-a53d-1942b4cf4db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7b38f4-4599-4712-bebf-6de7abbab503",
        "cursor": {
          "ref": "d484549e-e1b8-4c0b-9edd-3f2c17319183",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0b7a775d-172e-46f2-9396-cf5a773ad822"
        },
        "item": {
          "id": "de7b38f4-4599-4712-bebf-6de7abbab503",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9413b0ab-5f73-43f2-a53d-1942b4cf4db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792759ec-1ecc-43cd-a8a6-23e94a8df277",
        "cursor": {
          "ref": "e9258cd9-fe7b-41af-88db-89cda6d91968",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8c8fc195-7cae-4cfc-a0ca-b77acda5d4ea"
        },
        "item": {
          "id": "792759ec-1ecc-43cd-a8a6-23e94a8df277",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "39fc2544-d93e-418c-958a-83556d8a901b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792759ec-1ecc-43cd-a8a6-23e94a8df277",
        "cursor": {
          "ref": "e9258cd9-fe7b-41af-88db-89cda6d91968",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8c8fc195-7cae-4cfc-a0ca-b77acda5d4ea"
        },
        "item": {
          "id": "792759ec-1ecc-43cd-a8a6-23e94a8df277",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "39fc2544-d93e-418c-958a-83556d8a901b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df065f8-af05-4fd1-8e10-cb156bf4adaa",
        "cursor": {
          "ref": "cb634a08-9ddf-4ae1-9686-0796e7191733",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b01bab57-274e-4cdb-8504-209d2eaaeec7"
        },
        "item": {
          "id": "2df065f8-af05-4fd1-8e10-cb156bf4adaa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "626ce22f-b99e-4a44-bc53-d1b4b9016226",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df065f8-af05-4fd1-8e10-cb156bf4adaa",
        "cursor": {
          "ref": "cb634a08-9ddf-4ae1-9686-0796e7191733",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b01bab57-274e-4cdb-8504-209d2eaaeec7"
        },
        "item": {
          "id": "2df065f8-af05-4fd1-8e10-cb156bf4adaa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "626ce22f-b99e-4a44-bc53-d1b4b9016226",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30781d2-eaed-4e05-bc89-7f32fcd44cf6",
        "cursor": {
          "ref": "a421315b-5c1d-4eb2-8084-de0a0a11071a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1a213ea6-571b-475c-9297-edf85e479fc6"
        },
        "item": {
          "id": "f30781d2-eaed-4e05-bc89-7f32fcd44cf6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c99e3450-041d-4b26-b4b6-b0505a75bca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30781d2-eaed-4e05-bc89-7f32fcd44cf6",
        "cursor": {
          "ref": "a421315b-5c1d-4eb2-8084-de0a0a11071a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1a213ea6-571b-475c-9297-edf85e479fc6"
        },
        "item": {
          "id": "f30781d2-eaed-4e05-bc89-7f32fcd44cf6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c99e3450-041d-4b26-b4b6-b0505a75bca5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eceb7cb-79fd-4661-b5f8-575f240615c0",
        "cursor": {
          "ref": "d7e42756-8dad-4280-a8ff-4e8280b48836",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d646a54c-c20d-4679-b755-6bb767e51c8d"
        },
        "item": {
          "id": "1eceb7cb-79fd-4661-b5f8-575f240615c0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4ec507bd-f16a-4425-a95d-c509adbad3d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eceb7cb-79fd-4661-b5f8-575f240615c0",
        "cursor": {
          "ref": "d7e42756-8dad-4280-a8ff-4e8280b48836",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d646a54c-c20d-4679-b755-6bb767e51c8d"
        },
        "item": {
          "id": "1eceb7cb-79fd-4661-b5f8-575f240615c0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4ec507bd-f16a-4425-a95d-c509adbad3d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d47832e-7aa0-4438-8f92-214ec3010e67",
        "cursor": {
          "ref": "c389fc9d-0618-4479-98ca-cc6ade993eff",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "717eb061-1ba7-4be8-a5a9-9120eafa4bd5"
        },
        "item": {
          "id": "6d47832e-7aa0-4438-8f92-214ec3010e67",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7ce6cd3b-ee3c-41c2-8357-6ff147c2219f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d47832e-7aa0-4438-8f92-214ec3010e67",
        "cursor": {
          "ref": "c389fc9d-0618-4479-98ca-cc6ade993eff",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "717eb061-1ba7-4be8-a5a9-9120eafa4bd5"
        },
        "item": {
          "id": "6d47832e-7aa0-4438-8f92-214ec3010e67",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7ce6cd3b-ee3c-41c2-8357-6ff147c2219f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356ccd8f-7f29-457d-9520-9be81ee3c2d2",
        "cursor": {
          "ref": "eb681072-59b8-459d-aac4-cbfb72043d33",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d8a30b5c-8272-4bbc-9b03-db3d311efc55"
        },
        "item": {
          "id": "356ccd8f-7f29-457d-9520-9be81ee3c2d2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ae3499e-ce18-4874-b4f0-e20b58672c1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356ccd8f-7f29-457d-9520-9be81ee3c2d2",
        "cursor": {
          "ref": "eb681072-59b8-459d-aac4-cbfb72043d33",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d8a30b5c-8272-4bbc-9b03-db3d311efc55"
        },
        "item": {
          "id": "356ccd8f-7f29-457d-9520-9be81ee3c2d2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ae3499e-ce18-4874-b4f0-e20b58672c1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82780c63-0a26-487e-91a8-a9398c27f1e3",
        "cursor": {
          "ref": "72d417a7-5290-40b8-9353-df6d3aba0cf9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "aa93eff3-64bc-4d20-b73b-dd02434e8d6f"
        },
        "item": {
          "id": "82780c63-0a26-487e-91a8-a9398c27f1e3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4b958114-d220-4644-b09b-5726f75e56cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82780c63-0a26-487e-91a8-a9398c27f1e3",
        "cursor": {
          "ref": "72d417a7-5290-40b8-9353-df6d3aba0cf9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "aa93eff3-64bc-4d20-b73b-dd02434e8d6f"
        },
        "item": {
          "id": "82780c63-0a26-487e-91a8-a9398c27f1e3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4b958114-d220-4644-b09b-5726f75e56cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674a9982-8252-4892-91af-693d1e1176de",
        "cursor": {
          "ref": "6564008d-08b1-454f-a08c-98633337881e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2c54c419-c515-4cb7-b2af-e16059eeb8da"
        },
        "item": {
          "id": "674a9982-8252-4892-91af-693d1e1176de",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "81cc3b6a-102a-4cda-b276-6f94407a7d49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674a9982-8252-4892-91af-693d1e1176de",
        "cursor": {
          "ref": "6564008d-08b1-454f-a08c-98633337881e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2c54c419-c515-4cb7-b2af-e16059eeb8da"
        },
        "item": {
          "id": "674a9982-8252-4892-91af-693d1e1176de",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "81cc3b6a-102a-4cda-b276-6f94407a7d49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580fc102-684e-4985-be9b-c24ef0883a6f",
        "cursor": {
          "ref": "7b93d9c5-b32c-4073-92b9-e7b51987a188",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7b2ab532-686e-4f17-819b-452a6d1e87a2"
        },
        "item": {
          "id": "580fc102-684e-4985-be9b-c24ef0883a6f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6ebe94f5-ad83-425c-a923-246d777c1c9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580fc102-684e-4985-be9b-c24ef0883a6f",
        "cursor": {
          "ref": "7b93d9c5-b32c-4073-92b9-e7b51987a188",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7b2ab532-686e-4f17-819b-452a6d1e87a2"
        },
        "item": {
          "id": "580fc102-684e-4985-be9b-c24ef0883a6f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6ebe94f5-ad83-425c-a923-246d777c1c9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af2e86d-f0db-4419-ad85-301f79320a0e",
        "cursor": {
          "ref": "8e09e530-b868-416d-a3ab-4d88b187e64e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a33bc5ec-5870-4eb0-9820-87850349fc42"
        },
        "item": {
          "id": "1af2e86d-f0db-4419-ad85-301f79320a0e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5f77d890-1247-4f6c-b78b-c6726f338e6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af2e86d-f0db-4419-ad85-301f79320a0e",
        "cursor": {
          "ref": "8e09e530-b868-416d-a3ab-4d88b187e64e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a33bc5ec-5870-4eb0-9820-87850349fc42"
        },
        "item": {
          "id": "1af2e86d-f0db-4419-ad85-301f79320a0e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5f77d890-1247-4f6c-b78b-c6726f338e6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ad78dd-8a87-41e0-9c40-57c86eabf442",
        "cursor": {
          "ref": "72c28021-1ffa-4c56-b103-e8e53606c569",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "02bc6f48-c7e1-4b6a-a0e2-d98e2a4e549e"
        },
        "item": {
          "id": "40ad78dd-8a87-41e0-9c40-57c86eabf442",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cf943f52-b7d1-4e09-937a-a0c96a0808c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ad78dd-8a87-41e0-9c40-57c86eabf442",
        "cursor": {
          "ref": "72c28021-1ffa-4c56-b103-e8e53606c569",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "02bc6f48-c7e1-4b6a-a0e2-d98e2a4e549e"
        },
        "item": {
          "id": "40ad78dd-8a87-41e0-9c40-57c86eabf442",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cf943f52-b7d1-4e09-937a-a0c96a0808c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f254b5-c08a-41b8-813e-807b02f427d0",
        "cursor": {
          "ref": "918334ee-81bc-4da3-81ae-8574dca073fe",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7b25bef1-df74-46a0-ac71-524067638f1c"
        },
        "item": {
          "id": "82f254b5-c08a-41b8-813e-807b02f427d0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8ff52ec4-d32e-413b-83b1-f26612bf44d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f254b5-c08a-41b8-813e-807b02f427d0",
        "cursor": {
          "ref": "918334ee-81bc-4da3-81ae-8574dca073fe",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7b25bef1-df74-46a0-ac71-524067638f1c"
        },
        "item": {
          "id": "82f254b5-c08a-41b8-813e-807b02f427d0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8ff52ec4-d32e-413b-83b1-f26612bf44d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d0e1ea-253f-44c6-b5df-4111aef9e691",
        "cursor": {
          "ref": "696adc0e-27de-4e23-84f9-c0ef2f8f0d43",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7ce91595-041b-46c4-9436-35edcf3919c3"
        },
        "item": {
          "id": "41d0e1ea-253f-44c6-b5df-4111aef9e691",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3f66226e-da5c-433f-8b53-aa124b4b4747",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d0e1ea-253f-44c6-b5df-4111aef9e691",
        "cursor": {
          "ref": "696adc0e-27de-4e23-84f9-c0ef2f8f0d43",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7ce91595-041b-46c4-9436-35edcf3919c3"
        },
        "item": {
          "id": "41d0e1ea-253f-44c6-b5df-4111aef9e691",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3f66226e-da5c-433f-8b53-aa124b4b4747",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab052bdc-eaef-42b4-b493-caaccc5e4b66",
        "cursor": {
          "ref": "e91f673a-dbc2-4697-9f16-b4a8027fe9b0",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c5b6f792-2af3-4531-b704-dceff2157d3d"
        },
        "item": {
          "id": "ab052bdc-eaef-42b4-b493-caaccc5e4b66",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7c767a6b-6408-49c8-9659-9d5238d4c80b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab052bdc-eaef-42b4-b493-caaccc5e4b66",
        "cursor": {
          "ref": "e91f673a-dbc2-4697-9f16-b4a8027fe9b0",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c5b6f792-2af3-4531-b704-dceff2157d3d"
        },
        "item": {
          "id": "ab052bdc-eaef-42b4-b493-caaccc5e4b66",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7c767a6b-6408-49c8-9659-9d5238d4c80b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eeb603f-1f4d-4cec-adae-37f67d6a1924",
        "cursor": {
          "ref": "96164d26-526d-4765-8cb1-6e55af62410f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cc2fb0d1-4876-44cd-9a4a-8bf67d286637"
        },
        "item": {
          "id": "1eeb603f-1f4d-4cec-adae-37f67d6a1924",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3e42c1c2-45c7-43bf-ad29-b4e4b08724bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eeb603f-1f4d-4cec-adae-37f67d6a1924",
        "cursor": {
          "ref": "96164d26-526d-4765-8cb1-6e55af62410f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cc2fb0d1-4876-44cd-9a4a-8bf67d286637"
        },
        "item": {
          "id": "1eeb603f-1f4d-4cec-adae-37f67d6a1924",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3e42c1c2-45c7-43bf-ad29-b4e4b08724bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd8e811-fc33-4952-932b-5b12c3821c5b",
        "cursor": {
          "ref": "d23cab2f-6a7b-4221-ad47-a411a7d3148f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b05a902c-2a12-4426-8c32-99b25fca648f"
        },
        "item": {
          "id": "1bd8e811-fc33-4952-932b-5b12c3821c5b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "82c8b3e6-eadc-440f-a5ae-5c0bf547b6d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd8e811-fc33-4952-932b-5b12c3821c5b",
        "cursor": {
          "ref": "d23cab2f-6a7b-4221-ad47-a411a7d3148f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b05a902c-2a12-4426-8c32-99b25fca648f"
        },
        "item": {
          "id": "1bd8e811-fc33-4952-932b-5b12c3821c5b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "82c8b3e6-eadc-440f-a5ae-5c0bf547b6d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4e6ad4-bbcb-4fac-9c52-5e5680a5db85",
        "cursor": {
          "ref": "6a1cff00-57ed-469f-a177-14bf80608f87",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0baf7dbf-8d88-4a28-82ad-adc9567ea4e3"
        },
        "item": {
          "id": "0b4e6ad4-bbcb-4fac-9c52-5e5680a5db85",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "153da5f4-0ccf-46e6-b078-53ae19197370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4e6ad4-bbcb-4fac-9c52-5e5680a5db85",
        "cursor": {
          "ref": "6a1cff00-57ed-469f-a177-14bf80608f87",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0baf7dbf-8d88-4a28-82ad-adc9567ea4e3"
        },
        "item": {
          "id": "0b4e6ad4-bbcb-4fac-9c52-5e5680a5db85",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "153da5f4-0ccf-46e6-b078-53ae19197370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c85f7e-0502-474c-b0cd-b86b8299152b",
        "cursor": {
          "ref": "c0364c9a-419a-42dd-bd33-d581cd34fba9",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d0d95d45-39af-4d65-9de4-4052fec01cde"
        },
        "item": {
          "id": "10c85f7e-0502-474c-b0cd-b86b8299152b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b2e14fa3-7c95-42e7-b3fe-25aa21cfd391",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c85f7e-0502-474c-b0cd-b86b8299152b",
        "cursor": {
          "ref": "c0364c9a-419a-42dd-bd33-d581cd34fba9",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d0d95d45-39af-4d65-9de4-4052fec01cde"
        },
        "item": {
          "id": "10c85f7e-0502-474c-b0cd-b86b8299152b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b2e14fa3-7c95-42e7-b3fe-25aa21cfd391",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1733156-a2fe-4fd4-9b12-57d2389db5d4",
        "cursor": {
          "ref": "ddc38989-88d5-45c8-8b6f-dd3bfdd5efd7",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ec14c76e-f6d7-4afb-b414-399ca152fa6f"
        },
        "item": {
          "id": "f1733156-a2fe-4fd4-9b12-57d2389db5d4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0b41a884-dd41-4de3-95eb-e2baa349cf57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1733156-a2fe-4fd4-9b12-57d2389db5d4",
        "cursor": {
          "ref": "ddc38989-88d5-45c8-8b6f-dd3bfdd5efd7",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ec14c76e-f6d7-4afb-b414-399ca152fa6f"
        },
        "item": {
          "id": "f1733156-a2fe-4fd4-9b12-57d2389db5d4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0b41a884-dd41-4de3-95eb-e2baa349cf57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c0e770-978d-4668-b766-f34eaf104802",
        "cursor": {
          "ref": "09864107-de45-4d27-8bda-050a49471c21",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ee889566-d1dc-49d1-9b14-d468e5fd711a"
        },
        "item": {
          "id": "60c0e770-978d-4668-b766-f34eaf104802",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "641af91a-d9c3-4971-8f1a-25e8b784df0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c0e770-978d-4668-b766-f34eaf104802",
        "cursor": {
          "ref": "09864107-de45-4d27-8bda-050a49471c21",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ee889566-d1dc-49d1-9b14-d468e5fd711a"
        },
        "item": {
          "id": "60c0e770-978d-4668-b766-f34eaf104802",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "641af91a-d9c3-4971-8f1a-25e8b784df0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0bbbc9-7d7d-4fec-835c-925e6b3b0af1",
        "cursor": {
          "ref": "16d5e2ac-4f86-42bf-a410-0516631d26c1",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eb4055dd-4157-4b50-80d5-81a0db879cd4"
        },
        "item": {
          "id": "ca0bbbc9-7d7d-4fec-835c-925e6b3b0af1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e85b58fe-3cdb-44c9-8be5-d01c47818511",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0bbbc9-7d7d-4fec-835c-925e6b3b0af1",
        "cursor": {
          "ref": "16d5e2ac-4f86-42bf-a410-0516631d26c1",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eb4055dd-4157-4b50-80d5-81a0db879cd4"
        },
        "item": {
          "id": "ca0bbbc9-7d7d-4fec-835c-925e6b3b0af1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e85b58fe-3cdb-44c9-8be5-d01c47818511",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa878ed2-ed4b-4c98-bf1f-c47c23c0d106",
        "cursor": {
          "ref": "c9c617e7-d6a5-4c16-b5ce-fbc039b486f1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9922f72e-9f99-4715-96c1-2e980dadddaf"
        },
        "item": {
          "id": "aa878ed2-ed4b-4c98-bf1f-c47c23c0d106",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2d01e59b-ef0a-4925-b641-764be63b2e9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa878ed2-ed4b-4c98-bf1f-c47c23c0d106",
        "cursor": {
          "ref": "c9c617e7-d6a5-4c16-b5ce-fbc039b486f1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9922f72e-9f99-4715-96c1-2e980dadddaf"
        },
        "item": {
          "id": "aa878ed2-ed4b-4c98-bf1f-c47c23c0d106",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2d01e59b-ef0a-4925-b641-764be63b2e9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9010643-a98e-4e0b-833f-bd35515bf186",
        "cursor": {
          "ref": "8c8c1c5e-2788-407d-86a8-a8436b3a6243",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2f971e54-c960-43c2-a84b-a82f751a9026"
        },
        "item": {
          "id": "c9010643-a98e-4e0b-833f-bd35515bf186",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a5145cde-2c32-464f-a4ff-e1797b691a55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9010643-a98e-4e0b-833f-bd35515bf186",
        "cursor": {
          "ref": "8c8c1c5e-2788-407d-86a8-a8436b3a6243",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2f971e54-c960-43c2-a84b-a82f751a9026"
        },
        "item": {
          "id": "c9010643-a98e-4e0b-833f-bd35515bf186",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a5145cde-2c32-464f-a4ff-e1797b691a55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cf2780-56c1-4851-8912-be5e8c07b907",
        "cursor": {
          "ref": "ae32a7aa-3163-4071-97b0-8755839c5776",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1f3d479b-df88-49f5-a6da-d64e342d65ec"
        },
        "item": {
          "id": "64cf2780-56c1-4851-8912-be5e8c07b907",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "40d50d52-eec0-4bf9-80fa-44e6e1749e64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cf2780-56c1-4851-8912-be5e8c07b907",
        "cursor": {
          "ref": "ae32a7aa-3163-4071-97b0-8755839c5776",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1f3d479b-df88-49f5-a6da-d64e342d65ec"
        },
        "item": {
          "id": "64cf2780-56c1-4851-8912-be5e8c07b907",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "40d50d52-eec0-4bf9-80fa-44e6e1749e64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8de38e-9ff4-4263-bf9e-9fc77340615b",
        "cursor": {
          "ref": "5e124f76-ac7b-4998-b99f-3096e9080316",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "fa0807b3-9dc1-4fa0-99d7-1df7b538de3c"
        },
        "item": {
          "id": "aa8de38e-9ff4-4263-bf9e-9fc77340615b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e56ad33c-9d5a-4737-9c15-67504da78fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8de38e-9ff4-4263-bf9e-9fc77340615b",
        "cursor": {
          "ref": "5e124f76-ac7b-4998-b99f-3096e9080316",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "fa0807b3-9dc1-4fa0-99d7-1df7b538de3c"
        },
        "item": {
          "id": "aa8de38e-9ff4-4263-bf9e-9fc77340615b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e56ad33c-9d5a-4737-9c15-67504da78fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20257a9-7b36-429a-86f1-4bc5c5eaf689",
        "cursor": {
          "ref": "a8d47da7-36aa-4627-82ec-b1b8072f9ef0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "fccfdeeb-5c3b-4bf3-87f2-8ab1f20a626e"
        },
        "item": {
          "id": "d20257a9-7b36-429a-86f1-4bc5c5eaf689",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7b3f23a6-a2b7-46f1-b1e5-5e4874df38e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20257a9-7b36-429a-86f1-4bc5c5eaf689",
        "cursor": {
          "ref": "a8d47da7-36aa-4627-82ec-b1b8072f9ef0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "fccfdeeb-5c3b-4bf3-87f2-8ab1f20a626e"
        },
        "item": {
          "id": "d20257a9-7b36-429a-86f1-4bc5c5eaf689",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7b3f23a6-a2b7-46f1-b1e5-5e4874df38e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74303028-1698-418c-b9d1-f19d90886b84",
        "cursor": {
          "ref": "94ae7284-9bc6-47be-86fd-e77b88a024ca",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "374f9990-f65b-4eb8-a8d3-0a909018d984"
        },
        "item": {
          "id": "74303028-1698-418c-b9d1-f19d90886b84",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "98d46b5b-962b-4c75-ba81-faa52f467090",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74303028-1698-418c-b9d1-f19d90886b84",
        "cursor": {
          "ref": "94ae7284-9bc6-47be-86fd-e77b88a024ca",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "374f9990-f65b-4eb8-a8d3-0a909018d984"
        },
        "item": {
          "id": "74303028-1698-418c-b9d1-f19d90886b84",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "98d46b5b-962b-4c75-ba81-faa52f467090",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e912f5eb-91b5-4ed4-87e7-a0f64b36be33",
        "cursor": {
          "ref": "53dd01c1-ade6-4bdd-afb3-73600d7cacb0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "82588c37-44f4-46b6-8fac-52aa6300d1e6"
        },
        "item": {
          "id": "e912f5eb-91b5-4ed4-87e7-a0f64b36be33",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9e599377-3b73-4741-8998-74df50943316",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e912f5eb-91b5-4ed4-87e7-a0f64b36be33",
        "cursor": {
          "ref": "53dd01c1-ade6-4bdd-afb3-73600d7cacb0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "82588c37-44f4-46b6-8fac-52aa6300d1e6"
        },
        "item": {
          "id": "e912f5eb-91b5-4ed4-87e7-a0f64b36be33",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9e599377-3b73-4741-8998-74df50943316",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112af98d-9fca-45db-b616-e3bbe61a44e8",
        "cursor": {
          "ref": "9c2779eb-8355-4289-b8fa-352fa79b0e8b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f788b9c4-4fa0-4e58-8eb7-4fb70c5c1c14"
        },
        "item": {
          "id": "112af98d-9fca-45db-b616-e3bbe61a44e8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "86b3975f-ac30-4926-b99c-5a2c88027257",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112af98d-9fca-45db-b616-e3bbe61a44e8",
        "cursor": {
          "ref": "9c2779eb-8355-4289-b8fa-352fa79b0e8b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f788b9c4-4fa0-4e58-8eb7-4fb70c5c1c14"
        },
        "item": {
          "id": "112af98d-9fca-45db-b616-e3bbe61a44e8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "86b3975f-ac30-4926-b99c-5a2c88027257",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849ced5a-0fe5-4c29-8cd7-5ee474ffc998",
        "cursor": {
          "ref": "20782dac-2175-4b38-ad3f-e5e331d24e1f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "58879254-6af7-42f2-b33c-774bd3025315"
        },
        "item": {
          "id": "849ced5a-0fe5-4c29-8cd7-5ee474ffc998",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "13ef4b13-5f66-42f9-8709-fa20edd26aa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849ced5a-0fe5-4c29-8cd7-5ee474ffc998",
        "cursor": {
          "ref": "20782dac-2175-4b38-ad3f-e5e331d24e1f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "58879254-6af7-42f2-b33c-774bd3025315"
        },
        "item": {
          "id": "849ced5a-0fe5-4c29-8cd7-5ee474ffc998",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "13ef4b13-5f66-42f9-8709-fa20edd26aa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ecd94f-7d15-4c60-8d29-dd79c434a48d",
        "cursor": {
          "ref": "7d3d18d5-a9fe-4d6c-b0fd-b374a316383b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "533081fb-7741-4426-8ba0-7f41c01be35b"
        },
        "item": {
          "id": "42ecd94f-7d15-4c60-8d29-dd79c434a48d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "37e73cee-571c-450a-8d44-5f8dd2604760",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ecd94f-7d15-4c60-8d29-dd79c434a48d",
        "cursor": {
          "ref": "7d3d18d5-a9fe-4d6c-b0fd-b374a316383b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "533081fb-7741-4426-8ba0-7f41c01be35b"
        },
        "item": {
          "id": "42ecd94f-7d15-4c60-8d29-dd79c434a48d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "37e73cee-571c-450a-8d44-5f8dd2604760",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a40909-a82c-466c-87d5-f5074d313a32",
        "cursor": {
          "ref": "88a3a905-8394-456b-b61c-b3a7035022ea",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7d248573-3178-40be-aae7-1c78e12798cd"
        },
        "item": {
          "id": "36a40909-a82c-466c-87d5-f5074d313a32",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d2da053e-42e8-4c9a-8d33-b96a3a59957e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a40909-a82c-466c-87d5-f5074d313a32",
        "cursor": {
          "ref": "88a3a905-8394-456b-b61c-b3a7035022ea",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7d248573-3178-40be-aae7-1c78e12798cd"
        },
        "item": {
          "id": "36a40909-a82c-466c-87d5-f5074d313a32",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d2da053e-42e8-4c9a-8d33-b96a3a59957e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16af999e-8a2f-4e3d-9ba8-6680b214ec11",
        "cursor": {
          "ref": "e435cdfb-b4e0-4df1-91fe-12e3a86cf750",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d51c5a33-73d7-40a4-8a02-b34d9f3ae5c7"
        },
        "item": {
          "id": "16af999e-8a2f-4e3d-9ba8-6680b214ec11",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "65eb14a4-3452-46c5-a46b-5dd2ba745260",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16af999e-8a2f-4e3d-9ba8-6680b214ec11",
        "cursor": {
          "ref": "e435cdfb-b4e0-4df1-91fe-12e3a86cf750",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d51c5a33-73d7-40a4-8a02-b34d9f3ae5c7"
        },
        "item": {
          "id": "16af999e-8a2f-4e3d-9ba8-6680b214ec11",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "65eb14a4-3452-46c5-a46b-5dd2ba745260",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e815d3b7-d014-4108-9cdb-5e5f3081fa73",
        "cursor": {
          "ref": "d9d744c2-b554-4301-abcc-a57ccc6eaa6f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f2dbba3b-84a1-47c4-83d7-4e99d1677124"
        },
        "item": {
          "id": "e815d3b7-d014-4108-9cdb-5e5f3081fa73",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a14cf0f9-1751-4877-82f0-2f2888ee4d0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e815d3b7-d014-4108-9cdb-5e5f3081fa73",
        "cursor": {
          "ref": "d9d744c2-b554-4301-abcc-a57ccc6eaa6f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f2dbba3b-84a1-47c4-83d7-4e99d1677124"
        },
        "item": {
          "id": "e815d3b7-d014-4108-9cdb-5e5f3081fa73",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a14cf0f9-1751-4877-82f0-2f2888ee4d0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94a6ad0-5034-4d22-ba56-df82c7f45ce5",
        "cursor": {
          "ref": "30e7055a-70dd-424c-9eac-dd6ad322a1db",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "feacd4f3-b3e9-4496-b916-461e6d947a8c"
        },
        "item": {
          "id": "c94a6ad0-5034-4d22-ba56-df82c7f45ce5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "75dc7dbd-4242-413f-a829-a340ea173cb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94a6ad0-5034-4d22-ba56-df82c7f45ce5",
        "cursor": {
          "ref": "30e7055a-70dd-424c-9eac-dd6ad322a1db",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "feacd4f3-b3e9-4496-b916-461e6d947a8c"
        },
        "item": {
          "id": "c94a6ad0-5034-4d22-ba56-df82c7f45ce5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "75dc7dbd-4242-413f-a829-a340ea173cb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474d2bd9-bda1-477b-8c98-fc4dd2d343d3",
        "cursor": {
          "ref": "63540a05-9b5c-44b7-b9d6-950fd57bf8e6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f5d00f04-a369-40d0-80ae-001704b33406"
        },
        "item": {
          "id": "474d2bd9-bda1-477b-8c98-fc4dd2d343d3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c463536b-bada-4901-bbda-a51c03ebe734",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474d2bd9-bda1-477b-8c98-fc4dd2d343d3",
        "cursor": {
          "ref": "63540a05-9b5c-44b7-b9d6-950fd57bf8e6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f5d00f04-a369-40d0-80ae-001704b33406"
        },
        "item": {
          "id": "474d2bd9-bda1-477b-8c98-fc4dd2d343d3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c463536b-bada-4901-bbda-a51c03ebe734",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359d3bd4-8199-4785-837a-7040827f03a3",
        "cursor": {
          "ref": "6c6797f9-6dc3-46c8-884e-bcb04d27d08f",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1d19e687-21ce-4975-863c-ee6eebf969e8"
        },
        "item": {
          "id": "359d3bd4-8199-4785-837a-7040827f03a3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2cbc18fb-0cd1-4a34-af40-36091a03a82d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359d3bd4-8199-4785-837a-7040827f03a3",
        "cursor": {
          "ref": "6c6797f9-6dc3-46c8-884e-bcb04d27d08f",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1d19e687-21ce-4975-863c-ee6eebf969e8"
        },
        "item": {
          "id": "359d3bd4-8199-4785-837a-7040827f03a3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2cbc18fb-0cd1-4a34-af40-36091a03a82d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f080e2aa-d752-44d7-8f34-ec547ae70ecc",
        "cursor": {
          "ref": "d832b466-f021-45a0-b8cb-58207c4e5927",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e3b7d764-2069-4041-ba97-736ee65e3701"
        },
        "item": {
          "id": "f080e2aa-d752-44d7-8f34-ec547ae70ecc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dadee98c-7cfe-452e-90c5-13f27981cede",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f080e2aa-d752-44d7-8f34-ec547ae70ecc",
        "cursor": {
          "ref": "d832b466-f021-45a0-b8cb-58207c4e5927",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e3b7d764-2069-4041-ba97-736ee65e3701"
        },
        "item": {
          "id": "f080e2aa-d752-44d7-8f34-ec547ae70ecc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dadee98c-7cfe-452e-90c5-13f27981cede",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e5b35c-fa36-4cc1-8983-e43f50941b9d",
        "cursor": {
          "ref": "59015e2a-8e18-47d7-b337-0cd069ca621c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d95ad2b0-3fc3-497d-a649-fc33ab46a64f"
        },
        "item": {
          "id": "a0e5b35c-fa36-4cc1-8983-e43f50941b9d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "95f56dd6-5d4a-429d-9b79-a90b32992987",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e5b35c-fa36-4cc1-8983-e43f50941b9d",
        "cursor": {
          "ref": "59015e2a-8e18-47d7-b337-0cd069ca621c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d95ad2b0-3fc3-497d-a649-fc33ab46a64f"
        },
        "item": {
          "id": "a0e5b35c-fa36-4cc1-8983-e43f50941b9d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "95f56dd6-5d4a-429d-9b79-a90b32992987",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ce90c-6aa3-4aaa-8545-cafbac3ff9d3",
        "cursor": {
          "ref": "85ab1f52-768c-4d23-ae68-33188546fa73",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "61c4525a-df49-4a38-bd3f-7747a74b5ab1"
        },
        "item": {
          "id": "ac2ce90c-6aa3-4aaa-8545-cafbac3ff9d3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a6399ba8-0c1f-469d-9a24-0e7b57a08baf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ce90c-6aa3-4aaa-8545-cafbac3ff9d3",
        "cursor": {
          "ref": "85ab1f52-768c-4d23-ae68-33188546fa73",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "61c4525a-df49-4a38-bd3f-7747a74b5ab1"
        },
        "item": {
          "id": "ac2ce90c-6aa3-4aaa-8545-cafbac3ff9d3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a6399ba8-0c1f-469d-9a24-0e7b57a08baf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3078b80-5e79-47ba-9d6c-02d3c7abbe39",
        "cursor": {
          "ref": "2677ecf9-2769-448b-82fe-14297283cf6c",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "442f2e9f-8ee7-4b5b-9070-f85aeb2f7561"
        },
        "item": {
          "id": "f3078b80-5e79-47ba-9d6c-02d3c7abbe39",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "590414a0-bfa5-44ad-a21d-e5966134be74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3078b80-5e79-47ba-9d6c-02d3c7abbe39",
        "cursor": {
          "ref": "2677ecf9-2769-448b-82fe-14297283cf6c",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "442f2e9f-8ee7-4b5b-9070-f85aeb2f7561"
        },
        "item": {
          "id": "f3078b80-5e79-47ba-9d6c-02d3c7abbe39",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "590414a0-bfa5-44ad-a21d-e5966134be74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066a3553-c12f-4159-ad5a-62df9d772ebb",
        "cursor": {
          "ref": "5f11d570-025c-4482-a0dc-e0ccf0cb3fc7",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e796f39e-8c97-4708-8938-4a853a14b0bd"
        },
        "item": {
          "id": "066a3553-c12f-4159-ad5a-62df9d772ebb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ab66d904-11ed-4557-b392-986f0d1913dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066a3553-c12f-4159-ad5a-62df9d772ebb",
        "cursor": {
          "ref": "5f11d570-025c-4482-a0dc-e0ccf0cb3fc7",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e796f39e-8c97-4708-8938-4a853a14b0bd"
        },
        "item": {
          "id": "066a3553-c12f-4159-ad5a-62df9d772ebb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ab66d904-11ed-4557-b392-986f0d1913dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006cf1dd-057c-4052-9b9a-3bf6856fb801",
        "cursor": {
          "ref": "9ccd4abd-3606-4af5-8c74-ec0a53db02e6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7ed5f55b-3661-4c7a-b150-669c2eaa4543"
        },
        "item": {
          "id": "006cf1dd-057c-4052-9b9a-3bf6856fb801",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "672ab512-164e-41de-9ee6-e012b63bf8a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006cf1dd-057c-4052-9b9a-3bf6856fb801",
        "cursor": {
          "ref": "9ccd4abd-3606-4af5-8c74-ec0a53db02e6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7ed5f55b-3661-4c7a-b150-669c2eaa4543"
        },
        "item": {
          "id": "006cf1dd-057c-4052-9b9a-3bf6856fb801",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "672ab512-164e-41de-9ee6-e012b63bf8a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c87c6a5-8d49-4dd3-a89e-78db03329cf9",
        "cursor": {
          "ref": "7c7db2f4-ea38-40ea-81ea-c685d6f7483f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ab13f880-e396-4411-a588-d0a10df1e5f7"
        },
        "item": {
          "id": "1c87c6a5-8d49-4dd3-a89e-78db03329cf9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9a2faa73-a9fe-4c84-906f-0a7dfd4549cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c87c6a5-8d49-4dd3-a89e-78db03329cf9",
        "cursor": {
          "ref": "7c7db2f4-ea38-40ea-81ea-c685d6f7483f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ab13f880-e396-4411-a588-d0a10df1e5f7"
        },
        "item": {
          "id": "1c87c6a5-8d49-4dd3-a89e-78db03329cf9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9a2faa73-a9fe-4c84-906f-0a7dfd4549cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08414483-0ffd-4bba-ac13-f267ce13befb",
        "cursor": {
          "ref": "fdac3bd1-bdb9-4437-8d3b-869f70e7700d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8a12090c-0e51-4d41-9e38-fea33343da4c"
        },
        "item": {
          "id": "08414483-0ffd-4bba-ac13-f267ce13befb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0fed721d-3ef1-43c8-bb33-63d02960b25b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08414483-0ffd-4bba-ac13-f267ce13befb",
        "cursor": {
          "ref": "fdac3bd1-bdb9-4437-8d3b-869f70e7700d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8a12090c-0e51-4d41-9e38-fea33343da4c"
        },
        "item": {
          "id": "08414483-0ffd-4bba-ac13-f267ce13befb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0fed721d-3ef1-43c8-bb33-63d02960b25b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642781d6-2eee-4f38-b359-df6e232dbbde",
        "cursor": {
          "ref": "3d9374f0-6b44-449f-a71f-81ad0f4e0278",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "993f2535-58ef-40bf-9838-7fec3c38f30b"
        },
        "item": {
          "id": "642781d6-2eee-4f38-b359-df6e232dbbde",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2660a64b-45cb-4c81-b754-68c71ba6381d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642781d6-2eee-4f38-b359-df6e232dbbde",
        "cursor": {
          "ref": "3d9374f0-6b44-449f-a71f-81ad0f4e0278",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "993f2535-58ef-40bf-9838-7fec3c38f30b"
        },
        "item": {
          "id": "642781d6-2eee-4f38-b359-df6e232dbbde",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2660a64b-45cb-4c81-b754-68c71ba6381d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9ff180-8c59-4c4c-8205-bda909133647",
        "cursor": {
          "ref": "60ea1ba8-5d5e-4516-9037-dce568284c39",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "95ff776e-9685-4db8-8e6a-7b8b539ee43c"
        },
        "item": {
          "id": "6a9ff180-8c59-4c4c-8205-bda909133647",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "341f26d8-95dd-4442-8872-ccc1ca8d9acb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9ff180-8c59-4c4c-8205-bda909133647",
        "cursor": {
          "ref": "60ea1ba8-5d5e-4516-9037-dce568284c39",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "95ff776e-9685-4db8-8e6a-7b8b539ee43c"
        },
        "item": {
          "id": "6a9ff180-8c59-4c4c-8205-bda909133647",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "341f26d8-95dd-4442-8872-ccc1ca8d9acb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de2c156-3da1-4735-85f4-de1138b4a0c1",
        "cursor": {
          "ref": "d3a7196f-567c-407d-b5fb-2ba23b8eb8d4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3652d6b5-153c-409d-9937-43f23788c3ee"
        },
        "item": {
          "id": "0de2c156-3da1-4735-85f4-de1138b4a0c1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f8adaac7-ea63-452b-96da-2c04e7dfcb06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de2c156-3da1-4735-85f4-de1138b4a0c1",
        "cursor": {
          "ref": "d3a7196f-567c-407d-b5fb-2ba23b8eb8d4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3652d6b5-153c-409d-9937-43f23788c3ee"
        },
        "item": {
          "id": "0de2c156-3da1-4735-85f4-de1138b4a0c1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f8adaac7-ea63-452b-96da-2c04e7dfcb06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365c66ad-6677-4a02-abea-bd93fd15262b",
        "cursor": {
          "ref": "a792b64a-f58a-4672-b7df-0831741cb070",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "941bc66f-5011-4ce2-8e0d-9c4f85bc4a9d"
        },
        "item": {
          "id": "365c66ad-6677-4a02-abea-bd93fd15262b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2a9a2f3b-8ed6-4ef9-b950-d352fadc3589",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365c66ad-6677-4a02-abea-bd93fd15262b",
        "cursor": {
          "ref": "a792b64a-f58a-4672-b7df-0831741cb070",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "941bc66f-5011-4ce2-8e0d-9c4f85bc4a9d"
        },
        "item": {
          "id": "365c66ad-6677-4a02-abea-bd93fd15262b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2a9a2f3b-8ed6-4ef9-b950-d352fadc3589",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cac0e8-bcb6-45ba-ab9d-eaa79535502d",
        "cursor": {
          "ref": "609a7322-7e72-40f7-813d-a37d478911d2",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "47e46e20-0102-4dbb-8f95-04d01d44462a"
        },
        "item": {
          "id": "c9cac0e8-bcb6-45ba-ab9d-eaa79535502d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6711139f-64e4-4959-a1ee-89251255b97b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c9cac0e8-bcb6-45ba-ab9d-eaa79535502d",
        "cursor": {
          "ref": "609a7322-7e72-40f7-813d-a37d478911d2",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "47e46e20-0102-4dbb-8f95-04d01d44462a"
        },
        "item": {
          "id": "c9cac0e8-bcb6-45ba-ab9d-eaa79535502d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6711139f-64e4-4959-a1ee-89251255b97b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "55a643e1-5693-48c7-9dbb-be69505f6995",
        "cursor": {
          "ref": "5aa75990-bec9-4240-832b-447c64e48655",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d5781e05-0164-4547-9826-6fd68649441e"
        },
        "item": {
          "id": "55a643e1-5693-48c7-9dbb-be69505f6995",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bdf02788-0cff-48b8-ad29-ec7d2b3c111d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "55a643e1-5693-48c7-9dbb-be69505f6995",
        "cursor": {
          "ref": "5aa75990-bec9-4240-832b-447c64e48655",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d5781e05-0164-4547-9826-6fd68649441e"
        },
        "item": {
          "id": "55a643e1-5693-48c7-9dbb-be69505f6995",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bdf02788-0cff-48b8-ad29-ec7d2b3c111d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "c39e8943-374b-450f-b9cb-01fe31114f46",
        "cursor": {
          "ref": "57ac2c75-c0fc-4fa1-9e87-979dbcfc9c44",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "80e13ed3-143d-4f70-a577-f3ae3ee52dc1"
        },
        "item": {
          "id": "c39e8943-374b-450f-b9cb-01fe31114f46",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4c89ba79-5ca3-4586-8665-99d8281b2264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "c39e8943-374b-450f-b9cb-01fe31114f46",
        "cursor": {
          "ref": "57ac2c75-c0fc-4fa1-9e87-979dbcfc9c44",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "80e13ed3-143d-4f70-a577-f3ae3ee52dc1"
        },
        "item": {
          "id": "c39e8943-374b-450f-b9cb-01fe31114f46",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4c89ba79-5ca3-4586-8665-99d8281b2264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "175e904f-8b39-452a-ba0b-f55c6d5b0ac2",
        "cursor": {
          "ref": "928c5b52-8810-4774-95f9-b8ab3e76c4b8",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fd13f5a3-e706-4248-abee-b516845e6f05"
        },
        "item": {
          "id": "175e904f-8b39-452a-ba0b-f55c6d5b0ac2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "625212bf-7057-4a80-9fc8-1041fc9816bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175e904f-8b39-452a-ba0b-f55c6d5b0ac2",
        "cursor": {
          "ref": "928c5b52-8810-4774-95f9-b8ab3e76c4b8",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fd13f5a3-e706-4248-abee-b516845e6f05"
        },
        "item": {
          "id": "175e904f-8b39-452a-ba0b-f55c6d5b0ac2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "625212bf-7057-4a80-9fc8-1041fc9816bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175e904f-8b39-452a-ba0b-f55c6d5b0ac2",
        "cursor": {
          "ref": "928c5b52-8810-4774-95f9-b8ab3e76c4b8",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "fd13f5a3-e706-4248-abee-b516845e6f05"
        },
        "item": {
          "id": "175e904f-8b39-452a-ba0b-f55c6d5b0ac2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "625212bf-7057-4a80-9fc8-1041fc9816bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcdb80b-cab0-407d-a05b-bec4fb602ac6",
        "cursor": {
          "ref": "eb22c309-3683-4f47-b140-19517594534f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "dcc756fd-7dbb-450e-955b-eab5e5fe5e9f"
        },
        "item": {
          "id": "0fcdb80b-cab0-407d-a05b-bec4fb602ac6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "11e6a954-1b2e-4c0d-8fcb-b3378d4df354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcdb80b-cab0-407d-a05b-bec4fb602ac6",
        "cursor": {
          "ref": "eb22c309-3683-4f47-b140-19517594534f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "dcc756fd-7dbb-450e-955b-eab5e5fe5e9f"
        },
        "item": {
          "id": "0fcdb80b-cab0-407d-a05b-bec4fb602ac6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "11e6a954-1b2e-4c0d-8fcb-b3378d4df354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d6b5ab-f26d-4601-92e2-f7d65b1e2a9a",
        "cursor": {
          "ref": "dbe0a6f7-3f6f-44f7-8da7-b8a47140a0b6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7cc7e6cb-3401-4db6-9759-adb2d541b51d"
        },
        "item": {
          "id": "78d6b5ab-f26d-4601-92e2-f7d65b1e2a9a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "86c87610-7ce4-46e2-bd1b-40a45ef4dd1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d6b5ab-f26d-4601-92e2-f7d65b1e2a9a",
        "cursor": {
          "ref": "dbe0a6f7-3f6f-44f7-8da7-b8a47140a0b6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7cc7e6cb-3401-4db6-9759-adb2d541b51d"
        },
        "item": {
          "id": "78d6b5ab-f26d-4601-92e2-f7d65b1e2a9a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "86c87610-7ce4-46e2-bd1b-40a45ef4dd1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}