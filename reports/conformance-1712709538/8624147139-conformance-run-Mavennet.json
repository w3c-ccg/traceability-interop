{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "59eeb6f8-7c60-4eaf-94a4-4ce7d37545f3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c4b6ab07-8938-4c03-bacb-45a2cfd566fa",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b02a8156-c34b-4a6f-8578-06b9043276bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5882c079-90ac-4bf7-9374-8a9162cf33e9"
                }
              }
            ]
          },
          {
            "id": "99e860b3-aa3c-4a98-a9b1-42d945afc131",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "188f548e-2e61-443b-9daa-b0dfec02be3b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5990cb9e-5ee9-4d95-8bac-e1921e9099f0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dc130ad4-1894-44a7-9882-8f1dbcb62bac",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b5cec410-4d54-4bd7-bc1d-a55370c0ec3f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d7dfc9c5-8eea-4bdf-8bf7-df6aea9ea902",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afcb0cde-c937-4467-b6f9-3a12c2b50fc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "baf6f038-daa8-4a32-ac8e-9282306d1a9d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbfdc0e6-5943-4498-a132-caa1769c76e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77e3ed9d-36a6-4b40-8b62-0ea92c0d27d0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32dbf5b7-2b3c-43db-9f34-1ade98bed25f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1901be50-dda0-4db0-be75-6deee34f45ba"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5653d319-4fff-416d-a980-27ac14401943",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3e2a79d7-29ad-44c4-809c-f176b76f4c72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e63ce4c-a024-48c5-b672-a953ba0269a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ef0ebea-9cbb-4d0d-a85a-c783da8dc5e4"
            }
          }
        ]
      },
      {
        "id": "7e1712c5-0078-4385-b91b-e775a495a12a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a9d08fab-493b-40fe-ab55-54c902d564fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92128775-b93f-4a6d-ab87-f05583811494",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0424669b-d02e-46e2-844f-ab55a09e6805",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32613217-65ed-43c0-b304-eeac2083d1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49bca425-aa53-490c-95d1-b224b9263dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5df1e4-9519-49d4-800b-a62de72c949b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab714369-4aea-4dd8-8c35-f0c3bc2fe264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb70a22b-af34-44e7-8580-391a398825f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05432513-5e13-46e7-b954-3aeccb628978",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9a9a63-27b7-4b8b-8d2f-9334bf6f5ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "468a5386-3ac2-42a9-99f4-e38b39809fe9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ed7a89e-6d33-483e-b8bc-bca4b4c1b3f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09cbdd01-6133-40d7-9911-0de23b9231d7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b293b21-5c2d-471a-b4f8-5d4cb788f889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77741b35-6526-422f-898f-b691e52a91f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc99c8f2-0f51-41ce-abf3-1d13d983f80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26ea952-7057-4136-bbaa-a5d4135eee71"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9ffa8088-4c17-47fb-96f7-b49c2c414e4e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "89a855c6-7d6a-46d9-8066-011eff4f4332",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a966e9d8-e672-494f-a547-82955763e591",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "29a0599e-b5e6-40a0-a9cc-0fc2ca9532ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "097fc799-4faa-49b5-b0f3-bacfcc83f05c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "24388aed-2c91-4465-a037-bf0eac7b39a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14ff0b55-b665-4cec-b339-8c02672b16e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53a460cc-36b9-46bc-bbfb-2388db5a35be"
            }
          }
        ]
      },
      {
        "id": "8a114377-7812-49f9-bbd3-59bbfca61731",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3958d8b0-6d1f-43fd-b006-1ee9675e45b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04e68cf0-d61f-4001-a6e7-4ab75bcf1662",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "eca362ac-eb79-4c4b-8722-3958e974d6f2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca118afc-f91d-4cc3-b068-e8e03805aa88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d725ff95-e7ad-4879-a5cc-3e737ff9f86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfd6637-05f3-4b42-ac17-2d41f21ac7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5df57a7-a2a6-4471-8546-c075c9dae675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64601a32-c5c6-4df0-b5c0-6a15b5764e24",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b5d186-435f-47f0-b747-270d5c4ca321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0ff154-b6a3-4d38-80c0-e7d2f0efaf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bdb4fe-4200-4e8e-9386-3e00e62b40dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecadbdb1-c624-4b36-86e5-69e92ad73fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f62b609-4440-4830-b9bb-fd5771d699ac",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02fd038-958a-4594-8239-d849bc247bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf663e33-28fc-4b38-9791-e890d0018cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ca7c7b-83f0-458b-ad9a-70d97820e753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec848e8a-4e1e-46e1-8cdf-6d9d9065f246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ef734b-fc36-4403-9323-f08e75282f71",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72aee1c6-766f-4a3d-b87a-9887909bb0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99900e06-8c4c-4f11-af6f-6cafdaf3978e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0bc47d-047e-4290-8fa4-2777bbae3eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ffab48d-2393-4866-8404-0d4131ae4438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ce8cef-5a29-4ef8-8a7a-5555ba2b8a10",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ca0de4-d8a8-48d1-8cf7-df4d0bc5ac4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61030f31-3fa9-4020-8dad-06d2244e406c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cca4d3-ccef-4de3-ba80-71e11e7fdffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d4c261e-7aee-4cd8-972a-2c2f518f44c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075e2125-a672-4677-9ad2-2937183e50f8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45d8007-d35d-4894-9076-426fe83406fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b180b2c8-90e5-4ebe-a54d-457cf63cfb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726f8994-a6ea-4054-bc75-dac175844c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6a79aea-89f9-4048-b5c5-3895d15f22ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fe8ce5-8365-41b7-83f1-a646266ed6f2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d3c6d0-0621-4fa1-8551-25e713121849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fad8af4-0ddc-4cd7-b37a-1c34c251fc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a000c79a-dfa9-46a3-a628-e77dd3121830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fcfd8a1-71f7-4208-bf06-70059335fa73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee489915-d419-44a5-898e-7cdfd6bce27f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9569dcfc-d570-494e-b753-cad26507f0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da74201-b45c-48d8-a1c1-d98345511eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3f5acf-e21a-4cbd-8197-052b05c04afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a439ddbe-a5b0-4299-be7d-8ca91d23f632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8525219-8eec-4a94-8fc7-f46592f4fa9e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52bb636-443b-45a8-8873-f638341531c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55c6abb-94e5-47d5-93b4-8287a7b2d052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22383707-3e12-4931-8774-0ee9221c35c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c783b1f0-a336-44fa-9192-a4d79af49aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ae80b5-9c0b-402f-8518-126e49896d12",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81918803-8885-4334-904e-cf8482b96801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3069bee-be88-441a-8248-1f0326b93f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bce26b-7110-479b-bc52-43530ce42f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3df55579-d72c-4ea2-bc42-1547b4480e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3728ce1b-09eb-44d4-be2e-3d31a77e3fb9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a69c83-0836-4160-ac1e-0a75ed6c5366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30989434-57cf-4d6b-8ad0-5c317970adda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c72e1ad-3ee1-43f0-a333-ecc204dffa06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baf64c2f-635f-4267-9eac-8d302104c11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6569ea44-e533-4ede-a639-eae578b98ecb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5212550-c7ba-495f-bfa2-cdd74aa0d526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aaf2d6b-29f0-4898-a687-ee5e02d7d317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0653b58-8e0a-4c69-a02b-ad5e5dd020c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa88a0d3-96d7-49da-b8fd-f9874eee8b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bb76e5-9803-48f2-ae1c-8bffa6c93dae",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e132ccfc-901c-447d-aed6-83548227e784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f2d955-8eeb-45dc-b525-f62cf051aca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd399d4-f522-48be-a60d-ebf800248993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10a62c77-104f-4013-ae11-7ae912b66344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffc01bd-151f-4af1-b56a-ace0301ac506",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfadc1b-819a-4e44-8276-fef9a3166204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e617fb-c64d-491a-92a8-aa718f4b3235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b2cc0f-4315-4137-8e05-43aee8dda420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1c08f18-4be3-4f54-bfe0-134aa6036742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89d513f-d2b9-4cdc-b688-06886f8c4838",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59832be-4829-44ad-bd3c-c67b074278f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c8cbd9-7e2d-4d68-ba96-a798f4351ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6d3241-d5fa-4812-9d56-14402946e164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e177080f-d348-402a-a167-468303333e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918f500a-2194-4075-be07-60b748b2b15c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c78b5cd-c513-4c26-98fa-f869e1ba68bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5016e0-a38c-497b-9b5c-1feb6852ecc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00b27be-6b9d-4e5a-b45d-ebae338473e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dce3ee3b-b001-4ce0-abfa-d521491ebcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3ff4b0-98a9-4a5a-b8cf-bf2247bec8c3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c576a7-3761-4565-8705-717608531153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ccbb031-60b3-4356-9f85-4ee491b2ee79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7ee5d7-cd34-4245-bdc5-8fcd936e9f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e911572-f282-41db-9df0-ac4de5c0ea33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0075d300-8e0d-40e3-a0b0-ca975c73e755",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291dfde5-2ebe-44d8-ae4e-da60879498f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53125af-e20d-442a-a7cd-70e369cee454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4ecd08-6a18-4b80-9b20-d65157811099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e46107a-a520-4c8e-8563-b55400bfc6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e9b9d4-6eba-4325-b177-91f4c9f12b3d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c92b58e-065a-4398-acf3-22b8e678db2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653f1588-e6b5-48b0-8d7d-4ad1e01d072f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d71b99-e97b-4b01-81bb-62ad4232f067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc863d2b-8266-4957-8de6-a787f0ae1731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8646772-ff35-469b-aed5-ef2c923e442e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062ac865-e258-4717-b058-e479db34db4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8076cf7-ecb8-4517-bae3-04c485b9a717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89863e4e-0c07-4ae5-be4e-561e55f41ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9092fd6-8b7e-4491-8fb6-794f875227b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a336c2d5-4b8d-40f1-93b2-3e83119ff82e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9a8cb8-209d-4318-967a-a203a4c55214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b2c1a8-67e6-4507-bed0-e59bfe512bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecc83bf-3ea2-456b-8ed7-88272ae1f740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "131f1f88-b5dc-4c66-b074-d70ea55428e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f9c2d9-cd40-4a65-b5fc-29b1ad3cab26",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa774f8-d857-478b-bb8f-f18dfe2c0d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469b38f6-0726-4641-834c-b63abd581e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a7dee0-4d8a-495f-a309-e4a51c6d06ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0fc08ac-a774-4db9-b3f5-af1f6ed1e2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0ea0f5-0d1f-4fe6-b5ab-4c757ade28b1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f7db8b-0dba-4550-a3f4-aea5a49e7825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9012a10e-b378-4d9b-ab37-2bedb9bf6433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbae5a1-69c6-4433-9c5b-b24b33941365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4b2c2b-ff34-4689-b356-66ee0fdebc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90305cb-283d-4554-b4df-1a1f0ce1a42d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ae8b5e-5f47-4ebe-bda4-21d4399ebf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b3e4c29-ab1a-4354-b001-b9020e97e496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386478cc-ea33-4d30-a528-2aba349b1d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "592589e0-d965-474b-bf3d-6af4443efdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a57da14-b3e6-448f-b180-92c7b0404a1b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665fb7d3-0f23-48cd-a1d4-c919ca9bf35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ac8d71-ae80-423d-8a71-2214928991b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bba033-2875-43b3-b802-be475eff96c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b0b060-1eca-4f40-b62a-4cda5b4e5f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b54625-9389-4103-a117-3ed187844ca6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6455bbad-a167-46da-afb8-55676ebaa0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07ee44d-aee2-4bc6-b4f3-d429230ed1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f11fe7-baa5-4e25-97eb-dabcd3396429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "42b63d85-00fd-4759-a8c9-264e77d70268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dee5b8d-f93c-46ab-a779-7d9159f5a29b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c678a873-d59d-49e7-bd7b-57e8a8ced961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e50225-20d1-41ef-a665-200ae979e9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1b0a91-32bc-40b4-8393-cfc17562e976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "957debd8-4c4d-4a40-abc9-66f894ae6131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46955c1b-fbb7-4a6b-8492-64842dad528e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051f10c8-73a8-42dd-a2fd-6fa703e26380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4b47a3-3e97-4729-b584-bc423b369d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956aaf20-e0d4-4c6c-9319-bfa0b1211960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a600135-4023-40bd-bff0-d2986e3e7cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5395cc2-4d66-481d-b36b-b13facb8b6b5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45212447-5b5a-4c94-afae-73efb7e6ff6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df010ba1-82b7-4a93-bb27-644776dee6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ca9452-6265-4cd2-bec9-70b602ca32ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ead1b620-3bc3-47fe-9131-70c9345cebba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231e5e96-a0e7-4f9f-add4-49f479d97623",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4759d79a-1d9a-4a64-b05a-aa47bc12f036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ec038f-b330-4ece-87f6-d42711d90cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905e48d2-89cf-4604-b03f-1e98af875e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "935a79e2-55a3-49b3-b7d6-e69261f01c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99db7c9-bd9a-4d20-9b95-92ca76655dc2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7787f373-d778-41fc-ab42-40b43b848300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9da603-d75d-447e-9138-4e4fe283c1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f51329-2e28-4b40-a186-463aaf6e13bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c02c01c2-d9aa-4b92-8f04-98aaee500865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d6c0d5-ef1b-412c-9f7a-230ba33e4362",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b20a58-52de-49ea-bcd0-dc4bbe175d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c9e84c-e175-4e2b-8d53-5edffec80ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afab85c9-09df-4b89-8483-e4b0949ecaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9fa996a-51a1-42e6-82ac-4da03bd76406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56047f17-a80a-4dd2-85db-e954ab0f731c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b760430c-1b23-4ab6-8711-59f70b9c4dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc98cabc-d636-4f19-a949-5d3205054d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9248e2d-087d-4213-af39-9d8dd6e14c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2416d22-23b5-4195-be6a-fb942da0945c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a79948f-3e9b-4667-8a59-a46f95c7679a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd680d5-c774-44aa-acab-40f138ee2e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38b79c7-5a5b-4a04-877c-28a844390aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862d8c82-32ef-4055-9d19-04c52ee7d9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48c76491-1b27-4af5-8b82-253f6d4ea07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a20242-31ec-4380-8208-c2e905be94cf",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886d0423-c5cf-4bb5-a62b-216a8e38dcf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ceba66-d3ce-46cc-b538-40b85f2988a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8852a0b0-5e32-48ea-a854-cd3316a27734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ece03eaf-fa79-4372-ae4f-3bb5d0dacc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9081ff-dcf9-48c1-ad78-319678fef76f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef76860c-77af-46bf-95a9-fc66b5a8462d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f261dd2a-5ff1-46fa-b7ac-689f55931a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c421b2-4be2-4836-b8ad-370dacb00f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "319d249a-570f-4b7d-a330-8d3f82c1d40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c6a3c0-3031-4f9a-bcbe-8a275d2df31d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22a2a1f-9d5a-435e-94eb-a244048beec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b54726-1136-4a7c-8778-a394a0892193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae6f3bd-db1f-4282-b362-d5f7598a2f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b85430c5-6b32-466c-85bd-2076ff50ef04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd27eee5-1da8-4fb2-9e0e-72c73db832fd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0e4b73-6072-4ec2-80fb-99acca9ed531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af19cabd-70d2-435d-a238-2875916fc0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33be61ba-b73b-4d62-86e2-8428bbcc77c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1a4359-5fe0-46e7-a02b-d82ca498f2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c01b9f8-a386-4cfa-9730-fc61a0f6da68",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f6d45b-c4fa-457f-9240-423388e8fcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b065cd-c8d4-4898-bbd3-bac45a9f4bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ef2b31-259e-4d6a-89e9-7492ced393ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "89ded8a9-654a-4b7c-8c6b-db238a0f525e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6d516e-9f3c-4ef1-b5e0-3af343cc07e2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f42879-e6f0-4cc9-8126-0f8d35d0d628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08d819a-20bb-4321-a11c-08066e582f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735a98c9-f388-4794-bdde-36ae08430b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c313bf-bde0-49f8-a39e-37076874fb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08a037d-3833-4c17-a6dc-8d8d170656aa",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f943d131-8e6d-43a6-a37f-866c339271e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2038df-0a32-47fe-a7b1-c576975fcc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9933e3-567e-48d7-80b0-8cb7fd684ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47cd20e6-f82f-49c0-9a12-2042be2243ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8e4a27-1f39-44ca-ae0f-d592a0c3c2c4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b59b91f-ec32-4851-8bc8-14d688e6de2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bb5f39-2df8-42ad-8329-ce7a34e04c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5f8167-5968-4d85-b65f-18571ab16d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2c415494-14b2-4028-8317-df63b0942c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7f7b61-ed57-4960-99ee-485e61f81198",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7795b3-237a-4d6a-af2c-1519e43fb257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2671413a-22f7-4e05-b743-15798412d8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae34249-768e-4a55-a9b1-8cda0e892cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "245df916-62b2-4414-b60c-e1f624f0601d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13314691-62d7-4301-9997-534aeb5dc9cd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f475c493-a2ff-4dad-9a93-dee4aaf8324f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2fea2a-4543-4ae0-a4c0-f4bf6e2adff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46afeaa-d3d5-40e6-b2f0-c71d66f54ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd19c72-b426-4470-b152-4da9682c2fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9df82a-e791-4bfd-a490-bc0b30f8b735",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7746f16-0151-47ff-b309-95abfaba30d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97676ef4-963f-401c-b865-dfb7bba0cb80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed78dfb7-bbf3-4e34-9462-b4cb45111fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1ebd7b-7555-4cc1-9bfb-0469dc8bf22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1730f443-8e1e-49e6-a346-3017417e37a6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fd17b9-0eca-4b88-bfb8-06aabfb26d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84fdd10-0aa7-4218-a7ed-5fb11077fc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5be9ba-55aa-4bee-9eda-8e4cc8526bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbdbcea5-47d5-4ef5-8914-115203ccf2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421f2fe7-ae0e-4092-a926-97fa4b26b6ca",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fb9ec8-d0e1-4e76-9e98-7134f1f97329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d4c8be-753f-409b-ae84-8fdd6517292b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aaabbb8-6e16-4c8d-9ffe-61ebde25e2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5979b8b-ba88-4898-913f-2fcf5c6b5974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121c0990-cf95-4fdf-bc54-cfa0020a3544",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff15642-61e1-48f4-b4b9-feba7f01b93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74446e25-685d-4480-8b91-b22d92e3e50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5486ea38-b244-4ed5-b66c-56360011a08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a032df-7d51-4615-9f7d-5cb97fc50aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0365926e-734b-44a5-a84e-16a66e91b32f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4215c615-851b-45fe-a039-0c8124e74674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb04148-a7e4-48c6-830d-b337e5231c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacc7e7d-ec91-40c7-9648-19718c814666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "844441c7-0b4a-40c9-b08a-43f081aeab09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0a7a7a-985b-4a1b-b51e-48b5ae6c286b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24138d8-8e5c-4f2c-aae7-9b39f7fa0064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9cf73a-62a6-4aea-a5a3-55f441ea0299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c5041b-7dff-4f46-b6e3-7e1e181ce4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88388f6f-f82f-4ad5-b4e0-bde06edb8035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b834ab6-443e-454d-baf9-a41fd2d1a3b5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa7df28-171a-45dd-9a83-f0812a5bfdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2566a14b-6eb4-4d54-92f7-db0eb24ae879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6f6af8-141e-4a5a-8a9e-697ce05357b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9f7c49-5f56-4fae-83c5-03fae17b8879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c283142b-fb26-4157-8bb5-a42565fe8663",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ab017-5f16-4d9b-972a-4aab10ce91a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef18636c-3ae3-4959-b874-c2609c5d0afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e881fbb3-1de1-49f7-bd70-294740c7a11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ea97c60-4ebd-4a9f-bf26-b2c2aa3e1453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f890d0fd-f602-4bde-bb2e-3985a305ef9d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28d5ef2-d693-422d-8e0a-b7032fdbb90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1762f0-6334-45eb-ab5c-1407c668607d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90924c24-b160-4e78-9326-c3040c928f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cee7f17-5f3b-44b2-be73-091196538962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ec4b3b-1bae-4f7d-b204-e1c04b3f0b94",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea2b233-ef6b-43f3-bd50-eb5dd1ff531a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316679c3-94a9-4f55-ae81-a18daf065b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6aa5136-6266-4959-99f1-317fdcdf70b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4554a5-d403-4f05-8856-fba9248c27e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1f15fd-245b-4af3-90d5-0ef010fa1d62",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae9dba9-2fb3-48a2-88fe-c62634df3dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab57f9c-b988-47f5-babd-faa6517515c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe19ab74-3eac-49e8-8a13-25af75d874dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4231b6-c208-4c5d-a657-f98a3bc6a594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fd38f0-8c4d-4a6d-82c1-11b93b4b1f2d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b52709c-6b98-41fc-91e4-426dff5470ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897bb4b8-8432-4702-9830-7c98525384c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72877bf5-d373-4d3b-8203-709dddc945f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5e4219-9295-49a3-a640-2e8d58f4c5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aec196f-6405-460d-8d7d-ab188cb7fc19",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac0d8a0-b9d0-4d06-a161-f2994e3d1b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab439f42-a17e-491b-9c70-527ac242ece7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa5a60f-3162-4b49-a60a-09dcf74c205e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa6a6ec-e6b4-47d8-b29a-d7fdf5185559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a439ec0-6a0e-4e75-ad68-e95772feaec5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b26906-0549-4259-b3f3-b64fce1cb06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d787a2-0649-41cf-87d4-558c6b422f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac6c254-de4d-45fc-a553-bfa1629a6428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9919baf7-394d-4d54-bed8-b2a24e9d26b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b96293-8cdc-4c56-8643-45f0207c946f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2a3367-7cb1-4be7-95c0-2ac9e9b28049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419e98ce-56d0-4a26-aca4-d5f01c21d798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d3a13c-2b64-49bd-9752-5d3f476d10fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f290c953-46c9-4135-a920-885596ad907e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9aaa46-c283-4078-a881-67d2632596bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505d7b7f-844e-4566-9543-da57f7a136b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2aa60b-5390-4ff9-917a-2bf58ca19da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca67600-4271-474a-a5e3-b070115e1ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff96812-c143-427f-ab26-35cc70a770b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50eb7ee7-93e2-4920-9f28-540328a5e6c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28adc84f-cae0-4f24-98d5-55569e956a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2821c1d-f1d8-4ebd-980e-1afbc8fc59c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a4b4b6-ff99-498d-9259-9f70865c3b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f588b9d-0238-4596-9368-6a8b6d3652b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209bbd40-4d1d-4d7c-85ea-f58d004869e4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194824c6-057c-4706-91cc-73feee35b562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49cfb2b-e601-4ee5-a78a-28aac6050f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e686c379-b08e-47ce-8bc4-250981d77f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3de8ff1-77c8-4d9d-8d9a-cb897738b013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105e92f6-1c32-4dcd-b38e-c01952fa7745",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6070b86-c620-40cc-b3dd-30b2899247fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa7e343-3e05-436e-b051-99bc2c8c8d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9cf76c-85ff-458a-9c57-0c826f253340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e38226-e9ce-4259-8524-db8b70a1fdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eb666f-c865-42ea-8d3d-98337319aa30",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9696c218-b6a8-4a29-b99b-5bc0f3fa2798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d67b8a-5c29-4944-a819-2f794cd2c7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697de7fa-1b9a-4e8c-a03b-28881e6c87eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "315aa0f5-350e-44fa-8292-b15a73ddbd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c4b36e-02a1-43b8-af2b-f444ec371e43",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d76f221-f856-402a-b331-a2660e2c1871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b24729-5b57-4507-be0c-806321bb567f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42f55d7-64af-4ae1-81e2-0d531d447bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abecfaba-f948-45ac-9ba1-cd96ad3b1ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54af4cf3-4690-494f-ba1c-a8f3f7c3d6e8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e39ec73-1b68-4088-9f50-424484762275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09a3016-0d7b-44f6-bf6b-3d0ef831f75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd390ab8-40eb-48d7-ac04-af1fdf824548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87819811-b14b-4875-bdba-a95d050e7217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c786f6e-6c92-4051-9aa0-cc6a92d6c20b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648c9454-91e4-4c84-acce-3527051e9d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b86a089-ff92-4f35-823d-5875e89c8d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f58d40f-30f5-45b4-af61-61fc60c6eb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1007e0df-f663-43aa-bbbb-a8b4a3b79f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2934ea94-3167-41f9-9dbb-9c180a201470",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bcb2a1-50a8-4ed9-bec2-18aa03229355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0f5176-6900-4ae3-8607-0eb95e390d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5b619c-58bf-46c9-a593-89ba339132d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0c575a-8daf-409c-90e9-77e4ebba54f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1dafdd-2cb1-4f5c-ac66-cfd9ad5c9585",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ef8e7d-031e-4a44-aba7-d173a628568b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d7de0f-cc18-4bee-a318-e9135ff0cfb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88958ffb-9ce9-47ae-ab8f-c32b3ff0aed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "88555f93-9ba6-4500-b59e-1c874b031b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d1c6c2-0125-4d08-a4a5-ede3960e3f8e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fcc637-c164-44d8-9c62-9e65dd1781d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a157b8-48e5-4ed9-a3ae-3a6b73c3a8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c458634c-14e3-47b8-8da1-11dc7d40d6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28b855bf-7c42-46b7-92c9-2031fdff697f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c86af63-e3fe-41d2-9ee5-f7f8d16197bd",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c975a0-6f3e-4eff-b911-9fbce3dbe131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f369854-a4f1-43d6-bc15-18bf2739c544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f0a420-a414-415e-bf66-36604cc065c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "587ebe1d-5e54-471f-9625-376446be8bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48be524-7781-4561-ab35-30e812964788",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb4717c-7168-4ddc-9284-a05064411033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74142a3b-d51c-48a1-823f-2c7dcc4bbb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8b6df1-601b-45bd-8314-9852a8c86d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64622c56-10e5-4e46-8445-cf0b25d5762c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449a7fa7-f4f7-41fc-aed2-355221a9de38",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16767191-2acc-4ac6-8fa6-5e2c1aff38f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0042089a-d04c-4be6-8bca-b00e136c25a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c725db-f92d-4ca1-820f-615a3483a07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9312a338-ccd9-4ad8-8205-3a0fbde749bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ce30bc-5ecd-44d2-8fab-c579f6d5b4d4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd775ba-38d2-4921-a1a0-191ca345f739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144bf9db-8195-4da0-a095-31ecd4b4666f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e386801a-972d-4ea4-b913-624379f74f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdcce57f-d598-4e30-a75b-a209ebc1c51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb17a6d-696d-46a2-b28d-a9cdd92af1d8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc10f99-8840-4c62-8181-a61269ceeada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6297d3a3-f96d-4d1b-b19b-1a972fa6b5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8eb3cb9-553a-4fdb-980e-eb36993201a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10591127-f494-439c-9a85-fdbd26e232aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3b4af7-0a5c-4cc8-8847-af6d33f07636",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c6efcf-c726-47ff-9dc4-fc050852473f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7a7d86-d0c5-48fb-9ae6-27c99b0d680e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e6b820-72a8-4cc0-a49a-ed76d2193e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cd9aef-5d48-414e-b32b-77a7e0dd5bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d611071-2734-4fb8-9f30-9eaf84aafb00",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae74994e-9bbf-4a36-82c4-d88c2d501d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5265f0a1-2d1a-416e-91d4-a51576e1b571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18547293-447b-4635-91f2-431c1dd49db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c64272-d401-4839-9a82-082d0a53434c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390232a5-8166-45d9-a33c-db3bc4662894",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c00769-ecc1-4add-9e13-0e43ef52c0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff8c3ec-89ac-4e80-af2e-66e1a1e8784a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d193d742-3ce1-4367-ae25-2bb0c9d4c06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1352af4-1d24-4aa4-b1aa-c56652ae4eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acea4df8-aacb-47a2-9bad-7204389290c6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f67f473-ceb8-4512-a56b-d9ca92489049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c144da3b-7626-4423-9693-deb01b2f5db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e4a33e-a165-4dc3-960b-180303dc3e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb59c0ac-af04-49cb-9539-c4f41e52b4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6eb095e-772a-444e-9198-28326907f140",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9a2636-e426-4d04-9c1e-2dce6b8eeb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b15f98-96c2-4012-b8ad-b8fb86b6d9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23c89e6-e224-4a94-b965-0338e46b7a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3f16de-3bf6-4392-b149-29397e1dc6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0deb166-4b4e-4fcd-b089-a4f108527ee7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e7744f-3a00-4fbe-860e-9ec05bdbf870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9388552e-1da7-4d87-a211-ad722e939c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80391d2d-e887-41ab-bffe-20f739f0688a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b43472cc-94e8-4e68-a778-f045be3ab3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88dad91-ef26-451e-bb34-9d923fe4dd4b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c48e86e-be1d-4302-8f15-a27463575647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7019bb-805e-41db-bd71-8e032944734e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a238b70f-a98b-46ef-9af9-07b9b0741623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a183364-54b6-421d-ab75-153b65792386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8664ab9-47a4-41e7-91e3-3c7ffadd1a6b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb13b89-60e2-4e00-93d5-4e5dc13ae528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1674f1-6601-4c06-8c2b-c1c4efe556a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bb96b2-5ab9-4109-a5eb-0404b160a519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fecbb98-ba5d-4835-8dba-f19a715bd292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391be0d5-cbe1-4259-b71b-b4f8a1b35359",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d499f57-da51-479f-a725-4fa97ca21058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ffd432-00fc-4398-8da3-570ddb73889f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12128c5-832b-40a8-a6e9-64fe0cb515c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2100702-02a1-406c-8ec0-36606534c4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c102e904-4885-42e2-927c-0b0553d1ff05",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251363d2-4ec3-4b84-84b4-773020ee186c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd856e4-e97c-4e74-a654-bcd95939083d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171db165-f787-411b-b359-8fb40d75aa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "896910d4-a828-4fa7-b23b-753d9cfecb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76fc3d1-3ce0-48af-a951-774afa73cf75",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23901d3-7fa7-4790-b072-7f1f40af91cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55505e9b-a478-4e98-bf4b-a99cd86cb570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba44700-904a-4979-a6b1-60e0defae7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "328132b6-c480-4752-954b-ea7b6a32b4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687d2d82-b5b6-4651-9ad1-ac546567f8ef",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33c2b80-7880-4c67-a743-e921c39a9140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083686e8-c000-4514-9b14-886412d4bdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6784b45e-8ed5-4c38-a56f-19e5ffa6dfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a23bf355-2d64-4582-87fa-e5f6edc5bb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c945e83-414a-4973-81b3-55df4fd95b75",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3e3662-905d-42dd-a4ed-d0626540b7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66ed3ca-e021-403a-a3db-65e66920a06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6231b6e-813a-4ef6-af1c-2a08c6b588d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "50ba1716-cc37-4cc7-ad86-8452fb9c17fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce4b98a-d876-467a-bf95-181c1ecc668c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "832018cf-fce6-4924-b5e7-6ee05c6bfc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60210481-2245-4f56-8917-642cba620a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359c2545-0686-4506-a666-dc9068801889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9333a35-300c-424a-a3b0-b2df1b80fe56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5a9c56-871d-46b6-b13a-655989f15756",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53c599e-c9dc-400f-9afb-a4309a33c2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2772b58f-e38c-42a1-8be8-a5cb52add8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91fde5c-a82a-48e8-8300-58e7302b878f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "98a8935f-112f-4010-8ed8-cd5ceccd9788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483d7a2d-0633-4def-9b1f-99da1713c72a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea331c3-d827-4fcc-a8aa-f03978544427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63465f6c-6ddf-4568-a2c0-400bff5d767a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7af92d-aecc-4a80-82b4-5d40ee383ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9875c8ec-91e1-41f2-8f98-877284a6385d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02583003-4d0c-4093-b604-c2c377c264e4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff35238-7709-483a-8bc1-cae0bc7ab64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2cc74066-f036-45ee-b78a-d3063d5f3eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22f8409-c982-4d7c-82ff-fb700e08470c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1d4935-99d0-4851-a7bc-95d968361332"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ad6c177-5bec-4ee4-98cb-fe36a68cfa0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea5f8ec2-39bb-42e8-80f6-6f639aafe660",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd63411-d063-4058-bcd0-1089a6e8c3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f790cfdf-e138-40b4-9ea4-b768aeef9f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3261e6a0-f97d-4b26-9bd4-34a5696b4017",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c176c3ed-df6a-45d0-bbe7-e5e765c51a28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e05dcf50-93ed-4520-acae-f2a51b178094",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e854914-3ca0-402d-8d0d-4c7692f8ad28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f38031d8-6f8c-4201-8865-2391c9adcf5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e52742f-973e-4889-bda3-c3ba84c2701b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "66fe724f-222e-462f-95d3-25148d63762f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4137216-0972-40c6-b374-0588a0afab75"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8c7ce18c-1846-4bf0-96ad-dfe4415c95e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87fad715-052c-4c2b-bf3a-b7ec651d93e6"
                }
              }
            ]
          },
          {
            "id": "a9ad0702-0f03-418e-a1fc-70696114cd94",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e9d3840-19e7-4200-a7f9-d6e016df620c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f46ee7d9-d03b-41fb-a052-8a77ea170b5f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fb42b3-71e5-4804-85e7-70880554ac3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1e2a4d77-7139-418f-8f87-d5d13e04af2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb973535-a384-4a8a-843e-56dfa97a4c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67871f9-c304-42cd-9d8b-891f721add71"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8ef542c-1821-407f-9091-41c85b8e356f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33363383-1230-4b0d-a9e7-51451a7b72e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53ca8527-f910-4bd5-83c1-e9482ba0a369"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5e788ef-24b5-4e93-9471-b8db437383a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64527679-7f5a-4658-ba20-ac92fdd22e25"
                    }
                  }
                ]
              },
              {
                "id": "533b5e3d-11e2-486d-850f-36cdd964ca00",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15fdbbf5-1aed-4e83-a69c-d409270074e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "769452ea-78d3-4a48-a5f3-050e5eb31d68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f839ae64-ce84-4b2e-8157-2a90f238040f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d6142b6d-3b12-4b1a-9aa8-42dffa1a6e15"
                    }
                  }
                ]
              },
              {
                "id": "cfb72756-c253-4f88-aedd-bf5eebb55d01",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c36fda7a-82b6-498e-83a3-4e7acc6d7a4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e17b8ba4-4bf3-4a01-9386-09dcfb29ff3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4e7b88b-5d62-4e13-bbd2-e01c3a6acc8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e465a4d-d6c2-44b0-9e19-dc289c6c6e7a"
                    }
                  }
                ]
              },
              {
                "id": "7530169f-25f0-442d-9c33-45c932abc135",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9547a5c4-a5a1-4888-8957-d792681884fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dbd1e18-dbad-4695-bfdc-565373c518bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8655d741-7d4a-4add-b239-f82cbc8c42ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "250c213e-eee0-42d7-8745-bba3e7b9f55b"
                    }
                  }
                ]
              },
              {
                "id": "88c2b1db-7e87-4b85-ba5d-1f01c8f8b7ed",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9545c8d-724a-492c-85d9-826bbe418d47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93288437-f8ed-4900-846b-b42f84367e6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79608b5b-2665-4416-84c2-0b8fe3d10c78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fbb3101a-532f-425f-9485-ff3ed2bda06a"
                    }
                  }
                ]
              },
              {
                "id": "91f0b741-1bd7-4958-8ded-19c0b0821052",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aaca6e5-ebf0-4766-a0e4-6947ae4e494d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a50c5bf-9303-4d0a-a4e3-72539c4c3efc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab457831-40ed-4d02-8c4b-1c017ebdb889",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e9057a7c-30f8-45e7-a8e8-429e62e907f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fa713d7-f8aa-44e2-b46a-9a5cf0e4ab71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25699b81-3bce-4ac2-86d0-781ae76b8c9c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ebdb162-c545-4080-a71b-4c8f19ae2b65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3ecb3c1-f8a2-4814-bac5-1dce7f4383ea"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2e768ec-05ac-4301-a2fc-b72e6a6edc8c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b58feb25-cb69-4108-9656-2ee9b358cac4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10f4134a-c2a1-4359-920b-25a820833c7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d5c8478-206c-47e8-9548-f23704752262"
            }
          }
        ]
      },
      {
        "id": "77eb226c-a75a-4a0a-a134-da6e72bf50c0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d9116e32-bc7f-4c3f-8493-80808cf251ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d7fe69e-1436-4ee1-82c7-de81657030ee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "91f7185a-f960-48f2-9b17-e1894e2095a3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34a1d67-62bf-46cf-a041-5d65bba2250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20deac71-95e3-4e59-8933-959574266bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2947f0-a1e7-4826-b27e-ac2b07632be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b9add7-f2ff-4f14-9386-8c445ace0916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076d303c-3fae-46eb-8402-e2ff3e0041ec",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8868f4fe-a655-4833-891a-2b247d94d7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0c7e62-b1eb-4d20-9d18-080d40cd7cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c1bc9f-7f1c-4715-8a0d-3b0508a1abb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c865469-6e81-4a19-898c-28b822659860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f08bbd-f2f8-4e2b-8ab3-4775659fbb96",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90555d97-f372-4e94-9e4d-8a17c2d8300c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e171b9c2-b5b5-4801-9159-7e7771aaa60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d4108b-dc5c-4b05-8cec-e9bc7b6c0f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11a1e5dd-39c8-4821-bfe6-f7886dbd329d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfd28be-d019-4334-b8f7-3ee7e0625378",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fad2e9-d55c-4ec5-a4cd-b77c0fa4baa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044acdbc-a22c-4412-9fe3-45ad5e0d8fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb8a6f8-70f4-4252-8662-5015bec39e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc71ead8-6d97-405d-923e-9ec7fe1a465d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce68f9aa-f5a4-46e8-b4b6-cd6c158ec937",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a73f91-5cef-47a6-9cdc-6ea44e6c7e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d21e939-a731-4ab6-b339-91345cac240f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdbcae7-8e1a-498d-952e-f7bc85cc6476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4bd651-5603-4b21-bccf-65a6c23a7cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9c56bf-1b3c-4797-919b-31b8bcd52cd1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c649f809-d919-4d40-98ab-842878b34879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85171e17-739b-4ca4-a1ca-e0c5f80a97e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855d0f9f-082b-41b3-acaa-f7fbcecd2f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acecf2ff-d8b2-437e-8d93-79dd6e360692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a228d3f0-1481-48a1-a095-52211dee20a0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165d76ac-858c-4f59-bb76-ac46f36b8fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddc6c11-b7f8-44c6-8c98-4337ed4212d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f265575-6e3f-4c38-a2c1-c2f15c121858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dba626d-6e2a-4035-b82b-0c20c26e4707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fcba73-ba87-4173-afc3-a115e0815eb0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d70684-ed25-4d6c-8046-f634d54dfbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc3121e-43e3-453d-bf7e-4b56dc88f2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ac7475-d915-489e-85ed-8e42faed5d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "570bd0a2-dec3-41d6-9760-fe20c3a3258a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3db4056-270e-49fd-b406-57f3d4b9a479",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473ed181-1db2-4ee4-bf0d-406708997d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbf6338-d19f-4084-91d7-17b29de0e600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5549a25b-3eb8-4a27-8e4f-384e743fc497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0915b0a-61ad-4d8a-9466-0b03cb29b69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6097dbc-3692-4772-8b96-e195bd8f5202",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9d3289-4605-4658-abdc-606b865defb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b795e8ad-a33d-44c7-9780-ccfed077a0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ab405d-e58d-460d-ba24-f581482ff006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfa0841-4ba4-4a76-9f0b-b4a24111a779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8753292b-d831-41cf-9ec8-3a90f1b00b04",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98cd914-f729-423c-9b59-66d91890b698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4899849-606a-4aa7-a299-2349c2396a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe051963-30cd-4b79-b94a-9141de636dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3b522a-77f0-45f4-880e-255989012e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b373c97-b83c-455f-bfb9-867bd8f1c06b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527d37bc-9c23-4a8d-aac9-6e1d8cd2e541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d57e79f-bfe6-4760-b934-5d1517586ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9721808f-a292-44f9-9d82-e42a25d08257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54b1ce9c-1398-49ef-a7cb-227a74da9a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37b8bca-08c1-4b9b-9ad5-d125344a0f06",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a47b6c-f461-4296-a23c-8d21eb03d0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e0f030-02b0-4a8b-8cbc-eac80bb7a12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81480e3-689a-497d-94c8-f298b45bdc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7d54c2-2a38-4fd0-bdcb-5de4b95ad3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6847cb95-2247-42d2-a5a9-ad72c3010efb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17f2fe3-5093-4bc7-8131-6374f289e26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea8de1b-fb28-4788-93ec-da2a25e3379c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69da6e90-547a-4051-8d0e-089f7fd653d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cee1211-447f-4efb-81ed-c3298fd5eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001579bd-67d1-4700-94a2-9f6dc6183cc2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70da9618-bb02-4b81-a7f5-12a5e18505bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ddebee-9ce3-4b9b-8f46-f2fc4981649f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8289b7-fafb-4e3a-98a5-5364af92cf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d91036-0fc3-4ae2-acf0-ba05d6f677d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d019b4-a0a5-4296-89a9-dee4e2ffa611",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346f775f-b198-47cc-894a-0d84784fd2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43230791-552f-499d-a123-f69feee55bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bda2b3-59ac-4bb9-922b-832308295c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9e1b03-4e10-4096-a421-ccd5c54b4680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc311037-95e4-45e5-8361-5d4795e036ae",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0010d8f6-1dfb-4117-9d06-d74bda631ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f85c7e-bbff-45c1-a30e-56332a726f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193a8702-7a79-4d78-9cca-5c6b792a65ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "961617c7-b85e-42ed-bd38-90db9b1cd5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b60519a-b936-41e4-bc8c-c8ded4507e6c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f1677d-31c6-416e-aaf7-8b5489374ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb32b050-a93f-4f2c-83b2-b64488fa3b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22eeadc-f89a-471f-a164-53059cee62cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "25ce5a96-d4d0-4dc2-8df1-98a1f87b9950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea33c97b-feeb-4487-8d18-3d1c444183e9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b789eb8-782c-4f1c-9068-7d0ab1826e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0ea38e-001d-43c6-b010-cb695816376c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1132d46-3982-4914-b3dc-122a3e6ae41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10a63f36-63eb-4005-8231-e36a803c4067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a64c5fa-57f8-4e55-9274-74f5db7b6bea",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1146f8dd-0af3-4db2-88f9-2eadcc8f2898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1bec82-771e-42d4-b39d-b230c8da3a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c163dae5-130a-4121-acbc-c5ab8a310174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e007b330-288c-4ee2-af13-72bd65b490c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1513afc-d85d-4aeb-98e3-4d6ccec5facd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e415db36-65e9-4e90-9224-9226d502ef24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41ab6d5-df54-4928-ae0d-eb1e199ee6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5d44b7-181e-4452-bcdd-3c6697ca2489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68ec4aa9-89ba-4990-8c5a-6146bc77c735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca25abc-50b1-473d-bcc3-4c66b7ebd52e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18a73fa-2689-47b8-961c-a89f9a162811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375cca62-0985-4a7a-8aae-79e9bae09889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2f931b-12e9-4885-bcae-f3362ffa6a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8510fc0a-3911-40f4-8d48-6bb739bdd8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81590874-ef37-4d97-bedd-6dd220cac3d8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfcd867-ea32-40a2-8835-b910e9efcfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0442efb4-dc0a-4b5c-b9ba-4b0323e83503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c218488-6ee7-4211-b126-fad6528cfca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c28a4725-523a-4d3a-9677-982ecfcadde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c310ce2-994f-490a-80c8-15680f883f38",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152e686e-f5df-41af-a52c-b57aa4c419af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85a8cfe-a557-489a-9d55-f8148926f6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da21a95-7ce1-4850-923f-e241fe3bf09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8621f9d-4912-4d94-8638-18281377f383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1e31b8-91b8-46d6-aad6-8a79aa18ab05",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d023b12-de92-43a5-89f7-475710c281f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e8d3f8-2f4e-4e29-926b-43547635966a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4076ccf9-5bbd-4e95-81fe-c7f8142ee8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b24e41d-3e3e-4f9c-8cce-bb291f925990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e5fb53-48bb-40c6-85b5-f90e1c19deb9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b64431-fb1b-4984-926b-8ddd21aa6086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd64c4f-0bfc-4618-b625-ee4ccc49d2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e846193-d74d-46ce-b7c1-8fdff81bda0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe75e5b-30ed-42e3-9a41-37b58a5a1e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d138dd-b58d-4cf6-892e-fc01c477c03f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d683f730-5185-4958-a863-03416df02b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4d688a-47d4-46e2-a3c5-33916fc7652a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82058ab0-63a9-401b-b877-b3b8265393f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "704d11b7-6df8-4a69-820d-d699a21ea2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1df5107-89d9-4c0e-b368-f5fdebff23dd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28fbf90-8c3c-4417-af36-a3e898b1cbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282e40dd-1d38-42ba-b0b5-e82e0520a392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1443b1c8-2829-4e31-b83d-c7b77da4083a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4a0498-9e78-4f9f-baee-175f12386458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d73560b-e3fc-412c-8827-5b735846a611",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be481b0-47dd-4322-99e1-10697fd14725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55432520-968c-4d91-85ee-611aaf5741b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8109efa7-cf09-45ba-a4e2-9f9c98381965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccadfc2b-1c29-483f-931d-12ba9f46ab25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee743be9-c8b5-4dd8-8251-e59b362753be",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfec921f-558a-4094-a41e-1a5f502fef32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c9583d-883d-4406-9652-5bb69b73b14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04123541-d427-439a-b176-31e4ce96c25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "183677e1-0a5a-469e-af2b-07330e5e3e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3717ae49-25d6-4897-9a45-d9e92568ab81",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a2a2b5-6273-47a2-b523-6af6134d24b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c4b1bd-6d6c-4613-805e-6bf2c5bb8433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8aa814-5b8d-44ec-be0a-d70da2fb6f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "855d7463-24d0-4b04-9efc-7cf71cc942c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bd683a-89e7-4091-8237-8d086fa10ad0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0108295b-e385-4516-9eed-989178f4123f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f04884-33d8-4ce2-b690-55d37b169eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af660957-48c0-4e30-9712-549a7897586f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d54268-2970-425e-9fa6-5b4ff2918751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaede1d-d567-4aa6-a669-aa94d9e285b4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c344ada2-ef09-4bb0-9ea5-01cb759fc5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fac2bb-3500-4756-8739-a643de2a0932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cb5a51-b992-42a9-a8f1-9379e0fa0ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0e13f0-f306-4075-9ec0-bbe73471c16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893eb37d-99a3-4fc2-bd7f-3feba78d9541",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d26b848-6cf0-48bb-99b9-4aa4568e5bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844f0fe6-d8c5-4430-8a79-d7d299ca30e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03b7817-fbc0-408a-a6be-3436910b5b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8838cadf-ed10-4fb8-8433-72cfa7ffdbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7b4cd0-a55b-4f58-93cc-85501bf0484e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95d2c40-3264-4e93-91f7-db32a6dc3cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6c0655-4721-46a1-88b4-a8dcd114abb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aba2058-aee6-494b-b295-ffa23c7942e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dff77cb-27b8-4ec2-a7d5-74f15419f4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b44db29-c61d-4a6b-8610-b1aebfe4f5ca",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d6904f-d7ad-4a95-b935-98217a1ca1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c04b58-7baf-41a8-bd97-764bcabaa34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5352c3-a1af-49d2-ad0a-db10730d1470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea371860-7e62-46fa-a08a-b45dc6a41b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2483ec35-307d-476a-86a2-1166161b195a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9faaaf58-a54f-4125-9e8a-bb32b644172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18eca820-c691-4fe4-91c1-12cd2559bc55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323f5c7e-f60e-4bfa-8024-05516581e956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa618aba-e258-4308-a16a-9ae37f9f0d42"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84e7e832-0052-4edf-bc6f-18655af76738",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9f157f5-8bcd-4884-909a-6ddfcfde58ce",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645322b6-068d-4d66-86da-eb157586f18d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9a67e04f-03d6-4b54-8396-6b3f6875981a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d328a5-dd7c-4c08-853d-4f24e4666db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f8ce279-9408-46b2-8021-99f1732e8aa2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51697d44-26ab-4cb9-93de-072618e83d74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1baa7a76-fd23-4e11-8544-87fcec7a2a85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b654e0d5-4f34-44bf-af0e-56a05b00fdc5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8671833-0b5a-4edd-b878-0727f2da0ba3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a7ee89e-b156-4243-b3e9-4b92367ce943",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e8930f54-2fc9-4804-b902-415745532a93"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b231367a-2a00-4567-bca1-c08963f10098",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86cd7f8a-cb7c-4ca1-822c-a4e9d619fbb9"
            }
          }
        ]
      },
      {
        "id": "745a8eab-67b1-47e8-a1d1-ac978e7e18bc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "68e95505-7391-42b5-9ad5-6cea8c415b14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9943bf00-6d36-4da2-b1a2-cf9c52b2b4b0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "787faa1b-1814-40e7-9149-aa588cb70049",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c57a20a-dbf2-4aad-99d8-e0dfa22fa611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54e56f1-9a93-4ef0-a909-2b532bdd9110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb186f0-f62a-4dd1-af45-db4cabbe83b4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b554827-88f6-4f3d-bfc0-63fe005a9818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572c54a0-e7f8-4fb9-a459-85f3b1776ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a380161-7683-46ca-b4e7-75cfac680d6d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89176a7-4724-4ce4-94d5-14b6fdbf3ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bb1a62-62d7-4ebe-8c5d-52fa13f68bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae68900-b259-4178-ac76-47702b700786",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670e674b-fdac-432f-b78a-09055ccac71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551e7e2c-5f47-4c79-8409-d30ca1e58e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25869bcb-53bb-480a-bbc3-33a010fc9e32",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02718603-253c-4b42-9b74-9ccf30722c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b0a09d-d26c-4a6d-bb09-f7e102c35b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08610d97-ae7d-4506-b9de-e32d49111e2a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fc340f-52ea-46ed-bfc0-12e232f4a843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fee20b2-cae9-46e8-b1b4-1f36f09a2473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aa49a1-d43c-4da4-a13f-17cdfeaa674b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2d772b-c74d-4ebf-834d-4f8433c031ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a895cee-87bd-4fc8-bbb0-dd51cba0348e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4210faaf-375c-4b10-82a2-11f64c46d9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adadc4cd-1004-4f5c-ae64-a66dd3fada49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0fed41-35f5-4a0b-adbd-f70799774b44",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7cb72a-c1f1-498e-871d-3b3b2ff0d2d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20c176f9-c3ff-4fef-92d9-9072f8cda8e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfec3656-0197-4e0f-80e7-3c0d43da6907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2268e50-893a-4ea1-8376-2c9a07ecd205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139adff7-1278-41c4-96be-ab7ee8e9d11f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c3088a-bce0-48cd-8353-6e6fcff88997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c00655b-1f97-4b9c-9680-f887b22ec087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d70dd9-0286-459d-9133-dd4b27c82250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd573f2-9958-43af-abf2-4fffc5082a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944f537e-207f-4506-96f6-cb31cb2ad381",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3910b50-fcc6-4f68-96bd-2c27101ca050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0153619-9d14-4fe5-96e9-d969d8a0ac57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c32357-7429-46f5-9ddf-9de40ae77d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fec57c-fe43-4b55-a05b-a506c8cff92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bc03bd-bb9a-48ac-8efa-ac70c382c4cc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc37bd62-f3e1-43fc-a1a4-227b1ded10e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ed173c-2bbc-4dd4-9012-cd6f6622358a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ec0b91-a5e0-4734-b0e3-b840023330ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312521f8-ed68-434c-bacc-3c64eaa5a3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21713249-65b4-479e-bf8e-d7e1e3a09648",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09471f94-63e8-4bbc-8237-ce62d321c45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbd8bb2-12a1-4d61-a07d-3e388b36887f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3ac5ba-23be-44f7-b87f-24e028bfe8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd287f66-bc6f-4e8e-9d0a-6f4d0443621a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861abd24-50c9-4b69-9142-b12589721a4f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62835200-39c1-4ee5-8960-70c9aa6c118b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3712a58-5062-4693-8e5e-13986a1626a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fb206f-2c1d-4e24-8aaa-e11171c156d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35c7d8b-4f8f-41c3-b5b0-c1121622dc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9687a1a8-aec2-4631-9053-df65ba430bf0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e5be7e-803b-4194-8926-71c301c97e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdb1e1cf-cc19-40e8-94f6-b34ed9ce9d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46aa30e7-a86f-485c-944e-3c434f33aed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f988e0-3e54-4ea9-8967-2770be279bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e5079c-07d5-40b6-bd2b-46fb4074c9cb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280481cb-b656-4e83-99a8-ce56badbd7f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9527b40-2274-4f58-af18-6418b3310c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871b1924-c3ef-4e06-9400-3b425db2681e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14487d6-4a19-4176-85bc-e0fa077e98f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38de64e1-416e-4d95-8e36-859c01980469",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848d2758-c946-402f-aa5c-982ac35adb27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4346ff06-f075-4e53-b507-e20f500980ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c075613-44b2-4697-b73c-c3ebbb8d54ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ade5bb3-419a-4c40-ac0e-d2e3165f6451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ed1dab-2c47-4269-ae4d-c3e8ddc4f58a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4336e6e4-d6e3-4faf-9af8-ae350849a149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbb4c1b-4b03-4256-87d9-8f096cce8fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c64f1ba-5902-4f90-8505-9927b1c1bd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00484b0f-9e72-4ea4-a6a8-7e08261191e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd919de-926f-47ad-bf98-8d3e9ef2b020",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2ae787-a72b-4824-9aff-41f356939dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9884c3a9-6280-4e44-8126-c84231310444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0255cf-4f7b-4682-a896-21fe8e3fa4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e116985-d453-42b9-81f1-fb6c79330600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbcd029-3f0f-44a7-8909-3d43378f627c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8427b7-996a-4e84-b3ab-56f89ee4228d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45be7ca-4a05-41b8-95f1-f51c0d7e4fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab726439-eb38-43d1-9673-7c4e1fe9f54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c958374f-84e5-401a-a7f8-21fe524ee232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0b9837-81ae-403e-880c-a53b2d89bd20",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09b6e18-3299-47cb-854b-167743cb62f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c26a8b-ff07-41e3-904c-e9d049a58af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18c09a6-9b4c-4189-b356-309eeacf14f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533f15de-b6a7-404e-8339-64d7e633c0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cd98dc-dcbe-441e-869d-a7ed2ee409fd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f298e84f-6102-4146-90e1-1d784dbebf88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686a8331-745b-42c5-ac66-13ad591ec6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2dfce6-6b4d-4336-8817-663615b6c972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d3f835-1155-4439-97ec-d2d78c878a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071411d8-2950-4da6-9bed-a3283e70c42d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11327fde-0b3d-4ce8-803d-18629694c0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6e67ac-736d-498f-be5f-b59650c684f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "094ca7fe-c57e-45f5-9b36-ccf176d23638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3f7c8b-fd98-405a-968d-ec9e819c0d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098072ec-158c-4e61-a4b0-6300ebe6a27f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555f2cf0-2be4-4c16-8bc5-d410f7c7c59c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e2c214-d6c4-4d54-b473-c9726a628771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baade38d-ae5b-4df7-bd9c-24275ab662bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92551d52-650d-4579-ab34-7a937fc49183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9ac915-f704-4738-b797-efe52c1a8520",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a737ff8-6f63-4295-85c6-62ddb7082c63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd7468f6-5fa3-4a5c-9e1e-27ab23da6aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57901d8f-c562-4b89-9289-6739c9808192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd6c8a5-a2ad-4730-9f93-182685fd6a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094ce156-834c-466d-a5d8-5ee72120c6b1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71a13b7-0e8e-440d-8507-d7d6933535f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "011dab4a-06dd-4a03-954f-76b0e68c4e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c13f2a-52df-4266-b98f-75e39d1ad729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7fb664-86f1-4b10-be1c-21c500623128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621ff356-528f-4b53-b102-6fb10e5d96df",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5502e34-46c9-424e-bb78-863f3e5e2c94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45226f8d-17da-42a7-aa1f-a373ecefb412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291ad2c8-3b1e-45e6-b489-506710f869cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17945991-977c-454a-9a52-64e8f131dc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25639be-ad6e-45cf-87e9-2e6417b1fc27",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3218db2-56b5-4f6b-9b1a-bcbeefbc25c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a55c60f-0259-43a0-bfc8-859a9b7cffef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e93eb85-0a58-449c-ad30-d25c56122101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c6a77d-7778-4689-a0ef-71c2a48b0ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4beb0352-3bd5-4678-a2a1-086a3adecfa4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c32dff-7277-48ea-b0af-cd7082f74285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8619900-cd2a-4388-82f5-125bf0fc50d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ac4d39-02c5-4487-9785-acadd68d674b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f623482a-eb2a-4201-8946-eeb2ca8da9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8c401d-5561-4793-b382-6f7457a8c934",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cc1d91-915f-45a1-947e-24aaf621fc2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b11e023-058c-452d-b5a1-e611318cfcbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fea446-69a1-4869-b934-2a71e14d2959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fcd2f0e-813f-4122-9bef-6f843940a188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8fceee-ea13-4ecd-b15c-49d7ec0a4035",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48c3a95-dd9a-4a3c-b832-092378d361df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9dac958-1afc-425d-8672-efa4dcce960e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a7a51e-c96d-4fed-998d-d1c88f90a24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e74230d-a949-4069-8dc7-1c3fe52a9e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b8c44a-fd4b-420f-93fc-22d0cb272394",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50578a1-3ec0-4118-a9db-1a75d749f7ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73acf2bd-4352-4e27-9e91-d17b5498e349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc92314-eef0-4a10-91c8-6f0cff16c112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40744704-021d-476e-bfa6-38d894754615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75153705-88e3-40b1-a9c9-e31d1878c9d0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcb52c8-6d08-47c1-9768-2682e099451a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e05a94a4-a4a8-4756-8195-1643d148c638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f955c47d-ecbf-48e8-91a9-a36368ac5be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfff6fb-d111-43a8-a8fe-dd65fe726e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b0a693-e3f4-4a7a-b1d2-63227e1e5b73",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fbd844-56a1-4403-9997-0f0596374935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "255e9b0a-37f6-4450-86b7-4a5c92004892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93571b69-b855-4f05-9de4-a5f4f8f0fc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd107dcb-d9fd-4024-974d-26c377aa8e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8a0db3-7faa-4cf4-b070-c7d8c4181101",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f59dd3-1f1d-4a9b-a0db-942d16ce073a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82f6951e-061f-4218-9d54-9b91cd7d9097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce4f600-4589-4c7f-99d1-f66ac6a83015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e7ca08-4935-4ddf-af9e-ca33d234c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9f02fc-3d00-41a6-931d-b7f23f33d926",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1504d24-35c1-495b-9e5a-9ac3ddbda519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72999832-91ab-4f3a-b435-ac5d29b36fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60996053-a611-4827-a8b9-de033d9bcc68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5efd09-110a-47e7-93ab-2ee4ae11303c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec5442f-6504-4873-a11c-d560cde2fd6a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b71b481-e585-4fe7-8ebd-430f10148702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f609ad-510b-4603-bd80-301d17668be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25a2883-161a-40c4-8b46-e0000e994dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e3eebe-86d7-4230-9aec-20471fae4810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099ddb77-53bf-407e-bc95-46effa7aae26",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ff25a1-a2a9-483a-b9b4-65f60bc81590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "753d5306-ef7e-4e46-9075-82446b793752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ea2f69-4077-41e3-b73d-80e7345ca0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db151632-5126-4707-ad37-9936400700ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9783bba0-cc33-4c7c-9fce-18be3006dea7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f82f87d-0784-4962-bef8-45453c529ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a48bc5-1dde-4aa0-8a4e-618ba6fca730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb31013-bd26-47a4-a397-e4d3fede3476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fe5d52-eaad-47f6-a7bd-1db63ec9b485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0476005f-d024-4749-a207-a3f73a67ca13",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332e1073-482e-4e31-be95-06299854ed1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73daff33-22e3-4717-bc14-483324c022f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858b4485-72d3-4888-9e17-9253c0353209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0609352e-a48d-4ce4-8089-c47c42213e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6d72bc-0c16-499d-bb5c-b4eb9645425e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc1f7dc-d20a-4866-85fa-acb76fde67af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530c36b8-9e63-4ad2-bcc9-3cb4dead6bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40587d0-63d3-4841-970b-8f8f645f5001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00fb2ba6-b674-4f3b-8da5-7c15a3a82647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16b589c-804d-4335-84e5-73049fbba8d5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db21b5df-057e-415a-bbdf-72c386ef9a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce80d713-e88a-4db0-a8d4-a85b764d8dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957a688a-0841-4cf5-ad05-927a5070b415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9cb005-e80b-4f07-9de3-5e38f6bd6771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d18688b-30a1-4ad5-9732-55d10b4ccbce",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5f1941-368f-4904-8b36-90c2f75fad4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f90f180-0441-42a7-a902-baf1a0f08dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f282652-cf1f-4394-a454-098c0e71493e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cadb91-02cc-4828-8ed9-66976c2acfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff780d0-c764-4c7f-8484-a8bfaa260c4c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4052279-c199-486c-9d98-52279aa4fc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ee1aef-fc8e-426b-9312-95aa017d51e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea3620a-943d-42e3-8138-81d37d13bab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e351872b-b091-4c43-8f03-68b9203b2c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc43ed5-8b52-434a-827c-51ef9ccff8a4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2422a4c3-f93a-410c-95b3-033e28d4926e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100b7837-5884-4b59-acbd-44b77cb51b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e01b34-c8cd-4b28-a580-62dc9c78eae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7103f8-dbe9-449a-a844-bff4ce9ac511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09fdc05-7093-42ea-8cd4-452493082e58",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d736f2-a072-4b47-bf29-638049c0676c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d78c97-8e57-4eb9-9f7a-9595c57ed5d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b08fcf4-1301-431f-812e-fb0dd4031c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b18c969-88ac-40a7-8a0b-a8cc62bf4ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8349c3f6-7d08-4771-b557-fcc2ea7949c6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55707235-7834-4367-acb2-74690e5e4df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0226318b-d340-495c-93c6-0a0b242a4354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3895a63c-e7c3-4597-a8ca-eaa8f9da76b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6734e44d-a921-413e-a82d-e6bef8902f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a8a700-b3de-4b76-a5a7-4a6e8e782ceb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63849ae6-57ae-4e25-a1e1-ae74bc274514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f818a59d-7409-455f-b022-f2602cbdffa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631cdc6b-f2db-4dc3-8810-085729ce32c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994003a1-10dc-4872-8a06-2ea32f97b3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe9084c-14ba-47d6-9624-1c89add4d0b9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4351331b-7528-47b2-b478-c2e4e8cd22a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd579bdb-4849-422d-8339-6464d79c6fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6393c3d1-e65c-4a29-aae9-f31df272abf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d94ac1-0a3f-4cf1-9080-a7502c2c2aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e965f92-aa4d-46a4-b9ba-f12c54c69626",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37613251-05b3-4bb6-84f8-be9aaed45511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edfb957-83f7-4075-80fa-d26f27f89497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1af20d5-01dc-45d2-b45d-add221208de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a15bd0-8adf-4789-b068-11a8fe2e59ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae254f9-a30a-4717-8d46-ca9c925617b0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae913333-c7e5-4d94-99ef-3d3c22b7b393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61cfb60a-40a3-43ca-a191-aa7c8b32599c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca632cba-7bbd-447e-aafc-9dfcc2a6dae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1b0599-d137-4f54-a2ec-3a071a441014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbf22b4-a0fe-4dfd-b250-528a2be24016",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a36540-9c38-4f0a-847d-705fcfdbee0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880f2407-212c-4668-8d22-7df54a095d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a06715-4ac6-4086-b04c-47d3779b8a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "decc43c0-e36a-47e8-84d5-6e5735fd95c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2643ab4f-9ce6-4e46-a24a-ad641fba69f5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dc7037-b5d5-45ea-ab7b-acbeb550dc25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1a1973-d6b7-43b2-a264-e58c7dd944d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af10da8c-e019-4a2f-92fa-c2febcc60b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b55f554-2790-4591-9d43-fac62cf6e4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24d3f39-1d9f-4a39-8ec1-d366ef8f767a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f12c9b-81b4-4e31-9cc4-821cc388fdb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953c37eb-e66a-49cf-93aa-99e1c04a5201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f626e5eb-be83-496d-aa5d-bc1d23cdb63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24341268-bc75-426b-a1df-6b1887fe3e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d30a58-0ea1-468c-bb62-f24a91b23db8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d30146-2727-4745-8821-ed881a3be4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2241ccc-f967-44a5-81b5-23f74f3d228a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d339e2-5779-403c-8d4b-209a8c0dce66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5591f9e7-1f5f-43a9-8fea-8d72df3b398f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bffefa7-87b8-4c7b-a3c8-d69bd5f89d1e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96940b02-4182-483c-ad54-16845644260d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3dd180e-d6a9-409c-b800-3bedba5081a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a7f045-43da-48eb-ae43-bae665382e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f4ba99-b6f5-4c45-8082-672eb02375a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05728cee-6f9f-49ef-8c94-8cb70b3d08f6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa90b67-cf37-462e-b7c7-73d3875aaa0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9eca019-c1ac-4d40-ac24-cea3969ebcb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487904e3-4c49-42b4-a24f-af3fb0deffa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ea02fb-866d-4323-b0ce-6ddb1bfb4cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e44ebc0-2832-44b2-9528-e2ee27058ce2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8e422f-2ee4-4e92-aec2-5311e4bded49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1baeea51-135f-4ff5-becc-4240f973d9d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dec4d7e-989f-48b3-9888-46849e0399cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c7558a-6a27-4d11-9e76-6b4da46c61f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b607c8-633d-4de9-b702-02a79ef8e166",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2b1ada-b7c4-495a-9ad1-1ba980291941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca58fb9a-e674-446b-9d29-fe710866f5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bd8cd1-03b6-4ada-be51-f3c029b383c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bda4e3-05fb-40f7-a2af-53c1edf4db73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2475d2c-8e59-455e-bfef-c154498c7e13",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3e19c2-d471-4720-92d6-7330fccbe740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2af47b-a546-4d73-9dfa-bf02624bbe20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee9dca7-0cee-438c-8b32-da9d3200d984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f64f210-9ff0-4b08-84ff-433dc2f8e0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d514f8-3e25-4ed4-85ce-4621a7e87768",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82af5eed-e6ce-4fda-8da8-a9e2b1a56889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49bb7750-efa2-49d4-b1bd-b26762aca894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5877cda9-af75-4fe2-befa-cd6aa4caf5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52696878-b724-47d1-b808-a1914a964f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2391ba2-13b7-4dee-8c86-1a1a0ba70c09",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe30990-0fdb-432d-81d6-1144054a505b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c26cc0-30bb-418f-841e-f49bae4a7ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93a7c85-1552-4868-a91a-f1f24a5e5b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baabaa04-3f03-4914-a863-bf8a26af9cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f0ea68-5883-4750-ab58-120f2a800b8c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bff26a-477a-4bd6-9967-059812516397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca709644-bd53-4383-a8ae-0eddce112125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e5aa8d-0c85-4027-b847-73c033162b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd156c8-8f97-430c-aad3-57760e851a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50fe1c5-84e7-4fb8-85f1-cb18bedd9240",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba29e17-0cac-4c77-81da-29db6ee631cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8e387d-cb7f-4825-9b8c-a3b7a9fb9cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674f6977-c561-4aa7-b1b4-c674ed643dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff3c775-c077-4a66-a0e5-42a270800de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f9662e-f5be-47ad-9d49-27ada31bf302",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91044178-4b29-4730-81ce-5c0d5178d841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d540eae5-f5c1-458e-b285-e80694fce87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c589ad1-5af2-4d96-9318-1ae4fd5b29ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd105a1-26d7-4360-a3db-fb09e4fb4a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8544c3-003f-42a3-bf93-438bdac26a2b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14370155-fe0c-4149-a07e-b1af6a055bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b895677-35ce-4b29-ba8b-022a5689703c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2717c5-f483-4706-a671-d470b96cd6aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee899244-72d3-4564-873c-8dcde0646b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68897ca-fd38-4ec8-a525-d393e70a26b0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b708b3-9408-4bfd-a4b4-49f2395d8673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edefe513-a531-4430-800d-cc56fe303985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db19e5e6-0bbd-4c3a-aaf2-312ee2bd9c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ec7f57-7f97-495d-b988-f162eb51c2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d321f618-4681-4260-9dd0-2212f4d86381",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f56234-8124-42ca-83fe-2bf12ecb12fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349853d8-5517-403b-8651-e0a6932c2945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a632ef-9c2b-481f-96f2-5f975ff6a9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efcf3ec-6c35-4abf-9190-a1210fd162de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d2e91a-0bca-4b4a-8611-005f5da7be61",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292d12b9-d8f0-46f9-8c19-ce0ff614c18d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b314b2c-2c0c-454c-a23e-02dc80777173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1a133d-afa1-4c66-8d3a-dd07c16141e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ddb8af5-9a8e-4471-8ea3-a20c3c42e02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b6eb02-71be-4e70-a390-9fa1c9922394",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47173ce8-fcf6-4238-b955-7fd603188fe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec3ce7c2-03be-4b7b-9e77-7299f35b5bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ccfd09-2994-45f3-9d51-9ba22d2d8db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f58748-6081-4aa8-8335-16681ce10a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37acc68c-3b09-4fec-b82a-080dab74145d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931bbae2-6990-4c80-b65f-f20759d7a035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c6681f7-7df2-48b6-9fbb-d6c63aa19aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9836b564-ae4a-4faf-9ff4-dda14e1f03dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10f1e69-5fa0-4bc7-8073-37bbc565c130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa7183f-d9f5-4195-9f70-3f02cb2ce735",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b080e53-7153-4423-a9c8-498d9d77b334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da80a305-f8bc-4948-b232-e877e16dca48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2958a106-1204-4bfa-90c0-aa19d6b67fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8a870f-b786-48b6-8dfe-253605737450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a0cb4e-a36e-41c6-a0b1-e2f39ae4ef99",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74adb9fc-5690-4818-92f0-50c7e79cc520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3eec8d-b6fb-4a48-84b3-7411155f549c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66448735-915b-4184-b0bf-3f95a6e5a2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a06449-577d-40fd-884f-75af93301ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eec3ebd-1fe2-48db-b191-0f2c5c9ef428",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5c4fa0-4d9d-423c-a7c8-cbc6cf775ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a180910-522e-4517-86bf-405a427adf86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51dcbdd4-9795-427c-ad12-01c03e240163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12bef5d6-b69b-4ac6-ba5f-b1b77c0c9d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9455c0de-59de-4f6d-8e30-ab8f8d71acc8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac8ab86-9e41-44e9-8889-b5c7279998d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e48a6cf-d88b-4d2a-8f8b-d26fee0c7b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e644e4-c67a-4c15-bb5a-b61916dd0901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b1540e-ffa3-4e36-9bdb-848bae6d8e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3de6a92-3497-42cc-8abd-6a10bd5112be",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd6d031-b817-47d7-9410-aa016a4cf958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b8a035-04f8-4f89-abfc-ac5b34c7d5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e4fe29-56ab-4162-9a23-50e4aa0f1ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6b35bd-482d-45c2-a433-87241a65512a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06eed5d-c66d-4444-a82d-82e78c524e4b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f82f415-c0ed-4ba7-8715-b59aa24ad405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e35d726e-3c41-4770-a45c-16a1a9b7f89c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee66061-c5fb-41db-b6c3-23c89ad776c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ddf16f-2a6c-477b-99a9-ba6f1f5b901b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1d9a80-47b1-42ff-858b-07e75d757404",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1742454-bf50-4359-b0d8-a1c8a7cb7aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0df6c2cc-66c9-4c4c-b951-8818f6713f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8936d93e-3632-49ab-809a-dbec46f106d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce93be8-bffe-42fe-8f9a-cddfd8b850eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61bfbe8-9a7f-4258-9c86-1df95c633ca2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03c5dd6-f487-4982-9245-7fced90bc3a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8939eedf-5da4-4158-9f22-dc8ebc41ace0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8b7f85-fff7-4ac6-9fc2-d0087848f106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf42dec4-13c0-40ef-993e-00597f877d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeb0ee2-71d1-49f7-9161-c89bb10a5163",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17392924-563b-4162-b235-085ece029cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dd4e3aa-1fd4-40b7-b4df-c268a88cea81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac09cb9-6413-4a37-9b3a-456b1d2dca25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c055751-f0ef-4974-a468-ddd55de993be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11e7b11-46bc-4726-9a2f-6d67a6f97791",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d846c01a-0d07-4a26-8f30-963f782cb941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "555a165e-6ebe-4f02-b024-7ab621d3f526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59509223-43a2-4bf2-9e84-674d90634764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7bbf84-13da-485f-a21d-fca03a10b242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f931acf-f5d8-4a4b-9846-d556de6872a2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a2667b-4eb2-4901-8248-3f30c11a8572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3881470-c27e-446c-a990-aee2e23c609b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2ac791-52ed-4fd0-8d29-b57d23435731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663eaeac-e392-4170-9313-3853759bf1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11fc5cb-7ebf-4bbc-b8ad-259215496bc2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17091e9-b0ac-4d0c-95d6-601c8ec1a84a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab23e10-cfce-45d5-86e1-894bc5ef2151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7346008e-9d8d-44a1-a2a5-576db1627004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e956578-369d-41b0-abff-34d394c77ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b846d3-38d1-4b05-992c-148e5db78d18",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a423f0d3-6091-449c-aed7-83b42b2bf581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dce5d057-e116-44ea-9b8f-2a5c32d315dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3f90ce-e526-46ee-80cd-8bf332f8c04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cef69b-2da4-407d-aa26-8c60f838d38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bce2360-c62f-4535-9f0f-ce9962b98b9d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eacb2e8-0b31-4b5b-9128-16bad79beeb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "272a1e7f-b1e0-4542-8643-1549985db86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51be1602-83bd-41a6-9e51-8a79ca111599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e643bb4-e0d0-4283-bd20-5d26ddc073fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1effea-2751-4340-9cbc-0117ec5121f8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af54b20-e00c-46ea-a144-1a0f13b131cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb7d93bf-4aa5-4a11-866a-f363bde84600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd186ad-64b3-4cb4-8104-fab4be6add06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14db407-cdf2-4602-898e-ed2263a91b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaf04f3-ed58-4ab9-aba0-c65eafab2f21",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a92d7a4-a0df-48a2-822b-2ec80fbfcd62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11ab4a78-7e56-4cad-88b4-74b3e4e269f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecbe9ad-adc9-44ae-90b5-cc1bbddb5b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a99da67-70d7-477d-aeed-fea6289d2dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0357378-2835-4824-bc86-cd317fbfdd9a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ea50c9-4583-425a-ac7f-ca75f1199334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aef4a9c-a492-4b89-b029-9f9875469aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93b8cf0-ff35-4b96-9e58-f2223b35589a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8f4301-5f8d-44c9-ae72-3e37e0c72bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65058da9-a442-427d-8007-b101b00e12f7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20137a2e-c754-44be-bffd-676c2add4a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e762d7-069b-4960-8d93-0351e07a490a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2487b011-4b93-4646-9da9-d8ab18d80ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32426a1c-e013-474f-9598-b8489395daf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fb45e7-c219-4f2e-8c30-8ec30bc90501",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e42b643-506d-455c-ae29-0dfa419bb0e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7587354-5bd8-497f-9d42-c273f3c7c134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb83f0f-23bf-461e-83f1-36192cbaf50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3264d1e-9764-4930-98d0-9852f8a4110f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e0a29e-066d-4189-bcde-dfbda36777e9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7802f5-d529-4e37-82fc-1e5db438c152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "623d7aca-2a67-4824-bca7-527c266d09b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9659aed1-c62a-4eb1-ac2c-cb6aa36cd181",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1510965-a821-4229-a1bf-e50eab49f80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5141cf96-0f5d-4469-b215-884af5e768ab",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02844ca0-b6df-438d-88d4-3153f17a305c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a49d0bf0-1173-4ede-bcaf-eedec644f150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50475935-2469-4ede-955f-cf8365e20081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a52bdb-1507-48fd-a8eb-976254999780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368b8585-5eef-4d04-835f-7b0efd65b55c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1517f0-3440-4c87-8de1-9523e4f3557a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9512c26e-8bc7-48f8-949a-5be846858b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cc3821-c8de-440f-bf39-0c9ad5fa20a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee20d2ca-9f15-487a-ace9-85afcd2ae5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2702c678-ea3e-4a06-9378-c0bb44e6b5d6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f4fbb4-80d3-427a-8e7d-b0b812282e97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b5d8281-6bd7-4a70-9aee-5411eb680f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a173ace-631f-46f0-87c9-b02ccbd1c505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a302902-2f9a-4654-bd93-2da012a4523e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3524bad-afb4-47ac-8e5d-5eab4bf22ff4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2ed0fc-46aa-4a95-ae19-73aa5570e15d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cee2abcc-52c7-4ee1-9eec-58cc36c3d38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fc9728-925d-4f73-90ae-411327d591e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd2d39e-129b-4c86-9438-47e59f582c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06331a4c-ee37-4f52-a2c2-d87832c26cb8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69d59b3-74fb-4fe3-91b3-3c4c4adb4063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e1f973e-1fd7-4154-807a-9de940ebe316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a11b71f-de84-48b3-95e7-d2ead9ecac06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005ca567-3dd9-41a4-a425-785710868740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693f8c60-c18e-4dbe-9f2f-ecc917ecfd41",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c50dd4e-edc5-4403-a64e-213d29f90a4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee93c90d-58a0-482e-a081-dac0cc32426b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ee7c2e-ef89-4265-a442-09febd66bf3a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdd96d4-bf11-49ae-95e5-a8e23475944b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd0759a-9849-42eb-9c32-8c44ca1f804d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9b6c59-4c2e-4698-ba7a-af0ad981c100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "798a22cd-54a1-44ee-a4b9-034ef6e4ddd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6a1d09-8b76-45cb-9f79-8f1de11bb589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6981a4b6-eb91-4cf2-8d98-05c7759b2960"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afd58e99-b071-4d9e-a7d4-2bcd643e4f7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8d46ea0-8507-4dff-ac35-1be627af3e30"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8737046f-be1e-48f7-91cc-97f4cca5a47a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c2b11e3-04c8-4df5-96c8-cf9d06ce13e1"
                    }
                  }
                ]
              },
              {
                "id": "1957780f-1fc1-48c7-bf8a-616e19427832",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76700482-0c31-40e3-bc78-05f7e565e43d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf19bc9-5616-4ea8-9f6d-282fe36616dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "289f36e6-0ae7-47e3-b0db-caeab5ecf6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30537577-07cd-4c1a-9385-1bff563ab98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af79fab9-6ca5-4b78-b9de-83b56b76d813"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90369536-5064-404f-8ef9-1c8c24c26143",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2ced5dd-2eff-42f0-8c19-eb5b2e4c250a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c04990fc-b862-4c65-88ef-83e1e3928b86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50a13739-1690-4628-b8f9-68944395723e"
                    }
                  }
                ]
              },
              {
                "id": "c8d9f12f-cf0c-4407-a616-d0dd9389d325",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1a20aa8a-50b5-49fb-9072-b52d65e5d3a8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdcdc89-1752-4a1c-857e-b76db8ed9e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7b0e9349-edb0-4c29-8113-771e0ca0dc9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3590f8-90b2-4e23-8707-0e7fb9bbdeb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79eb3ad0-f566-40b2-a310-573b3c36cf0a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "80002fc4-8b20-4399-bb18-9667921852a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "72175681-15e6-4e7d-a843-4c467e213b0f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e9ea320-2559-4620-b9ff-2f3e9dc1da15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5a5cdba4-4eb5-4b40-beb3-47ba40d8e7fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c30309ce-f4b7-41ef-a4dc-b2a981848d41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3f695bb-6f9f-42e1-bda5-4d6f15b0e424"
                    }
                  }
                ]
              },
              {
                "id": "d4c3127c-df26-405c-bb75-1c8561613202",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40d168e9-22d5-465c-b9bc-3680969a4d40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6e5f12df-1182-4c57-9d74-ecc8e61eabd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "484a856c-4640-4048-8826-1bf4a9ce6f73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e506379-8578-4045-b950-f5b484434fc8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "860d1fa6-8afa-4ea6-aa21-539de3202f75",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "345ae201-54c0-4f15-8059-87de861c4a08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edfc8c47-2f6b-47aa-8962-3abc4a0e5236",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f2c537e-aeca-4b82-8764-a837e7f314ed"
            }
          }
        ]
      },
      {
        "id": "af9d199e-eea1-448d-8b99-714d5e12a420",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3a3c185f-879a-4782-8e23-053d2e0f2bf9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1fe9242-e2d4-4dc0-bdd2-681033d3ca22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0f06deb-3139-4e6e-a47e-9f6c41f90e72",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c26cdbc-cf56-49d0-b9fd-7e8ea62ecabe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "787e4a6c-350f-4533-9bae-54497a47ddb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8aa35f-6816-460b-9600-393228ba1ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f46f081-0b76-4dca-9e84-286257499193"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a91ad3a-8ca9-4ff2-8c81-36e5093de6d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ce11281-d415-474e-8267-9a75686044dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d9c2cce-c3ac-4efe-a097-98975edd87f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c62d930-6c57-4777-9ff9-dc92785e08bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b33204fd-b071-46fb-9d35-1e0e8d7e61d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "954b5ccb-6143-4ed3-8a35-c35ac1a6270d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d5d08a3-2e80-4493-820c-c81627cabe54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b1a7e7a-9efa-4cce-bcdf-b958c77c0906"
            }
          }
        ]
      },
      {
        "id": "4f978a73-d29e-48ab-a8ba-b8c92de77170",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0d22d2fc-2b35-41bb-a661-698dc5c1e31c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2759d3f4-d3bb-4893-a1e0-bd276157510d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ab01546-1598-406f-865d-c7cab0778f7d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2847a6b4-9e82-4b58-ae28-add373b3b1c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e87b8937-1536-4a5b-9024-e90d49f56df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cc5eec-446e-427c-88b1-fdb96ff53e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fa945b6-8d81-493c-8af6-ba0103fc1b3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42d4c495-8e67-4a40-b657-c715f0ea45d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56fc9729-89e1-44e9-b7e7-b6ce12fd760a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27bab3e7-6d56-4708-b635-7673d4197090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6f3449e-3c8d-4457-bf78-b8d5975f34fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "563910f7-c888-42ba-bc63-296cfbffa54c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bfc8453a-be2f-4535-9bed-c41dce235ea3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf44a8b1-091e-4ecb-8f23-3daa500baf68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f51b826a-df48-4f28-9143-17b4ceaddab4"
            }
          }
        ]
      },
      {
        "id": "66fb7a44-5015-469f-9038-c75eaee98272",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dc69ce4b-f389-4247-b623-f60071bfa52b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69379573-99be-442a-8e71-f59450419854",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aab62bf7-0bb4-49a8-ad5c-5656cbdf7970",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f503e7a9-3419-4837-a002-2dedd80e5eb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48b1d9b9-3a1a-4d2e-8226-afdc1d333ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b484f-afe9-42a1-a7d2-f5560301f616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ceb8567b-5fe5-4eb6-addd-e6697f867048"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29f4fbb8-6a0f-4cae-8c7b-84fdf9840b19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "068081a7-7645-4ac6-aabc-cf813e7c441b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16f3a70b-89f7-49b9-be80-a00dd199a03b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b476cc15-8cc2-47da-b2c9-69a9e52223db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae037e28-70ec-4b17-b6c3-2097b21439da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72bcab16-4794-4c21-ad13-29c901df4455"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58b669ed-81bb-4dbe-bcee-65dba6c01e1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d18a5ba-9a1e-4a43-9ac9-4d4b156d3339"
            }
          }
        ]
      },
      {
        "id": "f13ca9ca-a80f-44c9-921a-f752b11c0c33",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8619fbf-2da9-4272-bd8c-f3f8043cccfe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfeaffb9-5254-4502-b3de-a220418e3f8f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5e1017ac-6fb1-4db7-a4af-4e98a64a7402",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0fde2ec-d839-4767-932a-78f16edc268f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61e62fa5-0d72-40a2-b294-b5494b03c259",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 113.8452380952381,
      "responseMin": 5,
      "responseMax": 687,
      "responseSd": 83.9017510337573,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712709283465,
      "completed": 1712709320533
    },
    "executions": [
      {
        "id": "c4b6ab07-8938-4c03-bacb-45a2cfd566fa",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1340ab7b-172c-4e5a-8d42-dd4ec4c9a5b6",
          "httpRequestId": "8cb0288e-cdb7-4d71-9ed0-c6ee27cdc2c6"
        },
        "item": {
          "id": "c4b6ab07-8938-4c03-bacb-45a2cfd566fa",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "faf4d17a-4719-44cb-850b-cbd24c2cd677",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "99e860b3-aa3c-4a98-a9b1-42d945afc131",
        "cursor": {
          "ref": "04fb65b8-d348-4eb7-ac01-75cd84f8906f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fda614ce-2716-4afa-a216-296506e20624"
        },
        "item": {
          "id": "99e860b3-aa3c-4a98-a9b1-42d945afc131",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b687adfd-d823-43e9-b03e-106986b02f5a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "d7dfc9c5-8eea-4bdf-8bf7-df6aea9ea902",
        "cursor": {
          "ref": "b263dfc1-a0f2-4cf1-871b-7630802dc7e3",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b942d7b3-ad7e-4954-9026-0a9270b2558b"
        },
        "item": {
          "id": "d7dfc9c5-8eea-4bdf-8bf7-df6aea9ea902",
          "name": "did_json"
        },
        "response": {
          "id": "b258aba4-c4da-4e81-936e-0c66b225a54f",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0424669b-d02e-46e2-844f-ab55a09e6805",
        "cursor": {
          "ref": "0b2248f6-313e-4e54-ae8c-68cdbbdca406",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "04ec3f4e-70ff-4d68-9c89-2359ccf741b1"
        },
        "item": {
          "id": "0424669b-d02e-46e2-844f-ab55a09e6805",
          "name": "did:invalid"
        },
        "response": {
          "id": "56cd6cdc-8d69-4a33-87bb-d0280cd720e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0424669b-d02e-46e2-844f-ab55a09e6805",
        "cursor": {
          "ref": "0b2248f6-313e-4e54-ae8c-68cdbbdca406",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "04ec3f4e-70ff-4d68-9c89-2359ccf741b1"
        },
        "item": {
          "id": "0424669b-d02e-46e2-844f-ab55a09e6805",
          "name": "did:invalid"
        },
        "response": {
          "id": "56cd6cdc-8d69-4a33-87bb-d0280cd720e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5df1e4-9519-49d4-800b-a62de72c949b",
        "cursor": {
          "ref": "cc20e1a5-5c68-46e5-973e-ca6fe533ac6f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f3d305ec-0042-495d-898f-8ade748d7d9e"
        },
        "item": {
          "id": "be5df1e4-9519-49d4-800b-a62de72c949b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "afbd71bc-21a6-4d84-bf1b-551db5a195cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 200,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05432513-5e13-46e7-b954-3aeccb628978",
        "cursor": {
          "ref": "3bbc45ce-b650-4dde-bb17-b6bb0bded9b0",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "231b79ab-db8a-4c53-931e-33f54bf69871"
        },
        "item": {
          "id": "05432513-5e13-46e7-b954-3aeccb628978",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e67fac1d-0788-4136-901e-8fe3b42851ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 115,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cbdd01-6133-40d7-9911-0de23b9231d7",
        "cursor": {
          "ref": "02106a58-09d0-4ff7-b046-bef2ebdee60a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a1c13ca4-d1b6-4f9f-b207-e659ee5bc4f1"
        },
        "item": {
          "id": "09cbdd01-6133-40d7-9911-0de23b9231d7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4f150fc2-46f9-4d58-966a-0ab9edd48836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a855c6-7d6a-46d9-8066-011eff4f4332",
        "cursor": {
          "ref": "491c2423-8ef4-48cb-b011-937429e3ca31",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "050a9c39-909c-4614-af7a-f19092158f65"
        },
        "item": {
          "id": "89a855c6-7d6a-46d9-8066-011eff4f4332",
          "name": "identifiers"
        },
        "response": {
          "id": "b296458a-183c-4f34-8b5b-00c4479ed1c5",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca362ac-eb79-4c4b-8722-3958e974d6f2",
        "cursor": {
          "ref": "6cbddcd5-5f30-42c6-bf0b-8a509a75c93a",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "adaef097-3e8b-41aa-91b1-92e126265885"
        },
        "item": {
          "id": "eca362ac-eb79-4c4b-8722-3958e974d6f2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6f09f465-e8e1-4ef8-8a3a-ed0ee37cf789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64601a32-c5c6-4df0-b5c0-6a15b5764e24",
        "cursor": {
          "ref": "a13c9671-68ea-4307-b480-4a0eb57545d1",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bb979604-956e-45fa-9cdf-5765f7c602aa"
        },
        "item": {
          "id": "64601a32-c5c6-4df0-b5c0-6a15b5764e24",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b82f34e1-7465-4e23-8e7f-3748bded160a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f62b609-4440-4830-b9bb-fd5771d699ac",
        "cursor": {
          "ref": "eff4d349-a6aa-4d71-a8e9-9113f9c6599d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "71b7bc90-473c-4b1e-ab4b-2f841ddd71ae"
        },
        "item": {
          "id": "9f62b609-4440-4830-b9bb-fd5771d699ac",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0fa26578-8fc2-414a-a0ac-a9c7ac232eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ef734b-fc36-4403-9323-f08e75282f71",
        "cursor": {
          "ref": "570ce5ea-c426-47c7-bc63-1c3c2a7b1587",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dada27a7-84fb-40b2-89c6-9a7ad7c4f378"
        },
        "item": {
          "id": "21ef734b-fc36-4403-9323-f08e75282f71",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "277de1fc-88f8-4cf2-911a-c83160323a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ce8cef-5a29-4ef8-8a7a-5555ba2b8a10",
        "cursor": {
          "ref": "72a71246-7587-434b-b4ee-836f76347809",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bc1ba814-fe88-4b36-b384-52f779a50a06"
        },
        "item": {
          "id": "04ce8cef-5a29-4ef8-8a7a-5555ba2b8a10",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "647513d9-ccf4-43b3-989b-c53dc37f933d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075e2125-a672-4677-9ad2-2937183e50f8",
        "cursor": {
          "ref": "5d154563-3187-4635-b72e-725a0dc34637",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "96a6eb3b-648a-4f78-a5d3-35a5fc7ccdf8"
        },
        "item": {
          "id": "075e2125-a672-4677-9ad2-2937183e50f8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8865a151-d270-4402-a21a-f0cfeee0b01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fe8ce5-8365-41b7-83f1-a646266ed6f2",
        "cursor": {
          "ref": "16ad040c-64cb-46c2-ba01-371a99b001c7",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "377e1e02-2dfa-4eab-a589-1f834938bfa1"
        },
        "item": {
          "id": "20fe8ce5-8365-41b7-83f1-a646266ed6f2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d63af0b7-03a5-4a2c-98f8-f85bafe4fc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee489915-d419-44a5-898e-7cdfd6bce27f",
        "cursor": {
          "ref": "bb4fcf42-6c1d-41e5-a024-aacf0e1d0ecf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3b4fb85d-cc1e-4a81-8304-759819ac90c8"
        },
        "item": {
          "id": "ee489915-d419-44a5-898e-7cdfd6bce27f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "34b46207-91b5-4bef-92ea-50b4873fe0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8525219-8eec-4a94-8fc7-f46592f4fa9e",
        "cursor": {
          "ref": "1157102c-6bc9-42aa-ac1f-33cd04fe9c8a",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d15bcf7b-0843-4647-bf95-0d23097e70d5"
        },
        "item": {
          "id": "f8525219-8eec-4a94-8fc7-f46592f4fa9e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8d463b6f-b85e-450d-b0e0-f8397cd0e12e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ae80b5-9c0b-402f-8518-126e49896d12",
        "cursor": {
          "ref": "95d9ffc1-0c58-4dc5-9ccf-135d1cc50d15",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "72243d94-ab23-4a29-aaf1-d942f151ff34"
        },
        "item": {
          "id": "67ae80b5-9c0b-402f-8518-126e49896d12",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "94f71d7d-0d09-4912-85ee-1e6044e5c804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3728ce1b-09eb-44d4-be2e-3d31a77e3fb9",
        "cursor": {
          "ref": "78023313-12a7-485a-ac49-6c467d970483",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3609c947-c7da-4a79-b6cd-857907ad00d2"
        },
        "item": {
          "id": "3728ce1b-09eb-44d4-be2e-3d31a77e3fb9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7b7de0dd-47cb-4a9e-ac26-0feb6e88ea7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6569ea44-e533-4ede-a639-eae578b98ecb",
        "cursor": {
          "ref": "540ed7dc-5ecd-44af-af8d-931ce39bbbb4",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "646eed97-1e09-415c-9f48-e564c2bbac1d"
        },
        "item": {
          "id": "6569ea44-e533-4ede-a639-eae578b98ecb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e04a0f1c-4cb4-4fb1-9fef-7aebda04849f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bb76e5-9803-48f2-ae1c-8bffa6c93dae",
        "cursor": {
          "ref": "2ababbd9-53b7-4435-af6c-b0673720e796",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f821fdfd-6b05-4438-95b8-772d6e57dfe8"
        },
        "item": {
          "id": "a5bb76e5-9803-48f2-ae1c-8bffa6c93dae",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "75acbd0e-880f-488c-880a-2c8368d5b241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffc01bd-151f-4af1-b56a-ace0301ac506",
        "cursor": {
          "ref": "e2f27b7a-5a7e-496a-ad91-79cd5eba368c",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "46499180-9cb3-47c6-a79d-44bbbc48cb59"
        },
        "item": {
          "id": "8ffc01bd-151f-4af1-b56a-ace0301ac506",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6df32844-58f2-4f6e-bbd5-af8fd192ad5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89d513f-d2b9-4cdc-b688-06886f8c4838",
        "cursor": {
          "ref": "60a6c2a4-026a-4463-83c3-11a1e7c1a168",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c99f565a-fd5f-4a7e-8ab0-06675db85434"
        },
        "item": {
          "id": "e89d513f-d2b9-4cdc-b688-06886f8c4838",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5eb63fa5-9ca2-44a7-b9db-1bef0c0cd93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918f500a-2194-4075-be07-60b748b2b15c",
        "cursor": {
          "ref": "a681e747-4d89-4339-8d84-92bca0dbafc4",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ce2de579-74bc-4ee2-8aec-ecb255269bce"
        },
        "item": {
          "id": "918f500a-2194-4075-be07-60b748b2b15c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2f469659-157e-43a6-b39b-7d6e5c3ccdf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3ff4b0-98a9-4a5a-b8cf-bf2247bec8c3",
        "cursor": {
          "ref": "6b6b6d62-e9c8-4348-9945-d0c4a2418d49",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6ab77e5c-675a-436b-99d6-c072d8023194"
        },
        "item": {
          "id": "1b3ff4b0-98a9-4a5a-b8cf-bf2247bec8c3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a1e91b87-9e9b-402d-b09e-8c6ef3a834df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0075d300-8e0d-40e3-a0b0-ca975c73e755",
        "cursor": {
          "ref": "48619ccb-bdd9-465d-aa86-e9441a11746b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b507f887-9eb1-4106-9477-a9d87566efd8"
        },
        "item": {
          "id": "0075d300-8e0d-40e3-a0b0-ca975c73e755",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "162ca17b-28f4-42f9-a886-6a64d4af03b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e9b9d4-6eba-4325-b177-91f4c9f12b3d",
        "cursor": {
          "ref": "804a3879-4593-4631-bced-63b332175cae",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e7bfbc6a-03ab-47a7-9219-96bfe6e32da9"
        },
        "item": {
          "id": "e0e9b9d4-6eba-4325-b177-91f4c9f12b3d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "75df2bba-0972-4d78-b5da-87759ac1f00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8646772-ff35-469b-aed5-ef2c923e442e",
        "cursor": {
          "ref": "54c3567e-f4a9-47da-8fdc-471a9e906e0e",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fd46bc40-e262-4fa3-ae64-bd87c5e44df6"
        },
        "item": {
          "id": "b8646772-ff35-469b-aed5-ef2c923e442e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b715fecb-654c-4e83-8e1a-73cea823e5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a336c2d5-4b8d-40f1-93b2-3e83119ff82e",
        "cursor": {
          "ref": "0470d5d0-a94b-42db-bb15-e0ce90eee137",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "04ba8ca7-6e58-433c-bb21-5c376c6f5621"
        },
        "item": {
          "id": "a336c2d5-4b8d-40f1-93b2-3e83119ff82e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cb254b27-a2a3-4d56-adfe-16dd4390bce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f9c2d9-cd40-4a65-b5fc-29b1ad3cab26",
        "cursor": {
          "ref": "56b1241d-599f-4d0a-9b12-c2fd115e33a9",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "30f4201e-bc50-49de-af1c-f259f4f026c3"
        },
        "item": {
          "id": "99f9c2d9-cd40-4a65-b5fc-29b1ad3cab26",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "84873d75-2a9d-4272-b476-9410dea82a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0ea0f5-0d1f-4fe6-b5ab-4c757ade28b1",
        "cursor": {
          "ref": "1e6a79fb-10f5-49ec-8d15-706543f0a0cd",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a9ddfcbf-ee24-4384-b542-f1fb2ed46f38"
        },
        "item": {
          "id": "aa0ea0f5-0d1f-4fe6-b5ab-4c757ade28b1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cce54222-e33e-467d-97b5-e62d9b682ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90305cb-283d-4554-b4df-1a1f0ce1a42d",
        "cursor": {
          "ref": "f6573280-7e0d-414e-87b9-6a178d427cfc",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fe764440-590c-4fa7-ad69-4533aae6331e"
        },
        "item": {
          "id": "c90305cb-283d-4554-b4df-1a1f0ce1a42d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a9ffbb09-be1f-417b-9f3b-96c594a382dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a57da14-b3e6-448f-b180-92c7b0404a1b",
        "cursor": {
          "ref": "29a541a4-0448-439e-9e26-b2ee9895cc17",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1196c03f-5f59-440a-a362-327c19c1bd95"
        },
        "item": {
          "id": "4a57da14-b3e6-448f-b180-92c7b0404a1b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "535328d7-bc98-46b0-9b83-f3d2d108e1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b54625-9389-4103-a117-3ed187844ca6",
        "cursor": {
          "ref": "8029236d-9be0-4a82-a650-6ab84ea8da29",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5516933f-f16a-45ec-8d95-02909d4c53e1"
        },
        "item": {
          "id": "95b54625-9389-4103-a117-3ed187844ca6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7b8beadf-c8a2-42e3-8b33-f6c2e49446e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dee5b8d-f93c-46ab-a779-7d9159f5a29b",
        "cursor": {
          "ref": "dbc39d1f-c442-4080-931b-6519af56f6dd",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aaf40402-46bd-4b98-b021-5ce2d8b21774"
        },
        "item": {
          "id": "6dee5b8d-f93c-46ab-a779-7d9159f5a29b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4c3d3ca9-4162-41d8-9c68-5331eeea61f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46955c1b-fbb7-4a6b-8492-64842dad528e",
        "cursor": {
          "ref": "f7e41094-af08-4eb8-a3d3-572552c2be44",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "24f022ff-009f-4c41-8bf4-6be5fca5a904"
        },
        "item": {
          "id": "46955c1b-fbb7-4a6b-8492-64842dad528e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f81193f7-6479-4b0e-8260-fd0bc4c29a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5395cc2-4d66-481d-b36b-b13facb8b6b5",
        "cursor": {
          "ref": "aec3d8dd-b899-4c59-b3b7-517dd9dd74b1",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "134ec093-13d0-4f4b-9250-63ce17c00d09"
        },
        "item": {
          "id": "f5395cc2-4d66-481d-b36b-b13facb8b6b5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8ad90e4e-03dc-42f5-a702-91bb280b7c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231e5e96-a0e7-4f9f-add4-49f479d97623",
        "cursor": {
          "ref": "e3acebaf-8e4c-410d-880d-46749bf2e1dc",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3bbde4c8-63f6-4ceb-8a38-12dfcc1d78e4"
        },
        "item": {
          "id": "231e5e96-a0e7-4f9f-add4-49f479d97623",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0a464fb2-b02e-4e75-b40a-7deaafa7f570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99db7c9-bd9a-4d20-9b95-92ca76655dc2",
        "cursor": {
          "ref": "8d6f67f0-b48a-4ea2-876f-8e63ec361a27",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f2487642-0c40-411f-a3dd-0a9716212738"
        },
        "item": {
          "id": "b99db7c9-bd9a-4d20-9b95-92ca76655dc2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8b0cac51-a22e-42f9-8480-6a114c0254f4",
          "status": "Created",
          "code": 201,
          "responseTime": 687,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c8d6c0d5-ef1b-412c-9f7a-230ba33e4362",
        "cursor": {
          "ref": "8655df57-51b2-4a25-b6f6-724bcfc37917",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f22c19e5-cdf4-429c-a5ce-c42f476df0b8"
        },
        "item": {
          "id": "c8d6c0d5-ef1b-412c-9f7a-230ba33e4362",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a9bb2963-61b6-49b2-bf78-1838f103440f",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "56047f17-a80a-4dd2-85db-e954ab0f731c",
        "cursor": {
          "ref": "b89b65f1-f073-4998-982d-277ddcda0196",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "92adacee-da14-400e-996b-b5bcfea44fc7"
        },
        "item": {
          "id": "56047f17-a80a-4dd2-85db-e954ab0f731c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "caafd624-f8bc-4a25-add3-a7849fe5ed56",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2a79948f-3e9b-4667-8a59-a46f95c7679a",
        "cursor": {
          "ref": "85994a3b-95dc-4fb2-b795-6aa125a43855",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "51e13538-1b53-4327-b867-d1fd1211f3e0"
        },
        "item": {
          "id": "2a79948f-3e9b-4667-8a59-a46f95c7679a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "481a5bff-6411-438f-9e47-ef8399ef2067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a20242-31ec-4380-8208-c2e905be94cf",
        "cursor": {
          "ref": "cf36307c-4a39-4fa5-8bfd-253b38da29a2",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4b8ee70c-42fb-4a4a-a794-e835444d411a"
        },
        "item": {
          "id": "d4a20242-31ec-4380-8208-c2e905be94cf",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7d1765cf-114e-4b8d-853d-7f3fd447707c",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2f9081ff-dcf9-48c1-ad78-319678fef76f",
        "cursor": {
          "ref": "b268a21c-4d43-4fbd-a5b5-c357372dad1c",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4f89ab81-45e3-4acf-bcd2-c768fe7ef426"
        },
        "item": {
          "id": "2f9081ff-dcf9-48c1-ad78-319678fef76f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "00159d95-07ab-4559-a49c-5f57aa2ac8f5",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "95c6a3c0-3031-4f9a-bcbe-8a275d2df31d",
        "cursor": {
          "ref": "6af93520-a45f-4dac-90d8-c699341c0d63",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "86f30fa4-7a94-4d89-9526-f761a0af2747"
        },
        "item": {
          "id": "95c6a3c0-3031-4f9a-bcbe-8a275d2df31d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cc5029fc-c5a8-4dec-b041-3210a63cf7e6",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fd27eee5-1da8-4fb2-9e0e-72c73db832fd",
        "cursor": {
          "ref": "306bbb2c-5a9b-48fb-9e00-22d2dd18865d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b6977cec-e9cb-4fbe-a9aa-fb4b07b0fdc4"
        },
        "item": {
          "id": "fd27eee5-1da8-4fb2-9e0e-72c73db832fd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8af37438-59f5-499a-ba30-49c98eee7f6d",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9c01b9f8-a386-4cfa-9730-fc61a0f6da68",
        "cursor": {
          "ref": "2f9361a7-f2a4-4972-b517-6a913a6a6983",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "96f5b347-bd2f-44fe-87a8-def2c04392b0"
        },
        "item": {
          "id": "9c01b9f8-a386-4cfa-9730-fc61a0f6da68",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2c5f94b3-31cc-4ca8-b4e3-d00cf6431266",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9a6d516e-9f3c-4ef1-b5e0-3af343cc07e2",
        "cursor": {
          "ref": "33a774a9-0cce-442f-8dba-62ebcafba2aa",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "11a8f998-90e9-43dc-9eb2-d28899821caf"
        },
        "item": {
          "id": "9a6d516e-9f3c-4ef1-b5e0-3af343cc07e2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c596f10c-ea14-4cbe-9c22-97a24c73efdc",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b08a037d-3833-4c17-a6dc-8d8d170656aa",
        "cursor": {
          "ref": "f3559f80-5647-45f4-8564-139de64e4fa9",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f3a81fbe-a438-445f-b27d-a5d4b384b47c"
        },
        "item": {
          "id": "b08a037d-3833-4c17-a6dc-8d8d170656aa",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "403e0624-cb5c-4d23-a886-e844521476e5",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7f8e4a27-1f39-44ca-ae0f-d592a0c3c2c4",
        "cursor": {
          "ref": "5d8de94c-55fd-4387-9048-3bf8ee3803e5",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "df18c1cc-4ef9-40c1-ac6c-f41520e387ef"
        },
        "item": {
          "id": "7f8e4a27-1f39-44ca-ae0f-d592a0c3c2c4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1f493c99-3110-4f2e-aca2-6e34532ec600",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4c7f7b61-ed57-4960-99ee-485e61f81198",
        "cursor": {
          "ref": "cf1bcdeb-ac74-4aae-b3fc-f549737c4f70",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8b691f27-ff93-4cec-b093-8a89828ebb28"
        },
        "item": {
          "id": "4c7f7b61-ed57-4960-99ee-485e61f81198",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8e2073a2-323d-4e92-9905-3db97e968825",
          "status": "Created",
          "code": 201,
          "responseTime": 397,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "13314691-62d7-4301-9997-534aeb5dc9cd",
        "cursor": {
          "ref": "b39b029f-644c-4977-b039-1c3692df54ff",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9b737089-0298-4bec-beb8-98aa86146245"
        },
        "item": {
          "id": "13314691-62d7-4301-9997-534aeb5dc9cd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9fa14cc0-9033-4463-8554-e7f44163bbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9df82a-e791-4bfd-a490-bc0b30f8b735",
        "cursor": {
          "ref": "f324c764-ea53-4db6-9f87-28705120fbbc",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b2320c54-23d1-4b2a-9445-003f2b7a8f77"
        },
        "item": {
          "id": "0d9df82a-e791-4bfd-a490-bc0b30f8b735",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ab05361d-0ff6-42cc-b04d-a5dc2c16101d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1730f443-8e1e-49e6-a346-3017417e37a6",
        "cursor": {
          "ref": "6c9e7458-74c3-4c75-ae3c-7e86f7a65bb0",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "59f2ccc3-c01b-474f-a5de-30b084cdb1a4"
        },
        "item": {
          "id": "1730f443-8e1e-49e6-a346-3017417e37a6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6fe70c50-8c2c-4fba-92fc-0cd51bf0d775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421f2fe7-ae0e-4092-a926-97fa4b26b6ca",
        "cursor": {
          "ref": "83c4115f-c25e-4408-98b2-07c8829bb794",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d54f1f50-f035-4a03-ac24-65200bbaec69"
        },
        "item": {
          "id": "421f2fe7-ae0e-4092-a926-97fa4b26b6ca",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5014f74b-e4d6-4a92-968f-56391796390e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121c0990-cf95-4fdf-bc54-cfa0020a3544",
        "cursor": {
          "ref": "45fbb495-1b32-4722-8dd7-03db8f08ada5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "dbc8b54d-069b-4030-92ef-118e11d3d993"
        },
        "item": {
          "id": "121c0990-cf95-4fdf-bc54-cfa0020a3544",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f530f4bb-82e0-496b-8d52-c60185a53cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0365926e-734b-44a5-a84e-16a66e91b32f",
        "cursor": {
          "ref": "6e5d323b-1035-4b60-be3a-4e60db9b7919",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "41132842-a104-444f-9ccd-d2234b2de49b"
        },
        "item": {
          "id": "0365926e-734b-44a5-a84e-16a66e91b32f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0919c21e-99c4-425f-a4a4-a52db3c47e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0a7a7a-985b-4a1b-b51e-48b5ae6c286b",
        "cursor": {
          "ref": "8191b043-f1d6-4b03-9f66-edb0059369a6",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1712a63c-a48c-48c6-b4f2-f76ed8a99c90"
        },
        "item": {
          "id": "5a0a7a7a-985b-4a1b-b51e-48b5ae6c286b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7bee2469-79f0-4467-bda0-e940c38b7d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b834ab6-443e-454d-baf9-a41fd2d1a3b5",
        "cursor": {
          "ref": "ed38159b-3777-4c0b-9607-7b710f7dd21d",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b4e7de3a-e8a2-4124-a003-a8371a0ef74a"
        },
        "item": {
          "id": "0b834ab6-443e-454d-baf9-a41fd2d1a3b5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f34d2ebd-67cd-4314-89e9-405f8eecc2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c283142b-fb26-4157-8bb5-a42565fe8663",
        "cursor": {
          "ref": "391803c9-28ff-47d5-990a-6ec1ce7f96d1",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c45edf34-2cd7-4baa-8a13-595e37524266"
        },
        "item": {
          "id": "c283142b-fb26-4157-8bb5-a42565fe8663",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0836e9c9-7be3-4fe8-ad09-fc56535a9578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f890d0fd-f602-4bde-bb2e-3985a305ef9d",
        "cursor": {
          "ref": "2d4430c5-5046-4900-82db-b8f9e01d1c5f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f1c261ee-b83c-470c-9819-bdd3d281af21"
        },
        "item": {
          "id": "f890d0fd-f602-4bde-bb2e-3985a305ef9d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "11d3df12-989f-47b3-ad82-e6a9eea352ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ec4b3b-1bae-4f7d-b204-e1c04b3f0b94",
        "cursor": {
          "ref": "c0d3ab62-d2be-4cf4-8171-2185bc4b5201",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0a408264-55f1-4cc8-ae8c-2ae36be67022"
        },
        "item": {
          "id": "b9ec4b3b-1bae-4f7d-b204-e1c04b3f0b94",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ef22b781-81d4-4e08-ac9d-4a1fb43bd39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1f15fd-245b-4af3-90d5-0ef010fa1d62",
        "cursor": {
          "ref": "db988c1d-e827-4d73-b114-b86a1e1bba68",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cf5bdec1-f687-4d8a-a016-f0181a235ce3"
        },
        "item": {
          "id": "bf1f15fd-245b-4af3-90d5-0ef010fa1d62",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b1c4b9d3-397c-4135-a3e9-d6ef399a7527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fd38f0-8c4d-4a6d-82c1-11b93b4b1f2d",
        "cursor": {
          "ref": "7360b9de-a63b-4a45-b06b-ead039831aa0",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ce29979b-1f05-4774-bf48-1bfd449c5269"
        },
        "item": {
          "id": "40fd38f0-8c4d-4a6d-82c1-11b93b4b1f2d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2cebbd16-9620-429b-b9e9-10fc107a6999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aec196f-6405-460d-8d7d-ab188cb7fc19",
        "cursor": {
          "ref": "0da59533-5bee-4cf4-bc7a-f756b5d044a6",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0ce702a1-9298-42ae-974f-607cbeedaead"
        },
        "item": {
          "id": "0aec196f-6405-460d-8d7d-ab188cb7fc19",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7e0f5b36-94c5-4496-9e64-432a2f96bcc1",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6a439ec0-6a0e-4e75-ad68-e95772feaec5",
        "cursor": {
          "ref": "d64fd660-b2c3-48e3-8850-e3c13ca8554f",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f671deee-7ce9-498e-93f4-315110e7571f"
        },
        "item": {
          "id": "6a439ec0-6a0e-4e75-ad68-e95772feaec5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4a53022c-c8af-4665-b1f1-e6e1589d6370",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "86b96293-8cdc-4c56-8643-45f0207c946f",
        "cursor": {
          "ref": "9063576a-8327-4d83-a988-6e8efcf12d02",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0d9fbcad-b023-46e9-b462-29de96bdc881"
        },
        "item": {
          "id": "86b96293-8cdc-4c56-8643-45f0207c946f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ceab31be-2dc7-43ac-ac28-039c6dede349",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3a9aaa46-c283-4078-a881-67d2632596bc",
        "cursor": {
          "ref": "3699802c-02b2-40aa-8ee2-c610e1bff025",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c2f4caab-9db3-46ac-a40b-a94cbd53d86e"
        },
        "item": {
          "id": "3a9aaa46-c283-4078-a881-67d2632596bc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9ac1f662-ff0a-417c-a658-ab222b0cf421",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "50eb7ee7-93e2-4920-9f28-540328a5e6c3",
        "cursor": {
          "ref": "ddf01012-aa39-4024-b5ef-1d64d2e13632",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "de4c4242-2a6b-4aff-ba98-745bda376e15"
        },
        "item": {
          "id": "50eb7ee7-93e2-4920-9f28-540328a5e6c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "94943067-b437-4ce7-b842-1ac2fb823a93",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "209bbd40-4d1d-4d7c-85ea-f58d004869e4",
        "cursor": {
          "ref": "711131b3-fe36-44cb-9d70-2c04c6fc1490",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5882261e-3781-4319-88d2-21477a1056b0"
        },
        "item": {
          "id": "209bbd40-4d1d-4d7c-85ea-f58d004869e4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "955609bd-e04b-4475-accc-2ffff4df6581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105e92f6-1c32-4dcd-b38e-c01952fa7745",
        "cursor": {
          "ref": "32ecb214-e97d-4e7a-ad37-3567b289ed1e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ed090899-23b9-42da-8efa-3404965e7f2f"
        },
        "item": {
          "id": "105e92f6-1c32-4dcd-b38e-c01952fa7745",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "90ace240-7a66-40a4-bcb4-e53b2e97bf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eb666f-c865-42ea-8d3d-98337319aa30",
        "cursor": {
          "ref": "ba4c9e76-f2c8-4edb-93b6-1a331c129801",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c0ebde2d-5f95-4b7e-b28c-d8146daccafa"
        },
        "item": {
          "id": "d3eb666f-c865-42ea-8d3d-98337319aa30",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "97d9b6b7-de3f-41f9-ac0e-4359b22b51d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c4b36e-02a1-43b8-af2b-f444ec371e43",
        "cursor": {
          "ref": "66e9f3a7-6ad6-404f-b5cb-af5089e02ad9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fa65cb00-b554-4db4-82d7-5d61226d331b"
        },
        "item": {
          "id": "54c4b36e-02a1-43b8-af2b-f444ec371e43",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bd06d069-ea6a-499a-8ce1-dfd1ada29fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54af4cf3-4690-494f-ba1c-a8f3f7c3d6e8",
        "cursor": {
          "ref": "eba8eec1-6af8-444a-aa92-06da7abceee4",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "197e30ea-a7de-4741-9b9a-7855bcf2f348"
        },
        "item": {
          "id": "54af4cf3-4690-494f-ba1c-a8f3f7c3d6e8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "91d6c7d0-61f2-40f6-aebc-431f21fcc89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c786f6e-6c92-4051-9aa0-cc6a92d6c20b",
        "cursor": {
          "ref": "04745e12-4d54-4b95-92fc-d67e9b30b29c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "feea3548-3704-4432-8e86-cb2909cf0009"
        },
        "item": {
          "id": "6c786f6e-6c92-4051-9aa0-cc6a92d6c20b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d560e9c1-b185-4f1f-b509-19df58d8e8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2934ea94-3167-41f9-9dbb-9c180a201470",
        "cursor": {
          "ref": "c9630317-1da9-47e1-afce-5d1df2f3e2dd",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8e71544f-24d5-4c4f-a21c-4b1810a61378"
        },
        "item": {
          "id": "2934ea94-3167-41f9-9dbb-9c180a201470",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "84965eeb-5809-4215-aa58-ba9594ce631c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1dafdd-2cb1-4f5c-ac66-cfd9ad5c9585",
        "cursor": {
          "ref": "6ecb79ee-3325-483a-a29b-742e1bce7934",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "76c014da-d817-477f-a347-151933fc7ea8"
        },
        "item": {
          "id": "8e1dafdd-2cb1-4f5c-ac66-cfd9ad5c9585",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b979662f-9b2e-439a-a122-33788afa316d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d1c6c2-0125-4d08-a4a5-ede3960e3f8e",
        "cursor": {
          "ref": "2106b255-06c4-4b40-bb1d-6f4ca7102b2d",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "edafc617-c1bf-4e76-bfa9-ec5233e2776a"
        },
        "item": {
          "id": "e1d1c6c2-0125-4d08-a4a5-ede3960e3f8e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8bcfb699-4eb3-4e84-aecc-99f0c533e7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c86af63-e3fe-41d2-9ee5-f7f8d16197bd",
        "cursor": {
          "ref": "2027d75d-e932-465a-bb1c-e0a6bacb1868",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3c5ab16c-4c1f-4052-9702-86d206f2c604"
        },
        "item": {
          "id": "8c86af63-e3fe-41d2-9ee5-f7f8d16197bd",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3c624dae-dfe1-4222-8017-527e4b04c233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48be524-7781-4561-ab35-30e812964788",
        "cursor": {
          "ref": "6d808bb1-2563-43d1-8b1f-4842cb53c024",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "08f95abb-9e74-405b-9dc2-dc3e82fd957d"
        },
        "item": {
          "id": "f48be524-7781-4561-ab35-30e812964788",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9e1022db-8a79-4a90-b5e0-a27c320b2c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449a7fa7-f4f7-41fc-aed2-355221a9de38",
        "cursor": {
          "ref": "63493c4f-6e35-4ff2-b839-d2d7abe04e32",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "10814f0a-b26c-428d-ae46-53ac67b04971"
        },
        "item": {
          "id": "449a7fa7-f4f7-41fc-aed2-355221a9de38",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "04cfd657-8d27-4c4e-b09a-676f2b34adc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ce30bc-5ecd-44d2-8fab-c579f6d5b4d4",
        "cursor": {
          "ref": "16dc35e8-b475-4807-9c78-feb0eeafa38e",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5855e2e9-a0bb-41fc-ab89-a6613eca24b4"
        },
        "item": {
          "id": "58ce30bc-5ecd-44d2-8fab-c579f6d5b4d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "39de7f1f-2cc4-413e-b728-7a77e0dc153d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb17a6d-696d-46a2-b28d-a9cdd92af1d8",
        "cursor": {
          "ref": "ee5cfe2c-adcb-484b-b896-824530f18807",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e219573a-8810-479b-b24a-e226ce7c5a99"
        },
        "item": {
          "id": "1cb17a6d-696d-46a2-b28d-a9cdd92af1d8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "73332ae0-9ec7-472e-bb62-fb85b59c1f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3b4af7-0a5c-4cc8-8847-af6d33f07636",
        "cursor": {
          "ref": "5eb02234-86b1-4806-b0a9-30d3d01e09c0",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3934bcfd-a428-41b6-ad64-c0c6bda0921f"
        },
        "item": {
          "id": "2e3b4af7-0a5c-4cc8-8847-af6d33f07636",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c7835755-7e72-47d6-95e1-bbb019dddbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d611071-2734-4fb8-9f30-9eaf84aafb00",
        "cursor": {
          "ref": "96aae577-8ff0-4894-9ed7-7d472dfdf3ff",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3b9226ba-f61e-4089-bd9a-857d33a217fe"
        },
        "item": {
          "id": "7d611071-2734-4fb8-9f30-9eaf84aafb00",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bba3563c-a7bd-4b0e-97c3-73da3f4b79ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390232a5-8166-45d9-a33c-db3bc4662894",
        "cursor": {
          "ref": "9e66e418-b483-4326-a622-9b7797386d67",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b09407c0-724e-4d03-984c-32bde3eea8af"
        },
        "item": {
          "id": "390232a5-8166-45d9-a33c-db3bc4662894",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "928852a2-ce59-4bf0-b1bf-2a377d7318ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acea4df8-aacb-47a2-9bad-7204389290c6",
        "cursor": {
          "ref": "8fbf85ec-e08b-4e10-afa5-4fd6e9b70c8e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c68e41a8-b76b-4bfa-93df-507d3f17113c"
        },
        "item": {
          "id": "acea4df8-aacb-47a2-9bad-7204389290c6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "395b8fe8-c4b8-4793-adf0-a84e4fb4fcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6eb095e-772a-444e-9198-28326907f140",
        "cursor": {
          "ref": "c64acfc9-70bf-4497-a61a-11c61e634223",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "57ce0783-8dda-4afb-9fd5-55a186189721"
        },
        "item": {
          "id": "f6eb095e-772a-444e-9198-28326907f140",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c4d7d6aa-a7e8-4c69-93e2-30850e8de18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0deb166-4b4e-4fcd-b089-a4f108527ee7",
        "cursor": {
          "ref": "9be5b74e-9611-4bd9-abc8-b4e8bed9c05c",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b4d05a0c-5140-4f62-9e89-8a86941c4fa6"
        },
        "item": {
          "id": "b0deb166-4b4e-4fcd-b089-a4f108527ee7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "49aa81df-3838-4689-94b4-d72448b83cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88dad91-ef26-451e-bb34-9d923fe4dd4b",
        "cursor": {
          "ref": "ec292898-b4d8-4926-b6f8-d943a69c39f3",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "84f8b2a4-6320-402d-bada-34548ab699d5"
        },
        "item": {
          "id": "e88dad91-ef26-451e-bb34-9d923fe4dd4b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "52af4f3c-4002-4c90-80a3-0edab0a393de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8664ab9-47a4-41e7-91e3-3c7ffadd1a6b",
        "cursor": {
          "ref": "2bcdf386-6fbb-4bb3-a120-3ef12aaf0494",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2aed8f1e-0ba4-4740-a40e-8cdb44dc8904"
        },
        "item": {
          "id": "d8664ab9-47a4-41e7-91e3-3c7ffadd1a6b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2a761580-beda-4e60-bed4-3507b86217df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391be0d5-cbe1-4259-b71b-b4f8a1b35359",
        "cursor": {
          "ref": "ecfa4dde-44be-468a-8e9c-718191cd4fdc",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a1782115-ae64-4c6f-be35-403d0a886771"
        },
        "item": {
          "id": "391be0d5-cbe1-4259-b71b-b4f8a1b35359",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "04c5fe70-90b3-455b-8622-6e8a838e6382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c102e904-4885-42e2-927c-0b0553d1ff05",
        "cursor": {
          "ref": "5c2ea57c-bb83-4ecc-a2c1-eb211fe016e4",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "913ecc07-0f14-4066-86ab-3fc67eb0f527"
        },
        "item": {
          "id": "c102e904-4885-42e2-927c-0b0553d1ff05",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8111336a-3d54-426a-a9cd-404dd580d31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76fc3d1-3ce0-48af-a951-774afa73cf75",
        "cursor": {
          "ref": "8ae32fec-5134-43d5-9b51-df8663c53f4e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ab512685-b97a-408e-b93f-38829240476b"
        },
        "item": {
          "id": "a76fc3d1-3ce0-48af-a951-774afa73cf75",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a74bc57e-e6f9-41fa-8ea2-c8ef84f8652f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687d2d82-b5b6-4651-9ad1-ac546567f8ef",
        "cursor": {
          "ref": "789fe51f-363c-42b0-93d3-ab20d5dfa691",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "74ed1a88-51af-4445-a861-a46314696b9c"
        },
        "item": {
          "id": "687d2d82-b5b6-4651-9ad1-ac546567f8ef",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1913863b-c9ba-4a68-92fd-5c5125093d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c945e83-414a-4973-81b3-55df4fd95b75",
        "cursor": {
          "ref": "5f849818-ca1d-45bd-84e2-e5ded15d6680",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a20cf505-a5e8-48e9-b2b6-f9159ae60972"
        },
        "item": {
          "id": "3c945e83-414a-4973-81b3-55df4fd95b75",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f426f559-e543-4a73-bab0-0ecc6b920718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce4b98a-d876-467a-bf95-181c1ecc668c",
        "cursor": {
          "ref": "a7845e83-43cb-4c2c-bbda-e1847f1a6bb7",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6be63494-b446-48ad-8615-2ea274ded3aa"
        },
        "item": {
          "id": "2ce4b98a-d876-467a-bf95-181c1ecc668c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "35317c80-2f79-4ca5-b60a-9b22313d301a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5a9c56-871d-46b6-b13a-655989f15756",
        "cursor": {
          "ref": "758a222a-fbe5-40f1-a611-b68db2497eec",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "46e3b8fe-5cb9-46d3-9ccb-fb227126729a"
        },
        "item": {
          "id": "ca5a9c56-871d-46b6-b13a-655989f15756",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bb1a8e5b-a419-4887-af55-5f381724097a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483d7a2d-0633-4def-9b1f-99da1713c72a",
        "cursor": {
          "ref": "22e60b6a-1b73-4ab5-a21a-dcba97e249d1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f0003feb-ac1d-4ee7-bdf1-b408eca027c4"
        },
        "item": {
          "id": "483d7a2d-0633-4def-9b1f-99da1713c72a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2907f8b2-f9f6-4c2d-96c9-b1a8c3497911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02583003-4d0c-4093-b604-c2c377c264e4",
        "cursor": {
          "ref": "a9c6edf9-a18c-49ab-8e34-7b3d7455e360",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3282821f-c05d-43f2-8ec4-f6b996acb882"
        },
        "item": {
          "id": "02583003-4d0c-4093-b604-c2c377c264e4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e51761fa-e51f-4012-8905-b188d3199688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5f8ec2-39bb-42e8-80f6-6f639aafe660",
        "cursor": {
          "ref": "74d27dc0-7dd0-479e-9e69-022d40f3b8c5",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bdc885c7-5f7d-4cff-b90e-5b51278b3d0e"
        },
        "item": {
          "id": "ea5f8ec2-39bb-42e8-80f6-6f639aafe660",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4167618f-01ac-4a08-80ea-89c7053c3ec7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46ee7d9-d03b-41fb-a052-8a77ea170b5f",
        "cursor": {
          "ref": "6f7b09b5-6d96-4ff0-a06f-29be4608b551",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0358fd0e-7fea-45b9-a136-4cb977fe83e5"
        },
        "item": {
          "id": "f46ee7d9-d03b-41fb-a052-8a77ea170b5f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "e4fedaf9-f5c1-423a-8ecf-7c1ca51c69f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b8ef542c-1821-407f-9091-41c85b8e356f",
        "cursor": {
          "ref": "f7f37410-88e7-4e2e-9f5b-0375b0cab404",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c6d8ecc6-595d-45f5-a821-ed6dbf342ca0"
        },
        "item": {
          "id": "b8ef542c-1821-407f-9091-41c85b8e356f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3e96f112-3cc5-40c1-8a04-feb5dc7f252c",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "533b5e3d-11e2-486d-850f-36cdd964ca00",
        "cursor": {
          "ref": "b4cae0e3-7b15-4ee2-8202-998422b8aba0",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b9be65de-c720-4733-b8f8-24055c4f1427"
        },
        "item": {
          "id": "533b5e3d-11e2-486d-850f-36cdd964ca00",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0163ca5f-8780-44c2-acf8-41d8f36151a9",
          "status": "Created",
          "code": 201,
          "responseTime": 368,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb72756-c253-4f88-aedd-bf5eebb55d01",
        "cursor": {
          "ref": "82c0fcaa-b9ca-4757-bc0a-57b9868ecd97",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d3e2be21-359f-447b-ac25-cd8d99773a15"
        },
        "item": {
          "id": "cfb72756-c253-4f88-aedd-bf5eebb55d01",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3e6e40dd-6a5f-4cbf-80ef-98d69138d8a1",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7530169f-25f0-442d-9c33-45c932abc135",
        "cursor": {
          "ref": "84994244-bdce-46f3-8bb7-54ea1f268887",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "25292465-f0d9-4787-83d6-6084f5efe0e6"
        },
        "item": {
          "id": "7530169f-25f0-442d-9c33-45c932abc135",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1f3bc026-8e73-4510-8604-4cc5120db506",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c2b1db-7e87-4b85-ba5d-1f01c8f8b7ed",
        "cursor": {
          "ref": "e465a515-4c7d-42cb-a9fe-d9dbd2dd5827",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "eef80786-26fe-49cf-8666-7a7317196916"
        },
        "item": {
          "id": "88c2b1db-7e87-4b85-ba5d-1f01c8f8b7ed",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8900ce43-bfb0-47e9-a636-509ae8c288d7",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-10T00:35:02.706Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-10T00:35:02.706Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "91f0b741-1bd7-4958-8ded-19c0b0821052",
        "cursor": {
          "ref": "a5f148b1-ca61-41a3-ad24-ba0c0720b27f",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3bf4d028-ed9a-46e7-b320-d6990bb9f202"
        },
        "item": {
          "id": "91f0b741-1bd7-4958-8ded-19c0b0821052",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d5d6e5c0-3923-4b69-8901-fd5c3c6d5822",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f7185a-f960-48f2-9b17-e1894e2095a3",
        "cursor": {
          "ref": "29557435-3eba-4650-9508-476e995d75e2",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bab9b15b-9a02-4a86-9a65-6dd93058b62f"
        },
        "item": {
          "id": "91f7185a-f960-48f2-9b17-e1894e2095a3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6ebf36d4-baa1-421c-a119-b320d4052a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076d303c-3fae-46eb-8402-e2ff3e0041ec",
        "cursor": {
          "ref": "99188f7b-8264-4f49-b4b5-f5d4f7b18e0d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6d0f70c2-ae15-4394-8a72-b8cea7d90468"
        },
        "item": {
          "id": "076d303c-3fae-46eb-8402-e2ff3e0041ec",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d8394823-eac3-42f7-ab43-49e370dc7dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f08bbd-f2f8-4e2b-8ab3-4775659fbb96",
        "cursor": {
          "ref": "d9f4ea15-57d5-4943-bc67-12e0ec6b4a8e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "70ab32b8-ba8b-48d5-9659-6229e2780d3e"
        },
        "item": {
          "id": "e5f08bbd-f2f8-4e2b-8ab3-4775659fbb96",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3f906778-ac1d-4650-88e6-58a70b70d9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfd28be-d019-4334-b8f7-3ee7e0625378",
        "cursor": {
          "ref": "51cab964-3dd0-47a3-a687-6d8ad535e3ab",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "261b7ef6-5966-4347-8f17-00a370a9c31c"
        },
        "item": {
          "id": "7cfd28be-d019-4334-b8f7-3ee7e0625378",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4a566f5a-5727-4dce-9e4d-0e0259c8c614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce68f9aa-f5a4-46e8-b4b6-cd6c158ec937",
        "cursor": {
          "ref": "0f591579-0ace-43c9-97eb-1a2e964ef809",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e0e28180-2463-49a8-ade4-8d0dc3a4e69e"
        },
        "item": {
          "id": "ce68f9aa-f5a4-46e8-b4b6-cd6c158ec937",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "430d2681-6356-4552-b389-bebbdd15a21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9c56bf-1b3c-4797-919b-31b8bcd52cd1",
        "cursor": {
          "ref": "aac0ab93-3ca8-47c8-8293-4922c9e1ddc0",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b8845828-f9c5-430f-a497-8be6ee05dab8"
        },
        "item": {
          "id": "8e9c56bf-1b3c-4797-919b-31b8bcd52cd1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "68556678-12fb-4258-948b-188d9490aacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a228d3f0-1481-48a1-a095-52211dee20a0",
        "cursor": {
          "ref": "0e847a37-b85d-4bb3-89c2-7052c2943a80",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e02a2b1b-803f-4ac8-8ef4-7fa9bb9cc2cd"
        },
        "item": {
          "id": "a228d3f0-1481-48a1-a095-52211dee20a0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "31fe8f4c-93a7-470b-a93c-1beceb3f0ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fcba73-ba87-4173-afc3-a115e0815eb0",
        "cursor": {
          "ref": "b6d51a9b-411f-497d-849e-a519a9fb1e3b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0932b547-43b0-476f-89a1-6b01a5ab28f8"
        },
        "item": {
          "id": "32fcba73-ba87-4173-afc3-a115e0815eb0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "115a2df2-a8e2-44be-9dd1-0ba2e9ec8d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3db4056-270e-49fd-b406-57f3d4b9a479",
        "cursor": {
          "ref": "332f7fe1-96b7-44a9-838c-f3b4feddd42c",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "817a17e3-cd33-43c0-931e-81a9a86f74f9"
        },
        "item": {
          "id": "c3db4056-270e-49fd-b406-57f3d4b9a479",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3a617d21-d4ba-4b95-9f10-ce776d7d145b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6097dbc-3692-4772-8b96-e195bd8f5202",
        "cursor": {
          "ref": "a2212c93-af11-46bc-bab4-e66cbe5d6a61",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "696187e8-28f7-4ffb-b96d-20f25e070624"
        },
        "item": {
          "id": "d6097dbc-3692-4772-8b96-e195bd8f5202",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "681784ef-f63e-4d2b-8273-d6285767a421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8753292b-d831-41cf-9ec8-3a90f1b00b04",
        "cursor": {
          "ref": "d5f9b0ae-3bd2-4296-bdcc-ef883ac5ce9a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bed0ca0c-3753-4c12-9be5-47cbc235d815"
        },
        "item": {
          "id": "8753292b-d831-41cf-9ec8-3a90f1b00b04",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1a4b8b1c-9fd5-45a3-9ff4-e253dd8e96ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b373c97-b83c-455f-bfb9-867bd8f1c06b",
        "cursor": {
          "ref": "6fff79c4-c9c3-4e9d-9e62-5bc7ed11b2e4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "07016b61-6e23-4f2b-9763-ca898fa2cba7"
        },
        "item": {
          "id": "4b373c97-b83c-455f-bfb9-867bd8f1c06b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a89d2894-586b-49e7-8b11-983b4002b311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37b8bca-08c1-4b9b-9ad5-d125344a0f06",
        "cursor": {
          "ref": "7dd5d2e0-9019-4373-8f32-03ebe66d5ecf",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "03f5ebe2-9c8c-422a-bca2-34edaf2599dd"
        },
        "item": {
          "id": "e37b8bca-08c1-4b9b-9ad5-d125344a0f06",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3339e37a-2112-43c3-a97e-47692d797d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6847cb95-2247-42d2-a5a9-ad72c3010efb",
        "cursor": {
          "ref": "fd976c0f-9335-4fb9-9dd2-1d0e07a38529",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "03406453-663e-4237-8dc6-fe8602252953"
        },
        "item": {
          "id": "6847cb95-2247-42d2-a5a9-ad72c3010efb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6b9f222e-1fa8-4a69-afba-7792b237e651",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "001579bd-67d1-4700-94a2-9f6dc6183cc2",
        "cursor": {
          "ref": "c812081e-b8ba-4e5b-8861-22c4bc888c62",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ebfdb683-4c74-426f-80ce-bb20ac22dd91"
        },
        "item": {
          "id": "001579bd-67d1-4700-94a2-9f6dc6183cc2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "55af9536-d127-4ddc-bc90-23a422d5824a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d019b4-a0a5-4296-89a9-dee4e2ffa611",
        "cursor": {
          "ref": "f6365320-bc32-4512-aa49-5de6f4a88b24",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d947f06f-7644-4568-bff0-f52d22d8eb1c"
        },
        "item": {
          "id": "a8d019b4-a0a5-4296-89a9-dee4e2ffa611",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "10939ad8-02a4-4cca-9644-948818498980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc311037-95e4-45e5-8361-5d4795e036ae",
        "cursor": {
          "ref": "cb878d9e-7e34-48fd-b514-7ddf2add4013",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0b370bc2-cd21-4ca9-ba0e-173ad319cc61"
        },
        "item": {
          "id": "fc311037-95e4-45e5-8361-5d4795e036ae",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4e1d986f-bcef-49ee-ad18-4bf1e36e5a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b60519a-b936-41e4-bc8c-c8ded4507e6c",
        "cursor": {
          "ref": "dc9125e3-7df0-4fe2-83a0-1d2880bdeb95",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "23edd70c-f5ab-4b13-9fad-f4c735af7824"
        },
        "item": {
          "id": "9b60519a-b936-41e4-bc8c-c8ded4507e6c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d23deba9-ca9f-4177-b071-5eb707108d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea33c97b-feeb-4487-8d18-3d1c444183e9",
        "cursor": {
          "ref": "456ffe57-6789-43db-947d-4f6fe226d422",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "acb0483e-3b54-479d-b039-ec3242315242"
        },
        "item": {
          "id": "ea33c97b-feeb-4487-8d18-3d1c444183e9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0461a985-f7a9-4fb8-8e47-4b521bf5f8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a64c5fa-57f8-4e55-9274-74f5db7b6bea",
        "cursor": {
          "ref": "a14b1141-55f8-4310-91a1-8224629bbe35",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "32b7518d-c2c9-441f-bfa4-4a724ded2a95"
        },
        "item": {
          "id": "9a64c5fa-57f8-4e55-9274-74f5db7b6bea",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3d55f832-ba7e-4edd-8fe0-6bbfab2e6b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1513afc-d85d-4aeb-98e3-4d6ccec5facd",
        "cursor": {
          "ref": "f5301bbd-aa25-409f-98b6-3a942d2fbe16",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "801a803f-7470-4c22-af46-b37e2e870ca6"
        },
        "item": {
          "id": "c1513afc-d85d-4aeb-98e3-4d6ccec5facd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "40bcc428-1e28-4cd5-ac7e-ba23b722ea38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca25abc-50b1-473d-bcc3-4c66b7ebd52e",
        "cursor": {
          "ref": "af88a5e5-f5d3-4cff-af9a-6b8037927c0b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ddb5e98d-c041-410e-aa1a-946c1fdf056b"
        },
        "item": {
          "id": "9ca25abc-50b1-473d-bcc3-4c66b7ebd52e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8856dd75-d18a-4f58-a335-eef706921777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81590874-ef37-4d97-bedd-6dd220cac3d8",
        "cursor": {
          "ref": "a590f13e-b02c-4647-94f5-d2485c259604",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "aa5e7060-5c86-40a2-8599-13a2cd21e5c2"
        },
        "item": {
          "id": "81590874-ef37-4d97-bedd-6dd220cac3d8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "04105318-64a5-4661-b064-2a2ea082c245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c310ce2-994f-490a-80c8-15680f883f38",
        "cursor": {
          "ref": "4bc15f1b-e67f-4623-b68c-6bf24548def1",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9e0c4a5c-fd9b-4823-952e-c13caceb531e"
        },
        "item": {
          "id": "1c310ce2-994f-490a-80c8-15680f883f38",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "48050b23-30dd-4c1c-9f65-6a54422228b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1e31b8-91b8-46d6-aad6-8a79aa18ab05",
        "cursor": {
          "ref": "719aa252-cd93-47dd-b02f-c7b27596e835",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2bc80f31-be6c-460c-8ea7-a8615e3220d9"
        },
        "item": {
          "id": "be1e31b8-91b8-46d6-aad6-8a79aa18ab05",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7c0f39f6-6495-4b54-8522-7a3ea8fd2975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e5fb53-48bb-40c6-85b5-f90e1c19deb9",
        "cursor": {
          "ref": "03715769-4f4b-4b5e-8d66-414b7a81060b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "66bb3ab8-17fe-4521-8b40-1adab2f7fbea"
        },
        "item": {
          "id": "a2e5fb53-48bb-40c6-85b5-f90e1c19deb9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "805461e3-649f-4b7f-9ca5-d00ed7dec5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d138dd-b58d-4cf6-892e-fc01c477c03f",
        "cursor": {
          "ref": "e71e0e8b-b822-4f56-b613-86d0c83f93c0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4726a690-cba3-4070-8ea8-5fa485a2b2a9"
        },
        "item": {
          "id": "e7d138dd-b58d-4cf6-892e-fc01c477c03f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d0de430c-4f63-4748-962d-651ce07b6dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1df5107-89d9-4c0e-b368-f5fdebff23dd",
        "cursor": {
          "ref": "8ca5351c-c50a-4e88-a18f-1be78a85fb2b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4b3fd0f5-822c-4ace-8971-cc1e99dcc3b5"
        },
        "item": {
          "id": "c1df5107-89d9-4c0e-b368-f5fdebff23dd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f6a18039-59bb-4cec-8570-040ec66096aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d73560b-e3fc-412c-8827-5b735846a611",
        "cursor": {
          "ref": "436b925f-8c30-41ac-adc4-4a5d95865e9e",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7e0ce3b7-d419-4e4a-a966-cf5927412241"
        },
        "item": {
          "id": "3d73560b-e3fc-412c-8827-5b735846a611",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8bbbc90d-0e81-41eb-bb09-7cef5feb2b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee743be9-c8b5-4dd8-8251-e59b362753be",
        "cursor": {
          "ref": "cf409a92-8ac7-479b-a77c-d58d35e23fcd",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5f8f5ced-e0d6-4c71-a9a8-6cd2f956c8c0"
        },
        "item": {
          "id": "ee743be9-c8b5-4dd8-8251-e59b362753be",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "975b9630-dad2-4cfd-8fa0-bf8e6c137fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3717ae49-25d6-4897-9a45-d9e92568ab81",
        "cursor": {
          "ref": "d1ff2042-2de2-4217-8b9b-ac1c8394b971",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "99b934cc-d7e5-496e-aa73-e1117bc7268b"
        },
        "item": {
          "id": "3717ae49-25d6-4897-9a45-d9e92568ab81",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ffc2217c-c8c1-458a-9d3f-f76a47fb74bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bd683a-89e7-4091-8237-8d086fa10ad0",
        "cursor": {
          "ref": "226f95b9-8b90-4e6b-8052-bb81ca20ea3f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b7c72582-2dd6-4178-bb23-eb5499cf69b5"
        },
        "item": {
          "id": "d1bd683a-89e7-4091-8237-8d086fa10ad0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b393765b-1bbb-4594-b462-3b7e1ef529d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaede1d-d567-4aa6-a669-aa94d9e285b4",
        "cursor": {
          "ref": "764dfa6f-a75d-465c-b398-b95fa79e7e1e",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "27291c92-3a5f-4357-8f53-4fdd5c1cc2fa"
        },
        "item": {
          "id": "6eaede1d-d567-4aa6-a669-aa94d9e285b4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "13fac8de-0e02-4859-832e-0bbf167d9240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893eb37d-99a3-4fc2-bd7f-3feba78d9541",
        "cursor": {
          "ref": "fdb11ad6-26f7-421f-90bc-9ffcb407b9e7",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8e1aad7e-f849-4d6f-a7b0-ae2410f6bce3"
        },
        "item": {
          "id": "893eb37d-99a3-4fc2-bd7f-3feba78d9541",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4cea58db-629b-4d00-ba7e-a726609c767d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7b4cd0-a55b-4f58-93cc-85501bf0484e",
        "cursor": {
          "ref": "cf919c3e-11ca-47fe-bd0d-8ccd877e54c2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "444b2bf7-84fa-43cc-bb9c-2e230ebfe9d7"
        },
        "item": {
          "id": "7a7b4cd0-a55b-4f58-93cc-85501bf0484e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a2e92f1e-2855-4a9e-9e8a-0ef147391b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b44db29-c61d-4a6b-8610-b1aebfe4f5ca",
        "cursor": {
          "ref": "5281f048-560e-453c-a6d8-0181831ab5e1",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "80f352d1-8864-439a-aeeb-4cff1aed193f"
        },
        "item": {
          "id": "2b44db29-c61d-4a6b-8610-b1aebfe4f5ca",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7ae7dcc5-279e-4e0f-b3cf-05285fb56e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2483ec35-307d-476a-86a2-1166161b195a",
        "cursor": {
          "ref": "e1b86e6a-518e-494a-94ca-bf7e43003619",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "eda5765f-bdaa-4863-a5df-9c7f660cf520"
        },
        "item": {
          "id": "2483ec35-307d-476a-86a2-1166161b195a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ed6dd0aa-c5b0-4a8e-add6-adcf886bf714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f157f5-8bcd-4884-909a-6ddfcfde58ce",
        "cursor": {
          "ref": "8b881e77-ed8a-41ec-92a9-95d6a17387bd",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5ba14d78-5f7e-438d-94c0-5b45c199ff2b"
        },
        "item": {
          "id": "b9f157f5-8bcd-4884-909a-6ddfcfde58ce",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "825886e4-b85d-4cdf-a183-d1eba13ac3c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787faa1b-1814-40e7-9149-aa588cb70049",
        "cursor": {
          "ref": "8d364479-809e-4224-a975-fc17ff530466",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ffb55e5e-0daa-41c5-b586-18c0743a538d"
        },
        "item": {
          "id": "787faa1b-1814-40e7-9149-aa588cb70049",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "460cd8be-d6e1-4717-bc05-d7133850f2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb186f0-f62a-4dd1-af45-db4cabbe83b4",
        "cursor": {
          "ref": "2f2dd235-c4c9-44ab-9f19-431657331887",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2d1947bc-05e5-4145-abc0-e0502589d54f"
        },
        "item": {
          "id": "1eb186f0-f62a-4dd1-af45-db4cabbe83b4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "47c87231-5b9a-45ea-a0d3-25e45715ebd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a380161-7683-46ca-b4e7-75cfac680d6d",
        "cursor": {
          "ref": "d0a6bd0d-de19-4acd-9d65-8d95436ffb88",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "86e64736-3690-45f9-8725-bb28bdc14aab"
        },
        "item": {
          "id": "2a380161-7683-46ca-b4e7-75cfac680d6d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e1f9dfda-336f-4e90-978b-2567325d219d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae68900-b259-4178-ac76-47702b700786",
        "cursor": {
          "ref": "516e9f69-7b93-4b6d-bba1-14b4a13e778a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8141537c-ee13-47b8-a737-ef47b1c473b4"
        },
        "item": {
          "id": "bae68900-b259-4178-ac76-47702b700786",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b208dee1-043a-4093-8391-35cba709be55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25869bcb-53bb-480a-bbc3-33a010fc9e32",
        "cursor": {
          "ref": "942a8602-2ae4-4fe1-b1b6-d1e38c9e5a40",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "37759e87-c1b2-4dd0-90cb-1afd947be7bb"
        },
        "item": {
          "id": "25869bcb-53bb-480a-bbc3-33a010fc9e32",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "84dabb7c-ac13-419a-b7c8-8d7f27377a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08610d97-ae7d-4506-b9de-e32d49111e2a",
        "cursor": {
          "ref": "5eb9ec30-ec53-4807-b61d-a1b3b95067c1",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ea8f5130-4288-4d76-90d2-8fe037100158"
        },
        "item": {
          "id": "08610d97-ae7d-4506-b9de-e32d49111e2a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "58689f4d-f080-404c-b981-98127f90de71",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "24aa49a1-d43c-4da4-a13f-17cdfeaa674b",
        "cursor": {
          "ref": "7ec01c4c-e979-48e6-8ba6-f13cd468e039",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cb9173b7-222e-40ee-96fc-491954ce6bbd"
        },
        "item": {
          "id": "24aa49a1-d43c-4da4-a13f-17cdfeaa674b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9b00983c-abbb-467f-97d2-a29661008887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0fed41-35f5-4a0b-adbd-f70799774b44",
        "cursor": {
          "ref": "0c0937e1-f15e-4bb9-aa2c-19f9e92063d8",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "844bda8c-e27d-4963-b906-b79f14e14204"
        },
        "item": {
          "id": "cb0fed41-35f5-4a0b-adbd-f70799774b44",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "23f76795-e040-4a56-bc24-4e226a434713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139adff7-1278-41c4-96be-ab7ee8e9d11f",
        "cursor": {
          "ref": "e54a83bd-4793-4f78-a1fa-d1b7cffb1c1d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "983c99d4-1240-45a2-a4f9-ed0679e7fdba"
        },
        "item": {
          "id": "139adff7-1278-41c4-96be-ab7ee8e9d11f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5f396e97-5dfb-468c-ae9c-91669cc34b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944f537e-207f-4506-96f6-cb31cb2ad381",
        "cursor": {
          "ref": "b2c28caa-ed3b-4a6c-a4e1-69b44b956e6f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ec231677-e906-42c0-a39b-9f6d573c3520"
        },
        "item": {
          "id": "944f537e-207f-4506-96f6-cb31cb2ad381",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ce1206d4-3e9b-47dc-8334-776fbd73f78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bc03bd-bb9a-48ac-8efa-ac70c382c4cc",
        "cursor": {
          "ref": "9ee5746c-e9e5-437a-adb7-ce1843ebed7f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ef5b48ac-02bd-4df3-b82b-a44009e2df1c"
        },
        "item": {
          "id": "29bc03bd-bb9a-48ac-8efa-ac70c382c4cc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2cb323be-367f-4713-9223-894658bde8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21713249-65b4-479e-bf8e-d7e1e3a09648",
        "cursor": {
          "ref": "c3ade3e6-8fb8-410e-83cb-907fba2b0c5b",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3c5535bc-4a3a-4480-948a-a3fefef8e9ef"
        },
        "item": {
          "id": "21713249-65b4-479e-bf8e-d7e1e3a09648",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2532173a-246f-46e0-ae6b-1096fba7528a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861abd24-50c9-4b69-9142-b12589721a4f",
        "cursor": {
          "ref": "d1db9787-01af-4059-ac9b-ecb304a887b4",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "94f615a1-92dc-46fd-bd79-abc939b0e5ae"
        },
        "item": {
          "id": "861abd24-50c9-4b69-9142-b12589721a4f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "62abb705-7ab8-4927-abbe-f7864801888f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9687a1a8-aec2-4631-9053-df65ba430bf0",
        "cursor": {
          "ref": "b0ccf848-6174-403e-b86a-86db589991a5",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7c39a777-c4ae-4911-8680-36a7ed878f91"
        },
        "item": {
          "id": "9687a1a8-aec2-4631-9053-df65ba430bf0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d8543d2b-0416-4219-84ce-602365074f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e5079c-07d5-40b6-bd2b-46fb4074c9cb",
        "cursor": {
          "ref": "8b7fa54f-d992-4cf0-bf75-eab50d6b4426",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ce0385fa-f5e3-4063-9bbf-15d64afdf934"
        },
        "item": {
          "id": "92e5079c-07d5-40b6-bd2b-46fb4074c9cb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "61744879-cdac-45cd-9f3b-27761115428c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38de64e1-416e-4d95-8e36-859c01980469",
        "cursor": {
          "ref": "15fb9b42-2454-491a-89ab-0afe44e72dc6",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7e6c043d-581f-4f83-9123-84817c3aac25"
        },
        "item": {
          "id": "38de64e1-416e-4d95-8e36-859c01980469",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "df1e647c-3a6f-47de-a0ce-395be6cc74f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ed1dab-2c47-4269-ae4d-c3e8ddc4f58a",
        "cursor": {
          "ref": "efe0b790-2422-4e7c-b1dc-c0467dc02eb0",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "69f2803a-e83e-4aa2-bad5-a34c142086c9"
        },
        "item": {
          "id": "a5ed1dab-2c47-4269-ae4d-c3e8ddc4f58a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "008a585b-40a4-4572-ba76-eb1d155b81fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd919de-926f-47ad-bf98-8d3e9ef2b020",
        "cursor": {
          "ref": "e9f78e2c-f974-4ccc-b86d-e6eba69fe1ce",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "253052f4-3ddb-4ca0-8b34-84d64189687d"
        },
        "item": {
          "id": "3fd919de-926f-47ad-bf98-8d3e9ef2b020",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "26a14bc2-cc0f-482c-985a-90daecdaa5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbcd029-3f0f-44a7-8909-3d43378f627c",
        "cursor": {
          "ref": "beea9aad-c35e-437a-a4c2-fefd486f8c32",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "22a7c8ce-8d0c-473f-8245-c0bb8e5722d9"
        },
        "item": {
          "id": "abbcd029-3f0f-44a7-8909-3d43378f627c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a4aa2a9c-e13c-44bd-90fb-9bace245ec6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0b9837-81ae-403e-880c-a53b2d89bd20",
        "cursor": {
          "ref": "468b42cf-f0c6-4d50-8cd9-123c8e429064",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d4a68e36-76f7-460b-a9db-2fe156972f4a"
        },
        "item": {
          "id": "5c0b9837-81ae-403e-880c-a53b2d89bd20",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "dde55b31-c3aa-47c6-89d6-82fd611ee437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cd98dc-dcbe-441e-869d-a7ed2ee409fd",
        "cursor": {
          "ref": "d4572dc7-67b6-42b8-9573-e66cfa3a8027",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e7dcb97f-09a9-476f-b6b7-cd7a2d13681c"
        },
        "item": {
          "id": "34cd98dc-dcbe-441e-869d-a7ed2ee409fd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "57325024-7b52-414e-8373-c2a86df73797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071411d8-2950-4da6-9bed-a3283e70c42d",
        "cursor": {
          "ref": "639fa81e-069b-40ba-8ed4-69c834273642",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c64d6e8c-f37e-4fc5-8bad-c245981bcb7f"
        },
        "item": {
          "id": "071411d8-2950-4da6-9bed-a3283e70c42d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bf24b8f1-1174-41e3-bd10-78965f1902dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098072ec-158c-4e61-a4b0-6300ebe6a27f",
        "cursor": {
          "ref": "944d18f7-5fa5-438c-bf27-7a4d553216e8",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2e543f8a-67fd-4940-b9b4-38e53ad5551a"
        },
        "item": {
          "id": "098072ec-158c-4e61-a4b0-6300ebe6a27f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "73b8d0ea-5ad0-401f-89ff-6a4e598a5c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9ac915-f704-4738-b797-efe52c1a8520",
        "cursor": {
          "ref": "0e7cbc9e-0a17-4b46-8459-d456adcdbc23",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d2b57420-2b75-4147-bf39-f995c991f1e2"
        },
        "item": {
          "id": "2a9ac915-f704-4738-b797-efe52c1a8520",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f6c3b640-60f0-40eb-982b-3e938071f008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094ce156-834c-466d-a5d8-5ee72120c6b1",
        "cursor": {
          "ref": "522f44cf-5a33-4faa-b04e-e6f07abb2dc2",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3bdc5385-0dfe-4621-a4f0-06d0d2ca2bc6"
        },
        "item": {
          "id": "094ce156-834c-466d-a5d8-5ee72120c6b1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1ae0aec3-9798-4c7b-9f17-ab97b370fbd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621ff356-528f-4b53-b102-6fb10e5d96df",
        "cursor": {
          "ref": "7650788a-21c3-4898-9221-b22747b980d9",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b8842a19-9fae-4669-b60a-c60cbfcdceb7"
        },
        "item": {
          "id": "621ff356-528f-4b53-b102-6fb10e5d96df",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8528e459-eeac-4401-9f35-11be90984a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25639be-ad6e-45cf-87e9-2e6417b1fc27",
        "cursor": {
          "ref": "59b1babb-afe4-470d-9c9a-b5e14b6aea32",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "59511a30-e4cc-446d-8d6e-5e5a6228f5a4"
        },
        "item": {
          "id": "b25639be-ad6e-45cf-87e9-2e6417b1fc27",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "73b70208-4fc6-4aa1-aa26-28c88599cc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4beb0352-3bd5-4678-a2a1-086a3adecfa4",
        "cursor": {
          "ref": "b667db07-dde2-45a4-a34d-40811deb1cc7",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dbdbc6f2-f472-4811-afcf-55cac59c6f89"
        },
        "item": {
          "id": "4beb0352-3bd5-4678-a2a1-086a3adecfa4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "45290b33-ed76-402c-a802-06d1d18b586b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8c401d-5561-4793-b382-6f7457a8c934",
        "cursor": {
          "ref": "9546a823-b321-4a52-b436-aa4aa4dbdad7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "96d4ab90-6fff-4319-8f8e-9785515b79ef"
        },
        "item": {
          "id": "bf8c401d-5561-4793-b382-6f7457a8c934",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b23ccac7-c654-4f05-a1ad-cb559afc1c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8fceee-ea13-4ecd-b15c-49d7ec0a4035",
        "cursor": {
          "ref": "3618c789-f164-44aa-9392-810a63042584",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8c9f64c3-e5b5-4f88-918e-620356c7d151"
        },
        "item": {
          "id": "8a8fceee-ea13-4ecd-b15c-49d7ec0a4035",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "70aac743-23e7-442c-9249-e5a0ec26c09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b8c44a-fd4b-420f-93fc-22d0cb272394",
        "cursor": {
          "ref": "f01c6a29-1bad-4d7e-bd08-6b9f96d1c1fc",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c38dbc86-e04c-4564-8dae-b08d3c7fa5c9"
        },
        "item": {
          "id": "c6b8c44a-fd4b-420f-93fc-22d0cb272394",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "689ab492-71a9-4330-8983-25e098ce415e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75153705-88e3-40b1-a9c9-e31d1878c9d0",
        "cursor": {
          "ref": "ee7061f2-6b02-43a4-a1f7-52575ab24858",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "050daea1-8ca0-4c20-9ed4-9d846eab592d"
        },
        "item": {
          "id": "75153705-88e3-40b1-a9c9-e31d1878c9d0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2d4cea91-e3b4-4534-bad6-a6a09333bd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b0a693-e3f4-4a7a-b1d2-63227e1e5b73",
        "cursor": {
          "ref": "bc2a2739-662e-4fe7-ba0f-94a5304bf9bf",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fd32685b-7ea5-4723-bccc-e15f98206ccf"
        },
        "item": {
          "id": "69b0a693-e3f4-4a7a-b1d2-63227e1e5b73",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3d9a8145-7afd-41a0-8689-b7b91f6d2f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8a0db3-7faa-4cf4-b070-c7d8c4181101",
        "cursor": {
          "ref": "54b4e62f-d255-4ec1-b2e1-4ac3976b4e07",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8ae9a578-1238-404f-b642-e66b20cf35dd"
        },
        "item": {
          "id": "0f8a0db3-7faa-4cf4-b070-c7d8c4181101",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "55b02172-572e-4f80-8ce1-521d00ed7fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9f02fc-3d00-41a6-931d-b7f23f33d926",
        "cursor": {
          "ref": "73f64151-a9b4-4c79-b978-643581a46e58",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "97db3692-5892-4327-bb0d-e2cb49eeaf81"
        },
        "item": {
          "id": "5b9f02fc-3d00-41a6-931d-b7f23f33d926",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d3208388-7d2b-4ed9-baca-b544a54fb416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec5442f-6504-4873-a11c-d560cde2fd6a",
        "cursor": {
          "ref": "8083f79f-4e2d-4fb6-ad4c-2da9cbf56f23",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cd63f9c9-e813-4d58-916d-6e443b4ad446"
        },
        "item": {
          "id": "bec5442f-6504-4873-a11c-d560cde2fd6a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3044ed79-325a-41f7-9eed-49fa00699ad4",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "099ddb77-53bf-407e-bc95-46effa7aae26",
        "cursor": {
          "ref": "98dacfa2-43b2-4239-af58-78ded29fd0c6",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8367dfea-0aeb-4986-9046-aecb65151181"
        },
        "item": {
          "id": "099ddb77-53bf-407e-bc95-46effa7aae26",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6cdfc068-0de1-4759-9963-2a3e880bbc4c",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9783bba0-cc33-4c7c-9fce-18be3006dea7",
        "cursor": {
          "ref": "7eb5ebcf-4289-4307-a31b-01e3f3fcad32",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a1669c0d-d885-4377-8b3e-1efeae490de2"
        },
        "item": {
          "id": "9783bba0-cc33-4c7c-9fce-18be3006dea7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "127b4896-c47f-431b-9aef-17837fbb8438",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0476005f-d024-4749-a207-a3f73a67ca13",
        "cursor": {
          "ref": "a36bd8a5-5b39-4ee2-802e-e8cc92afd424",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6b821304-4bb0-4c90-a765-a063e2c568ea"
        },
        "item": {
          "id": "0476005f-d024-4749-a207-a3f73a67ca13",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6a7b581e-e550-4641-b8cb-426cc3bd78dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6d72bc-0c16-499d-bb5c-b4eb9645425e",
        "cursor": {
          "ref": "5f035b84-5e90-417c-a100-fd0a1ba7d6c3",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "47550b11-ea2a-4195-8644-050a5acba6cd"
        },
        "item": {
          "id": "af6d72bc-0c16-499d-bb5c-b4eb9645425e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8f772999-c00d-4f71-999a-097a1e7970a8",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e16b589c-804d-4335-84e5-73049fbba8d5",
        "cursor": {
          "ref": "cd82c490-a12b-4577-8ac3-a2d00bb445cb",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0478f600-9fb7-4fa0-9547-fd9ea4bbe011"
        },
        "item": {
          "id": "e16b589c-804d-4335-84e5-73049fbba8d5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8f19af14-84d2-4564-8941-26ea549fc3e7",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "1d18688b-30a1-4ad5-9732-55d10b4ccbce",
        "cursor": {
          "ref": "ff1ca9b1-c384-40cd-bdff-0115a76ba554",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cd4591ca-cb6c-4ac5-8593-4f65ef4c177d"
        },
        "item": {
          "id": "1d18688b-30a1-4ad5-9732-55d10b4ccbce",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "01550bf6-ae99-42db-a078-d8d438254d5f",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "0ff780d0-c764-4c7f-8484-a8bfaa260c4c",
        "cursor": {
          "ref": "b5ce345e-ee3d-4697-9e9f-03258ee11f04",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e89cebde-b81b-4ed6-be43-731119f570fb"
        },
        "item": {
          "id": "0ff780d0-c764-4c7f-8484-a8bfaa260c4c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ff1caf8e-7d50-407d-8acd-9554ab12fdab",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6fc43ed5-8b52-434a-827c-51ef9ccff8a4",
        "cursor": {
          "ref": "e2a00a0a-40a0-4ff3-a8b3-f2abd99290ae",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "344c2492-4716-494a-b877-973569cc602b"
        },
        "item": {
          "id": "6fc43ed5-8b52-434a-827c-51ef9ccff8a4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "16913574-2680-4e3b-b37e-1b56ac4b5a00",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c09fdc05-7093-42ea-8cd4-452493082e58",
        "cursor": {
          "ref": "e1c8eec2-328d-4162-ba03-8ea7b4973c3e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d60ee600-d2bc-4e43-a375-1c65a17272ed"
        },
        "item": {
          "id": "c09fdc05-7093-42ea-8cd4-452493082e58",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "707f0529-0e19-42f4-b2db-9b01ea56d26b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "8349c3f6-7d08-4771-b557-fcc2ea7949c6",
        "cursor": {
          "ref": "10032678-84a4-4f75-8bd3-0804680f48ca",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5b79bd07-8012-4c97-ad5c-032e840b1a8a"
        },
        "item": {
          "id": "8349c3f6-7d08-4771-b557-fcc2ea7949c6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "54c86f8b-1a65-49a7-b6b9-149f65761a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a8a700-b3de-4b76-a5a7-4a6e8e782ceb",
        "cursor": {
          "ref": "07a2c524-7f3e-4414-b2c5-cc0898934dfd",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ba35e112-f4e3-4024-b3da-c2cdb4e40dda"
        },
        "item": {
          "id": "a9a8a700-b3de-4b76-a5a7-4a6e8e782ceb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b25109ea-5cda-479c-8962-332ca0a5375f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe9084c-14ba-47d6-9624-1c89add4d0b9",
        "cursor": {
          "ref": "4b7d24eb-8d84-45e2-b137-852333bf0c99",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bab8208b-e379-4e6f-b182-bd335b749d4d"
        },
        "item": {
          "id": "bfe9084c-14ba-47d6-9624-1c89add4d0b9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b5f24f67-4b47-4120-bc32-f0d74123717b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e965f92-aa4d-46a4-b9ba-f12c54c69626",
        "cursor": {
          "ref": "6168616e-af70-4c10-8b58-cd6fa385c33b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "93543729-a29b-4d94-8a89-f21cee230d40"
        },
        "item": {
          "id": "6e965f92-aa4d-46a4-b9ba-f12c54c69626",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "58104523-488b-4154-a923-327a020e09a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae254f9-a30a-4717-8d46-ca9c925617b0",
        "cursor": {
          "ref": "c5366e38-9912-4f43-ac41-f395e4b725dd",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "401f96d2-0a27-41b2-8c44-d1ec8cc9069e"
        },
        "item": {
          "id": "5ae254f9-a30a-4717-8d46-ca9c925617b0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4d551faa-38bc-44b0-ac49-610bb75644e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbf22b4-a0fe-4dfd-b250-528a2be24016",
        "cursor": {
          "ref": "ff3c3c8d-8e2c-42c3-b2b6-35082e1c3780",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "406f9058-5509-4726-9142-76305a75a447"
        },
        "item": {
          "id": "6dbf22b4-a0fe-4dfd-b250-528a2be24016",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7952ab5e-b8f3-430a-8f83-30cdab2c06f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2643ab4f-9ce6-4e46-a24a-ad641fba69f5",
        "cursor": {
          "ref": "dd7e4c83-826a-4ada-976d-6c322fe88d05",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "384503cb-c938-41ef-b65b-9fa6b3ac0a71"
        },
        "item": {
          "id": "2643ab4f-9ce6-4e46-a24a-ad641fba69f5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "affe9e55-c450-4753-b1fa-4400a3dd78c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d3f39-1d9f-4a39-8ec1-d366ef8f767a",
        "cursor": {
          "ref": "6f28f895-2320-48e2-8336-c6d399e91be1",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9f9aad33-9eb7-45b8-84a6-11d4637cd2bc"
        },
        "item": {
          "id": "f24d3f39-1d9f-4a39-8ec1-d366ef8f767a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "42dfc526-aee0-47bc-8079-fb59d635b3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d30a58-0ea1-468c-bb62-f24a91b23db8",
        "cursor": {
          "ref": "17f67bb2-f4ee-4cf9-b0e6-794df71964e7",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6d2c4ac0-6214-4f26-8670-540b915cd307"
        },
        "item": {
          "id": "c8d30a58-0ea1-468c-bb62-f24a91b23db8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6af15b59-b5f1-43f0-9cd0-aaa7935050c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bffefa7-87b8-4c7b-a3c8-d69bd5f89d1e",
        "cursor": {
          "ref": "efa937b6-2153-4ddb-b76d-8638837c649f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a0236c56-23be-4e2d-af90-465014a39c51"
        },
        "item": {
          "id": "0bffefa7-87b8-4c7b-a3c8-d69bd5f89d1e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "33d7d86e-074a-4f38-b781-b9099dad5ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05728cee-6f9f-49ef-8c94-8cb70b3d08f6",
        "cursor": {
          "ref": "d65c681a-75ac-4e2c-b9f8-098f13a62327",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "dc0210d1-e9b8-466d-bdf6-fc1e15186126"
        },
        "item": {
          "id": "05728cee-6f9f-49ef-8c94-8cb70b3d08f6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9855cb6a-85e7-440b-a370-641d9e5131ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e44ebc0-2832-44b2-9528-e2ee27058ce2",
        "cursor": {
          "ref": "f1e43e52-5b34-45b1-b550-4d5f6a3bc73b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b241ccd4-32eb-49cb-99dc-ed005b9358fc"
        },
        "item": {
          "id": "3e44ebc0-2832-44b2-9528-e2ee27058ce2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d4742dc0-7449-451c-bb76-09480fed5b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b607c8-633d-4de9-b702-02a79ef8e166",
        "cursor": {
          "ref": "219300b1-b76a-4963-bcaf-dc3534328cd4",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "59fa62bc-fdfd-4ce9-b066-57d417810f1b"
        },
        "item": {
          "id": "d4b607c8-633d-4de9-b702-02a79ef8e166",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bb288f65-fec1-475a-a303-7c12c0d1e710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2475d2c-8e59-455e-bfef-c154498c7e13",
        "cursor": {
          "ref": "cb354dbc-e1ad-4207-86a5-c44f7fa8e629",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7f3e16b0-9599-4300-ad70-14a2af730a52"
        },
        "item": {
          "id": "a2475d2c-8e59-455e-bfef-c154498c7e13",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8d42d112-b840-443b-8580-5f1af83ed973",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "71d514f8-3e25-4ed4-85ce-4621a7e87768",
        "cursor": {
          "ref": "d9b4dbe2-6b73-4fc0-ab68-78d523f6bbf5",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d441cb0e-30a1-41b2-8610-85762a3b28a9"
        },
        "item": {
          "id": "71d514f8-3e25-4ed4-85ce-4621a7e87768",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8406f56f-30f5-40ab-8bb3-28211b0846e4",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b2391ba2-13b7-4dee-8c86-1a1a0ba70c09",
        "cursor": {
          "ref": "2e46b51d-1d53-44e1-8b6c-b1fb95037fe2",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9bc5b688-a349-49ee-af06-572aa278be8e"
        },
        "item": {
          "id": "b2391ba2-13b7-4dee-8c86-1a1a0ba70c09",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "276f1e18-1743-418e-8b8c-7cbcbe816b3d",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b2f0ea68-5883-4750-ab58-120f2a800b8c",
        "cursor": {
          "ref": "e4b94072-bc2a-42c8-bffb-eec836e0fb18",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "293336d7-e1b4-4d9e-92e0-5e290205bb98"
        },
        "item": {
          "id": "b2f0ea68-5883-4750-ab58-120f2a800b8c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "add063e9-8994-463e-bd69-8eaf95c84726",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a50fe1c5-84e7-4fb8-85f1-cb18bedd9240",
        "cursor": {
          "ref": "cbaf20d1-c27d-45fa-bab4-e5e1111a1944",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c489423c-7618-4735-a769-2376dbfe39f5"
        },
        "item": {
          "id": "a50fe1c5-84e7-4fb8-85f1-cb18bedd9240",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "438f0058-9885-4bed-8d38-85298f64cf5c",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a4f9662e-f5be-47ad-9d49-27ada31bf302",
        "cursor": {
          "ref": "cdfa7e67-38a1-4187-b462-541b3db60cc8",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1d3466cf-486d-42e9-b9dd-96b0abd50bb0"
        },
        "item": {
          "id": "a4f9662e-f5be-47ad-9d49-27ada31bf302",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5b0d49a7-f83e-4dc3-b29c-325bd55b2aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8544c3-003f-42a3-bf93-438bdac26a2b",
        "cursor": {
          "ref": "9d5ce6b0-dfe2-49b0-a003-7724eb8c5c26",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c1e08124-ee93-45d8-8f61-fde09dac4cfe"
        },
        "item": {
          "id": "5d8544c3-003f-42a3-bf93-438bdac26a2b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4b489b7c-790b-4027-9fd2-86dd8b32e520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68897ca-fd38-4ec8-a525-d393e70a26b0",
        "cursor": {
          "ref": "403f8f42-2425-47eb-84ac-a5d8ca9f436a",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0879bf59-fa51-431b-ad77-33d8fdadb6b1"
        },
        "item": {
          "id": "f68897ca-fd38-4ec8-a525-d393e70a26b0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1532017b-7111-4f89-a5ba-ca6c11e76c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d321f618-4681-4260-9dd0-2212f4d86381",
        "cursor": {
          "ref": "9668ffc2-8373-49c7-8787-14d724806a53",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "daef210c-ef29-4a45-b8a3-cd1de5c58584"
        },
        "item": {
          "id": "d321f618-4681-4260-9dd0-2212f4d86381",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d9d15bfd-6602-45e5-994d-fe97882bfcee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d2e91a-0bca-4b4a-8611-005f5da7be61",
        "cursor": {
          "ref": "e73d9320-eb68-4772-bd93-11a2716d195f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ab72dc36-aac6-4126-a795-e21aae4a2680"
        },
        "item": {
          "id": "d6d2e91a-0bca-4b4a-8611-005f5da7be61",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "287c2ba4-7315-420c-a1dd-62f898be54d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b6eb02-71be-4e70-a390-9fa1c9922394",
        "cursor": {
          "ref": "5c8f6f61-2fa5-4ca2-beaf-1aca8cdd804e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4d3d6da5-9adb-4da0-a21d-5a179a753c1d"
        },
        "item": {
          "id": "b8b6eb02-71be-4e70-a390-9fa1c9922394",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "97f6e69a-3f52-4c16-893b-fb7907def42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37acc68c-3b09-4fec-b82a-080dab74145d",
        "cursor": {
          "ref": "2b6b123a-e3a2-4c25-a895-99c1f84a05e8",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "278a7a16-2a68-4478-bf76-054d029b391d"
        },
        "item": {
          "id": "37acc68c-3b09-4fec-b82a-080dab74145d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0f426a5c-8a6b-440b-89d0-d57371fea47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa7183f-d9f5-4195-9f70-3f02cb2ce735",
        "cursor": {
          "ref": "f3a44517-f0ba-4be3-ad2a-206d544b1bff",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b18458a9-4f75-48a3-81b9-588c42aacf04"
        },
        "item": {
          "id": "daa7183f-d9f5-4195-9f70-3f02cb2ce735",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8422be36-3101-4203-9a9b-197256f15070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a0cb4e-a36e-41c6-a0b1-e2f39ae4ef99",
        "cursor": {
          "ref": "bb195c2b-54e3-4479-9029-a0ff12297524",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "745a052d-a12c-4f80-808e-ca080c770748"
        },
        "item": {
          "id": "a3a0cb4e-a36e-41c6-a0b1-e2f39ae4ef99",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5f2d7b5c-5379-4688-95a9-9bfbe68f7dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eec3ebd-1fe2-48db-b191-0f2c5c9ef428",
        "cursor": {
          "ref": "fb12e258-78d3-459f-9d19-6ac5ca78d9df",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d93f73dc-93e7-4a64-ab70-da9eaa4840fb"
        },
        "item": {
          "id": "1eec3ebd-1fe2-48db-b191-0f2c5c9ef428",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6ce02508-8462-4198-a679-cdb55358f106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9455c0de-59de-4f6d-8e30-ab8f8d71acc8",
        "cursor": {
          "ref": "f25c97e5-75a9-43e9-8664-93bf5bb4a4fd",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "aede6278-5922-492c-ba97-ae80eb6c46ea"
        },
        "item": {
          "id": "9455c0de-59de-4f6d-8e30-ab8f8d71acc8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6c8d11bb-99f9-4542-95df-8f7298294e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3de6a92-3497-42cc-8abd-6a10bd5112be",
        "cursor": {
          "ref": "16eb37b6-24ba-4593-8ba9-f43feb945e1a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fb166f12-4b23-4655-854c-5fdfd47ace6e"
        },
        "item": {
          "id": "a3de6a92-3497-42cc-8abd-6a10bd5112be",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2930cbee-1256-49f0-94cf-117d1ade3dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06eed5d-c66d-4444-a82d-82e78c524e4b",
        "cursor": {
          "ref": "50f662f3-fafd-4295-acbb-0bfe8d0d5dbd",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "aa8de501-f33c-4361-9e8a-2397605a5ce8"
        },
        "item": {
          "id": "f06eed5d-c66d-4444-a82d-82e78c524e4b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "06d6a578-5d90-474a-833f-8f0eb42aa198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1d9a80-47b1-42ff-858b-07e75d757404",
        "cursor": {
          "ref": "0298d02b-3b52-462d-a23b-b2974ddee791",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0cf9dcd9-fee6-4e2e-8aa0-84316d9b3743"
        },
        "item": {
          "id": "4e1d9a80-47b1-42ff-858b-07e75d757404",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "20d99ed2-e8c5-4e39-878d-8e3676bc70f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61bfbe8-9a7f-4258-9c86-1df95c633ca2",
        "cursor": {
          "ref": "7b6bec96-6755-471b-a689-a2c6419932b1",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c8a1fec8-46db-4554-9bda-cc56d6af2253"
        },
        "item": {
          "id": "a61bfbe8-9a7f-4258-9c86-1df95c633ca2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d0713777-12f2-44be-b4e8-009a471f0ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeb0ee2-71d1-49f7-9161-c89bb10a5163",
        "cursor": {
          "ref": "e266533e-e101-4471-908a-12c4975c9058",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "93883a54-eb85-4310-a97c-2febd55f6c99"
        },
        "item": {
          "id": "3eeb0ee2-71d1-49f7-9161-c89bb10a5163",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fb02b0ec-1ff0-4616-8787-873d75ed60ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11e7b11-46bc-4726-9a2f-6d67a6f97791",
        "cursor": {
          "ref": "4e83b4ea-0ea5-4bd4-a232-dae42f45debf",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "01982428-b68f-409f-a19b-59c4eae54e49"
        },
        "item": {
          "id": "c11e7b11-46bc-4726-9a2f-6d67a6f97791",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ab284beb-0d60-4d08-bc62-2a0514b8993b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f931acf-f5d8-4a4b-9846-d556de6872a2",
        "cursor": {
          "ref": "13ef66db-3e70-40e6-bd4b-d86e9911685c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7c29a698-8072-4a37-b030-cb25013bd4eb"
        },
        "item": {
          "id": "8f931acf-f5d8-4a4b-9846-d556de6872a2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4b4f090a-44b9-496e-8484-b28cd19319a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11fc5cb-7ebf-4bbc-b8ad-259215496bc2",
        "cursor": {
          "ref": "8ad11954-eb68-42b2-9deb-0fdb750f6140",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a14a60b5-f2f2-414d-8c8e-a2a393aacc79"
        },
        "item": {
          "id": "d11fc5cb-7ebf-4bbc-b8ad-259215496bc2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7fae61d7-4a15-41d5-a81a-250c6978ce2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b846d3-38d1-4b05-992c-148e5db78d18",
        "cursor": {
          "ref": "6767a8fd-2cb2-4748-8b03-bfd3c687971b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e9c7a857-b9f1-4f6e-b14a-992084936c08"
        },
        "item": {
          "id": "14b846d3-38d1-4b05-992c-148e5db78d18",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6ed33154-1d43-4afe-9b01-c0378beaabb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bce2360-c62f-4535-9f0f-ce9962b98b9d",
        "cursor": {
          "ref": "08030ecd-9f2e-495a-b64c-ed483ef3313d",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e42d0ec1-ea93-4b7a-9cbc-98a81462cf88"
        },
        "item": {
          "id": "1bce2360-c62f-4535-9f0f-ce9962b98b9d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "69fd8d1a-9079-4b2b-8cc6-bce822366748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1effea-2751-4340-9cbc-0117ec5121f8",
        "cursor": {
          "ref": "5e9b51a2-4f91-4d8a-81dc-9564c3382aa7",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a4df9c62-2791-4771-8cbf-710d2fc688af"
        },
        "item": {
          "id": "0f1effea-2751-4340-9cbc-0117ec5121f8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5c26ea79-f7e3-4c1f-87c3-8a368148ff45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeaf04f3-ed58-4ab9-aba0-c65eafab2f21",
        "cursor": {
          "ref": "73f5c8f1-ea28-4eb2-bac1-54cf1d629cb9",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6ef0a841-704a-43da-b767-fec1e2823e6d"
        },
        "item": {
          "id": "aeaf04f3-ed58-4ab9-aba0-c65eafab2f21",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "74d18775-9f09-4ff4-ba0e-e0abc5087117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0357378-2835-4824-bc86-cd317fbfdd9a",
        "cursor": {
          "ref": "22b1c26f-9f3a-4771-af7a-a16dffb76ba8",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "718684bf-25fd-43f2-b177-8379452ef726"
        },
        "item": {
          "id": "b0357378-2835-4824-bc86-cd317fbfdd9a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f8760e03-2ece-40d6-aecf-8865a8de20bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65058da9-a442-427d-8007-b101b00e12f7",
        "cursor": {
          "ref": "a6a19be7-ad55-45e7-9dd2-cc41c01299a1",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "55092868-2dcf-4337-a479-48459f6a2d6e"
        },
        "item": {
          "id": "65058da9-a442-427d-8007-b101b00e12f7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "668b2093-6c25-4da1-9b35-3e36e35cc633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fb45e7-c219-4f2e-8c30-8ec30bc90501",
        "cursor": {
          "ref": "e1d1c599-c257-4a44-aa70-17f912f26f73",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "abbdb2d0-ea1b-4ca0-b223-e1fa73c1279b"
        },
        "item": {
          "id": "45fb45e7-c219-4f2e-8c30-8ec30bc90501",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "36d47a56-c043-47b4-83e8-54a1ae7b4e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e0a29e-066d-4189-bcde-dfbda36777e9",
        "cursor": {
          "ref": "5e7bf8b6-f771-4e34-8eb3-0ad31f334a6f",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ebec78be-14f6-4b31-bcd4-f081007b2dee"
        },
        "item": {
          "id": "c7e0a29e-066d-4189-bcde-dfbda36777e9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9d978e18-304d-4cfe-932a-a85c2bcd0eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5141cf96-0f5d-4469-b215-884af5e768ab",
        "cursor": {
          "ref": "16371e11-c3be-42f8-96b3-1952bf999a3d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0cad75cf-488a-42e5-b7c9-c711bb0c452f"
        },
        "item": {
          "id": "5141cf96-0f5d-4469-b215-884af5e768ab",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d333e863-1cd4-4f69-81a4-50d7d792be78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368b8585-5eef-4d04-835f-7b0efd65b55c",
        "cursor": {
          "ref": "7e1c0b15-1f08-45ca-846e-9b610b64799f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f763500f-1f32-4782-8bcf-09421202c62f"
        },
        "item": {
          "id": "368b8585-5eef-4d04-835f-7b0efd65b55c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6ed235dd-19b8-4cb7-adc5-0b614b44c50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2702c678-ea3e-4a06-9378-c0bb44e6b5d6",
        "cursor": {
          "ref": "4ea9d98d-0537-4a8d-8a60-eb02e9e49152",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "038b96bd-efc4-4f6c-aab5-5fd2fd092b86"
        },
        "item": {
          "id": "2702c678-ea3e-4a06-9378-c0bb44e6b5d6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "55075ad1-990b-4c1f-998b-4223f3eff60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3524bad-afb4-47ac-8e5d-5eab4bf22ff4",
        "cursor": {
          "ref": "3dd541b0-27b5-4c68-aa0e-f668d6df7d10",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4c1a2565-ebc6-4a49-8b45-b0b58b6d7067"
        },
        "item": {
          "id": "a3524bad-afb4-47ac-8e5d-5eab4bf22ff4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3594e453-fa6e-4d8e-b4db-70b4a5cd7106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06331a4c-ee37-4f52-a2c2-d87832c26cb8",
        "cursor": {
          "ref": "d77b3612-b447-41ec-9de2-7da12f23f7ed",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cdcea596-4b18-4119-9468-cf32f782292d"
        },
        "item": {
          "id": "06331a4c-ee37-4f52-a2c2-d87832c26cb8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8e573ba8-e03b-4530-8312-2888ddeb0e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693f8c60-c18e-4dbe-9f2f-ecc917ecfd41",
        "cursor": {
          "ref": "2e8199de-06c4-4591-8aee-99502e707609",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "94c7c120-f609-4002-a320-14f288a0cbb1"
        },
        "item": {
          "id": "693f8c60-c18e-4dbe-9f2f-ecc917ecfd41",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "490ffaa6-bd99-418c-9838-fbff907fc951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd0759a-9849-42eb-9c32-8c44ca1f804d",
        "cursor": {
          "ref": "d5e1d587-814f-40d7-9218-25eed4178d86",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dc388985-9411-45dd-86be-a2b517726e21"
        },
        "item": {
          "id": "5fd0759a-9849-42eb-9c32-8c44ca1f804d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a557aaf7-8312-4b74-a421-4673b214dd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76700482-0c31-40e3-bc78-05f7e565e43d",
        "cursor": {
          "ref": "17cb6711-e7a3-4dd0-b5f0-bdc0f921bcb7",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "601ac464-c0b5-4880-8884-b2cf89b047de"
        },
        "item": {
          "id": "76700482-0c31-40e3-bc78-05f7e565e43d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4d798fcd-0bce-497e-b655-7b937a0fdadf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a20aa8a-50b5-49fb-9072-b52d65e5d3a8",
        "cursor": {
          "ref": "53fa84f1-0f6e-4bd9-8ba8-4200b8c11372",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b9488664-d8ba-49a2-9a12-dd4f01cf4cd2"
        },
        "item": {
          "id": "1a20aa8a-50b5-49fb-9072-b52d65e5d3a8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8b5d938e-20e1-4d5f-8355-35b8d29053f3",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "72175681-15e6-4e7d-a843-4c467e213b0f",
        "cursor": {
          "ref": "ca70a954-325f-46c7-b2cf-2a13dbf463eb",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bb920771-6060-41c1-bc17-e344663d82ad"
        },
        "item": {
          "id": "72175681-15e6-4e7d-a843-4c467e213b0f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0d3d67f5-14d3-422c-8290-1007aecc1a48",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c3127c-df26-405c-bb75-1c8561613202",
        "cursor": {
          "ref": "a45ca5a7-cf17-448c-9fa7-55b49f9313a7",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ae1be57e-bd0d-4e97-9728-69cdf966f585"
        },
        "item": {
          "id": "d4c3127c-df26-405c-bb75-1c8561613202",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "546ac0aa-880f-471a-9e9f-f92473357285",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f06deb-3139-4e6e-a47e-9f6c41f90e72",
        "cursor": {
          "ref": "18e5d326-ffeb-4999-8635-e2f28f7e0e56",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7966e9e5-d342-4500-82ed-7cb6a4164d14"
        },
        "item": {
          "id": "b0f06deb-3139-4e6e-a47e-9f6c41f90e72",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "067140fe-b83e-44ec-bd43-da4bd70af1ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f06deb-3139-4e6e-a47e-9f6c41f90e72",
        "cursor": {
          "ref": "18e5d326-ffeb-4999-8635-e2f28f7e0e56",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7966e9e5-d342-4500-82ed-7cb6a4164d14"
        },
        "item": {
          "id": "b0f06deb-3139-4e6e-a47e-9f6c41f90e72",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "067140fe-b83e-44ec-bd43-da4bd70af1ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab01546-1598-406f-865d-c7cab0778f7d",
        "cursor": {
          "ref": "cac9824d-3fc7-43c6-9a38-8971cd928ce6",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f0aca3c1-7352-4a58-a201-ffe56c864c0c"
        },
        "item": {
          "id": "4ab01546-1598-406f-865d-c7cab0778f7d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ee4dd629-2916-4abd-bc59-dab7d8f225d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab62bf7-0bb4-49a8-ad5c-5656cbdf7970",
        "cursor": {
          "ref": "e50c5d75-0a21-40e9-9163-1531ece498d0",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "582847c1-5086-489a-bdf2-fd2fc53f8e3c"
        },
        "item": {
          "id": "aab62bf7-0bb4-49a8-ad5c-5656cbdf7970",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2ebdfea7-c83f-4e78-aae6-8723955819fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}